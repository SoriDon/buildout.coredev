Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-26T18:01:16+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/6f7498d0cdb006275150248657504ee1c789381c

fix value conversion see https://github.com/plone/plone.app.vocabularies/pull/56#issuecomment-476598570

Files changed:
M plone/app/z3cform/converters.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 3e24d97..9b5f1dd 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -141,14 +141,20 @@ def toFieldValue(self, value):\n \n @adapter(IField, ISelectWidget)\n class SequenceSelectWidgetConverter(\n-        SelectWidgetConverterBase, SequenceDataConverter):\n-    pass\n+        SelectWidgetConverterBase,\n+        SequenceDataConverter\n+):\n+    """Data converter for IField fields using the SelectWidget.\n+    """\n \n \n @adapter(ICollection, ISelectWidget)\n class SelectWidgetConverter(\n-        SelectWidgetConverterBase, CollectionSequenceDataConverter):\n-    pass\n+    SelectWidgetConverterBase,\n+    CollectionSequenceDataConverter\n+):\n+    """Data converter for ICollection fields using the SelectWidget.\n+    """\n \n \n @adapter(ICollection, IAjaxSelectWidget)\n@@ -157,7 +163,7 @@ class AjaxSelectWidgetConverter(BaseDataConverter):\n     """\n \n     def toWidgetValue(self, value):\n-        """Converts from field value to widget.\n+        """Converts from field value to widget tokenized widget value.\n \n         :param value: Field value.\n         :type value: list |tuple | set\n@@ -167,8 +173,18 @@ def toWidgetValue(self, value):\n         """\n         if not value:\n             return self.field.missing_value\n-        separator = getattr(self.widget, \'separator\', \';\')\n-        return separator.join(six.text_type(v) for v in value)\n+        vocabulary = self.widget.get_vocabulary()\n+        tokenized_value = []\n+        for term_value in value:\n+            if vocabulary is not None:\n+                try:\n+                    term = vocabulary.getTerm(term_value)\n+                    tokenized_value.append(term.token)\n+                    continue\n+                except LookupError:\n+                    pass\n+            tokenized_value.append(six.text_type(term_value))\n+        return getattr(self.widget, \'separator\', \';\').join(tokenized_value)\n \n     def toFieldValue(self, value):\n         """Converts from widget value to field.\n@@ -188,8 +204,22 @@ def toFieldValue(self, value):\n         if isinstance(valueType, tuple):\n             valueType = valueType[0]\n         separator = getattr(self.widget, \'separator\', \';\')\n-        return collectionType(valueType and valueType(v) or v\n-                              for v in value.split(separator))\n+        self.widget.update()  # needed to have a vocabulary\n+        vocabulary = self.widget.get_vocabulary()\n+        untokenized_value = []\n+        for token in value.split(separator):\n+            if vocabulary is not None:\n+                try:\n+                    term = vocabulary.getTermByToken(token)\n+                    untokenized_value.append(term.value)\n+                    continue\n+                except LookupError:\n+                    pass\n+            untokenized_value.append(\n+                valueType(token) if valueType else token\n+            )\n+\n+        return collectionType(untokenized_value)\n \n \n @adapter(IRelationChoice, IRelatedItemsWidget)\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 7aa8335..e265819 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -27,9 +27,9 @@\n from zope.component.globalregistry import base\n from zope.globalrequest import setRequest\n from zope.interface import alsoProvides\n-from zope.interface import implementer\n from zope.interface import Interface\n-from zope.publisher.browser import TestRequest as BaseTestRequest\n+from zope.interface import provider\n+from zope.publisher.browser import TestRequest\n from zope.schema import BytesLine\n from zope.schema import Choice\n from zope.schema import Date\n@@ -50,22 +50,22 @@\n import unittest\n \n \n-@implementer(IVocabularyFactory)\n-class ExampleVocabulary(object):\n-\n-    def __call__(self, context, query=None):\n-        items = [u\'One\', u\'Two\', u\'Three\']\n-        tmp = SimpleVocabulary([\n-            SimpleTerm(it.lower(), it.lower(), it)\n-            for it in items\n-            if query is None or query.lower() in it.lower()\n-        ])\n-        tmp.test = 1\n-        return tmp\n-\n-\n-class TestRequest(BaseTestRequest):\n-    pass\n+@provider(IVocabularyFactory)\n+def example_vocabulary_factory(context, query=None):\n+    items = [u\'One\', u\'Two\', u\'Three\']\n+    tmp = SimpleVocabulary(\n+        [\n+            SimpleTerm(\n+                item.lower(),  # value\n+                token="token_{0}".format(item.lower()),\n+                title=item\n+            )\n+            for item in items\n+            if query is None or query.lower() in item.lower()\n+        ]\n+    )\n+    tmp.test = 1\n+    return tmp\n \n \n class BaseWidgetTests(unittest.TestCase):\n@@ -805,7 +805,7 @@ class AjaxSelectWidgetTests(unittest.TestCase):\n \n     def setUp(self):\n         self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n-        provideUtility(ExampleVocabulary(), name=u\'example\')\n+        provideUtility(example_vocabulary_factory, name=u\'example\')\n \n     def test_widget(self):\n         from plone.app.z3cform.widget import AjaxSelectWidget\n@@ -835,19 +835,19 @@ def test_widget(self):\n             },\n         )\n \n-        widget.value = \'three;two\'\n-        self.assertEqual(\n-            widget._base_args(),\n+        widget.value = \'token_three;token_two\'\n+        self.assertDictEqual(\n             {\n                 \'name\': None,\n-                \'value\': \'three;two\',\n+                \'value\': \'token_three;token_two\',\n                 \'pattern\': \'select2\',\n                 \'pattern_options\': {\n                     \'vocabularyUrl\': \'/@@getVocabulary?name=example\',\n-                    \'initialValues\': {\'three\': u\'Three\', \'two\': u\'Two\'},\n+                    \'initialValues\': {\'token_three\': u\'Three\', \'token_two\': u\'Two\'},\n                     \'separator\': \';\',\n                 },\n             },\n+            widget._base_args(),\n         )\n \n     def test_widget_list_orderable(self):\n@@ -979,6 +979,40 @@ def test_data_converter_list(self):\n             \'123;456;789\',\n         )\n \n+    def test_data_converter_collection_with_vocabulary(self):\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n+        from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+\n+        field = Tuple(\n+            __name__=\'listfield\',\n+            value_type=Choice(\n+                vocabulary="example"\n+            ),\n+        )\n+        widget = AjaxSelectWidget(self.request)\n+        widget.field = field\n+        converter = AjaxSelectWidgetConverter(field, widget)\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'\'),\n+            field.missing_value,\n+        )\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'token_one;token_two;token_three\'),\n+            (\'one\', \'two\', \'three\'),\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue([]),\n+            None,\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue([\'123\', \'456\', \'789\']),\n+            \'123;456;789\',\n+        )\n+\n     def test_data_converter_tuple(self):\n         from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 0840285..2a945fb 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -12,7 +12,7 @@\n from plone.app.widgets.base import TextareaWidget\n from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n from plone.app.widgets.utils import first_weekday\n-from plone.app.widgets.utils import get_ajaxselect_options\n+from plone.app.widgets.utils import get_context_url\n from plone.app.widgets.utils import get_date_options\n from plone.app.widgets.utils import get_datetime_options\n from plone.app.widgets.utils import get_querystring_options\n@@ -38,11 +38,11 @@\n from Products.CMFPlone.interfaces import IEditingSchema\n from Products.CMFPlone.utils import safe_unicode\n from six.moves import UserDict\n+from z3c.form import interfaces as form_ifaces\n from z3c.form.browser.checkbox import SingleCheckBoxWidget\n from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget\n from z3c.form.browser.text import TextWidget as z3cform_TextWidget\n from z3c.form.browser.widget import HTMLInputWidget\n-from z3c.form import interfaces as form_ifaces\n from z3c.form.interfaces import IEditForm\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IForm\n@@ -54,6 +54,7 @@\n from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component import queryUtility\n from zope.component.hooks import getSite\n from zope.i18n import translate\n from zope.interface import implementer\n@@ -63,6 +64,7 @@\n from zope.schema.interfaces import IChoice\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import ISequence\n+from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n@@ -372,11 +374,59 @@ class AjaxSelectWidget(BaseWidget, z3cform_TextWidget):\n     vocabulary_view = \'@@getVocabulary\'\n     orderable = False\n \n+    def _view_context(self):\n+        view_context = get_widget_form(self)\n+        # For EditForms and non-Forms (in tests), the vocabulary is looked\n+        # up on the context, otherwise on the view\n+        if IEditForm.providedBy(view_context):\n+            if self.is_subform_widget():\n+                view_context = self.form.parentForm.context\n+            elif not ISimpleItem.providedBy(self.context):\n+                view_context = self.form.context\n+            else:\n+                view_context = self.context\n+        elif not IForm.providedBy(view_context):\n+            view_context = self.context\n+        return view_context\n+\n+    def get_vocabulary(self):\n+        if self.vocabulary:\n+            factory = queryUtility(\n+                IVocabularyFactory,\n+                self.vocabulary\n+            )\n+            if factory:\n+                return factory(self._view_context())\n+\n+    def _ajaxselect_options(self):\n+        options = {\n+            \'separator\': self.separator,\n+        }\n+        if self.vocabulary:\n+            options[\'vocabularyUrl\'] = \'{0}/{1}?name={2}\'.format(\n+                get_context_url(self._view_context()),\n+                self.vocabulary_view,\n+                self.vocabulary\n+            )\n+            field_name = self.field and self.field.__name__ or None\n+            if field_name:\n+                options[\'vocabularyUrl\'] += \'&field={0}\'.format(field_name)\n+            vocabulary = self.get_vocabulary()\n+            if vocabulary and self.value:\n+                options[\'initialValues\'] = dict()\n+                for token in self.value.split(self.separator):\n+                    try:\n+                        term = vocabulary.getTermByToken(token)\n+                        options[\'initialValues\'][term.token] = term.title\n+                    except LookupError:\n+                        options[\'initialValues\'][token] = token\n+\n+        return options\n+\n     def update(self):\n         super(AjaxSelectWidget, self).update()\n         field = getattr(self, \'field\', None)\n-        if ICollection.providedBy(self.field):\n-            field = self.field.value_type\n+        field = getattr(field, \'value_type\', field)\n         if (not self.vocabulary and field is not None and\n                 getattr(field, \'vocabularyName\', None)):\n             self.vocabulary = field.vocabularyName\n@@ -393,28 +443,13 @@ def _base_args(self):\n         :returns: Arguments which will be passed to _base\n         :rtype: dict\n         """\n-\n         args = super(AjaxSelectWidget, self)._base_args()\n-\n         args[\'name\'] = self.name\n         args[\'value\'] = self.value\n-\n         args.setdefault(\'pattern_options\', {})\n-\n-        field_name = self.field and self.field.__name__ or None\n-\n         context = self.context\n-        view_context = get_widget_form(self)\n-        # For EditForms and non-Forms (in tests), the vocabulary is looked\n-        # up on the context, otherwise on the view\n-        if (\n-            IEditForm.providedBy(view_context) or\n-            not IForm.providedBy(view_context)\n-        ):\n-            view_context = context\n-\n-        vocabulary_name = self.vocabulary\n         field = None\n+\n         if IChoice.providedBy(self.field):\n             args[\'pattern_options\'][\'maximumSelectionSize\'] = 1\n             field = self.field\n@@ -424,9 +459,7 @@ def _base_args(self):\n             args[\'pattern_options\'][\'allowNewItems\'] = \'false\'\n \n         args[\'pattern_options\'] = dict_merge(\n-            get_ajaxselect_options(view_context, args[\'value\'], self.separator,\n-                                   vocabulary_name, self.vocabulary_view,\n-                                   field_name),\n+            self._ajaxselect_options(),\n             args[\'pattern_options\'])\n \n         if field and getattr(field, \'vocabulary\', None):\n@@ -447,12 +480,11 @@ def _base_args(self):\n \n             registry = getUtility(IRegistry)\n             roles_allowed_to_add_keywords = registry.get(\n-                \'plone.roles_allowed_to_add_keywords\', [])\n+                \'plone.roles_allowed_to_add_keywords\', set())\n             roles = set(user.getRolesInContext(context))\n-\n-            allowNewItems = \'false\'\n-            if roles.intersection(roles_allowed_to_add_keywords):\n-                allowNewItems = \'true\'\n+            allowNewItems = bool(\n+                roles.intersection(roles_allowed_to_add_keywords)\n+            )\n             args[\'pattern_options\'][\'allowNewItems\'] = allowNewItems\n \n         return args\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-26T18:01:33+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/84c735a719e3491ce0de255f107aa1ce0dba2a13

document changes

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex bbde449..9197bc6 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,13 @@ Bug fixes:\n \n - LinkFieldWidget: added converter method toFieldValue [ksuess]\n \n+- Fixes AjaxSelectWidget to respect tokens different from values in vocabularies.\n+  This includes changes in both, the converter and the widget itself.\n+  A test was added too.\n+  ``get_ajaxselect_options`` from ``plone.app.widgets.utils`` is assimilated by the widget now too simplify the whole code,\n+  so the one in the other package is dead code now and will be deprecated there.\n+  [jensens]\n+\n \n 3.0.9 (2019-01-08)\n ------------------\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-26T20:11:40+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/5507d5034d3910707a0a0069be8525b029f506a1

check explicit for None

Files changed:
M plone/app/z3cform/widget.py

b"diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 2a945fb..0a4c843 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -412,7 +412,7 @@ def _ajaxselect_options(self):\n             if field_name:\n                 options['vocabularyUrl'] += '&field={0}'.format(field_name)\n             vocabulary = self.get_vocabulary()\n-            if vocabulary and self.value:\n+            if vocabulary is not None and self.value:\n                 options['initialValues'] = dict()\n                 for token in self.value.split(self.separator):\n                     try:\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-26T20:17:31+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/3c26391f78c07bfa08a7d098b8706e122e085e93

happiness for code analysis

Files changed:
M plone/app/z3cform/converters.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 9b5f1dd..0987d14 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -142,7 +142,7 @@ def toFieldValue(self, value):\n @adapter(IField, ISelectWidget)\n class SequenceSelectWidgetConverter(\n         SelectWidgetConverterBase,\n-        SequenceDataConverter\n+        SequenceDataConverter,\n ):\n     """Data converter for IField fields using the SelectWidget.\n     """\n@@ -151,7 +151,7 @@ class SequenceSelectWidgetConverter(\n @adapter(ICollection, ISelectWidget)\n class SelectWidgetConverter(\n     SelectWidgetConverterBase,\n-    CollectionSequenceDataConverter\n+    CollectionSequenceDataConverter,\n ):\n     """Data converter for ICollection fields using the SelectWidget.\n     """\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex e265819..34fabb5 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -2,8 +2,8 @@\n from datetime import date\n from datetime import datetime\n from json import loads\n-from mock import Mock\n from lxml import html\n+from mock import Mock\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n@@ -57,12 +57,12 @@ def example_vocabulary_factory(context, query=None):\n         [\n             SimpleTerm(\n                 item.lower(),  # value\n-                token="token_{0}".format(item.lower()),\n-                title=item\n+                token=\'token_{0}\'.format(item.lower()),\n+                title=item,\n             )\n             for item in items\n             if query is None or query.lower() in item.lower()\n-        ]\n+        ],\n     )\n     tmp.test = 1\n     return tmp\n@@ -157,7 +157,7 @@ def test_widget_base_pattern_options_with_functions(self):\n         observed_attrib = html.fromstring(output).attrib\n         self.assertEqual(\n             sorted(observed_attrib),\n-            [\'class\', \'data-pat-example\', \'type\']\n+            [\'class\', \'data-pat-example\', \'type\'],\n         )\n         self.assertEqual(observed_attrib[\'class\'], \'pat-example\')\n         self.assertEqual(observed_attrib[\'type\'], \'text\')\n@@ -167,8 +167,8 @@ def test_widget_base_pattern_options_with_functions(self):\n                 \'subdict\': {\n                     \'subsubnormal\': 789,\n                     \'subsublist\': [7, 8, 9, \'testcontext\'],\n-                    \'subsubtuple\': [7, 8, 9, \'testcontext\']\n-                }\n+                    \'subsubtuple\': [7, 8, 9, \'testcontext\'],\n+                },\n             },\n         )\n \n@@ -843,7 +843,10 @@ def test_widget(self):\n                 \'pattern\': \'select2\',\n                 \'pattern_options\': {\n                     \'vocabularyUrl\': \'/@@getVocabulary?name=example\',\n-                    \'initialValues\': {\'token_three\': u\'Three\', \'token_two\': u\'Two\'},\n+                    \'initialValues\': {\n+                        \'token_three\': u\'Three\',\n+                        \'token_two\': u\'Two\',\n+                    },\n                     \'separator\': \';\',\n                 },\n             },\n@@ -986,7 +989,7 @@ def test_data_converter_collection_with_vocabulary(self):\n         field = Tuple(\n             __name__=\'listfield\',\n             value_type=Choice(\n-                vocabulary="example"\n+                vocabulary=\'example\',\n             ),\n         )\n         widget = AjaxSelectWidget(self.request)\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 0a4c843..71fc1f1 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -393,7 +393,7 @@ def get_vocabulary(self):\n         if self.vocabulary:\n             factory = queryUtility(\n                 IVocabularyFactory,\n-                self.vocabulary\n+                self.vocabulary,\n             )\n             if factory:\n                 return factory(self._view_context())\n@@ -406,7 +406,7 @@ def _ajaxselect_options(self):\n             options[\'vocabularyUrl\'] = \'{0}/{1}?name={2}\'.format(\n                 get_context_url(self._view_context()),\n                 self.vocabulary_view,\n-                self.vocabulary\n+                self.vocabulary,\n             )\n             field_name = self.field and self.field.__name__ or None\n             if field_name:\n@@ -483,7 +483,7 @@ def _base_args(self):\n                 \'plone.roles_allowed_to_add_keywords\', set())\n             roles = set(user.getRolesInContext(context))\n             allowNewItems = bool(\n-                roles.intersection(roles_allowed_to_add_keywords)\n+                roles.intersection(roles_allowed_to_add_keywords),\n             )\n             args[\'pattern_options\'][\'allowNewItems\'] = allowNewItems\n \n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-26T20:19:40+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/54b09483565613be5c2d3ac3d18bb55996eec2da

happiness for code analysis (2)

Files changed:
M plone/app/z3cform/converters.py
M plone/app/z3cform/widget.py

b'diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 0987d14..18eaf8d 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -216,7 +216,7 @@ def toFieldValue(self, value):\n                 except LookupError:\n                     pass\n             untokenized_value.append(\n-                valueType(token) if valueType else token\n+                valueType(token) if valueType else token,\n             )\n \n         return collectionType(untokenized_value)\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 71fc1f1..e96ed55 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -1,16 +1,15 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import ImplicitAcquisitionWrapper\n-from OFS.interfaces import ISimpleItem\n from lxml import etree\n+from OFS.interfaces import ISimpleItem\n from plone.app.textfield.value import RichTextValue\n from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget\n from plone.app.vocabularies.terms import TermWithDescription\n-from plone.app.widgets.base import SelectWidget as BaseSelectWidget\n from plone.app.widgets.base import dict_merge\n from plone.app.widgets.base import InputWidget\n+from plone.app.widgets.base import SelectWidget as BaseSelectWidget\n from plone.app.widgets.base import TextareaWidget\n-from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n from plone.app.widgets.utils import first_weekday\n from plone.app.widgets.utils import get_context_url\n from plone.app.widgets.utils import get_date_options\n@@ -19,6 +18,7 @@\n from plone.app.widgets.utils import get_relateditems_options\n from plone.app.widgets.utils import get_tinymce_options\n from plone.app.widgets.utils import get_widget_form\n+from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n from plone.app.z3cform.converters import DatetimeWidgetConverter\n from plone.app.z3cform.converters import DateWidgetConverter\n from plone.app.z3cform.interfaces import IAjaxSelectWidget\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-27T08:35:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/468e06ab8eaa4ce9d03c9095c60ba5fab922cd33

lowercase bool arg

Files changed:
M plone/app/z3cform/widget.py

b"diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex e96ed55..994d0c2 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -485,7 +485,9 @@ def _base_args(self):\n             allowNewItems = bool(\n                 roles.intersection(roles_allowed_to_add_keywords),\n             )\n-            args['pattern_options']['allowNewItems'] = allowNewItems\n+            args['pattern_options']['allowNewItems'] = str(\n+                allowNewItems,\n+            ).lower()\n \n         return args\n \n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-27T09:57:32+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/7fd4cdb98af5248049313b01aae8d46fd1d73d74

require recent plone.app.z3cform

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 81292d6..7bf36b6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -29,9 +29,11 @@ def read(*rnames):\n     long_description=long_description,\n     classifiers=[\n         "Framework :: Plone",\n+        "Framework :: Plone :: Core",\n         "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n         "Framework :: Zope2",\n+        "Framework :: Zope :: 2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n@@ -49,14 +51,14 @@ def read(*rnames):\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n         \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'Zope2\',  # Products.Five\n-        \'plone.app.widgets>=2.0.0.dev0\',\n+        \'plone.app.textfield\',\n+        \'plone.app.widgets>=2.4.2.dev0\',\n         \'plone.protect\',\n         \'plone.z3cform>=0.5.11dev\',\n+        \'Products.CMFCore\',\n+        \'Products.CMFPlone\',\n+        \'setuptools\',\n         \'six\',\n         \'z3c.form >= 3.0\',\n         \'z3c.formwidget.query\',\n@@ -69,7 +71,7 @@ def read(*rnames):\n         \'zope.interface\',\n         \'zope.schema\',\n         \'zope.traversing\',\n-        \'plone.app.textfield\'\n+        \'Zope2\',\n     ],\n     extras_require={\n         \'tests\': [\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-27T09:58:22+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/f5f94e9e06c8ee38fc7a8b5cd0a07e18486d96ad

fix test and check deeper after refactroring plone.app.z3cform

Files changed:
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

b"diff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex cd7a7b0..3ed0e2a 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.textfield.widget import IRichTextWidget as patextfield_IRichTextWidget  # noqa\n-from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget\n from z3c.form.interfaces import IFormLayer\n+from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget\n from z3c.form.interfaces import ISingleCheckBoxWidget\n from z3c.form.interfaces import ITextWidget\n from zope.schema.interfaces import IDate\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 34fabb5..08f76b2 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1117,10 +1117,6 @@ def test_converter_empty_value(self):\n         self.assertEqual(converter.toFieldValue(u''), None)\n         self.assertEqual(converter.toFieldValue(u'[]'), None)\n \n-    @mock.patch(\n-        'plone.app.widgets.utils.get_ajaxselect_options',\n-        new=lambda *args, **kwargs: None,\n-    )\n     @mock.patch(\n         'plone.app.widgets.utils.get_date_options',\n         new=lambda *args, **kwargs: None,\n@@ -1141,7 +1137,7 @@ def test_widget(self):\n                     'indexOptionsUrl': '/@@qsOptions',\n                     'previewCountURL': '/@@querybuildernumberofresults',\n                     'previewURL': '/@@querybuilder_html_results',\n-                    'patternAjaxSelectOptions': None,\n+                    'patternAjaxSelectOptions': {'separator': ';'},\n                     'patternDateOptions': None,\n                     'patternRelateditemsOptions': None,\n                 },\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 994d0c2..fd1a98b 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -68,8 +68,8 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import json\n import collections\n+import json\n import six\n \n \n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-27T10:03:29+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/93c8c3aae5cf3a2aa6b4a20401cc5262f4a4e77c

this is kind of a feature change.

Nothing that should go into 5.1

Files changed:
M CHANGES.rst
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9197bc6..df9a5f9 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,8 +1,8 @@\n Changelog\n =========\n \n-3.0.10 (unreleased)\n--------------------\n+3.1.0 (unreleased)\n+------------------\n \n Breaking changes:\n \n@@ -10,12 +10,6 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n-\n-Bug fixes:\n-\n-- LinkFieldWidget: added converter method toFieldValue [ksuess]\n-\n - Fixes AjaxSelectWidget to respect tokens different from values in vocabularies.\n   This includes changes in both, the converter and the widget itself.\n   A test was added too.\n@@ -23,6 +17,10 @@ Bug fixes:\n   so the one in the other package is dead code now and will be deprecated there.\n   [jensens]\n \n+Bug fixes:\n+\n+- LinkFieldWidget: added converter method toFieldValue [ksuess]\n+\n \n 3.0.9 (2019-01-08)\n ------------------\ndiff --git a/setup.py b/setup.py\nindex 7bf36b6..b27e6c7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,7 +8,7 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = \'3.0.10.dev0\'\n+version = \'3.1.0.dev0\'\n \n long_description = (\n     read(\'README.rst\') +\n@@ -30,10 +30,7 @@ def read(*rnames):\n     classifiers=[\n         "Framework :: Plone",\n         "Framework :: Plone :: Core",\n-        "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-27T21:20:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/e6c66f254473ec16ead99d14a7c4caa1cd9dc6c6

add display mode for ajaxselectwidget

Files changed:
A plone/app/z3cform/templates/ajaxselect_display.pt
M CHANGES.rst
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/widget.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex df9a5f9..c0159fa 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,6 +10,11 @@ Breaking changes:\n \n New features:\n \n+- Add display template for AjaxSelectWidget showing the actual vocabularies term title.\n+  [jensens]\n+\n+Bug fixes:\n+\n - Fixes AjaxSelectWidget to respect tokens different from values in vocabularies.\n   This includes changes in both, the converter and the widget itself.\n   A test was added too.\n@@ -17,8 +22,6 @@ New features:\n   so the one in the other package is dead code now and will be deprecated there.\n   [jensens]\n \n-Bug fixes:\n-\n - LinkFieldWidget: added converter method toFieldValue [ksuess]\n \n \ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 7792d3c..09d2c39 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -114,6 +114,13 @@\n       layer=".interfaces.IPloneFormLayer"\n       template="templates/singlecheckboxbool_input.pt"\n       />\n+  <z3c:widgetTemplate\n+      mode="display"\n+      field="*"\n+      widget=".interfaces.IAjaxSelectWidget"\n+      layer=".interfaces.IPloneFormLayer"\n+      template="templates/ajaxselect_display.pt"\n+      />\n   <z3c:widgetTemplate\n       mode="hidden"\n       field="zope.schema.interfaces.IBool"\ndiff --git a/plone/app/z3cform/templates/ajaxselect_display.pt b/plone/app/z3cform/templates/ajaxselect_display.pt\nnew file mode 100644\nindex 0000000..c634ded\n--- /dev/null\n+++ b/plone/app/z3cform/templates/ajaxselect_display.pt\n@@ -0,0 +1,26 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag="">\n+    <span id="" class=""\n+          tal:attributes="id view/id;\n+                          class view/klass;\n+                          style view/style;\n+                          title view/title;\n+                          lang view/lang;\n+                          onclick view/onclick;\n+                          ondblclick view/ondblclick;\n+                          onmousedown view/onmousedown;\n+                          onmouseup view/onmouseup;\n+                          onmouseover view/onmouseover;\n+                          onmousemove view/onmousemove;\n+                          onmouseout view/onmouseout;\n+                          onkeypress view/onkeypress;\n+                          onkeydown view/onkeydown;\n+                          onkeyup view/onkeyup"><tal:block\n+          condition="view/value"\n+    />\n+      <tal:loop tal:repeat="item python:view.display_items()">\n+        <span data-token="${python:item[\'token\']}">${python:item[\'title\']}</span><tal:if tal:condition="python: not repeat.item.end" tal:replace="python:view.separator" />\n+      </tal:loop>\n+    </span>\n+</html>\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex fd1a98b..e24f55e 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -398,6 +398,22 @@ def get_vocabulary(self):\n             if factory:\n                 return factory(self._view_context())\n \n+    def display_items(self):\n+        if self.value:\n+            tokens = self.value.split(self.separator)\n+            vocabulary = self.get_vocabulary()\n+            for token in tokens:\n+                item = {\'token\': token, \'title\': token}\n+                if vocabulary is not None:\n+                    try:\n+                        item[\'title\'] = vocabulary.getTermByToken(token).title\n+                    except LookupError:\n+                        pass\n+                yield item\n+\n+    def has_multiple_values(self):\n+        return self.value and self.value.split(self.separator)\n+\n     def _ajaxselect_options(self):\n         options = {\n             \'separator\': self.separator,\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-28T14:50:51+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/7612ce0f83b41296fca1c52bc37ad330d39b0315

housekeeping - steps to get rid of plone.app.widgets

Files changed:
A plone/app/z3cform/factories.py
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/interfaces.py

b'diff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 09d2c39..63d81da 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -221,4 +221,10 @@\n            for="z3c.form.interfaces.ITextWidget\n                 plone.app.z3cform.interfaces.IPloneFormLayer"/>\n \n+  <utility\n+    name="ZPublisher.HTTPRequest.FileUpload"\n+    provides="plone.namedfile.interfaces.IStorage"\n+    factory=".factories.Zope2FileUploadStorable"\n+  />\n+\n </configure>\ndiff --git a/plone/app/z3cform/factories.py b/plone/app/z3cform/factories.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex 3ed0e2a..b4e52d9 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -4,6 +4,7 @@\n from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget\n from z3c.form.interfaces import ISingleCheckBoxWidget\n from z3c.form.interfaces import ITextWidget\n+from zope.interface import Interface\n from zope.schema.interfaces import IDate\n from zope.schema.interfaces import IDatetime\n \n@@ -12,6 +13,19 @@ class IPloneFormLayer(IFormLayer):\n     """Request layer installed via browserlayer.xml"""\n \n \n+class IFieldPermissionChecker(Interface):\n+    """Adapter factory for checking whether a user has permission to\n+    edit a specific field on a content object.\n+    """\n+\n+    def validate(field_name, vocabulary_name=None):\n+        """Returns True if the current user has permission to edit the\n+        `field_name` field.  Returns False if the user does not have\n+        permission.  Raises and AttributeError if the field cannot be\n+        found.\n+        """\n+\n+\n class IDateField(IDate):\n     """Marker interface for the DateField."""\n \n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-03-28T16:13:11+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/59ffe5bc5287cd07dd377215286165f297bd5ed0

missing class

Files changed:
M plone/app/z3cform/factories.py
M plone/app/z3cform/widget.py

b"diff --git a/plone/app/z3cform/factories.py b/plone/app/z3cform/factories.py\nindex e69de29..0bddc81 100644\n--- a/plone/app/z3cform/factories.py\n+++ b/plone/app/z3cform/factories.py\n@@ -0,0 +1,16 @@\n+# -*- coding: utf-8 -*-\n+from zope.interface import implementer\n+from plone.namedfile.storages import MAXCHUNKSIZE\n+from plone.namedfile.interfaces import IStorage\n+\n+\n+@implementer(IStorage)\n+class Zope2FileUploadStorable(object):\n+\n+    def store(self, data, blob):\n+        data.seek(0)\n+        with blob.open('w') as fp:\n+            block = data.read(MAXCHUNKSIZE)\n+            while block:\n+                fp.write(block)\n+                block = data.read(MAXCHUNKSIZE)\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex e24f55e..7d9fd48 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -3,6 +3,7 @@\n from Acquisition import ImplicitAcquisitionWrapper\n from lxml import etree\n from OFS.interfaces import ISimpleItem\n+from plone.app.event.base import first_weekday\n from plone.app.textfield.value import RichTextValue\n from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget\n from plone.app.vocabularies.terms import TermWithDescription\n@@ -10,7 +11,6 @@\n from plone.app.widgets.base import InputWidget\n from plone.app.widgets.base import SelectWidget as BaseSelectWidget\n from plone.app.widgets.base import TextareaWidget\n-from plone.app.widgets.utils import first_weekday\n from plone.app.widgets.utils import get_context_url\n from plone.app.widgets.utils import get_date_options\n from plone.app.widgets.utils import get_datetime_options\n"

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-04-08T13:55:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/6abfd8b23ab79e2a2176171517dc35518ee942ea

document interface move

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c0159fa..90e1f53 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,6 +13,9 @@ New features:\n - Add display template for AjaxSelectWidget showing the actual vocabularies term title.\n   [jensens]\n \n+- ``IFieldPermissionChecker`` was moved here from plone.app.widgets.\n+  [jensens]\n+\n Bug fixes:\n \n - Fixes AjaxSelectWidget to respect tokens different from values in vocabularies.\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2019-04-11T14:04:44+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/ca65b280729ebe61dab897ad28c3b10f26ef7e90

Merge pull request #104 from plone/fix-ajax-select-widget-value-conversion

Fix value conversion in AjaxSelectWidget to respect tokens

Files changed:
A plone/app/z3cform/factories.py
A plone/app/z3cform/templates/ajaxselect_display.pt
M CHANGES.rst
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/converters.py
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex bbde449..90e1f53 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,8 +1,8 @@\n Changelog\n =========\n \n-3.0.10 (unreleased)\n--------------------\n+3.1.0 (unreleased)\n+------------------\n \n Breaking changes:\n \n@@ -10,10 +10,21 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add display template for AjaxSelectWidget showing the actual vocabularies term title.\n+  [jensens]\n+\n+- ``IFieldPermissionChecker`` was moved here from plone.app.widgets.\n+  [jensens]\n \n Bug fixes:\n \n+- Fixes AjaxSelectWidget to respect tokens different from values in vocabularies.\n+  This includes changes in both, the converter and the widget itself.\n+  A test was added too.\n+  ``get_ajaxselect_options`` from ``plone.app.widgets.utils`` is assimilated by the widget now too simplify the whole code,\n+  so the one in the other package is dead code now and will be deprecated there.\n+  [jensens]\n+\n - LinkFieldWidget: added converter method toFieldValue [ksuess]\n \n \ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 7792d3c..63d81da 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -114,6 +114,13 @@\n       layer=".interfaces.IPloneFormLayer"\n       template="templates/singlecheckboxbool_input.pt"\n       />\n+  <z3c:widgetTemplate\n+      mode="display"\n+      field="*"\n+      widget=".interfaces.IAjaxSelectWidget"\n+      layer=".interfaces.IPloneFormLayer"\n+      template="templates/ajaxselect_display.pt"\n+      />\n   <z3c:widgetTemplate\n       mode="hidden"\n       field="zope.schema.interfaces.IBool"\n@@ -214,4 +221,10 @@\n            for="z3c.form.interfaces.ITextWidget\n                 plone.app.z3cform.interfaces.IPloneFormLayer"/>\n \n+  <utility\n+    name="ZPublisher.HTTPRequest.FileUpload"\n+    provides="plone.namedfile.interfaces.IStorage"\n+    factory=".factories.Zope2FileUploadStorable"\n+  />\n+\n </configure>\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 3e24d97..18eaf8d 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -141,14 +141,20 @@ def toFieldValue(self, value):\n \n @adapter(IField, ISelectWidget)\n class SequenceSelectWidgetConverter(\n-        SelectWidgetConverterBase, SequenceDataConverter):\n-    pass\n+        SelectWidgetConverterBase,\n+        SequenceDataConverter,\n+):\n+    """Data converter for IField fields using the SelectWidget.\n+    """\n \n \n @adapter(ICollection, ISelectWidget)\n class SelectWidgetConverter(\n-        SelectWidgetConverterBase, CollectionSequenceDataConverter):\n-    pass\n+    SelectWidgetConverterBase,\n+    CollectionSequenceDataConverter,\n+):\n+    """Data converter for ICollection fields using the SelectWidget.\n+    """\n \n \n @adapter(ICollection, IAjaxSelectWidget)\n@@ -157,7 +163,7 @@ class AjaxSelectWidgetConverter(BaseDataConverter):\n     """\n \n     def toWidgetValue(self, value):\n-        """Converts from field value to widget.\n+        """Converts from field value to widget tokenized widget value.\n \n         :param value: Field value.\n         :type value: list |tuple | set\n@@ -167,8 +173,18 @@ def toWidgetValue(self, value):\n         """\n         if not value:\n             return self.field.missing_value\n-        separator = getattr(self.widget, \'separator\', \';\')\n-        return separator.join(six.text_type(v) for v in value)\n+        vocabulary = self.widget.get_vocabulary()\n+        tokenized_value = []\n+        for term_value in value:\n+            if vocabulary is not None:\n+                try:\n+                    term = vocabulary.getTerm(term_value)\n+                    tokenized_value.append(term.token)\n+                    continue\n+                except LookupError:\n+                    pass\n+            tokenized_value.append(six.text_type(term_value))\n+        return getattr(self.widget, \'separator\', \';\').join(tokenized_value)\n \n     def toFieldValue(self, value):\n         """Converts from widget value to field.\n@@ -188,8 +204,22 @@ def toFieldValue(self, value):\n         if isinstance(valueType, tuple):\n             valueType = valueType[0]\n         separator = getattr(self.widget, \'separator\', \';\')\n-        return collectionType(valueType and valueType(v) or v\n-                              for v in value.split(separator))\n+        self.widget.update()  # needed to have a vocabulary\n+        vocabulary = self.widget.get_vocabulary()\n+        untokenized_value = []\n+        for token in value.split(separator):\n+            if vocabulary is not None:\n+                try:\n+                    term = vocabulary.getTermByToken(token)\n+                    untokenized_value.append(term.value)\n+                    continue\n+                except LookupError:\n+                    pass\n+            untokenized_value.append(\n+                valueType(token) if valueType else token,\n+            )\n+\n+        return collectionType(untokenized_value)\n \n \n @adapter(IRelationChoice, IRelatedItemsWidget)\ndiff --git a/plone/app/z3cform/factories.py b/plone/app/z3cform/factories.py\nnew file mode 100644\nindex 0000000..0bddc81\n--- /dev/null\n+++ b/plone/app/z3cform/factories.py\n@@ -0,0 +1,16 @@\n+# -*- coding: utf-8 -*-\n+from zope.interface import implementer\n+from plone.namedfile.storages import MAXCHUNKSIZE\n+from plone.namedfile.interfaces import IStorage\n+\n+\n+@implementer(IStorage)\n+class Zope2FileUploadStorable(object):\n+\n+    def store(self, data, blob):\n+        data.seek(0)\n+        with blob.open(\'w\') as fp:\n+            block = data.read(MAXCHUNKSIZE)\n+            while block:\n+                fp.write(block)\n+                block = data.read(MAXCHUNKSIZE)\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex cd7a7b0..b4e52d9 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n from plone.app.textfield.widget import IRichTextWidget as patextfield_IRichTextWidget  # noqa\n-from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget\n from z3c.form.interfaces import IFormLayer\n+from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget\n from z3c.form.interfaces import ISingleCheckBoxWidget\n from z3c.form.interfaces import ITextWidget\n+from zope.interface import Interface\n from zope.schema.interfaces import IDate\n from zope.schema.interfaces import IDatetime\n \n@@ -12,6 +13,19 @@ class IPloneFormLayer(IFormLayer):\n     """Request layer installed via browserlayer.xml"""\n \n \n+class IFieldPermissionChecker(Interface):\n+    """Adapter factory for checking whether a user has permission to\n+    edit a specific field on a content object.\n+    """\n+\n+    def validate(field_name, vocabulary_name=None):\n+        """Returns True if the current user has permission to edit the\n+        `field_name` field.  Returns False if the user does not have\n+        permission.  Raises and AttributeError if the field cannot be\n+        found.\n+        """\n+\n+\n class IDateField(IDate):\n     """Marker interface for the DateField."""\n \ndiff --git a/plone/app/z3cform/templates/ajaxselect_display.pt b/plone/app/z3cform/templates/ajaxselect_display.pt\nnew file mode 100644\nindex 0000000..c634ded\n--- /dev/null\n+++ b/plone/app/z3cform/templates/ajaxselect_display.pt\n@@ -0,0 +1,26 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      tal:omit-tag="">\n+    <span id="" class=""\n+          tal:attributes="id view/id;\n+                          class view/klass;\n+                          style view/style;\n+                          title view/title;\n+                          lang view/lang;\n+                          onclick view/onclick;\n+                          ondblclick view/ondblclick;\n+                          onmousedown view/onmousedown;\n+                          onmouseup view/onmouseup;\n+                          onmouseover view/onmouseover;\n+                          onmousemove view/onmousemove;\n+                          onmouseout view/onmouseout;\n+                          onkeypress view/onkeypress;\n+                          onkeydown view/onkeydown;\n+                          onkeyup view/onkeyup"><tal:block\n+          condition="view/value"\n+    />\n+      <tal:loop tal:repeat="item python:view.display_items()">\n+        <span data-token="${python:item[\'token\']}">${python:item[\'title\']}</span><tal:if tal:condition="python: not repeat.item.end" tal:replace="python:view.separator" />\n+      </tal:loop>\n+    </span>\n+</html>\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 7aa8335..08f76b2 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -2,8 +2,8 @@\n from datetime import date\n from datetime import datetime\n from json import loads\n-from mock import Mock\n from lxml import html\n+from mock import Mock\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n@@ -27,9 +27,9 @@\n from zope.component.globalregistry import base\n from zope.globalrequest import setRequest\n from zope.interface import alsoProvides\n-from zope.interface import implementer\n from zope.interface import Interface\n-from zope.publisher.browser import TestRequest as BaseTestRequest\n+from zope.interface import provider\n+from zope.publisher.browser import TestRequest\n from zope.schema import BytesLine\n from zope.schema import Choice\n from zope.schema import Date\n@@ -50,22 +50,22 @@\n import unittest\n \n \n-@implementer(IVocabularyFactory)\n-class ExampleVocabulary(object):\n-\n-    def __call__(self, context, query=None):\n-        items = [u\'One\', u\'Two\', u\'Three\']\n-        tmp = SimpleVocabulary([\n-            SimpleTerm(it.lower(), it.lower(), it)\n-            for it in items\n-            if query is None or query.lower() in it.lower()\n-        ])\n-        tmp.test = 1\n-        return tmp\n-\n-\n-class TestRequest(BaseTestRequest):\n-    pass\n+@provider(IVocabularyFactory)\n+def example_vocabulary_factory(context, query=None):\n+    items = [u\'One\', u\'Two\', u\'Three\']\n+    tmp = SimpleVocabulary(\n+        [\n+            SimpleTerm(\n+                item.lower(),  # value\n+                token=\'token_{0}\'.format(item.lower()),\n+                title=item,\n+            )\n+            for item in items\n+            if query is None or query.lower() in item.lower()\n+        ],\n+    )\n+    tmp.test = 1\n+    return tmp\n \n \n class BaseWidgetTests(unittest.TestCase):\n@@ -157,7 +157,7 @@ def test_widget_base_pattern_options_with_functions(self):\n         observed_attrib = html.fromstring(output).attrib\n         self.assertEqual(\n             sorted(observed_attrib),\n-            [\'class\', \'data-pat-example\', \'type\']\n+            [\'class\', \'data-pat-example\', \'type\'],\n         )\n         self.assertEqual(observed_attrib[\'class\'], \'pat-example\')\n         self.assertEqual(observed_attrib[\'type\'], \'text\')\n@@ -167,8 +167,8 @@ def test_widget_base_pattern_options_with_functions(self):\n                 \'subdict\': {\n                     \'subsubnormal\': 789,\n                     \'subsublist\': [7, 8, 9, \'testcontext\'],\n-                    \'subsubtuple\': [7, 8, 9, \'testcontext\']\n-                }\n+                    \'subsubtuple\': [7, 8, 9, \'testcontext\'],\n+                },\n             },\n         )\n \n@@ -805,7 +805,7 @@ class AjaxSelectWidgetTests(unittest.TestCase):\n \n     def setUp(self):\n         self.request = TestRequest(environ={\'HTTP_ACCEPT_LANGUAGE\': \'en\'})\n-        provideUtility(ExampleVocabulary(), name=u\'example\')\n+        provideUtility(example_vocabulary_factory, name=u\'example\')\n \n     def test_widget(self):\n         from plone.app.z3cform.widget import AjaxSelectWidget\n@@ -835,19 +835,22 @@ def test_widget(self):\n             },\n         )\n \n-        widget.value = \'three;two\'\n-        self.assertEqual(\n-            widget._base_args(),\n+        widget.value = \'token_three;token_two\'\n+        self.assertDictEqual(\n             {\n                 \'name\': None,\n-                \'value\': \'three;two\',\n+                \'value\': \'token_three;token_two\',\n                 \'pattern\': \'select2\',\n                 \'pattern_options\': {\n                     \'vocabularyUrl\': \'/@@getVocabulary?name=example\',\n-                    \'initialValues\': {\'three\': u\'Three\', \'two\': u\'Two\'},\n+                    \'initialValues\': {\n+                        \'token_three\': u\'Three\',\n+                        \'token_two\': u\'Two\',\n+                    },\n                     \'separator\': \';\',\n                 },\n             },\n+            widget._base_args(),\n         )\n \n     def test_widget_list_orderable(self):\n@@ -979,6 +982,40 @@ def test_data_converter_list(self):\n             \'123;456;789\',\n         )\n \n+    def test_data_converter_collection_with_vocabulary(self):\n+        from plone.app.z3cform.widget import AjaxSelectWidget\n+        from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n+\n+        field = Tuple(\n+            __name__=\'listfield\',\n+            value_type=Choice(\n+                vocabulary=\'example\',\n+            ),\n+        )\n+        widget = AjaxSelectWidget(self.request)\n+        widget.field = field\n+        converter = AjaxSelectWidgetConverter(field, widget)\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'\'),\n+            field.missing_value,\n+        )\n+\n+        self.assertEqual(\n+            converter.toFieldValue(\'token_one;token_two;token_three\'),\n+            (\'one\', \'two\', \'three\'),\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue([]),\n+            None,\n+        )\n+\n+        self.assertEqual(\n+            converter.toWidgetValue([\'123\', \'456\', \'789\']),\n+            \'123;456;789\',\n+        )\n+\n     def test_data_converter_tuple(self):\n         from plone.app.z3cform.widget import AjaxSelectWidget\n         from plone.app.z3cform.converters import AjaxSelectWidgetConverter\n@@ -1080,10 +1117,6 @@ def test_converter_empty_value(self):\n         self.assertEqual(converter.toFieldValue(u\'\'), None)\n         self.assertEqual(converter.toFieldValue(u\'[]\'), None)\n \n-    @mock.patch(\n-        \'plone.app.widgets.utils.get_ajaxselect_options\',\n-        new=lambda *args, **kwargs: None,\n-    )\n     @mock.patch(\n         \'plone.app.widgets.utils.get_date_options\',\n         new=lambda *args, **kwargs: None,\n@@ -1104,7 +1137,7 @@ def test_widget(self):\n                     \'indexOptionsUrl\': \'/@@qsOptions\',\n                     \'previewCountURL\': \'/@@querybuildernumberofresults\',\n                     \'previewURL\': \'/@@querybuilder_html_results\',\n-                    \'patternAjaxSelectOptions\': None,\n+                    \'patternAjaxSelectOptions\': {\'separator\': \';\'},\n                     \'patternDateOptions\': None,\n                     \'patternRelateditemsOptions\': None,\n                 },\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 0840285..7d9fd48 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -1,24 +1,24 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import ImplicitAcquisitionWrapper\n-from OFS.interfaces import ISimpleItem\n from lxml import etree\n+from OFS.interfaces import ISimpleItem\n+from plone.app.event.base import first_weekday\n from plone.app.textfield.value import RichTextValue\n from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget\n from plone.app.vocabularies.terms import TermWithDescription\n-from plone.app.widgets.base import SelectWidget as BaseSelectWidget\n from plone.app.widgets.base import dict_merge\n from plone.app.widgets.base import InputWidget\n+from plone.app.widgets.base import SelectWidget as BaseSelectWidget\n from plone.app.widgets.base import TextareaWidget\n-from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n-from plone.app.widgets.utils import first_weekday\n-from plone.app.widgets.utils import get_ajaxselect_options\n+from plone.app.widgets.utils import get_context_url\n from plone.app.widgets.utils import get_date_options\n from plone.app.widgets.utils import get_datetime_options\n from plone.app.widgets.utils import get_querystring_options\n from plone.app.widgets.utils import get_relateditems_options\n from plone.app.widgets.utils import get_tinymce_options\n from plone.app.widgets.utils import get_widget_form\n+from plone.app.widgets.utils import NotImplemented as PatternNotImplemented\n from plone.app.z3cform.converters import DatetimeWidgetConverter\n from plone.app.z3cform.converters import DateWidgetConverter\n from plone.app.z3cform.interfaces import IAjaxSelectWidget\n@@ -38,11 +38,11 @@\n from Products.CMFPlone.interfaces import IEditingSchema\n from Products.CMFPlone.utils import safe_unicode\n from six.moves import UserDict\n+from z3c.form import interfaces as form_ifaces\n from z3c.form.browser.checkbox import SingleCheckBoxWidget\n from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget\n from z3c.form.browser.text import TextWidget as z3cform_TextWidget\n from z3c.form.browser.widget import HTMLInputWidget\n-from z3c.form import interfaces as form_ifaces\n from z3c.form.interfaces import IEditForm\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IForm\n@@ -54,6 +54,7 @@\n from zope.component import adapter\n from zope.component import ComponentLookupError\n from zope.component import getUtility\n+from zope.component import queryUtility\n from zope.component.hooks import getSite\n from zope.i18n import translate\n from zope.interface import implementer\n@@ -63,11 +64,12 @@\n from zope.schema.interfaces import IChoice\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import ISequence\n+from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import json\n import collections\n+import json\n import six\n \n \n@@ -372,11 +374,75 @@ class AjaxSelectWidget(BaseWidget, z3cform_TextWidget):\n     vocabulary_view = \'@@getVocabulary\'\n     orderable = False\n \n+    def _view_context(self):\n+        view_context = get_widget_form(self)\n+        # For EditForms and non-Forms (in tests), the vocabulary is looked\n+        # up on the context, otherwise on the view\n+        if IEditForm.providedBy(view_context):\n+            if self.is_subform_widget():\n+                view_context = self.form.parentForm.context\n+            elif not ISimpleItem.providedBy(self.context):\n+                view_context = self.form.context\n+            else:\n+                view_context = self.context\n+        elif not IForm.providedBy(view_context):\n+            view_context = self.context\n+        return view_context\n+\n+    def get_vocabulary(self):\n+        if self.vocabulary:\n+            factory = queryUtility(\n+                IVocabularyFactory,\n+                self.vocabulary,\n+            )\n+            if factory:\n+                return factory(self._view_context())\n+\n+    def display_items(self):\n+        if self.value:\n+            tokens = self.value.split(self.separator)\n+            vocabulary = self.get_vocabulary()\n+            for token in tokens:\n+                item = {\'token\': token, \'title\': token}\n+                if vocabulary is not None:\n+                    try:\n+                        item[\'title\'] = vocabulary.getTermByToken(token).title\n+                    except LookupError:\n+                        pass\n+                yield item\n+\n+    def has_multiple_values(self):\n+        return self.value and self.value.split(self.separator)\n+\n+    def _ajaxselect_options(self):\n+        options = {\n+            \'separator\': self.separator,\n+        }\n+        if self.vocabulary:\n+            options[\'vocabularyUrl\'] = \'{0}/{1}?name={2}\'.format(\n+                get_context_url(self._view_context()),\n+                self.vocabulary_view,\n+                self.vocabulary,\n+            )\n+            field_name = self.field and self.field.__name__ or None\n+            if field_name:\n+                options[\'vocabularyUrl\'] += \'&field={0}\'.format(field_name)\n+            vocabulary = self.get_vocabulary()\n+            if vocabulary is not None and self.value:\n+                options[\'initialValues\'] = dict()\n+                for token in self.value.split(self.separator):\n+                    try:\n+                        term = vocabulary.getTermByToken(token)\n+                        options[\'initialValues\'][term.token] = term.title\n+                    except LookupError:\n+                        options[\'initialValues\'][token] = token\n+\n+        return options\n+\n     def update(self):\n         super(AjaxSelectWidget, self).update()\n         field = getattr(self, \'field\', None)\n-        if ICollection.providedBy(self.field):\n-            field = self.field.value_type\n+        field = getattr(field, \'value_type\', field)\n         if (not self.vocabulary and field is not None and\n                 getattr(field, \'vocabularyName\', None)):\n             self.vocabulary = field.vocabularyName\n@@ -393,28 +459,13 @@ def _base_args(self):\n         :returns: Arguments which will be passed to _base\n         :rtype: dict\n         """\n-\n         args = super(AjaxSelectWidget, self)._base_args()\n-\n         args[\'name\'] = self.name\n         args[\'value\'] = self.value\n-\n         args.setdefault(\'pattern_options\', {})\n-\n-        field_name = self.field and self.field.__name__ or None\n-\n         context = self.context\n-        view_context = get_widget_form(self)\n-        # For EditForms and non-Forms (in tests), the vocabulary is looked\n-        # up on the context, otherwise on the view\n-        if (\n-            IEditForm.providedBy(view_context) or\n-            not IForm.providedBy(view_context)\n-        ):\n-            view_context = context\n-\n-        vocabulary_name = self.vocabulary\n         field = None\n+\n         if IChoice.providedBy(self.field):\n             args[\'pattern_options\'][\'maximumSelectionSize\'] = 1\n             field = self.field\n@@ -424,9 +475,7 @@ def _base_args(self):\n             args[\'pattern_options\'][\'allowNewItems\'] = \'false\'\n \n         args[\'pattern_options\'] = dict_merge(\n-            get_ajaxselect_options(view_context, args[\'value\'], self.separator,\n-                                   vocabulary_name, self.vocabulary_view,\n-                                   field_name),\n+            self._ajaxselect_options(),\n             args[\'pattern_options\'])\n \n         if field and getattr(field, \'vocabulary\', None):\n@@ -447,13 +496,14 @@ def _base_args(self):\n \n             registry = getUtility(IRegistry)\n             roles_allowed_to_add_keywords = registry.get(\n-                \'plone.roles_allowed_to_add_keywords\', [])\n+                \'plone.roles_allowed_to_add_keywords\', set())\n             roles = set(user.getRolesInContext(context))\n-\n-            allowNewItems = \'false\'\n-            if roles.intersection(roles_allowed_to_add_keywords):\n-                allowNewItems = \'true\'\n-            args[\'pattern_options\'][\'allowNewItems\'] = allowNewItems\n+            allowNewItems = bool(\n+                roles.intersection(roles_allowed_to_add_keywords),\n+            )\n+            args[\'pattern_options\'][\'allowNewItems\'] = str(\n+                allowNewItems,\n+            ).lower()\n \n         return args\n \ndiff --git a/setup.py b/setup.py\nindex 81292d6..b27e6c7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,7 +8,7 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-version = \'3.0.10.dev0\'\n+version = \'3.1.0.dev0\'\n \n long_description = (\n     read(\'README.rst\') +\n@@ -29,9 +29,8 @@ def read(*rnames):\n     long_description=long_description,\n     classifiers=[\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: Core",\n         "Framework :: Plone :: 5.2",\n-        "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n@@ -49,14 +48,14 @@ def read(*rnames):\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n         \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'Zope2\',  # Products.Five\n-        \'plone.app.widgets>=2.0.0.dev0\',\n+        \'plone.app.textfield\',\n+        \'plone.app.widgets>=2.4.2.dev0\',\n         \'plone.protect\',\n         \'plone.z3cform>=0.5.11dev\',\n+        \'Products.CMFCore\',\n+        \'Products.CMFPlone\',\n+        \'setuptools\',\n         \'six\',\n         \'z3c.form >= 3.0\',\n         \'z3c.formwidget.query\',\n@@ -69,7 +68,7 @@ def read(*rnames):\n         \'zope.interface\',\n         \'zope.schema\',\n         \'zope.traversing\',\n-        \'plone.app.textfield\'\n+        \'Zope2\',\n     ],\n     extras_require={\n         \'tests\': [\n'

