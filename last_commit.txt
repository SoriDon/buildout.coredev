Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-07-05T11:20:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/07cb298fcd1703bf940405823c4bcde5fe00f3d2

Use security decorators in PAS plugin. (#1155)

Files changed:
A news/1155.bugfix
M src/plone/restapi/pas/plugin.py

b'diff --git a/news/1155.bugfix b/news/1155.bugfix\nnew file mode 100644\nindex 000000000..a2aad6b90\n--- /dev/null\n+++ b/news/1155.bugfix\n@@ -0,0 +1 @@\n+Use security decorators in PAS plugin. [jensens]\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 372716e0b..e960f3fb2 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -65,9 +65,8 @@ def __init__(self, id_, title=None):\n         self._setId(id_)\n         self.title = title\n \n-    security.declarePrivate("challenge")\n-\n     # Initiate a challenge to the user to provide credentials.\n+    @security.private\n     def challenge(self, request, response, **kw):\n \n         realm = response.realm\n@@ -79,10 +78,9 @@ def challenge(self, request, response, **kw):\n         response.setStatus(401)\n         return True\n \n-    security.declarePrivate("extractCredentials")\n-\n     # IExtractionPlugin implementation\n     # Extracts a JSON web token from the request.\n+    @security.private\n     def extractCredentials(self, request):\n         """\n         Extract credentials either from a JSON POST request or an established JWT token.\n@@ -109,9 +107,8 @@ def extractCredentials(self, request):\n \n         return creds\n \n-    security.declarePrivate("authenticateCredentials")\n-\n     # IAuthenticationPlugin implementation\n+    @security.private\n     def authenticateCredentials(self, credentials):\n         # Ignore credentials that are not from our extractor\n         extractor = credentials.get("extractor")\n@@ -137,8 +134,7 @@ def authenticateCredentials(self, credentials):\n \n         return (userid, userid)\n \n-    security.declareProtected(ManagePortal, "manage_updateConfig")\n-\n+    @security.protected(ManagePortal)\n     @postonly\n     def manage_updateConfig(self, REQUEST):\n         """Update configuration of JWT Authentication Plugin."""\n'

