Repository: plone.scale


Branch: refs/heads/master
Date: 2016-10-05T15:11:49+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/c710301a318d04c468de42ab05c18c8eb13468d9

Catch KeyError when deleting non existing scale.

This can happen in corner cases.

Fixes https://github.com/plone/plone.scale/issues/15

Files changed:
M CHANGES.rst
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 730d306..b9a0eb9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -16,6 +16,10 @@ New features:
 
 Bug fixes:
 
+- Catch KeyError when deleting non existing scale.  This can happen in corner cases.
+  Fixes `issue 15 <https://github.com/plone/plone.scale/issues/15>`_.
+  [maurits]
+
 - Set ``zip_safe=False`` in ``setup.py``.  Otherwise you cannot run
   the tests of the released package because the test runner does not
   find any tests in the egg file.  Note that this is only a problem in
diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 5d3cbc4..4104001 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -160,7 +160,7 @@ def scale(self, factory=None, **parameters):
         storage = self.storage
         info = self.get_info_by_hash(key)
         if info is not None and self._modified_since(info['modified']):
-            del storage[info['uid']]
+            del self[info['uid']]
             # invalidate when the image was updated
             info = None
         elif info is not None:
@@ -227,11 +227,11 @@ def _cleanup(self):
             # remove info stored by tuple keys
             # before refactoring
             if isinstance(key, tuple):
-                del storage[key]
+                del self[key]
             # clear cache from scales older than one day
             elif (modified_time and
                     value['modified'] < modified_time - KEEP_SCALE_MILLIS):
-                del storage[key]
+                del self[key]
 
     def __getitem__(self, uid):
         return self.storage[uid]
@@ -240,7 +240,12 @@ def __setitem__(self, id, scale):
         raise RuntimeError('New scales have to be created via scale()')
 
     def __delitem__(self, uid):
-        del self.storage[uid]
+        try:
+            del self.storage[uid]
+        except KeyError:
+            # This should not happen, but it apparently can happen in corner
+            # cases.  See https://github.com/plone/plone.scale/issues/15
+            logger.warn('Could not delete key %s from storage.', uid)
 
     def __iter__(self):
         return iter(self.storage)
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index 650f21a..e4df7f1 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -171,7 +171,10 @@ def testPositiveHasKey(self):
 
     def testDeleteNonExistingItem(self):
         storage = self.storage
-        self.assertRaises(KeyError, delitem, storage, 'foo')
+        # This used to raise a KeyError, but sometimes the underlying storage
+        # can get inconsistent, so it is nicer to accept it.
+        # See https://github.com/plone/plone.scale/issues/15
+        delitem(storage, 'foo')
 
     def testDeleteRemovesItemAndIndexBBB(self):
         storage = self.storage


Repository: plone.scale


Branch: refs/heads/master
Date: 2016-10-07T07:35:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.scale/commit/f22b598b1a72cc268619329f17e9be0b5b40b58f

Merge pull request #20 from plone/origin/catch-keyerror-on-broken-scalesdict-master

Catch KeyError when deleting non existing scale. [master]

Files changed:
M CHANGES.rst
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 730d306..b9a0eb9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -16,6 +16,10 @@ New features:
 
 Bug fixes:
 
+- Catch KeyError when deleting non existing scale.  This can happen in corner cases.
+  Fixes `issue 15 <https://github.com/plone/plone.scale/issues/15>`_.
+  [maurits]
+
 - Set ``zip_safe=False`` in ``setup.py``.  Otherwise you cannot run
   the tests of the released package because the test runner does not
   find any tests in the egg file.  Note that this is only a problem in
diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 5d3cbc4..4104001 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -160,7 +160,7 @@ def scale(self, factory=None, **parameters):
         storage = self.storage
         info = self.get_info_by_hash(key)
         if info is not None and self._modified_since(info['modified']):
-            del storage[info['uid']]
+            del self[info['uid']]
             # invalidate when the image was updated
             info = None
         elif info is not None:
@@ -227,11 +227,11 @@ def _cleanup(self):
             # remove info stored by tuple keys
             # before refactoring
             if isinstance(key, tuple):
-                del storage[key]
+                del self[key]
             # clear cache from scales older than one day
             elif (modified_time and
                     value['modified'] < modified_time - KEEP_SCALE_MILLIS):
-                del storage[key]
+                del self[key]
 
     def __getitem__(self, uid):
         return self.storage[uid]
@@ -240,7 +240,12 @@ def __setitem__(self, id, scale):
         raise RuntimeError('New scales have to be created via scale()')
 
     def __delitem__(self, uid):
-        del self.storage[uid]
+        try:
+            del self.storage[uid]
+        except KeyError:
+            # This should not happen, but it apparently can happen in corner
+            # cases.  See https://github.com/plone/plone.scale/issues/15
+            logger.warn('Could not delete key %s from storage.', uid)
 
     def __iter__(self):
         return iter(self.storage)
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index 650f21a..e4df7f1 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -171,7 +171,10 @@ def testPositiveHasKey(self):
 
     def testDeleteNonExistingItem(self):
         storage = self.storage
-        self.assertRaises(KeyError, delitem, storage, 'foo')
+        # This used to raise a KeyError, but sometimes the underlying storage
+        # can get inconsistent, so it is nicer to accept it.
+        # See https://github.com/plone/plone.scale/issues/15
+        delitem(storage, 'foo')
 
     def testDeleteRemovesItemAndIndexBBB(self):
         storage = self.storage


