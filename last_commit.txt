Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-18T11:01:52+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/8a79f6f4c4a421194ae9d1a4a7e9804d27ce26d2

Add support for add/update user portraits (@user endpoint)

Files changed:
M src/plone/restapi/services/users/update.py
M src/plone/restapi/tests/test_services_users.py

b"diff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 41c50e13..13d8d0f3 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -1,17 +1,23 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from OFS.Image import Image\n from plone.restapi.services import Service\n from Products.CMFCore.permissions import SetOwnPassword\n-from Products.CMFPlone.utils import set_own_login_name\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import set_own_login_name\n+from Products.PlonePAS.utils import scale_image\n+from StringIO import StringIO\n+from zope.component import getAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n-from zope.component import getAdapter\n \n+import codecs\n import json\n import plone\n+import six\n+\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -67,6 +73,8 @@ def reply(self):\n                 elif key == 'username':\n                     set_own_login_name(user, value)\n                 else:\n+                    if key == 'portrait' and value.get('data'):\n+                        self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n             roles = user_settings_to_update.get('roles', {})\n@@ -92,6 +100,8 @@ def reply(self):\n                    self.can_set_own_password:\n                     self._change_user_password(user, value)\n                 else:\n+                    if key == 'portrait' and value.get('data'):\n+                        self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n         else:\n@@ -133,3 +143,33 @@ def _is_anonymous(self):\n         portal = getSite()\n         portal_membership = getToolByName(portal, 'portal_membership')\n         return portal_membership.isAnonymousUser()\n+\n+    def set_member_portrait(self, user, portrait):\n+        portal = getSite()\n+        portal_membership = getToolByName(portal, 'portal_membership')\n+        safe_id = portal_membership._getSafeMemberId(user.getId())\n+        content_type = 'application/octet-stream'\n+        filename = None\n+\n+        content_type = portrait.get('content-type', content_type)\n+        filename = portrait.get('filename', filename)\n+        data = portrait.get('data')\n+        if isinstance(data, six.text_type):\n+            data = data.encode('utf-8')\n+        if 'encoding' in portrait:\n+            data = codecs.decode(data, portrait['encoding'])\n+        if isinstance(data, six.text_type):\n+            data = data.encode('utf-8')\n+\n+        if portrait.get('scale', False):\n+            # Only scale if the scale (default Plone behavior) boolean is set\n+            # This should be handled by the core in the future\n+            scaled, mimetype = scale_image(StringIO(data))\n+        else:\n+            # Normally, the scale and cropping is going to be handled in the\n+            # frontend\n+            scaled = data\n+\n+        portrait = Image(id=safe_id, file=scaled, title='')\n+        membertool = getToolByName(self, 'portal_memberdata')\n+        membertool._setPortrait(portrait, safe_id)\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 92097918..e60aae98 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -492,6 +492,69 @@ def test_update_user_password(self):\n             old_password_hashes['noam'], new_password_hashes['noam']\n         )\n \n+    def test_update_portrait(self):\n+        payload = {\n+            'portrait': {\n+                'filename': 'image.png',\n+                'encoding': 'base64',\n+                'data': u'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=',\n+                'content-type': 'image/png'\n+            }\n+        }\n+        self.api_session.auth = ('noam', 'password')\n+        response = self.api_session.patch('/@users/noam', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get('/@users/noam').json()\n+        self.assertEqual(\n+            'http://localhost:55001/plone/portal_memberdata/portraits/noam',\n+            user.get('portrait')\n+        )\n+\n+    def test_update_portrait_with_default_plone_scaling(self):\n+        payload = {\n+            'portrait': {\n+                'filename': 'image.png',\n+                'encoding': 'base64',\n+                'data': u'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=',\n+                'content-type': 'image/png',\n+                'scale': True\n+            }\n+        }\n+        self.api_session.auth = ('noam', 'password')\n+        response = self.api_session.patch('/@users/noam', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get('/@users/noam').json()\n+        self.assertEqual(\n+            'http://localhost:55001/plone/portal_memberdata/portraits/noam',\n+            user.get('portrait')\n+        )\n+\n+    def test_update_portrait_by_manager(self):\n+        payload = {\n+            'portrait': {\n+                'filename': 'image.png',\n+                'encoding': 'base64',\n+                'data': u'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=',\n+                'content-type': 'image/png'\n+            }\n+        }\n+        response = self.api_session.patch('/@users/noam', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get('/@users/noam').json()\n+        self.assertEqual(\n+            'http://localhost:55001/plone/portal_memberdata/portraits/noam',\n+            user.get('portrait')\n+        )\n+\n     def test_anonymous_user_can_not_update_existing_user(self):\n         payload = {\n             'fullname': 'Noam A. Chomsky',\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-18T12:10:32+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/2910a7f651a5073e7c75ed1f858b5663ff343fa8

Fix StringIO on py3. Add documentation and missing changelog

Files changed:
A news/701.feature
A src/plone/restapi/tests/http-examples/users_update_portrait.req
A src/plone/restapi/tests/http-examples/users_update_portrait.resp
A src/plone/restapi/tests/http-examples/users_update_portrait_get.req
A src/plone/restapi/tests/http-examples/users_update_portrait_get.resp
A src/plone/restapi/tests/http-examples/users_update_portrait_scale.req
A src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp
M docs/source/users.rst
M src/plone/restapi/services/users/update.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/users.rst b/docs/source/users.rst\nindex c4a2a689..92211c20 100644\n--- a/docs/source/users.rst\n+++ b/docs/source/users.rst\n@@ -137,6 +137,23 @@ A successful response to a PATCH request will be indicated by a :term:`204 No Co\n \n Any user is able to update their own properties and password (if allowed) by using the same request.\n \n+The user portrait/avatar can also be updated using the same serialization as the file one:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n+\n+A successful response to a PATCH request will be indicated by a :term:`204 No Content` response.\n+Then asking for the user the portrait URL should be on the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n+   :language: http\n+\n+Adding the portrait via the @user endpoint does not scale it since it\'s assumed that the frontend will take care of it (resizing/cropping).\n+If you still want that Plone to take care of the scaling using the default Plone behavior for portraits, you have to add the ``scale`` attribute to the request:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n+\n Delete User\n -----------\n \ndiff --git a/news/701.feature b/news/701.feature\nnew file mode 100644\nindex 00000000..9116be14\n--- /dev/null\n+++ b/news/701.feature\n@@ -0,0 +1,2 @@\n+- Add support for add/update user portraits (@user endpoint)\n+  [sneridagh]\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 13d8d0f3..2a0b50bd 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -6,7 +6,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import set_own_login_name\n from Products.PlonePAS.utils import scale_image\n-from StringIO import StringIO\n from zope.component import getAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n@@ -164,7 +163,7 @@ def set_member_portrait(self, user, portrait):\n         if portrait.get(\'scale\', False):\n             # Only scale if the scale (default Plone behavior) boolean is set\n             # This should be handled by the core in the future\n-            scaled, mimetype = scale_image(StringIO(data))\n+            scaled, mimetype = scale_image(six.StringIO(data))\n         else:\n             # Normally, the scale and cropping is going to be handled in the\n             # frontend\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait.req b/src/plone/restapi/tests/http-examples/users_update_portrait.req\nnew file mode 100644\nindex 00000000..ffbf93b9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait.req\n@@ -0,0 +1,13 @@\n+PATCH /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png"\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait.resp b/src/plone/restapi/tests/http-examples/users_update_portrait.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.req b/src/plone/restapi/tests/http-examples/users_update_portrait_get.req\nnew file mode 100644\nindex 00000000..244906ea\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.req\n@@ -0,0 +1,13 @@\n+GET /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png"\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\nnew file mode 100644\nindex 00000000..e159773a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@users/noam", \n+  "description": null, \n+  "email": "noam.chomsky@example.com", \n+  "fullname": null, \n+  "home_page": null, \n+  "id": "noam", \n+  "location": null, \n+  "portrait": "http://localhost:55001/plone/portal_memberdata/portraits/noam", \n+  "roles": [\n+    "Member"\n+  ], \n+  "username": "noam"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\nnew file mode 100644\nindex 00000000..9781e060\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n@@ -0,0 +1,14 @@\n+PATCH /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png",\n+        "scale": true\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex a2ddbfc5..9b6d9bfb 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -847,6 +847,49 @@ def test_documentation_users_update(self):\n         )\n         save_request_and_response_for_docs(\'users_update\', response)\n \n+    def test_documentation_users_update_portrait(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        api.user.create(\n+            email=\'noam.chomsky@example.com\',\n+            username=\'noam\'\n+        )\n+        transaction.commit()\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        transaction.commit()\n+\n+        response_get = self.api_session.get(\'/@users/noam\', json=payload)\n+\n+        save_request_and_response_for_docs(\'users_update_portrait\', response)\n+        save_request_and_response_for_docs(\n+            \'users_update_portrait_get\', response_get)\n+\n+    def test_documentation_users_update_portrait_with_scale(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\',\n+                \'scale\': True\n+            }\n+        }\n+        api.user.create(\n+            email=\'noam.chomsky@example.com\',\n+            username=\'noam\'\n+        )\n+        transaction.commit()\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        save_request_and_response_for_docs(\n+            \'users_update_portrait_scale\', response)\n+\n     def test_documentation_users_delete(self):\n         properties = {\n             \'email\': \'noam.chomsky@example.com\',\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-18T12:48:30+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/531302742ddc596ec9c50c938eb94d46761a8e0e

Fix tests in py3 and P5.2

Files changed:
M src/plone/restapi/services/users/update.py
M src/plone/restapi/tests/test_services_users.py

b"diff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 2a0b50bd..42f46cd5 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -163,7 +163,7 @@ def set_member_portrait(self, user, portrait):\n         if portrait.get('scale', False):\n             # Only scale if the scale (default Plone behavior) boolean is set\n             # This should be handled by the core in the future\n-            scaled, mimetype = scale_image(six.StringIO(data))\n+            scaled, mimetype = scale_image(six.BytesIO(data))\n         else:\n             # Normally, the scale and cropping is going to be handled in the\n             # frontend\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex e60aae98..191fb186 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -508,9 +508,9 @@ def test_update_portrait(self):\n         transaction.commit()\n \n         user = self.api_session.get('/@users/noam').json()\n-        self.assertEqual(\n-            'http://localhost:55001/plone/portal_memberdata/portraits/noam',\n-            user.get('portrait')\n+        self.assertTrue(\n+            user.get('portrait').endswith(\n+                'plone/portal_memberdata/portraits/noam'),\n         )\n \n     def test_update_portrait_with_default_plone_scaling(self):\n@@ -530,9 +530,9 @@ def test_update_portrait_with_default_plone_scaling(self):\n         transaction.commit()\n \n         user = self.api_session.get('/@users/noam').json()\n-        self.assertEqual(\n-            'http://localhost:55001/plone/portal_memberdata/portraits/noam',\n-            user.get('portrait')\n+        self.assertTrue(\n+            user.get('portrait').endswith(\n+                'plone/portal_memberdata/portraits/noam'),\n         )\n \n     def test_update_portrait_by_manager(self):\n@@ -550,9 +550,9 @@ def test_update_portrait_by_manager(self):\n         transaction.commit()\n \n         user = self.api_session.get('/@users/noam').json()\n-        self.assertEqual(\n-            'http://localhost:55001/plone/portal_memberdata/portraits/noam',\n-            user.get('portrait')\n+        self.assertTrue(\n+            user.get('portrait').endswith(\n+                'plone/portal_memberdata/portraits/noam'),\n         )\n \n     def test_anonymous_user_can_not_update_existing_user(self):\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-21T04:25:52+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/3b7d463a6112c014e7dc72c72a89fbf389c18fe1

Merge pull request #702 from plone/addmemberportrait

Add support for add/update user portraits (@user endpoint)

Files changed:
A news/701.feature
A src/plone/restapi/tests/http-examples/users_update_portrait.req
A src/plone/restapi/tests/http-examples/users_update_portrait.resp
A src/plone/restapi/tests/http-examples/users_update_portrait_get.req
A src/plone/restapi/tests/http-examples/users_update_portrait_get.resp
A src/plone/restapi/tests/http-examples/users_update_portrait_scale.req
A src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp
M docs/source/users.rst
M src/plone/restapi/services/users/update.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/docs/source/users.rst b/docs/source/users.rst\nindex c4a2a689..92211c20 100644\n--- a/docs/source/users.rst\n+++ b/docs/source/users.rst\n@@ -137,6 +137,23 @@ A successful response to a PATCH request will be indicated by a :term:`204 No Co\n \n Any user is able to update their own properties and password (if allowed) by using the same request.\n \n+The user portrait/avatar can also be updated using the same serialization as the file one:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n+\n+A successful response to a PATCH request will be indicated by a :term:`204 No Content` response.\n+Then asking for the user the portrait URL should be on the response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n+   :language: http\n+\n+Adding the portrait via the @user endpoint does not scale it since it\'s assumed that the frontend will take care of it (resizing/cropping).\n+If you still want that Plone to take care of the scaling using the default Plone behavior for portraits, you have to add the ``scale`` attribute to the request:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n+\n Delete User\n -----------\n \ndiff --git a/news/701.feature b/news/701.feature\nnew file mode 100644\nindex 00000000..9116be14\n--- /dev/null\n+++ b/news/701.feature\n@@ -0,0 +1,2 @@\n+- Add support for add/update user portraits (@user endpoint)\n+  [sneridagh]\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 41c50e13..42f46cd5 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -1,17 +1,22 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from OFS.Image import Image\n from plone.restapi.services import Service\n from Products.CMFCore.permissions import SetOwnPassword\n-from Products.CMFPlone.utils import set_own_login_name\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import set_own_login_name\n+from Products.PlonePAS.utils import scale_image\n+from zope.component import getAdapter\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n-from zope.component import getAdapter\n \n+import codecs\n import json\n import plone\n+import six\n+\n \n try:  # pragma: no cover\n     from Products.CMFPlone.interfaces import ISecuritySchema\n@@ -67,6 +72,8 @@ def reply(self):\n                 elif key == \'username\':\n                     set_own_login_name(user, value)\n                 else:\n+                    if key == \'portrait\' and value.get(\'data\'):\n+                        self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n             roles = user_settings_to_update.get(\'roles\', {})\n@@ -92,6 +99,8 @@ def reply(self):\n                    self.can_set_own_password:\n                     self._change_user_password(user, value)\n                 else:\n+                    if key == \'portrait\' and value.get(\'data\'):\n+                        self.set_member_portrait(user, value)\n                     user.setMemberProperties(mapping={key: value})\n \n         else:\n@@ -133,3 +142,33 @@ def _is_anonymous(self):\n         portal = getSite()\n         portal_membership = getToolByName(portal, \'portal_membership\')\n         return portal_membership.isAnonymousUser()\n+\n+    def set_member_portrait(self, user, portrait):\n+        portal = getSite()\n+        portal_membership = getToolByName(portal, \'portal_membership\')\n+        safe_id = portal_membership._getSafeMemberId(user.getId())\n+        content_type = \'application/octet-stream\'\n+        filename = None\n+\n+        content_type = portrait.get(\'content-type\', content_type)\n+        filename = portrait.get(\'filename\', filename)\n+        data = portrait.get(\'data\')\n+        if isinstance(data, six.text_type):\n+            data = data.encode(\'utf-8\')\n+        if \'encoding\' in portrait:\n+            data = codecs.decode(data, portrait[\'encoding\'])\n+        if isinstance(data, six.text_type):\n+            data = data.encode(\'utf-8\')\n+\n+        if portrait.get(\'scale\', False):\n+            # Only scale if the scale (default Plone behavior) boolean is set\n+            # This should be handled by the core in the future\n+            scaled, mimetype = scale_image(six.BytesIO(data))\n+        else:\n+            # Normally, the scale and cropping is going to be handled in the\n+            # frontend\n+            scaled = data\n+\n+        portrait = Image(id=safe_id, file=scaled, title=\'\')\n+        membertool = getToolByName(self, \'portal_memberdata\')\n+        membertool._setPortrait(portrait, safe_id)\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait.req b/src/plone/restapi/tests/http-examples/users_update_portrait.req\nnew file mode 100644\nindex 00000000..ffbf93b9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait.req\n@@ -0,0 +1,13 @@\n+PATCH /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png"\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait.resp b/src/plone/restapi/tests/http-examples/users_update_portrait.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.req b/src/plone/restapi/tests/http-examples/users_update_portrait_get.req\nnew file mode 100644\nindex 00000000..244906ea\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.req\n@@ -0,0 +1,13 @@\n+GET /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png"\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\nnew file mode 100644\nindex 00000000..e159773a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n@@ -0,0 +1,17 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@users/noam", \n+  "description": null, \n+  "email": "noam.chomsky@example.com", \n+  "fullname": null, \n+  "home_page": null, \n+  "id": "noam", \n+  "location": null, \n+  "portrait": "http://localhost:55001/plone/portal_memberdata/portraits/noam", \n+  "roles": [\n+    "Member"\n+  ], \n+  "username": "noam"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\nnew file mode 100644\nindex 00000000..9781e060\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n@@ -0,0 +1,14 @@\n+PATCH /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "portrait": {\n+        "content-type": "image/png",\n+        "data": "R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=",\n+        "encoding": "base64",\n+        "filename": "image.png",\n+        "scale": true\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_update_portrait_scale.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex a2ddbfc5..9b6d9bfb 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -847,6 +847,49 @@ def test_documentation_users_update(self):\n         )\n         save_request_and_response_for_docs(\'users_update\', response)\n \n+    def test_documentation_users_update_portrait(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        api.user.create(\n+            email=\'noam.chomsky@example.com\',\n+            username=\'noam\'\n+        )\n+        transaction.commit()\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+        transaction.commit()\n+\n+        response_get = self.api_session.get(\'/@users/noam\', json=payload)\n+\n+        save_request_and_response_for_docs(\'users_update_portrait\', response)\n+        save_request_and_response_for_docs(\n+            \'users_update_portrait_get\', response_get)\n+\n+    def test_documentation_users_update_portrait_with_scale(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': \'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\',\n+                \'scale\': True\n+            }\n+        }\n+        api.user.create(\n+            email=\'noam.chomsky@example.com\',\n+            username=\'noam\'\n+        )\n+        transaction.commit()\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        save_request_and_response_for_docs(\n+            \'users_update_portrait_scale\', response)\n+\n     def test_documentation_users_delete(self):\n         properties = {\n             \'email\': \'noam.chomsky@example.com\',\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 92097918..191fb186 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -492,6 +492,69 @@ def test_update_user_password(self):\n             old_password_hashes[\'noam\'], new_password_hashes[\'noam\']\n         )\n \n+    def test_update_portrait(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        self.api_session.auth = (\'noam\', \'password\')\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get(\'/@users/noam\').json()\n+        self.assertTrue(\n+            user.get(\'portrait\').endswith(\n+                \'plone/portal_memberdata/portraits/noam\'),\n+        )\n+\n+    def test_update_portrait_with_default_plone_scaling(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\',\n+                \'scale\': True\n+            }\n+        }\n+        self.api_session.auth = (\'noam\', \'password\')\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get(\'/@users/noam\').json()\n+        self.assertTrue(\n+            user.get(\'portrait\').endswith(\n+                \'plone/portal_memberdata/portraits/noam\'),\n+        )\n+\n+    def test_update_portrait_by_manager(self):\n+        payload = {\n+            \'portrait\': {\n+                \'filename\': \'image.png\',\n+                \'encoding\': \'base64\',\n+                \'data\': u\'R0lGODlhAQABAIAAAP///wAAACwAAAAAAQABAAACAkQBADs=\',\n+                \'content-type\': \'image/png\'\n+            }\n+        }\n+        response = self.api_session.patch(\'/@users/noam\', json=payload)\n+\n+        self.assertEqual(response.status_code, 204)\n+        transaction.commit()\n+\n+        user = self.api_session.get(\'/@users/noam\').json()\n+        self.assertTrue(\n+            user.get(\'portrait\').endswith(\n+                \'plone/portal_memberdata/portraits/noam\'),\n+        )\n+\n     def test_anonymous_user_can_not_update_existing_user(self):\n         payload = {\n             \'fullname\': \'Noam A. Chomsky\',\n'

