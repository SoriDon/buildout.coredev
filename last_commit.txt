Repository: plone.app.folder


Branch: refs/heads/master
Date: 2018-05-18T14:11:56+02:00
Author: Jan Mevissen (jmevissen) <mevissen@interaktiv.de>
Commit: https://github.com/plone/plone.app.folder/commit/b94b558bff8165eea749f822da5d9875797517cb

move gopipindex from plone.app.folder to plone.folder https://github.com/plone/Products.CMFPlone/issues/2422

Files changed:
M src/plone/app/folder/__init__.py
M src/plone/app/folder/tests/test_integration.py
D src/plone/app/folder/dtml/addGopipIndex.dtml
D src/plone/app/folder/nogopip.py
D src/plone/app/folder/tests/test_nogopip.py

b'diff --git a/src/plone/app/folder/__init__.py b/src/plone/app/folder/__init__.py\nindex 6dd9f26..f595d2a 100644\n--- a/src/plone/app/folder/__init__.py\n+++ b/src/plone/app/folder/__init__.py\n@@ -36,13 +36,3 @@ def initialize(context):\n                 extra_constructors = (constructor,),\n                 fti = (fti,),\n             ).initialize(context)\n-\n-    from plone.app.folder import nogopip\n-\n-    context.registerClass(\n-        nogopip.GopipIndex,\n-        permission=\'Add Pluggable Index\',\n-        constructors=(nogopip.manage_addGopipForm,\n-                      nogopip.manage_addGopipIndex),\n-        icon=\'www/index.gif\',\n-        visibility=None)\ndiff --git a/src/plone/app/folder/dtml/addGopipIndex.dtml b/src/plone/app/folder/dtml/addGopipIndex.dtml\ndeleted file mode 100644\nindex 154f03d..0000000\n--- a/src/plone/app/folder/dtml/addGopipIndex.dtml\n+++ /dev/null\n@@ -1,44 +0,0 @@\n-<dtml-var manage_page_header>\n-<dtml-var "manage_form_title(this(), _, form_title=\'Add GopipIndex\')">\n-\n-<p class="form-help">\n-  A <em>GopipIndex</em> fakes the formerly used "getObjPositionInParent" index\n-  by retrieving the necessary information directly from the search results\'\n-  containers.  It works as a drop-in replacement and makes expensive indexing\n-  of each item\'s position unnecessary.\n-</p>\n-\n-<form action="manage_addGopipIndex" method="post" enctype="multipart/form-data">\n-  <table cellspacing="0" cellpadding="2" border="0">\n-    <tr>\n-      <td align="left" valign="top">\n-        <div class="form-label">\n-          Id\n-        </div>\n-      </td>\n-      <td align="left" valign="top">\n-        <input type="text" name="identifier" size="40">\n-      </td>\n-    </tr>\n-    <tr>\n-      <td align="left" valign="top">\n-        <div class="form-optional">\n-          Type\n-        </div>\n-      </td>\n-      <td align="left" valign="top">\n-        GopipIndex\n-      </td>\n-    </tr>\n-    <tr>\n-      <td align="left" valign="top"></td>\n-      <td align="left" valign="top">\n-        <div class="form-element">\n-          <input class="form-element" type="submit" name="submit" value=" Add ">\n-        </div>\n-      </td>\n-    </tr>\n-  </table>\n-</form>\n-\n-<dtml-var manage_page_footer>\ndiff --git a/src/plone/app/folder/nogopip.py b/src/plone/app/folder/nogopip.py\ndeleted file mode 100644\nindex 6affabf..0000000\n--- a/src/plone/app/folder/nogopip.py\n+++ /dev/null\n@@ -1,123 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n-from App.special_dtml import DTMLFile\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.PluginIndexes.interfaces import IPluggableIndex, ISortIndex\n-from inspect import currentframe\n-from logging import getLogger\n-from zope.component import getUtility\n-from zope.interface import implementer\n-\n-logger = getLogger(__name__)\n-\n-\n-@implementer(IPluggableIndex)\n-class StubIndex(SimpleItem):\n-    """ stub catalog index doing nothing """\n-\n-    def __init__(self, id, *args, **kw):\n-        self.id = id\n-\n-    def getId(self):\n-        return self.id\n-\n-    def getEntryForObject(self, *args, **kw):\n-        return []\n-\n-    def getIndexSourceNames(self):\n-        return [self.id]\n-\n-    def index_object(self, *args, **kw):\n-        return 0\n-\n-    def unindex_object(self, *args, **kw):\n-        pass\n-\n-    def _apply_index(self, *args, **kw):\n-        return None\n-\n-    def numObjects(self):\n-        return 0\n-\n-    def clear(self):\n-        pass\n-\n-\n-@implementer(ISortIndex)\n-class GopipIndex(StubIndex):\n-    """ fake index for sorting against `getObjPositionInParent` """\n-\n-    meta_type = \'GopipIndex\'\n-    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n-\n-    keyForDocument = 42\n-\n-    def __init__(self, id, extra=None, caller=None):\n-        super(GopipIndex, self).__init__(id)\n-        self.catalog = aq_base(caller._catalog)\n-\n-    def __len__(self):\n-        # with python 2.4 returning `sys.maxint` gives:\n-        # OverflowError: __len__() should return 0 <= outcome < 2**31\n-        # so...\n-        return 2**31 - 1\n-\n-    def documentToKeyMap(self):\n-        # we need to get the containers in order to get the respective\n-        # positions of the search results, but before that we need those\n-        # results themselves.  luckily this is only ever called from\n-        # `sortResults`, so we can get it form there.  oh, and lurker\n-        # says this won\'t work in jython, though! :)\n-        rs = currentframe().f_back.f_locals[\'rs\']\n-        rids = {}\n-        items = []\n-        containers = {}\n-        getpath = self.catalog.paths.get\n-        traverse = getUtility(ISiteRoot).unrestrictedTraverse\n-        for rid in rs:\n-            path = getpath(rid)\n-            parent, id = path.rsplit(\'/\', 1)\n-            container = containers.get(parent)\n-            if container is None:\n-                containers[parent] = container = traverse(parent)\n-            rids[id] = rid              # remember in case of single folder\n-            items.append((rid, container, id))  # or else for deferred lookup\n-        pos = {}\n-        if len(containers) == 1:\n-            # the usual "all from one folder" case can be optimized\n-            folder = list(containers.values())[0]\n-            if getattr(aq_base(folder), \'getOrdering\', None):\n-                ids = folder.getOrdering().idsInOrder()\n-            else:\n-                # site root or old folders\n-                ids = folder.objectIds()\n-            for idx, id in enumerate(ids):\n-                rid = rids.get(id)\n-                if rid:\n-                    pos[rid] = idx\n-            return pos\n-        else:\n-            # otherwise the entire map needs to be constructed...\n-            for rid, container, id in items:\n-                if getattr(aq_base(container), \'getObjectPosition\', None):\n-                    pos[rid] = container.getObjectPosition(id)\n-                else:\n-                    # fallback for unordered folders\n-                    pos[rid] = 0\n-            return pos\n-\n-\n-manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n-\n-\n-def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None,\n-    URL3=None):\n-    """ add a fake gopip index """\n-    return self.manage_addIndex(\n-        identifier,\n-        \'GopipIndex\',\n-        REQUEST=REQUEST,\n-        RESPONSE=RESPONSE,\n-        URL1=URL3\n-    )\ndiff --git a/src/plone/app/folder/tests/test_integration.py b/src/plone/app/folder/tests/test_integration.py\nindex cba64d1..ee74f27 100644\n--- a/src/plone/app/folder/tests/test_integration.py\n+++ b/src/plone/app/folder/tests/test_integration.py\n@@ -17,14 +17,3 @@ def testCreateFolder(self):\n         self.assertEqual(self.folder[\'foo\'].getPortalTypeName(), \'Folder\')\n         from plone.app.folder.base import BaseBTreeFolder\n         self.failUnless(isinstance(self.folder[\'foo\'], BaseBTreeFolder))\n-\n-    def testGetObjPositionInParentIndex(self):\n-        from plone.app.folder.nogopip import GopipIndex\n-        catalog = self.portal.portal_catalog\n-        self.failUnless(\'getObjPositionInParent\' in catalog.indexes())\n-        self.failUnless(\n-            isinstance(\n-                catalog.Indexes[\'getObjPositionInParent\'],\n-                GopipIndex\n-            )\n-        )\ndiff --git a/src/plone/app/folder/tests/test_nogopip.py b/src/plone/app/folder/tests/test_nogopip.py\ndeleted file mode 100644\nindex 6be64c5..0000000\n--- a/src/plone/app/folder/tests/test_nogopip.py\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-from plone.app.folder.tests.base import IntegrationTestCase\n-from plone.app.folder.tests.content import UnorderedFolder\n-from plone.app.folder.tests.layer import IntegrationLayer\n-\n-\n-class NoGopipTests(IntegrationTestCase):\n-\n-    layer = IntegrationLayer\n-\n-    def afterSetUp(self):\n-        self.setRoles([\'Manager\'])\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', \'foo\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', \'sub\')]\n-        folder.invokeFactory(\'Document\', id=\'bar2\')\n-        folder.invokeFactory(\'Document\', id=\'bar1\')\n-        folder.invokeFactory(\'Document\', id=\'bar3\')\n-        folder.invokeFactory(\'Document\', id=\'bar4\')\n-        subfolder.invokeFactory(\'Document\', id=\'bar5\')\n-\n-    def query(self, **kw):\n-        return [brain.getId for brain in self.portal.portal_catalog(\n-            sort_on=\'getObjPositionInParent\', **kw)]\n-\n-    def testSearchOneFolder(self):\n-        ids = self.query(path=dict(query=\'/plone/foo\', depth=1))\n-        self.assertEqual(ids, [\'sub\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSortDocumentsInFolder(self):\n-        ids = self.query(path=dict(query=\'/plone/foo\', depth=1), Type=\'Page\')\n-        self.assertEqual(ids, [\'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSortDocumentsInTree(self):\n-        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n-        self.assertEqual(ids, [\'bar5\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSearchUnorderedFolder(self):\n-        self.portal[\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar2\')\n-        base.invokeFactory(\'Document\', id=\'bar1\')\n-        ids = self.query(path=dict(query=\'/plone/foo1\', depth=1))\n-        self.assertEqual(ids, [\'bar2\', \'bar1\'])\n-\n-    def testSearchUnorderedFolderInFolder(self):\n-        self.portal[\'foo\'][\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar7\')\n-        base.invokeFactory(\'Document\', id=\'bar6\')\n-        ids = self.query(path=dict(query=\'/plone/foo/foo1\', depth=1))\n-        self.assertEqual(ids, [\'bar7\', \'bar6\'])\n-\n-    def testSortUnorderedFolderInTree(self):\n-        self.portal.foo[\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar7\')\n-        base.invokeFactory(\'Document\', id=\'bar6\')\n-        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n-        self.assertEqual(ids,\n-            [\'bar5\', \'bar7\', \'bar6\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n'

Repository: plone.app.folder


Branch: refs/heads/master
Date: 2018-10-02T09:39:44+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.folder/commit/b120d50d0961ac5fe07506cfe9131fda5db06a9b

move GopipIndex but don't break tests in py3_on_py2

Files changed:
A src/plone/app/folder/nogopip.py
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 42603ed..304d69e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- move GopipIndex to `plone.folder`\n+  [jmevissen, petschki]\n \n Bug fixes:\n \ndiff --git a/src/plone/app/folder/nogopip.py b/src/plone/app/folder/nogopip.py\nnew file mode 100644\nindex 0000000..4227d37\n--- /dev/null\n+++ b/src/plone/app/folder/nogopip.py\n@@ -0,0 +1,8 @@\n+# -*- coding: utf-8 -*-\n+from zope.deferredimport import deprecated\n+\n+\n+deprecated(\n+    "Please import from plone.folder.nogopip",\n+    GopipIndex=\'plone.folder.nogopip:GopipIndex\',\n+)\n\\ No newline at end of file\n'

Repository: plone.app.folder


Branch: refs/heads/master
Date: 2018-10-02T09:41:09+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.folder/commit/d1be80d723c974cac8c7138697dcda6d83c7cb7b

Merge pull request #16 from plone/move_gopipindex

Move gopipindex from plone.app.folder to plone.folder

Files changed:
M CHANGES.rst
M src/plone/app/folder/__init__.py
M src/plone/app/folder/nogopip.py
M src/plone/app/folder/tests/test_integration.py
D src/plone/app/folder/dtml/addGopipIndex.dtml
D src/plone/app/folder/tests/test_nogopip.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 80fa6e8..080200e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- move GopipIndex to `plone.folder`\n+  [jmevissen, petschki]\n \n Bug fixes:\n \ndiff --git a/src/plone/app/folder/__init__.py b/src/plone/app/folder/__init__.py\nindex 6775535..6f8a008 100644\n--- a/src/plone/app/folder/__init__.py\n+++ b/src/plone/app/folder/__init__.py\n@@ -36,13 +36,3 @@ def initialize(context):\n                 extra_constructors=(constructor,),\n                 fti=(fti,),\n             ).initialize(context)\n-\n-    from plone.app.folder import nogopip\n-\n-    context.registerClass(\n-        nogopip.GopipIndex,\n-        permission=\'Add Pluggable Index\',\n-        constructors=(nogopip.manage_addGopipForm,\n-                      nogopip.manage_addGopipIndex),\n-        icon=\'www/index.gif\',\n-        visibility=None)\ndiff --git a/src/plone/app/folder/dtml/addGopipIndex.dtml b/src/plone/app/folder/dtml/addGopipIndex.dtml\ndeleted file mode 100644\nindex 154f03d..0000000\n--- a/src/plone/app/folder/dtml/addGopipIndex.dtml\n+++ /dev/null\n@@ -1,44 +0,0 @@\n-<dtml-var manage_page_header>\n-<dtml-var "manage_form_title(this(), _, form_title=\'Add GopipIndex\')">\n-\n-<p class="form-help">\n-  A <em>GopipIndex</em> fakes the formerly used "getObjPositionInParent" index\n-  by retrieving the necessary information directly from the search results\'\n-  containers.  It works as a drop-in replacement and makes expensive indexing\n-  of each item\'s position unnecessary.\n-</p>\n-\n-<form action="manage_addGopipIndex" method="post" enctype="multipart/form-data">\n-  <table cellspacing="0" cellpadding="2" border="0">\n-    <tr>\n-      <td align="left" valign="top">\n-        <div class="form-label">\n-          Id\n-        </div>\n-      </td>\n-      <td align="left" valign="top">\n-        <input type="text" name="identifier" size="40">\n-      </td>\n-    </tr>\n-    <tr>\n-      <td align="left" valign="top">\n-        <div class="form-optional">\n-          Type\n-        </div>\n-      </td>\n-      <td align="left" valign="top">\n-        GopipIndex\n-      </td>\n-    </tr>\n-    <tr>\n-      <td align="left" valign="top"></td>\n-      <td align="left" valign="top">\n-        <div class="form-element">\n-          <input class="form-element" type="submit" name="submit" value=" Add ">\n-        </div>\n-      </td>\n-    </tr>\n-  </table>\n-</form>\n-\n-<dtml-var manage_page_footer>\ndiff --git a/src/plone/app/folder/nogopip.py b/src/plone/app/folder/nogopip.py\nindex 6affabf..4227d37 100644\n--- a/src/plone/app/folder/nogopip.py\n+++ b/src/plone/app/folder/nogopip.py\n@@ -1,123 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n-from App.special_dtml import DTMLFile\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.PluginIndexes.interfaces import IPluggableIndex, ISortIndex\n-from inspect import currentframe\n-from logging import getLogger\n-from zope.component import getUtility\n-from zope.interface import implementer\n+from zope.deferredimport import deprecated\n \n-logger = getLogger(__name__)\n \n-\n-@implementer(IPluggableIndex)\n-class StubIndex(SimpleItem):\n-    """ stub catalog index doing nothing """\n-\n-    def __init__(self, id, *args, **kw):\n-        self.id = id\n-\n-    def getId(self):\n-        return self.id\n-\n-    def getEntryForObject(self, *args, **kw):\n-        return []\n-\n-    def getIndexSourceNames(self):\n-        return [self.id]\n-\n-    def index_object(self, *args, **kw):\n-        return 0\n-\n-    def unindex_object(self, *args, **kw):\n-        pass\n-\n-    def _apply_index(self, *args, **kw):\n-        return None\n-\n-    def numObjects(self):\n-        return 0\n-\n-    def clear(self):\n-        pass\n-\n-\n-@implementer(ISortIndex)\n-class GopipIndex(StubIndex):\n-    """ fake index for sorting against `getObjPositionInParent` """\n-\n-    meta_type = \'GopipIndex\'\n-    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n-\n-    keyForDocument = 42\n-\n-    def __init__(self, id, extra=None, caller=None):\n-        super(GopipIndex, self).__init__(id)\n-        self.catalog = aq_base(caller._catalog)\n-\n-    def __len__(self):\n-        # with python 2.4 returning `sys.maxint` gives:\n-        # OverflowError: __len__() should return 0 <= outcome < 2**31\n-        # so...\n-        return 2**31 - 1\n-\n-    def documentToKeyMap(self):\n-        # we need to get the containers in order to get the respective\n-        # positions of the search results, but before that we need those\n-        # results themselves.  luckily this is only ever called from\n-        # `sortResults`, so we can get it form there.  oh, and lurker\n-        # says this won\'t work in jython, though! :)\n-        rs = currentframe().f_back.f_locals[\'rs\']\n-        rids = {}\n-        items = []\n-        containers = {}\n-        getpath = self.catalog.paths.get\n-        traverse = getUtility(ISiteRoot).unrestrictedTraverse\n-        for rid in rs:\n-            path = getpath(rid)\n-            parent, id = path.rsplit(\'/\', 1)\n-            container = containers.get(parent)\n-            if container is None:\n-                containers[parent] = container = traverse(parent)\n-            rids[id] = rid              # remember in case of single folder\n-            items.append((rid, container, id))  # or else for deferred lookup\n-        pos = {}\n-        if len(containers) == 1:\n-            # the usual "all from one folder" case can be optimized\n-            folder = list(containers.values())[0]\n-            if getattr(aq_base(folder), \'getOrdering\', None):\n-                ids = folder.getOrdering().idsInOrder()\n-            else:\n-                # site root or old folders\n-                ids = folder.objectIds()\n-            for idx, id in enumerate(ids):\n-                rid = rids.get(id)\n-                if rid:\n-                    pos[rid] = idx\n-            return pos\n-        else:\n-            # otherwise the entire map needs to be constructed...\n-            for rid, container, id in items:\n-                if getattr(aq_base(container), \'getObjectPosition\', None):\n-                    pos[rid] = container.getObjectPosition(id)\n-                else:\n-                    # fallback for unordered folders\n-                    pos[rid] = 0\n-            return pos\n-\n-\n-manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n-\n-\n-def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None,\n-    URL3=None):\n-    """ add a fake gopip index """\n-    return self.manage_addIndex(\n-        identifier,\n-        \'GopipIndex\',\n-        REQUEST=REQUEST,\n-        RESPONSE=RESPONSE,\n-        URL1=URL3\n-    )\n+deprecated(\n+    "Please import from plone.folder.nogopip",\n+    GopipIndex=\'plone.folder.nogopip:GopipIndex\',\n+)\n\\ No newline at end of file\ndiff --git a/src/plone/app/folder/tests/test_integration.py b/src/plone/app/folder/tests/test_integration.py\nindex cba64d1..ee74f27 100644\n--- a/src/plone/app/folder/tests/test_integration.py\n+++ b/src/plone/app/folder/tests/test_integration.py\n@@ -17,14 +17,3 @@ def testCreateFolder(self):\n         self.assertEqual(self.folder[\'foo\'].getPortalTypeName(), \'Folder\')\n         from plone.app.folder.base import BaseBTreeFolder\n         self.failUnless(isinstance(self.folder[\'foo\'], BaseBTreeFolder))\n-\n-    def testGetObjPositionInParentIndex(self):\n-        from plone.app.folder.nogopip import GopipIndex\n-        catalog = self.portal.portal_catalog\n-        self.failUnless(\'getObjPositionInParent\' in catalog.indexes())\n-        self.failUnless(\n-            isinstance(\n-                catalog.Indexes[\'getObjPositionInParent\'],\n-                GopipIndex\n-            )\n-        )\ndiff --git a/src/plone/app/folder/tests/test_nogopip.py b/src/plone/app/folder/tests/test_nogopip.py\ndeleted file mode 100644\nindex 6be64c5..0000000\n--- a/src/plone/app/folder/tests/test_nogopip.py\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-from plone.app.folder.tests.base import IntegrationTestCase\n-from plone.app.folder.tests.content import UnorderedFolder\n-from plone.app.folder.tests.layer import IntegrationLayer\n-\n-\n-class NoGopipTests(IntegrationTestCase):\n-\n-    layer = IntegrationLayer\n-\n-    def afterSetUp(self):\n-        self.setRoles([\'Manager\'])\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', \'foo\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', \'sub\')]\n-        folder.invokeFactory(\'Document\', id=\'bar2\')\n-        folder.invokeFactory(\'Document\', id=\'bar1\')\n-        folder.invokeFactory(\'Document\', id=\'bar3\')\n-        folder.invokeFactory(\'Document\', id=\'bar4\')\n-        subfolder.invokeFactory(\'Document\', id=\'bar5\')\n-\n-    def query(self, **kw):\n-        return [brain.getId for brain in self.portal.portal_catalog(\n-            sort_on=\'getObjPositionInParent\', **kw)]\n-\n-    def testSearchOneFolder(self):\n-        ids = self.query(path=dict(query=\'/plone/foo\', depth=1))\n-        self.assertEqual(ids, [\'sub\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSortDocumentsInFolder(self):\n-        ids = self.query(path=dict(query=\'/plone/foo\', depth=1), Type=\'Page\')\n-        self.assertEqual(ids, [\'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSortDocumentsInTree(self):\n-        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n-        self.assertEqual(ids, [\'bar5\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSearchUnorderedFolder(self):\n-        self.portal[\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar2\')\n-        base.invokeFactory(\'Document\', id=\'bar1\')\n-        ids = self.query(path=dict(query=\'/plone/foo1\', depth=1))\n-        self.assertEqual(ids, [\'bar2\', \'bar1\'])\n-\n-    def testSearchUnorderedFolderInFolder(self):\n-        self.portal[\'foo\'][\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar7\')\n-        base.invokeFactory(\'Document\', id=\'bar6\')\n-        ids = self.query(path=dict(query=\'/plone/foo/foo1\', depth=1))\n-        self.assertEqual(ids, [\'bar7\', \'bar6\'])\n-\n-    def testSortUnorderedFolderInTree(self):\n-        self.portal.foo[\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar7\')\n-        base.invokeFactory(\'Document\', id=\'bar6\')\n-        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n-        self.assertEqual(ids,\n-            [\'bar5\', \'bar7\', \'bar6\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n'

Repository: plone.app.folder


Branch: refs/heads/master
Date: 2018-10-02T13:27:06+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.folder/commit/839fd985774c9d0e35dd07d41652fe25dd50c422

add missing deprecation paths

Files changed:
M src/plone/app/folder/nogopip.py

b'diff --git a/src/plone/app/folder/nogopip.py b/src/plone/app/folder/nogopip.py\nindex 4227d37..bfc03df 100644\n--- a/src/plone/app/folder/nogopip.py\n+++ b/src/plone/app/folder/nogopip.py\n@@ -5,4 +5,6 @@\n deprecated(\n     "Please import from plone.folder.nogopip",\n     GopipIndex=\'plone.folder.nogopip:GopipIndex\',\n+    manage_addGopipForm=\'plone.folder.nogopip:manage_addGopipForm\',\n+    manage_addGopipIndex=\'plone.folder.nogopip:manage_addGopipIndex\',\n )\n\\ No newline at end of file\n'

Repository: plone.app.folder


Branch: refs/heads/master
Date: 2018-10-02T14:30:42+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.folder/commit/e6365cef8df7358bc7b073190c05b2bc5904cb7f

Merge pull request #20 from plone/python3

Python3

Files changed:
M CHANGES.rst
M src/plone/app/folder/__init__.py
M src/plone/app/folder/nogopip.py
M src/plone/app/folder/tests/test_integration.py
D src/plone/app/folder/dtml/addGopipIndex.dtml
D src/plone/app/folder/tests/test_nogopip.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 95f2c07..cbf85a7 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,7 +10,8 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- move GopipIndex to `plone.folder`\n+  [jmevissen, petschki]\n \n Bug fixes:\n \ndiff --git a/src/plone/app/folder/__init__.py b/src/plone/app/folder/__init__.py\nindex 6775535..6f8a008 100644\n--- a/src/plone/app/folder/__init__.py\n+++ b/src/plone/app/folder/__init__.py\n@@ -36,13 +36,3 @@ def initialize(context):\n                 extra_constructors=(constructor,),\n                 fti=(fti,),\n             ).initialize(context)\n-\n-    from plone.app.folder import nogopip\n-\n-    context.registerClass(\n-        nogopip.GopipIndex,\n-        permission=\'Add Pluggable Index\',\n-        constructors=(nogopip.manage_addGopipForm,\n-                      nogopip.manage_addGopipIndex),\n-        icon=\'www/index.gif\',\n-        visibility=None)\ndiff --git a/src/plone/app/folder/dtml/addGopipIndex.dtml b/src/plone/app/folder/dtml/addGopipIndex.dtml\ndeleted file mode 100644\nindex 154f03d..0000000\n--- a/src/plone/app/folder/dtml/addGopipIndex.dtml\n+++ /dev/null\n@@ -1,44 +0,0 @@\n-<dtml-var manage_page_header>\n-<dtml-var "manage_form_title(this(), _, form_title=\'Add GopipIndex\')">\n-\n-<p class="form-help">\n-  A <em>GopipIndex</em> fakes the formerly used "getObjPositionInParent" index\n-  by retrieving the necessary information directly from the search results\'\n-  containers.  It works as a drop-in replacement and makes expensive indexing\n-  of each item\'s position unnecessary.\n-</p>\n-\n-<form action="manage_addGopipIndex" method="post" enctype="multipart/form-data">\n-  <table cellspacing="0" cellpadding="2" border="0">\n-    <tr>\n-      <td align="left" valign="top">\n-        <div class="form-label">\n-          Id\n-        </div>\n-      </td>\n-      <td align="left" valign="top">\n-        <input type="text" name="identifier" size="40">\n-      </td>\n-    </tr>\n-    <tr>\n-      <td align="left" valign="top">\n-        <div class="form-optional">\n-          Type\n-        </div>\n-      </td>\n-      <td align="left" valign="top">\n-        GopipIndex\n-      </td>\n-    </tr>\n-    <tr>\n-      <td align="left" valign="top"></td>\n-      <td align="left" valign="top">\n-        <div class="form-element">\n-          <input class="form-element" type="submit" name="submit" value=" Add ">\n-        </div>\n-      </td>\n-    </tr>\n-  </table>\n-</form>\n-\n-<dtml-var manage_page_footer>\ndiff --git a/src/plone/app/folder/nogopip.py b/src/plone/app/folder/nogopip.py\nindex 6affabf..bfc03df 100644\n--- a/src/plone/app/folder/nogopip.py\n+++ b/src/plone/app/folder/nogopip.py\n@@ -1,123 +1,10 @@\n # -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n-from App.special_dtml import DTMLFile\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.PluginIndexes.interfaces import IPluggableIndex, ISortIndex\n-from inspect import currentframe\n-from logging import getLogger\n-from zope.component import getUtility\n-from zope.interface import implementer\n+from zope.deferredimport import deprecated\n \n-logger = getLogger(__name__)\n \n-\n-@implementer(IPluggableIndex)\n-class StubIndex(SimpleItem):\n-    """ stub catalog index doing nothing """\n-\n-    def __init__(self, id, *args, **kw):\n-        self.id = id\n-\n-    def getId(self):\n-        return self.id\n-\n-    def getEntryForObject(self, *args, **kw):\n-        return []\n-\n-    def getIndexSourceNames(self):\n-        return [self.id]\n-\n-    def index_object(self, *args, **kw):\n-        return 0\n-\n-    def unindex_object(self, *args, **kw):\n-        pass\n-\n-    def _apply_index(self, *args, **kw):\n-        return None\n-\n-    def numObjects(self):\n-        return 0\n-\n-    def clear(self):\n-        pass\n-\n-\n-@implementer(ISortIndex)\n-class GopipIndex(StubIndex):\n-    """ fake index for sorting against `getObjPositionInParent` """\n-\n-    meta_type = \'GopipIndex\'\n-    manage_options = dict(label=\'Settings\', action=\'manage_main\'),\n-\n-    keyForDocument = 42\n-\n-    def __init__(self, id, extra=None, caller=None):\n-        super(GopipIndex, self).__init__(id)\n-        self.catalog = aq_base(caller._catalog)\n-\n-    def __len__(self):\n-        # with python 2.4 returning `sys.maxint` gives:\n-        # OverflowError: __len__() should return 0 <= outcome < 2**31\n-        # so...\n-        return 2**31 - 1\n-\n-    def documentToKeyMap(self):\n-        # we need to get the containers in order to get the respective\n-        # positions of the search results, but before that we need those\n-        # results themselves.  luckily this is only ever called from\n-        # `sortResults`, so we can get it form there.  oh, and lurker\n-        # says this won\'t work in jython, though! :)\n-        rs = currentframe().f_back.f_locals[\'rs\']\n-        rids = {}\n-        items = []\n-        containers = {}\n-        getpath = self.catalog.paths.get\n-        traverse = getUtility(ISiteRoot).unrestrictedTraverse\n-        for rid in rs:\n-            path = getpath(rid)\n-            parent, id = path.rsplit(\'/\', 1)\n-            container = containers.get(parent)\n-            if container is None:\n-                containers[parent] = container = traverse(parent)\n-            rids[id] = rid              # remember in case of single folder\n-            items.append((rid, container, id))  # or else for deferred lookup\n-        pos = {}\n-        if len(containers) == 1:\n-            # the usual "all from one folder" case can be optimized\n-            folder = list(containers.values())[0]\n-            if getattr(aq_base(folder), \'getOrdering\', None):\n-                ids = folder.getOrdering().idsInOrder()\n-            else:\n-                # site root or old folders\n-                ids = folder.objectIds()\n-            for idx, id in enumerate(ids):\n-                rid = rids.get(id)\n-                if rid:\n-                    pos[rid] = idx\n-            return pos\n-        else:\n-            # otherwise the entire map needs to be constructed...\n-            for rid, container, id in items:\n-                if getattr(aq_base(container), \'getObjectPosition\', None):\n-                    pos[rid] = container.getObjectPosition(id)\n-                else:\n-                    # fallback for unordered folders\n-                    pos[rid] = 0\n-            return pos\n-\n-\n-manage_addGopipForm = DTMLFile(\'dtml/addGopipIndex\', globals())\n-\n-\n-def manage_addGopipIndex(self, identifier, REQUEST=None, RESPONSE=None,\n-    URL3=None):\n-    """ add a fake gopip index """\n-    return self.manage_addIndex(\n-        identifier,\n-        \'GopipIndex\',\n-        REQUEST=REQUEST,\n-        RESPONSE=RESPONSE,\n-        URL1=URL3\n-    )\n+deprecated(\n+    "Please import from plone.folder.nogopip",\n+    GopipIndex=\'plone.folder.nogopip:GopipIndex\',\n+    manage_addGopipForm=\'plone.folder.nogopip:manage_addGopipForm\',\n+    manage_addGopipIndex=\'plone.folder.nogopip:manage_addGopipIndex\',\n+)\n\\ No newline at end of file\ndiff --git a/src/plone/app/folder/tests/test_integration.py b/src/plone/app/folder/tests/test_integration.py\nindex cba64d1..ee74f27 100644\n--- a/src/plone/app/folder/tests/test_integration.py\n+++ b/src/plone/app/folder/tests/test_integration.py\n@@ -17,14 +17,3 @@ def testCreateFolder(self):\n         self.assertEqual(self.folder[\'foo\'].getPortalTypeName(), \'Folder\')\n         from plone.app.folder.base import BaseBTreeFolder\n         self.failUnless(isinstance(self.folder[\'foo\'], BaseBTreeFolder))\n-\n-    def testGetObjPositionInParentIndex(self):\n-        from plone.app.folder.nogopip import GopipIndex\n-        catalog = self.portal.portal_catalog\n-        self.failUnless(\'getObjPositionInParent\' in catalog.indexes())\n-        self.failUnless(\n-            isinstance(\n-                catalog.Indexes[\'getObjPositionInParent\'],\n-                GopipIndex\n-            )\n-        )\ndiff --git a/src/plone/app/folder/tests/test_nogopip.py b/src/plone/app/folder/tests/test_nogopip.py\ndeleted file mode 100644\nindex 6be64c5..0000000\n--- a/src/plone/app/folder/tests/test_nogopip.py\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-from plone.app.folder.tests.base import IntegrationTestCase\n-from plone.app.folder.tests.content import UnorderedFolder\n-from plone.app.folder.tests.layer import IntegrationLayer\n-\n-\n-class NoGopipTests(IntegrationTestCase):\n-\n-    layer = IntegrationLayer\n-\n-    def afterSetUp(self):\n-        self.setRoles([\'Manager\'])\n-        folder = self.portal[self.portal.invokeFactory(\'Folder\', \'foo\')]\n-        subfolder = folder[folder.invokeFactory(\'Folder\', \'sub\')]\n-        folder.invokeFactory(\'Document\', id=\'bar2\')\n-        folder.invokeFactory(\'Document\', id=\'bar1\')\n-        folder.invokeFactory(\'Document\', id=\'bar3\')\n-        folder.invokeFactory(\'Document\', id=\'bar4\')\n-        subfolder.invokeFactory(\'Document\', id=\'bar5\')\n-\n-    def query(self, **kw):\n-        return [brain.getId for brain in self.portal.portal_catalog(\n-            sort_on=\'getObjPositionInParent\', **kw)]\n-\n-    def testSearchOneFolder(self):\n-        ids = self.query(path=dict(query=\'/plone/foo\', depth=1))\n-        self.assertEqual(ids, [\'sub\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSortDocumentsInFolder(self):\n-        ids = self.query(path=dict(query=\'/plone/foo\', depth=1), Type=\'Page\')\n-        self.assertEqual(ids, [\'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSortDocumentsInTree(self):\n-        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n-        self.assertEqual(ids, [\'bar5\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n-    def testSearchUnorderedFolder(self):\n-        self.portal[\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar2\')\n-        base.invokeFactory(\'Document\', id=\'bar1\')\n-        ids = self.query(path=dict(query=\'/plone/foo1\', depth=1))\n-        self.assertEqual(ids, [\'bar2\', \'bar1\'])\n-\n-    def testSearchUnorderedFolderInFolder(self):\n-        self.portal[\'foo\'][\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar7\')\n-        base.invokeFactory(\'Document\', id=\'bar6\')\n-        ids = self.query(path=dict(query=\'/plone/foo/foo1\', depth=1))\n-        self.assertEqual(ids, [\'bar7\', \'bar6\'])\n-\n-    def testSortUnorderedFolderInTree(self):\n-        self.portal.foo[\'foo1\'] = UnorderedFolder(\'foo1\')\n-        base = self.portal.foo.foo1\n-        base.reindexObject(idxs=[\'path\', \'getObjPositionInParent\'])\n-        base.invokeFactory(\'Document\', id=\'bar7\')\n-        base.invokeFactory(\'Document\', id=\'bar6\')\n-        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n-        self.assertEqual(ids,\n-            [\'bar5\', \'bar7\', \'bar6\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n-\n'

