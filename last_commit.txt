Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-11-17T10:28:39+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/bfbcdd5abaee376b5b84448d52ce428a2597917f

make imports work in python3

Files changed:
M CHANGES.rst
M Products/CMFPlone/MigrationTool.py
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/browser/atd.py
M Products/CMFPlone/controlpanel/browser/resourceregistry.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
M Products/CMFPlone/patches/z3c_form.py
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/browser/mixins.py
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/tests/dummy.py
M Products/CMFPlone/tests/messages.txt
M Products/CMFPlone/tests/testBrowserAdmin.py
M Products/CMFPlone/tests/testCSRFProtection.py
M Products/CMFPlone/tests/testControlPanelScripts.py
M Products/CMFPlone/tests/testCookieAuth.py
M Products/CMFPlone/tests/testWebDAV.py
M Products/CMFPlone/tests/test_utils.py
M Products/CMFPlone/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9dec15495..8a771c84b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -24,6 +24,9 @@ Breaking changes:
 
 New Features:
 
+- Fix imports to work with Python 3.
+  [pbauer]
+
 - Mockup update.
   [thet]
 
diff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py
index e1b871627..a6b412e2e 100644
--- a/Products/CMFPlone/MigrationTool.py
+++ b/Products/CMFPlone/MigrationTool.py
@@ -1,27 +1,24 @@
 # -*- coding: utf-8 -*-
-import logging
-import sys
-from StringIO import StringIO
-
-import pkg_resources
-import transaction
-from zope.interface import implementer
-
 from AccessControl import ClassSecurityInfo
 from AccessControl.requestmethod import postonly
 from App.class_init import InitializeClass
 from App.config import getConfiguration
 from OFS.SimpleItem import SimpleItem
-from ZODB.POSException import ConflictError
-
+from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import registerToolInterface
 from Products.CMFCore.utils import UniqueObject
-from Products.CMFCore.permissions import ManagePortal
-
 from Products.CMFPlone.factory import _DEFAULT_PROFILE
 from Products.CMFPlone.interfaces import IMigrationTool
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
+from six import StringIO
+from ZODB.POSException import ConflictError
+from zope.interface import implementer
+
+import logging
+import pkg_resources
+import sys
+import transaction
 
 logger = logging.getLogger('plone.app.upgrade')
 _upgradePaths = {}
diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py
index afab951fd..74310b1d6 100644
--- a/Products/CMFPlone/PloneTool.py
+++ b/Products/CMFPlone/PloneTool.py
@@ -43,6 +43,7 @@
 from Products.CMFPlone.utils import safe_unicode
 from Products.CMFPlone.utils import transaction_note
 from Products.statusmessages.interfaces import IStatusMessage
+from six.moves.urllib import parse
 from types import UnicodeType
 from ZODB.POSException import ConflictError
 from zope.component import getUtility
@@ -54,7 +55,6 @@
 import re
 import sys
 import transaction
-import urlparse
 
 
 _marker = utils._marker
@@ -411,14 +411,14 @@ def urlparse(self, url):
         Since Python 2.6: urlparse now returns a ParseResult object.
         We just need the tuple form which is tuple(result).
         """
-        return tuple(urlparse.urlparse(url))
+        return tuple(parse.urlparse(url))
 
     @security.public
     def urlunparse(self, url_tuple):
         """Puts a url back together again, in the manner that
         urlparse breaks it.
         """
-        return urlparse.urlunparse(url_tuple)
+        return parse.urlunparse(url_tuple)
 
     # Enable scripts to get the string value of an exception even if the
     # thrown exception is a string and not a subclass of Exception.
diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index e77e07483..f94132ba9 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -9,8 +9,9 @@
 from Products.CMFPlone.interfaces import ILoginSchema
 from Products.CMFPlone.PloneBaseTool import PloneBaseTool
 from Products.CMFPlone.patches.gtbn import rewrap_in_request_container
-from urlparse import urlparse, urljoin
+from six.moves.urllib import parse
 from zope.component import getUtility
+
 import re
 
 
@@ -46,7 +47,7 @@ def isURLInPortal(self, url, context=None):
 
         p_url = self()
 
-        _, u_host, u_path, _, _, _ = urlparse(url)
+        _, u_host, u_path, _, _, _ = parse.urlparse(url)
         if not u_host and not u_path.startswith('/'):
             if context is None:
                 return True  # old behavior
@@ -60,7 +61,7 @@ def isURLInPortal(self, url, context=None):
             useurl += '/'
 
         # urljoin to current url to get an absolute path
-        _, u_host, u_path, _, _, _ = urlparse(urljoin(useurl, url))
+        _, u_host, u_path, _, _, _ = parse.urlparse(parse.urljoin(useurl, url))
 
         # normalise to end with a '/' so /foobar is not considered within /foo
         if not u_path:
@@ -69,7 +70,7 @@ def isURLInPortal(self, url, context=None):
             u_path = normpath(u_path)
             if not u_path.endswith('/'):
                 u_path += '/'
-        _, host, path, _, _, _ = urlparse(p_url)
+        _, host, path, _, _, _ = parse.urlparse(p_url)
         if not path.endswith('/'):
             path += '/'
         if host == u_host and u_path.startswith(path):
@@ -78,7 +79,7 @@ def isURLInPortal(self, url, context=None):
         registry = getUtility(IRegistry)
         settings = registry.forInterface(ILoginSchema, prefix='plone')
         for external_site in settings.allow_external_login_sites:
-            _, host, path, _, _, _ = urlparse(external_site)
+            _, host, path, _, _, _ = parse.urlparse(external_site)
             if not path.endswith('/'):
                 path += '/'
             if host == u_host and u_path.startswith(path):
diff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py
index e359a79d0..481f2e9e5 100644
--- a/Products/CMFPlone/__init__.py
+++ b/Products/CMFPlone/__init__.py
@@ -70,7 +70,7 @@ def initialize(context):
     this_module.Batch = Batch
 
     ModuleSecurityInfo('StringIO').declarePublic('StringIO')
-    from StringIO import StringIO
+    from six import StringIO
     allow_class(StringIO)
 
     # Make Unauthorized importable TTW
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index bfc324a46..f711412ce 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -18,8 +18,7 @@
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.authenticator import check as checkCSRF
 from plone.protect.interfaces import IDisableCSRFProtection
-from urlparse import urljoin
-from urlparse import urlparse
+from six.moves.urllib import parse
 from zope.component import adapts
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import getMultiAdapter
@@ -97,10 +96,10 @@ class RootLoginRedirect(BrowserView):
     def __call__(self, came_from=None):
         if came_from is not None:
             # see if this is a relative url or an absolute
-            if len(urlparse(came_from)[1]) == 0:
+            if len(parse.urlparse(came_from)[1]) == 0:
                 # No host specified, so url is relative.  Get an absolute url.
                 # Note: '\\domain.org' is not recognised as host, which is good.
-                came_from = urljoin(self.context.absolute_url() + '/', came_from)
+                came_from = parse.urljoin(self.context.absolute_url() + '/', came_from)
             elif not came_from.startswith(self.context.absolute_url()):
                 # Note: we cannot use portal_url.isURLInPortal here, because we are
                 # not in a Plone portal, but in the Zope root.
diff --git a/Products/CMFPlone/browser/atd.py b/Products/CMFPlone/browser/atd.py
index bb23e93ea..028a25e02 100644
--- a/Products/CMFPlone/browser/atd.py
+++ b/Products/CMFPlone/browser/atd.py
@@ -2,7 +2,7 @@
 from Products.CMFCore.utils import getToolByName
 from zope.component import getUtility
 from plone.registry.interfaces import IRegistry
-import httplib
+from six.moves import http_client
 from Products.CMFPlone.interfaces import ITinyMCESchema
 from Products.CMFPlone.interfaces.atd import IATDProxyView
 from zope.interface import implementer
@@ -29,12 +29,12 @@ def checkDocument(self):
 
         data = self.request._file.read()
         service_url = settings.libraries_atd_service_url
-        service = httplib.HTTPConnection(service_url)
+        service = http_client.HTTPConnection(service_url)
         service.request("POST", "/checkDocument", data)
 
         response = service.getresponse()
 
-        if response.status != httplib.OK:
+        if response.status != http_client.OK:
             service.close()
             raise Exception('Unexpected response code from AtD service %d' %
                             response.status)
diff --git a/Products/CMFPlone/controlpanel/browser/resourceregistry.py b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
index 9fda35ac1..71e92d290 100644
--- a/Products/CMFPlone/controlpanel/browser/resourceregistry.py
+++ b/Products/CMFPlone/controlpanel/browser/resourceregistry.py
@@ -1,26 +1,26 @@
 # -*- coding:utf-8
 from datetime import datetime
-import json
-import re
-from urlparse import urlparse
-
+from plone.memoize.view import memoize
+from plone.registry import field
+from plone.registry.interfaces import IRegistry
+from plone.registry.record import Record
+from plone.resource.interfaces import IResourceDirectory
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
-from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
 from Products.CMFPlone.resources import add_bundle_on_request
+from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
 from Products.CMFPlone.resources.browser.configjs import RequireJsView
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.statusmessages.interfaces import IStatusMessage
-from plone.memoize.view import memoize
-from plone.registry import field
-from plone.registry.interfaces import IRegistry
-from plone.registry.record import Record
-from plone.resource.interfaces import IResourceDirectory
-import posixpath
+from six.moves.urllib import parse
 from zExceptions import NotFound
 from zope.component import getUtility
 
+import json
+import posixpath
+import re
+
 
 CSS_URL_REGEX = re.compile('url\(([^)]+)\)')
 
@@ -97,8 +97,8 @@ def _rewrite_url(self, css_url, asset_url):
         http://stackoverflow.com/questions/7469573/how-to-construct-relative-url-given-two-absolute-urls-in-python
 
         """
-        base = urlparse(css_url)
-        target = urlparse(asset_url)
+        base = parse.urlparse(css_url)
+        target = parse.urlparse(asset_url)
         if base.netloc != target.netloc:
             return asset_url
         base_dir = '.' + posixpath.dirname(base.path)
@@ -272,7 +272,7 @@ def less_build_config(self):
             for resource in bundle_obj.resources:
                 if resource in resources:
                     for css in resources[resource].css:
-                        url = urlparse(css)
+                        url = parse.urlparse(css)
                         if url.netloc == '':
                             # Local
                             src = "%s/%s" % (site_url, css)
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py
index 4cc51192e..131acaef2 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py
@@ -1,12 +1,13 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.interfaces import ISiteSchema
-from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
-from StringIO import StringIO
 from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
 from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
+from Products.CMFPlone.interfaces import ISiteSchema
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from six import StringIO
 from zope.component import getMultiAdapter
 from zope.component import getUtility
+
 import unittest
 
 # Red pixel with filename pixel.png
diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
index feab41e6e..b0e29890d 100644
--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
@@ -4,18 +4,17 @@
    comes with its own test fixture. Would be nice to refactor that to use the
    CMFPlone fixture at some point.
 """
-from cStringIO import StringIO
-from urllib import urlencode
+from plone.app import testing
+from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
+from plone.app.testing.bbb import PloneTestCaseFixture
 from plone.protect.authenticator import createToken
+from Products.CMFCore.utils import getToolByName
+from six import StringIO
+from six.moves.urllib.parse import urlencode
 
 import re
 import transaction
 
-from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase
-from plone.app.testing.bbb import PloneTestCaseFixture
-from plone.app import testing
-from Products.CMFCore.utils import getToolByName
-
 
 class ControlPanelFixture(PloneTestCaseFixture):
 
diff --git a/Products/CMFPlone/patches/z3c_form.py b/Products/CMFPlone/patches/z3c_form.py
index 0b10250ce..2cf7c16a4 100644
--- a/Products/CMFPlone/patches/z3c_form.py
+++ b/Products/CMFPlone/patches/z3c_form.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 # This is from Products.PloneHotfix20160830.
-from urlparse import urlparse
+from six.moves.urllib.parse import urlparse
 from z3c.form import widget
 
 
diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py
index 696ed87bf..0a6171b3b 100644
--- a/Products/CMFPlone/resources/browser/combine.py
+++ b/Products/CMFPlone/resources/browser/combine.py
@@ -6,7 +6,7 @@
 from plone.resource.interfaces import IResourceDirectory
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
-from StringIO import StringIO
+from six import StringIO
 from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component import queryUtility
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index 3e67ab14d..c885df657 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -9,8 +9,8 @@
 from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
 from Products.CMFPlone.resources.browser.combine import combine_bundles
 from scss import Compiler
+from six import StringIO
 from slimit import minify
-from StringIO import StringIO
 from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component.hooks import getSite
diff --git a/Products/CMFPlone/resources/browser/mixins.py b/Products/CMFPlone/resources/browser/mixins.py
index 5cfe2e5be..254695372 100644
--- a/Products/CMFPlone/resources/browser/mixins.py
+++ b/Products/CMFPlone/resources/browser/mixins.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
 from plone.registry.interfaces import IRegistry
+from six.moves.urllib.parse import urlparse
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.utils import SafeFormatter
 from Products.Five.browser import BrowserView
-from urlparse import urlparse
 from zope.component import getMultiAdapter
 from zope.component import getUtility
 
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index 81167c678..45589ce96 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -2,8 +2,7 @@
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
 from Products.CMFPlone.utils import get_top_request
-from urllib import quote
-from urlparse import urlparse
+from six.moves.urllib import parse
 from zope.component import getMultiAdapter
 
 
@@ -24,7 +23,7 @@ def _add_resources(
             data = resources.get(resource, None)
             if data is None or not data.js:
                 continue
-            url = urlparse(data.js)
+            url = parse.urlparse(data.js)
             if url.netloc == '':
                 # Local
                 src = '{0}/{1}'.format(self.site_url, data.js)
@@ -74,14 +73,14 @@ def get_data(self, bundle, result):
                 js_location = '{0}/++plone++{1}/++unique++{2}/{3}'.format(
                     self.site_url,
                     resource_name,
-                    quote(str(bundle.last_compilation)),
+                    parse.quote(str(bundle.last_compilation)),
                     resource_filepath
                 )
             else:
                 js_location = '{0}/{1}?version={2}'.format(
                     self.site_url,
                     bundle.jscompilation,
-                    quote(str(bundle.last_compilation))
+                    parse.quote(str(bundle.last_compilation))
                 )
             result.append({
                 'bundle': bundle.name,
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index 1a7528be8..2c34ceed0 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -3,8 +3,7 @@
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceBase
 from Products.CMFPlone.utils import get_top_request
-from urllib import quote
-from urlparse import urlparse
+from six.moves.urllib import parse
 
 
 class StylesBase(ResourceBase):
@@ -16,7 +15,7 @@ def get_urls(self, style, bundle):
         Extracts the urls for the specific resource
         """
         for css in style.css:
-            url = urlparse(css)
+            url = parse.urlparse(css)
             if url.netloc == '':
                 # Local
                 src = "%s/%s" % (self.site_url, css)
@@ -66,14 +65,14 @@ def get_data(self, bundle, result):
                     css_location = '%s/++plone++%s/++unique++%s/%s' % (
                         self.site_url,
                         resource_name,
-                        quote(str(bundle.last_compilation)),
+                        parse.quote(str(bundle.last_compilation)),
                         resource_filepath
                     )
                 else:
                     css_location = '%s/%s?version=%s' % (
                         self.site_url,
                         bundle.csscompilation,
-                        quote(str(bundle.last_compilation))
+                        parse.quote(str(bundle.last_compilation))
                     )
                 result.append({
                     'bundle': bundle.name,
@@ -126,7 +125,7 @@ def styles(self):
         if self.diazo_development_css and self.development is True:
             origin = self.diazo_development_css
         if origin:
-            url = urlparse(origin)
+            url = parse.urlparse(origin)
             if url.netloc == '':
                 # Local
                 src = "%s/%s" % (self.site_url, origin)
diff --git a/Products/CMFPlone/tests/dummy.py b/Products/CMFPlone/tests/dummy.py
index b88d60702..31841fccd 100644
--- a/Products/CMFPlone/tests/dummy.py
+++ b/Products/CMFPlone/tests/dummy.py
@@ -2,23 +2,18 @@
 #
 # Helper objects for the Plone test suite
 #
-
-# $Id$
-
-from StringIO import StringIO
-import os
-
-from zope.interface import implementer
-from zope.interface import Interface
-
-from Products.CMFPlone.interfaces import INonStructuralFolder
-from Products.CMFPlone.interfaces import IWorkflowChain
-
 from ComputedAttribute import ComputedAttribute
-from OFS.SimpleItem import SimpleItem
 from OFS.Folder import Folder as SimpleFolder
+from OFS.SimpleItem import SimpleItem
+from Products.CMFPlone.interfaces import INonStructuralFolder
+from Products.CMFPlone.interfaces import IWorkflowChain
+from six import StringIO
+from zope.interface import implementer
+from zope.interface import Interface
 from ZPublisher.HTTPRequest import FileUpload
 
+import os
+
 
 TEXT = 'file data'
 UTEXT = u'file data'
diff --git a/Products/CMFPlone/tests/messages.txt b/Products/CMFPlone/tests/messages.txt
index f6f691110..52e471cec 100644
--- a/Products/CMFPlone/tests/messages.txt
+++ b/Products/CMFPlone/tests/messages.txt
@@ -38,7 +38,7 @@ And at last there is the possibility of variable substition:
 
   >>> msg.mapping
   {u'name': u'Plone'}
-  
+
 Messages with translation service set up
 ----------------------------------------
 
@@ -91,7 +91,7 @@ Try simple interpolation:
   u'You have 42 new mails.'
 
 And now try the real translation:
-  
+
   >>> translate(note, target_language='de')
   u'Sie haben 42 neue E-Mails.'
 
@@ -108,7 +108,7 @@ We use the Messages defined earlier.
 
   >>> msg
   u'This is a message.'
-  
+
   >>> note
   u'mail-notification'
 
@@ -122,7 +122,7 @@ to get the parsed and interpreted text.
 
   >>> from zope.tal.htmltalparser import HTMLTALParser
   >>> from zope.tal.talinterpreter import TALInterpreter
-  >>> from StringIO import StringIO
+  >>> from six import StringIO
 
   >>> def compile(source):
   ...     parser = HTMLTALParser()
diff --git a/Products/CMFPlone/tests/testBrowserAdmin.py b/Products/CMFPlone/tests/testBrowserAdmin.py
index 3c42aafe2..7c816b39e 100644
--- a/Products/CMFPlone/tests/testBrowserAdmin.py
+++ b/Products/CMFPlone/tests/testBrowserAdmin.py
@@ -9,7 +9,6 @@
 from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin
 
 import os
-import urlparse
 
 
 class TestPloneRootLoginURL(PloneTestCase.FunctionalTestCase):
diff --git a/Products/CMFPlone/tests/testCSRFProtection.py b/Products/CMFPlone/tests/testCSRFProtection.py
index fa4dc5689..92b4180d5 100644
--- a/Products/CMFPlone/tests/testCSRFProtection.py
+++ b/Products/CMFPlone/tests/testCSRFProtection.py
@@ -5,7 +5,7 @@
 from plone.app.testing.bbb import PloneTestCase
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.authenticator import AuthenticatorView
-from StringIO import StringIO
+from six import StringIO
 from zope.component import queryUtility
 
 
diff --git a/Products/CMFPlone/tests/testControlPanelScripts.py b/Products/CMFPlone/tests/testControlPanelScripts.py
index fc86bc467..925109509 100644
--- a/Products/CMFPlone/tests/testControlPanelScripts.py
+++ b/Products/CMFPlone/tests/testControlPanelScripts.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
+from DateTime import DateTime
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-from plone.app.testing import SITE_OWNER_NAME
-from plone.app.testing import SITE_OWNER_PASSWORD
 from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
+from six import StringIO
 from zExceptions import Forbidden
-from cStringIO import StringIO
-from DateTime import DateTime
 
 
 class TestNoGETControlPanel(PloneTestCase):
diff --git a/Products/CMFPlone/tests/testCookieAuth.py b/Products/CMFPlone/tests/testCookieAuth.py
index 733136eb2..201a0ae58 100644
--- a/Products/CMFPlone/tests/testCookieAuth.py
+++ b/Products/CMFPlone/tests/testCookieAuth.py
@@ -2,8 +2,8 @@
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing.bbb import PloneTestCase
-from urllib import urlencode
-from urlparse import urlparse
+from six.moves.urllib import parse
+
 import base64
 
 
@@ -24,7 +24,7 @@ def testAutoLoginPage(self):
 
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(self.portal_url))
-        self.assertTrue(urlparse(location)[2].endswith('/require_login'))
+        self.assertTrue(parse.urlparse(location)[2].endswith('/require_login'))
 
     def testInsufficientPrivileges(self):
         # Should send us to login_form
@@ -33,7 +33,7 @@ def testInsufficientPrivileges(self):
 
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(self.portal_url))
-        self.assertTrue(urlparse(location)[2].endswith('/require_login'))
+        self.assertTrue(parse.urlparse(location)[2].endswith('/require_login'))
 
     def testSetSessionCookie(self):
         # The __ac cookie should be set for the session only
@@ -41,7 +41,7 @@ def testSetSessionCookie(self):
                 '__ac_password': TEST_USER_PASSWORD}
 
         response = self.publish(self.portal_path + '/logged_in',
-                                env={'QUERY_STRING': urlencode(form)})
+                                env={'QUERY_STRING': parse.urlencode(form)})
 
         self.assertEqual(response.getStatus(), 200)
 
diff --git a/Products/CMFPlone/tests/testWebDAV.py b/Products/CMFPlone/tests/testWebDAV.py
index be23b9265..536fb2012 100644
--- a/Products/CMFPlone/tests/testWebDAV.py
+++ b/Products/CMFPlone/tests/testWebDAV.py
@@ -6,7 +6,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.tests import dummy
 from Products.CMFPlone.tests import PloneTestCase
-from StringIO import StringIO
+from six import StringIO
 
 
 html = """\
diff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py
index 383e11282..a505995f9 100644
--- a/Products/CMFPlone/tests/test_utils.py
+++ b/Products/CMFPlone/tests/test_utils.py
@@ -80,8 +80,8 @@ def test_get_top_site_from_url(self):
         PloneSite and SubSite implement ISite
         """
         from plone.app.content.browser.contents import get_top_site_from_url
+        from six.moves.urllib.parse import urlparse
         from zope.component.interfaces import ISite
-        from urlparse import urlparse
 
         class MockContext(object):
             vh_url = 'http://nohost'
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 87597cad2..881d1cec3 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -30,7 +30,7 @@
 from Products.CMFPlone.log import log
 from Products.CMFPlone.log import log_deprecated
 from Products.CMFPlone.log import log_exc
-from urlparse import urlparse
+from six.moves.urllib.parse import urlparse
 from webdav.interfaces import IWriteLock
 from zope import schema
 from zope.component import getMultiAdapter


