Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:12:47+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/3049dbf10392f5a083d6f4bae0202a6f6c4bbcca

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/2ed8f544.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..e2b4515\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2ed8f544"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/2ed8f544.internal b/news/2ed8f544.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2ed8f544.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..cb6e969\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.uuid {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.uuid {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:13:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/2ef913308e5fe0152ffc4fd146ab334986777eb8

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/uuid/__init__.py
M plone/uuid/adapter.py
M plone/uuid/browser.py
M plone/uuid/generator.py
M plone/uuid/handlers.py
M plone/uuid/interfaces.py
M plone/uuid/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/uuid/__init__.py b/plone/uuid/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/uuid/__init__.py\n+++ b/plone/uuid/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/uuid/adapter.py b/plone/uuid/adapter.py\nindex dcc2946..c72f76d 100644\n--- a/plone/uuid/adapter.py\n+++ b/plone/uuid/adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid import interfaces\n from zope import component\n from zope import interface\n@@ -12,7 +11,7 @@ def attributeUUID(context):\n \n @interface.implementer(interfaces.IMutableUUID)\n @component.adapter(interfaces.IAttributeUUID)\n-class MutableAttributeUUID(object):\n+class MutableAttributeUUID:\n \n     def __init__(self, context):\n         self.context = context\ndiff --git a/plone/uuid/browser.py b/plone/uuid/browser.py\nindex 2052ada..671ede8 100644\n--- a/plone/uuid/browser.py\n+++ b/plone/uuid/browser.py\n@@ -1,14 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import IUUID\n from zope.publisher.browser import BrowserView\n \n import sys\n \n \n-if sys.version_info >= (3,):\n-    text_type = str\n-else:\n-    text_type = unicode\n+text_type = str\n \n \n class UUIDView(BrowserView):\n@@ -16,4 +12,4 @@ class UUIDView(BrowserView):\n     """\n \n     def __call__(self):\n-        return text_type(IUUID(self.context, u""))\n+        return text_type(IUUID(self.context, ""))\ndiff --git a/plone/uuid/generator.py b/plone/uuid/generator.py\nindex 8387122..9228425 100644\n--- a/plone/uuid/generator.py\n+++ b/plone/uuid/generator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import IUUIDGenerator\n from zope.deprecation import deprecate\n from zope.interface import implementer\n@@ -7,7 +6,7 @@\n \n \n @implementer(IUUIDGenerator)\n-class UUID4Generator(object):\n+class UUID4Generator:\n     """Default UUID implementation.\n \n     Uses uuid.uuid4()\ndiff --git a/plone/uuid/handlers.py b/plone/uuid/handlers.py\nindex f9999fe..a453534 100644\n--- a/plone/uuid/handlers.py\n+++ b/plone/uuid/handlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import ATTRIBUTE_NAME\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUIDGenerator\ndiff --git a/plone/uuid/interfaces.py b/plone/uuid/interfaces.py\nindex 4bd4823..f9a5fc8 100644\n--- a/plone/uuid/interfaces.py\n+++ b/plone/uuid/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/uuid/tests.py b/plone/uuid/tests.py\nindex b433e4b..b989de4 100644\n--- a/plone/uuid/tests.py\n+++ b/plone/uuid/tests.py\n@@ -1,12 +1,8 @@\n-# -*- coding: utf-8 -*-\n import sys\n import unittest\n \n \n-if sys.version_info >= (3,):\n-    text_type = str\n-else:\n-    text_type = unicode\n+text_type = str\n \n \n class TestUUID(unittest.TestCase):\n@@ -46,7 +42,7 @@ def test_attribute_uuid_not_set(self):\n         from plone.uuid.interfaces import IUUID\n \n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -66,7 +62,7 @@ def test_attribute_uuid_create_handler(self):\n         from plone.uuid.interfaces import ATTRIBUTE_NAME\n \n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -98,16 +94,16 @@ def test_uuid_view_not_set(self):\n         from plone.uuid.interfaces import IAttributeUUID\n \n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n \n         request = TestRequest()\n-        view = getMultiAdapter((context, request), name=u"uuid")\n+        view = getMultiAdapter((context, request), name="uuid")\n         response = view()\n \n-        self.assertEquals(u"", response)\n+        self.assertEqual("", response)\n         self.assertTrue(isinstance(response, text_type))\n \n     def test_uuid_view(self):\n@@ -122,7 +118,7 @@ def test_uuid_view(self):\n         from plone.uuid.interfaces import IUUID\n \n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -131,10 +127,10 @@ class Context(object):\n         uuid = IUUID(context, None)\n \n         request = TestRequest()\n-        view = getMultiAdapter((context, request), name=u"uuid")\n+        view = getMultiAdapter((context, request), name="uuid")\n         response = view()\n \n-        self.assertEquals(text_type(uuid), response)\n+        self.assertEqual(text_type(uuid), response)\n         self.assertTrue(isinstance(response, text_type))\n \n     def test_uuid_mutable(self):\n@@ -144,7 +140,7 @@ def test_uuid_mutable(self):\n         from plone.uuid import interfaces\n \n         @interface.implementer(interfaces.IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -157,5 +153,5 @@ class Context(object):\n         uuid2 = mutable.get()\n         uuid3 = interfaces.IUUID(context)\n \n-        self.failUnless(uuid1 != uuid2)\n-        self.failUnless(uuid2 == uuid3)\n+        self.assertTrue(uuid1 != uuid2)\n+        self.assertTrue(uuid2 == uuid3)\ndiff --git a/setup.py b/setup.py\nindex 8ae950c..2b004f7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:14:16+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/d83213494b27ab4ca42d8c23b2fa55aa14c77fe9

chore: isort

Files changed:
M plone/uuid/tests.py

b"diff --git a/plone/uuid/tests.py b/plone/uuid/tests.py\nindex b989de4..44666a3 100644\n--- a/plone/uuid/tests.py\n+++ b/plone/uuid/tests.py\n@@ -8,11 +8,11 @@\n class TestUUID(unittest.TestCase):\n \n     def setUp(self):\n-        import zope.component.testing\n-        import plone.uuid\n-\n         from zope.configuration import xmlconfig\n \n+        import plone.uuid\n+        import zope.component.testing\n+\n         zope.component.testing.setUp()\n         xmlconfig.file('configure.zcml', plone.uuid)\n \n@@ -22,8 +22,8 @@ def tearDown(self):\n \n     def test_default_generator(self):\n \n-        from zope.component import getUtility\n         from plone.uuid.interfaces import IUUIDGenerator\n+        from zope.component import getUtility\n \n         generator = getUtility(IUUIDGenerator)\n \n@@ -36,10 +36,9 @@ def test_default_generator(self):\n \n     def test_attribute_uuid_not_set(self):\n \n-        from zope.interface import implementer\n-\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n+        from zope.interface import implementer\n \n         @implementer(IAttributeUUID)\n         class Context:\n@@ -52,14 +51,13 @@ class Context:\n \n     def test_attribute_uuid_create_handler(self):\n \n-        from zope.interface import implementer\n-        from zope.event import notify\n-        from zope.lifecycleevent import ObjectCreatedEvent\n-        from zope.lifecycleevent import ObjectCopiedEvent\n-\n+        from plone.uuid.interfaces import ATTRIBUTE_NAME\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n-        from plone.uuid.interfaces import ATTRIBUTE_NAME\n+        from zope.event import notify\n+        from zope.interface import implementer\n+        from zope.lifecycleevent import ObjectCopiedEvent\n+        from zope.lifecycleevent import ObjectCreatedEvent\n \n         @implementer(IAttributeUUID)\n         class Context:\n@@ -87,12 +85,11 @@ class Context:\n \n     def test_uuid_view_not_set(self):\n \n-        from zope.interface import implementer\n+        from plone.uuid.interfaces import IAttributeUUID\n         from zope.component import getMultiAdapter\n+        from zope.interface import implementer\n         from zope.publisher.browser import TestRequest\n \n-        from plone.uuid.interfaces import IAttributeUUID\n-\n         @implementer(IAttributeUUID)\n         class Context:\n             pass\n@@ -108,15 +105,14 @@ class Context:\n \n     def test_uuid_view(self):\n \n-        from zope.interface import implementer\n+        from plone.uuid.interfaces import IAttributeUUID\n+        from plone.uuid.interfaces import IUUID\n         from zope.component import getMultiAdapter\n         from zope.event import notify\n+        from zope.interface import implementer\n         from zope.lifecycleevent import ObjectCreatedEvent\n         from zope.publisher.browser import TestRequest\n \n-        from plone.uuid.interfaces import IAttributeUUID\n-        from plone.uuid.interfaces import IUUID\n-\n         @implementer(IAttributeUUID)\n         class Context:\n             pass\n@@ -134,10 +130,10 @@ class Context:\n         self.assertTrue(isinstance(response, text_type))\n \n     def test_uuid_mutable(self):\n+        from plone.uuid import interfaces\n+        from zope import event\n         from zope import interface\n         from zope import lifecycleevent\n-        from zope import event\n-        from plone.uuid import interfaces\n \n         @interface.implementer(interfaces.IAttributeUUID)\n         class Context:\n"

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:15:00+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/8cf54d44c2b9b303e7441fc7e8dc0a663f04f5a7

chore: black

Files changed:
M plone/__init__.py
M plone/uuid/adapter.py
M plone/uuid/browser.py
M plone/uuid/generator.py
M plone/uuid/handlers.py
M plone/uuid/interfaces.py
M plone/uuid/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/uuid/adapter.py b/plone/uuid/adapter.py\nindex c72f76d..f8cda07 100644\n--- a/plone/uuid/adapter.py\n+++ b/plone/uuid/adapter.py\n@@ -12,7 +12,6 @@ def attributeUUID(context):\n @interface.implementer(interfaces.IMutableUUID)\n @component.adapter(interfaces.IAttributeUUID)\n class MutableAttributeUUID:\n-\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/uuid/browser.py b/plone/uuid/browser.py\nindex 671ede8..5d531aa 100644\n--- a/plone/uuid/browser.py\n+++ b/plone/uuid/browser.py\n@@ -8,8 +8,7 @@\n \n \n class UUIDView(BrowserView):\n-    """A simple browser view that renders the UUID of its context\n-    """\n+    """A simple browser view that renders the UUID of its context"""\n \n     def __call__(self):\n         return text_type(IUUID(self.context, ""))\ndiff --git a/plone/uuid/generator.py b/plone/uuid/generator.py\nindex 9228425..9f64510 100644\n--- a/plone/uuid/generator.py\n+++ b/plone/uuid/generator.py\n@@ -17,9 +17,8 @@ def __call__(self):\n \n \n @deprecate(\n-    \'UUID1Generator was renamed to UUID4Generator, as we use uuid4 instead of \'\n-    \'uuid1. Please use UUID4Generator instead.\'\n+    "UUID1Generator was renamed to UUID4Generator, as we use uuid4 instead of "\n+    "uuid1. Please use UUID4Generator instead."\n )\n class UUID1Generator(UUID4Generator):\n-    """BBB. Remove with next major version.\n-    """\n+    """BBB. Remove with next major version."""\ndiff --git a/plone/uuid/handlers.py b/plone/uuid/handlers.py\nindex a453534..2120b67 100644\n--- a/plone/uuid/handlers.py\n+++ b/plone/uuid/handlers.py\n@@ -15,7 +15,6 @@\n \n @adapter(IAttributeUUID, IObjectCreatedEvent)\n def addAttributeUUID(obj, event):\n-\n     if not IObjectCopiedEvent.providedBy(event):\n         if getattr(aq_base(obj), ATTRIBUTE_NAME, None):\n             return  # defensive: keep existing UUID on non-copy create\ndiff --git a/plone/uuid/interfaces.py b/plone/uuid/interfaces.py\nindex f9a5fc8..4ddde21 100644\n--- a/plone/uuid/interfaces.py\n+++ b/plone/uuid/interfaces.py\n@@ -1,16 +1,14 @@\n from zope.interface import Interface\n \n \n-ATTRIBUTE_NAME = \'_plone.uuid\'\n+ATTRIBUTE_NAME = "_plone.uuid"\n \n \n class IUUIDGenerator(Interface):\n-    """Utility for generating UUIDs\n-    """\n+    """Utility for generating UUIDs"""\n \n     def __call__():\n-        """Generate a new UUID.\n-        """\n+        """Generate a new UUID."""\n \n \n class IUUIDAware(Interface):\n@@ -42,9 +40,9 @@ class IMutableUUID(Interface):\n     Be sure of what you are doing. UUID is supposed to be stable and\n     widely used\n     """\n+\n     def get():\n         """Return the UUID of the context"""\n \n     def set(uuid):\n-        """Set the unique id of the context with the uuid value.\n-        """\n+        """Set the unique id of the context with the uuid value."""\ndiff --git a/plone/uuid/tests.py b/plone/uuid/tests.py\nindex 44666a3..7bd14cf 100644\n--- a/plone/uuid/tests.py\n+++ b/plone/uuid/tests.py\n@@ -6,7 +6,6 @@\n \n \n class TestUUID(unittest.TestCase):\n-\n     def setUp(self):\n         from zope.configuration import xmlconfig\n \n@@ -14,14 +13,14 @@ def setUp(self):\n         import zope.component.testing\n \n         zope.component.testing.setUp()\n-        xmlconfig.file(\'configure.zcml\', plone.uuid)\n+        xmlconfig.file("configure.zcml", plone.uuid)\n \n     def tearDown(self):\n         import zope.component.testing\n+\n         zope.component.testing.tearDown()\n \n     def test_default_generator(self):\n-\n         from plone.uuid.interfaces import IUUIDGenerator\n         from zope.component import getUtility\n \n@@ -35,7 +34,6 @@ def test_default_generator(self):\n         self.assertTrue(isinstance(uuid2, str))\n \n     def test_attribute_uuid_not_set(self):\n-\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n         from zope.interface import implementer\n@@ -50,7 +48,6 @@ class Context:\n         self.assertEqual(uuid, None)\n \n     def test_attribute_uuid_create_handler(self):\n-\n         from plone.uuid.interfaces import ATTRIBUTE_NAME\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n@@ -78,13 +75,12 @@ class Context:\n         copied = Context()\n         setattr(copied, ATTRIBUTE_NAME, IUUID(context, None))\n         self.assertNotEqual(IUUID(copied, None), None)  # mimic copied state\n-        self.assertEqual(uuid, IUUID(copied, None))     # before handler\n+        self.assertEqual(uuid, IUUID(copied, None))  # before handler\n         notify(ObjectCopiedEvent(copied, original=context))\n         self.assertNotEqual(uuid, None)\n         self.assertNotEqual(uuid, IUUID(copied, None))  # copy has new UID\n \n     def test_uuid_view_not_set(self):\n-\n         from plone.uuid.interfaces import IAttributeUUID\n         from zope.component import getMultiAdapter\n         from zope.interface import implementer\n@@ -104,7 +100,6 @@ class Context:\n         self.assertTrue(isinstance(response, text_type))\n \n     def test_uuid_view(self):\n-\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n         from zope.component import getMultiAdapter\n@@ -145,7 +140,7 @@ class Context:\n         mutable = interfaces.IMutableUUID(context)\n \n         uuid1 = mutable.get()\n-        mutable.set(\'a uuid to set\')\n+        mutable.set("a uuid to set")\n         uuid2 = mutable.get()\n         uuid3 = interfaces.IUUID(context)\n \ndiff --git a/setup.py b/setup.py\nindex 2b004f7..48e544a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,15 +2,12 @@\n from setuptools import setup\n \n \n-version = \'1.0.7.dev0\'\n+version = "1.0.7.dev0"\n \n-long_description = (\n-    open(\'README.rst\').read() + \'\\n\' +\n-    open(\'CHANGES.rst\').read() + \'\\n\'\n-)\n+long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read() + "\\n"\n \n setup(\n-    name=\'plone.uuid\',\n+    name="plone.uuid",\n     version=version,\n     description="UUIDs for content items",\n     long_description=long_description,\n@@ -32,28 +29,28 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'plone uuid\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://github.com/plone/plone.uuid\',\n-    license=\'BSD\',\n+    keywords="plone uuid",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://github.com/plone/plone.uuid",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'Acquisition\',\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.browserpage\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n+        "Acquisition",\n+        "setuptools",\n+        "zope.component",\n+        "zope.browserpage",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'zope.configuration\',\n-            \'zope.event\',\n+        "test": [\n+            "zope.configuration",\n+            "zope.event",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:15:27+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/de0aba52c8df32ffcaa6f740bd7695b59867981c

chore: zpretty ZCML/XML

Files changed:
M plone/uuid/configure.zcml

b'diff --git a/plone/uuid/configure.zcml b/plone/uuid/configure.zcml\nindex e399af5..e9d0e24 100644\n--- a/plone/uuid/configure.zcml\n+++ b/plone/uuid/configure.zcml\n@@ -1,16 +1,28 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone.uuid">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.uuid"\n+    >\n \n-  <include package="zope.component" file="meta.zcml" />\n+  <include\n+      package="zope.component"\n+      file="meta.zcml"\n+      />\n   <include package="zope.component" />\n \n   <!-- Make sure we test the Zope 2 version of view registrations in Zope 2 -->\n-  <include zcml:condition="installed Products.Five" package="Products.Five.browser" file="meta.zcml" />\n-  <include zcml:condition="not-installed Products.Five" package="zope.browserpage" file="meta.zcml" />\n+  <include\n+      package="Products.Five.browser"\n+      file="meta.zcml"\n+      zcml:condition="installed Products.Five"\n+      />\n+  <include\n+      package="zope.browserpage"\n+      file="meta.zcml"\n+      zcml:condition="not-installed Products.Five"\n+      />\n \n   <adapter factory=".adapter.attributeUUID" />\n   <adapter factory=".adapter.MutableAttributeUUID" />\n@@ -19,8 +31,8 @@\n \n   <browser:view\n       name="uuid"\n-      class=".browser.UUIDView"\n       for=".interfaces.IUUIDAware"\n+      class=".browser.UUIDView"\n       permission="zope.Public"\n       />\n \n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:26:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/d8ff5051c1b8027037e6fe39b75a996a8332c07d

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 48e544a..74b0d22 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,6 +38,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "Acquisition",\n         "setuptools",\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:26:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/df40ac8d938d743a1097de5ea0ccc82e573b0b55

feat: flake8

Files changed:
M plone/uuid/handlers.py

b'diff --git a/plone/uuid/handlers.py b/plone/uuid/handlers.py\nindex 2120b67..c5c4ed5 100644\n--- a/plone/uuid/handlers.py\n+++ b/plone/uuid/handlers.py\n@@ -10,7 +10,10 @@\n try:\n     from Acquisition import aq_base\n except ImportError:\n-    aq_base = lambda v: v  # soft-dependency on Zope2, fallback\n+\n+    def aq_base(obj):\n+        # soft-dependency on Zope2, fallback\n+        return obj\n \n \n @adapter(IAttributeUUID, IObjectCreatedEvent)\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:26:03+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/7812cd3b679041ee59ab6cbaad933b1aa4c07ca2

feat: remove aliases for py2 compatibility

Files changed:
M plone/uuid/browser.py
M plone/uuid/tests.py

b'diff --git a/plone/uuid/browser.py b/plone/uuid/browser.py\nindex 5d531aa..a526492 100644\n--- a/plone/uuid/browser.py\n+++ b/plone/uuid/browser.py\n@@ -1,14 +1,9 @@\n from plone.uuid.interfaces import IUUID\n from zope.publisher.browser import BrowserView\n \n-import sys\n-\n-\n-text_type = str\n-\n \n class UUIDView(BrowserView):\n     """A simple browser view that renders the UUID of its context"""\n \n     def __call__(self):\n-        return text_type(IUUID(self.context, ""))\n+        return str(IUUID(self.context, ""))\ndiff --git a/plone/uuid/tests.py b/plone/uuid/tests.py\nindex 7bd14cf..47c64fa 100644\n--- a/plone/uuid/tests.py\n+++ b/plone/uuid/tests.py\n@@ -1,10 +1,6 @@\n-import sys\n import unittest\n \n \n-text_type = str\n-\n-\n class TestUUID(unittest.TestCase):\n     def setUp(self):\n         from zope.configuration import xmlconfig\n@@ -97,7 +93,7 @@ class Context:\n         response = view()\n \n         self.assertEqual("", response)\n-        self.assertTrue(isinstance(response, text_type))\n+        self.assertTrue(isinstance(response, str))\n \n     def test_uuid_view(self):\n         from plone.uuid.interfaces import IAttributeUUID\n@@ -121,8 +117,8 @@ class Context:\n         view = getMultiAdapter((context, request), name="uuid")\n         response = view()\n \n-        self.assertEqual(text_type(uuid), response)\n-        self.assertTrue(isinstance(response, text_type))\n+        self.assertEqual(str(uuid), response)\n+        self.assertTrue(isinstance(response, str))\n \n     def test_uuid_mutable(self):\n         from plone.uuid import interfaces\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:51:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/544d172dfc5c25824df3930e5db7369fb5711af1

cleanup: drop Zope2 fallback

Files changed:
M plone/uuid/configure.zcml

b'diff --git a/plone/uuid/configure.zcml b/plone/uuid/configure.zcml\nindex e9d0e24..845cc18 100644\n--- a/plone/uuid/configure.zcml\n+++ b/plone/uuid/configure.zcml\n@@ -12,16 +12,9 @@\n       />\n   <include package="zope.component" />\n \n-  <!-- Make sure we test the Zope 2 version of view registrations in Zope 2 -->\n-  <include\n-      package="Products.Five.browser"\n-      file="meta.zcml"\n-      zcml:condition="installed Products.Five"\n-      />\n   <include\n       package="zope.browserpage"\n       file="meta.zcml"\n-      zcml:condition="not-installed Products.Five"\n       />\n \n   <adapter factory=".adapter.attributeUUID" />\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:51:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/7ea8e16fca2756546481cd4001f4f35828b74060

cleanup: next relase will be a major one

Files changed:
M plone/uuid/generator.py

b'diff --git a/plone/uuid/generator.py b/plone/uuid/generator.py\nindex 9f64510..762731e 100644\n--- a/plone/uuid/generator.py\n+++ b/plone/uuid/generator.py\n@@ -1,5 +1,4 @@\n from plone.uuid.interfaces import IUUIDGenerator\n-from zope.deprecation import deprecate\n from zope.interface import implementer\n \n import uuid\n@@ -14,11 +13,3 @@ class UUID4Generator:\n \n     def __call__(self):\n         return uuid.uuid4().hex\n-\n-\n-@deprecate(\n-    "UUID1Generator was renamed to UUID4Generator, as we use uuid4 instead of "\n-    "uuid1. Please use UUID4Generator instead."\n-)\n-class UUID1Generator(UUID4Generator):\n-    """BBB. Remove with next major version."""\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:51:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/d5d2e5a6009a661b5b365d3d922ffaadad7854f7

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 74b0d22..ac0a6c7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,18 +16,14 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Programming Language :: Python",\n         "License :: OSI Approved :: BSD License",\n-        "Programming Language :: Python :: 2.6",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="plone uuid",\n     author="Martin Aspeli",\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:51:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/07c4da7cb8b44046aaf90623b1b70d394ae2581c

chore: bump version

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex ac0a6c7..38ca004 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "1.0.7.dev0"\n+version = "2.0.0.dev0"\n \n long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read() + "\\n"\n \n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-16T23:51:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.uuid/commit/40a0563a61f095575decd898894ffc2067c03b01

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\n'

Repository: plone.uuid


Branch: refs/heads/master
Date: 2023-04-23T13:36:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.uuid/commit/782b8daf6d5db79c5e0c3e9c5b900d28f9afef4e

Merge pull request #7 from plone/config-with-default-template-fe7626df

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.breaking
A news/2ed8f544.internal
A tox.ini
M plone/__init__.py
M plone/uuid/__init__.py
M plone/uuid/adapter.py
M plone/uuid/browser.py
M plone/uuid/configure.zcml
M plone/uuid/generator.py
M plone/uuid/handlers.py
M plone/uuid/interfaces.py
M plone/uuid/tests.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..e2b4515\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2ed8f544"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\ndiff --git a/news/2ed8f544.internal b/news/2ed8f544.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2ed8f544.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/uuid/__init__.py b/plone/uuid/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/uuid/__init__.py\n+++ b/plone/uuid/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/uuid/adapter.py b/plone/uuid/adapter.py\nindex dcc2946..f8cda07 100644\n--- a/plone/uuid/adapter.py\n+++ b/plone/uuid/adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid import interfaces\n from zope import component\n from zope import interface\n@@ -12,8 +11,7 @@ def attributeUUID(context):\n \n @interface.implementer(interfaces.IMutableUUID)\n @component.adapter(interfaces.IAttributeUUID)\n-class MutableAttributeUUID(object):\n-\n+class MutableAttributeUUID:\n     def __init__(self, context):\n         self.context = context\n \ndiff --git a/plone/uuid/browser.py b/plone/uuid/browser.py\nindex 2052ada..a526492 100644\n--- a/plone/uuid/browser.py\n+++ b/plone/uuid/browser.py\n@@ -1,19 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import IUUID\n from zope.publisher.browser import BrowserView\n \n-import sys\n-\n-\n-if sys.version_info >= (3,):\n-    text_type = str\n-else:\n-    text_type = unicode\n-\n \n class UUIDView(BrowserView):\n-    """A simple browser view that renders the UUID of its context\n-    """\n+    """A simple browser view that renders the UUID of its context"""\n \n     def __call__(self):\n-        return text_type(IUUID(self.context, u""))\n+        return str(IUUID(self.context, ""))\ndiff --git a/plone/uuid/configure.zcml b/plone/uuid/configure.zcml\nindex e399af5..845cc18 100644\n--- a/plone/uuid/configure.zcml\n+++ b/plone/uuid/configure.zcml\n@@ -1,16 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n-    i18n_domain="plone.uuid">\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    i18n_domain="plone.uuid"\n+    >\n \n-  <include package="zope.component" file="meta.zcml" />\n+  <include\n+      package="zope.component"\n+      file="meta.zcml"\n+      />\n   <include package="zope.component" />\n \n-  <!-- Make sure we test the Zope 2 version of view registrations in Zope 2 -->\n-  <include zcml:condition="installed Products.Five" package="Products.Five.browser" file="meta.zcml" />\n-  <include zcml:condition="not-installed Products.Five" package="zope.browserpage" file="meta.zcml" />\n+  <include\n+      package="zope.browserpage"\n+      file="meta.zcml"\n+      />\n \n   <adapter factory=".adapter.attributeUUID" />\n   <adapter factory=".adapter.MutableAttributeUUID" />\n@@ -19,8 +24,8 @@\n \n   <browser:view\n       name="uuid"\n-      class=".browser.UUIDView"\n       for=".interfaces.IUUIDAware"\n+      class=".browser.UUIDView"\n       permission="zope.Public"\n       />\n \ndiff --git a/plone/uuid/generator.py b/plone/uuid/generator.py\nindex 8387122..762731e 100644\n--- a/plone/uuid/generator.py\n+++ b/plone/uuid/generator.py\n@@ -1,13 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import IUUIDGenerator\n-from zope.deprecation import deprecate\n from zope.interface import implementer\n \n import uuid\n \n \n @implementer(IUUIDGenerator)\n-class UUID4Generator(object):\n+class UUID4Generator:\n     """Default UUID implementation.\n \n     Uses uuid.uuid4()\n@@ -15,12 +13,3 @@ class UUID4Generator(object):\n \n     def __call__(self):\n         return uuid.uuid4().hex\n-\n-\n-@deprecate(\n-    \'UUID1Generator was renamed to UUID4Generator, as we use uuid4 instead of \'\n-    \'uuid1. Please use UUID4Generator instead.\'\n-)\n-class UUID1Generator(UUID4Generator):\n-    """BBB. Remove with next major version.\n-    """\ndiff --git a/plone/uuid/handlers.py b/plone/uuid/handlers.py\nindex f9999fe..c5c4ed5 100644\n--- a/plone/uuid/handlers.py\n+++ b/plone/uuid/handlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import ATTRIBUTE_NAME\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUIDGenerator\n@@ -11,12 +10,14 @@\n try:\n     from Acquisition import aq_base\n except ImportError:\n-    aq_base = lambda v: v  # soft-dependency on Zope2, fallback\n+\n+    def aq_base(obj):\n+        # soft-dependency on Zope2, fallback\n+        return obj\n \n \n @adapter(IAttributeUUID, IObjectCreatedEvent)\n def addAttributeUUID(obj, event):\n-\n     if not IObjectCopiedEvent.providedBy(event):\n         if getattr(aq_base(obj), ATTRIBUTE_NAME, None):\n             return  # defensive: keep existing UUID on non-copy create\ndiff --git a/plone/uuid/interfaces.py b/plone/uuid/interfaces.py\nindex 4bd4823..4ddde21 100644\n--- a/plone/uuid/interfaces.py\n+++ b/plone/uuid/interfaces.py\n@@ -1,17 +1,14 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n-ATTRIBUTE_NAME = \'_plone.uuid\'\n+ATTRIBUTE_NAME = "_plone.uuid"\n \n \n class IUUIDGenerator(Interface):\n-    """Utility for generating UUIDs\n-    """\n+    """Utility for generating UUIDs"""\n \n     def __call__():\n-        """Generate a new UUID.\n-        """\n+        """Generate a new UUID."""\n \n \n class IUUIDAware(Interface):\n@@ -43,9 +40,9 @@ class IMutableUUID(Interface):\n     Be sure of what you are doing. UUID is supposed to be stable and\n     widely used\n     """\n+\n     def get():\n         """Return the UUID of the context"""\n \n     def set(uuid):\n-        """Set the unique id of the context with the uuid value.\n-        """\n+        """Set the unique id of the context with the uuid value."""\ndiff --git a/plone/uuid/tests.py b/plone/uuid/tests.py\nindex b433e4b..47c64fa 100644\n--- a/plone/uuid/tests.py\n+++ b/plone/uuid/tests.py\n@@ -1,33 +1,24 @@\n-# -*- coding: utf-8 -*-\n-import sys\n import unittest\n \n \n-if sys.version_info >= (3,):\n-    text_type = str\n-else:\n-    text_type = unicode\n-\n-\n class TestUUID(unittest.TestCase):\n-\n     def setUp(self):\n-        import zope.component.testing\n-        import plone.uuid\n-\n         from zope.configuration import xmlconfig\n \n+        import plone.uuid\n+        import zope.component.testing\n+\n         zope.component.testing.setUp()\n-        xmlconfig.file(\'configure.zcml\', plone.uuid)\n+        xmlconfig.file("configure.zcml", plone.uuid)\n \n     def tearDown(self):\n         import zope.component.testing\n+\n         zope.component.testing.tearDown()\n \n     def test_default_generator(self):\n-\n-        from zope.component import getUtility\n         from plone.uuid.interfaces import IUUIDGenerator\n+        from zope.component import getUtility\n \n         generator = getUtility(IUUIDGenerator)\n \n@@ -39,14 +30,12 @@ def test_default_generator(self):\n         self.assertTrue(isinstance(uuid2, str))\n \n     def test_attribute_uuid_not_set(self):\n-\n-        from zope.interface import implementer\n-\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n+        from zope.interface import implementer\n \n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -55,18 +44,16 @@ class Context(object):\n         self.assertEqual(uuid, None)\n \n     def test_attribute_uuid_create_handler(self):\n-\n-        from zope.interface import implementer\n-        from zope.event import notify\n-        from zope.lifecycleevent import ObjectCreatedEvent\n-        from zope.lifecycleevent import ObjectCopiedEvent\n-\n+        from plone.uuid.interfaces import ATTRIBUTE_NAME\n         from plone.uuid.interfaces import IAttributeUUID\n         from plone.uuid.interfaces import IUUID\n-        from plone.uuid.interfaces import ATTRIBUTE_NAME\n+        from zope.event import notify\n+        from zope.interface import implementer\n+        from zope.lifecycleevent import ObjectCopiedEvent\n+        from zope.lifecycleevent import ObjectCreatedEvent\n \n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -84,45 +71,41 @@ class Context(object):\n         copied = Context()\n         setattr(copied, ATTRIBUTE_NAME, IUUID(context, None))\n         self.assertNotEqual(IUUID(copied, None), None)  # mimic copied state\n-        self.assertEqual(uuid, IUUID(copied, None))     # before handler\n+        self.assertEqual(uuid, IUUID(copied, None))  # before handler\n         notify(ObjectCopiedEvent(copied, original=context))\n         self.assertNotEqual(uuid, None)\n         self.assertNotEqual(uuid, IUUID(copied, None))  # copy has new UID\n \n     def test_uuid_view_not_set(self):\n-\n-        from zope.interface import implementer\n+        from plone.uuid.interfaces import IAttributeUUID\n         from zope.component import getMultiAdapter\n+        from zope.interface import implementer\n         from zope.publisher.browser import TestRequest\n \n-        from plone.uuid.interfaces import IAttributeUUID\n-\n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n \n         request = TestRequest()\n-        view = getMultiAdapter((context, request), name=u"uuid")\n+        view = getMultiAdapter((context, request), name="uuid")\n         response = view()\n \n-        self.assertEquals(u"", response)\n-        self.assertTrue(isinstance(response, text_type))\n+        self.assertEqual("", response)\n+        self.assertTrue(isinstance(response, str))\n \n     def test_uuid_view(self):\n-\n-        from zope.interface import implementer\n+        from plone.uuid.interfaces import IAttributeUUID\n+        from plone.uuid.interfaces import IUUID\n         from zope.component import getMultiAdapter\n         from zope.event import notify\n+        from zope.interface import implementer\n         from zope.lifecycleevent import ObjectCreatedEvent\n         from zope.publisher.browser import TestRequest\n \n-        from plone.uuid.interfaces import IAttributeUUID\n-        from plone.uuid.interfaces import IUUID\n-\n         @implementer(IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -131,20 +114,20 @@ class Context(object):\n         uuid = IUUID(context, None)\n \n         request = TestRequest()\n-        view = getMultiAdapter((context, request), name=u"uuid")\n+        view = getMultiAdapter((context, request), name="uuid")\n         response = view()\n \n-        self.assertEquals(text_type(uuid), response)\n-        self.assertTrue(isinstance(response, text_type))\n+        self.assertEqual(str(uuid), response)\n+        self.assertTrue(isinstance(response, str))\n \n     def test_uuid_mutable(self):\n+        from plone.uuid import interfaces\n+        from zope import event\n         from zope import interface\n         from zope import lifecycleevent\n-        from zope import event\n-        from plone.uuid import interfaces\n \n         @interface.implementer(interfaces.IAttributeUUID)\n-        class Context(object):\n+        class Context:\n             pass\n \n         context = Context()\n@@ -153,9 +136,9 @@ class Context(object):\n         mutable = interfaces.IMutableUUID(context)\n \n         uuid1 = mutable.get()\n-        mutable.set(\'a uuid to set\')\n+        mutable.set("a uuid to set")\n         uuid2 = mutable.get()\n         uuid3 = interfaces.IUUID(context)\n \n-        self.failUnless(uuid1 != uuid2)\n-        self.failUnless(uuid2 == uuid3)\n+        self.assertTrue(uuid1 != uuid2)\n+        self.assertTrue(uuid2 == uuid3)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 8ae950c..38ca004 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,17 +1,13 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'1.0.7.dev0\'\n+version = "2.0.0.dev0"\n \n-long_description = (\n-    open(\'README.rst\').read() + \'\\n\' +\n-    open(\'CHANGES.rst\').read() + \'\\n\'\n-)\n+long_description = open("README.rst").read() + "\\n" + open("CHANGES.rst").read() + "\\n"\n \n setup(\n-    name=\'plone.uuid\',\n+    name="plone.uuid",\n     version=version,\n     description="UUIDs for content items",\n     long_description=long_description,\n@@ -20,41 +16,38 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Programming Language :: Python",\n         "License :: OSI Approved :: BSD License",\n-        "Programming Language :: Python :: 2.6",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone uuid\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://github.com/plone/plone.uuid\',\n-    license=\'BSD\',\n+    keywords="plone uuid",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://github.com/plone/plone.uuid",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'Acquisition\',\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.browserpage\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.publisher\',\n+        "Acquisition",\n+        "setuptools",\n+        "zope.component",\n+        "zope.browserpage",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.publisher",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'zope.configuration\',\n-            \'zope.event\',\n+        "test": [\n+            "zope.configuration",\n+            "zope.event",\n         ]\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..cb6e969\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.uuid {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.uuid {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

