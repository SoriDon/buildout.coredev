Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-02-21T14:05:17+01:00
Author: Benoit Suttor (bsuttor) <benoit.suttor@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/ea703611d770c134b88f5419aa415acd156345c6

become black compliant

Files changed:
M Products/CMFPlone/controlpanel/browser/overview.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py\nindex 208fded1e9..3f0bac75d8 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.py\n+++ b/Products/CMFPlone/controlpanel/browser/overview.py\n@@ -15,6 +15,7 @@\n \n try:\n     import plone.app.event\n+\n     plone.app.event  # pyflakes\n     HAS_PAE = True\n except ImportError:\n@@ -23,70 +24,74 @@\n \n class OverviewControlPanel(controlpanel.RegistryEditForm):\n \n-    template = ViewPageTemplateFile(\'overview.pt\')\n+    template = ViewPageTemplateFile("overview.pt")\n \n-    base_category = \'controlpanel\'\n-    ignored_categories = (\'controlpanel_user\')\n+    base_category = "controlpanel"\n+    ignored_categories = "controlpanel_user"\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n+        self.request.set("disable_border", 1)\n         return self.template()\n \n     @memoize\n     def cptool(self):\n-        return getToolByName(aq_inner(self.context), \'portal_controlpanel\')\n+        return getToolByName(aq_inner(self.context), "portal_controlpanel")\n \n     @memoize\n     def migration(self):\n-        return getToolByName(aq_inner(self.context), \'portal_migration\')\n+        return getToolByName(aq_inner(self.context), "portal_migration")\n \n     @memoize\n     def core_versions(self):\n         return self.migration().coreVersions()\n \n     def pil(self):\n-        return \'PIL\' in self.core_versions()\n+        return "PIL" in self.core_versions()\n \n     def server_info(self):\n         wsgi = isinstance(self.request, WSGIRequest)\n-        server_name = \'unknown\'\n-        server_version = \'\'\n+        server_name = "unknown"\n+        server_version = ""\n \n-        server_name = self.request.get(\'SERVER_SOFTWARE\')\n+        server_name = self.request.get("SERVER_SOFTWARE")\n         if server_name:\n-            if \'ZServer\' in server_name:\n-                server_name = \'ZServer\'\n+            if "ZServer" in server_name:\n+                server_name = "ZServer"\n             try:\n                 server = pkg_resources.get_distribution(server_name)\n                 server_version = server.version\n-            except (pkg_resources.DistributionNotFound,\n-                    pkg_resources.RequirementParseError):\n+            except (\n+                pkg_resources.DistributionNotFound,\n+                pkg_resources.RequirementParseError,\n+            ):\n                 pass\n         return {\n-            \'wsgi\': wsgi,\n-            \'server_name\': server_name,\n-            \'version\': server_version,\n+            "wsgi": wsgi,\n+            "server_name": server_name,\n+            "version": server_version,\n         }\n \n     def version_overview(self):\n \n         core_versions = self.core_versions()\n         versions = [\n-            \'Plone {} ({})\'.format(core_versions[\'Plone\'],\n-                               core_versions[\'Plone Instance\'])]\n-\n-        for v in (\'CMF\', \'Zope\', \'Python\'):\n-            versions.append(v + \' \' + core_versions.get(v))\n-        pil = core_versions.get(\'PIL\', None)\n+            "Plone {} ({})".format(\n+                core_versions["Plone"], core_versions["Plone Instance"]\n+            )\n+        ]\n+\n+        for v in ("CMF", "Zope", "Python"):\n+            versions.append(v + " " + core_versions.get(v))\n+        pil = core_versions.get("PIL", None)\n         if pil is not None:\n-            versions.append(\'PIL \' + pil)\n+            versions.append("PIL " + pil)\n         return versions\n \n     def is_dev_mode(self):\n         return getConfiguration().debug_mode\n \n     def upgrade_warning(self):\n-        mt = getToolByName(aq_inner(self.context), \'portal_migration\')\n+        mt = getToolByName(aq_inner(self.context), "portal_migration")\n         if mt.needUpgrading():\n             # if the user can\'t run the upgrade, no sense in displaying the\n             # message\n@@ -97,8 +102,7 @@ def upgrade_warning(self):\n \n     def mailhost_warning(self):\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(\n-            IMailSchema, prefix=\'plone\', check=False)\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone", check=False)\n         mailhost = mail_settings.smtp_host\n         email = mail_settings.email_from_address\n         if mailhost and email:\n@@ -106,8 +110,7 @@ def mailhost_warning(self):\n         return True\n \n     def timezone_warning(self):\n-        """Returns true, if the portal_timezone is not set in the registry.\n-        """\n+        """Returns true, if the portal_timezone is not set in the registry."""\n         if not HAS_PAE:\n             # No point of having a portal timezone configured without\n             # plone.app.event installed.\n@@ -121,7 +124,7 @@ def timezone_warning(self):\n         if reg_key not in registry:\n             # else use \'plone.app.event.portal_timezone\'\n             # < Plone 5\n-            reg_key = \'plone.app.event.portal_timezone\'\n+            reg_key = "plone.app.event.portal_timezone"\n         if reg_key not in registry:\n             return True\n         portal_timezone = registry[reg_key]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-02-21T16:32:36+01:00
Author: Benoit Suttor (bsuttor) <benoit.suttor@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/8b81e0d37912cfb62ffe04b10fb3b0318638406f

Fix overview-controlpanel view for Gunicorn WSGI HTTP Server. #3442

Files changed:
A news/3442.bugfix
M Products/CMFPlone/controlpanel/browser/overview.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py\nindex 3f0bac75d8..685ca272bf 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.py\n+++ b/Products/CMFPlone/controlpanel/browser/overview.py\n@@ -57,6 +57,8 @@ def server_info(self):\n         if server_name:\n             if "ZServer" in server_name:\n                 server_name = "ZServer"\n+            elif "/" in server_name:\n+                server_name = server_name.split("/")[0]\n             try:\n                 server = pkg_resources.get_distribution(server_name)\n                 server_version = server.version\ndiff --git a/news/3442.bugfix b/news/3442.bugfix\nnew file mode 100644\nindex 0000000000..211b196b26\n--- /dev/null\n+++ b/news/3442.bugfix\n@@ -0,0 +1,2 @@\n+Fix overview-controlpanel view for Gunicorn WSGI HTTP Server.\n+[bsuttor]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-02-21T16:56:48+01:00
Author: Benoit Suttor (bsuttor) <benoit.suttor@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/280ab0a520bd6bd14d258619033fbf08632af0b7

become black compliant

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\nindex 55a368e5d5..ac033994a8 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n@@ -4,6 +4,7 @@\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from unittest import mock\n+import os\n import unittest\n \n \n@@ -12,15 +13,15 @@ def mock_getUtility1(iface):\n \n \n def mock_getUtility2(iface):\n-    return {\'plone.portal_timezone\': None}\n+    return {"plone.portal_timezone": None}\n \n \n def mock_getUtility3(iface):\n-    return {\'plone.portal_timezone\': \'Europe/Amsterdam\'}\n+    return {"plone.portal_timezone": "Europe/Amsterdam"}\n \n \n def mock_getUtility4(iface):\n-    return {\'plone.app.event.portal_timezone\': \'Europe/Amsterdam\'}\n+    return {"plone.app.event.portal_timezone": "Europe/Amsterdam"}\n \n \n class TestControlPanel(unittest.TestCase):\n@@ -28,34 +29,40 @@ class TestControlPanel(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n-                new=mock_getUtility1)\n+    @mock.patch(\n+        "Products.CMFPlone.controlpanel.browser.overview.getUtility",\n+        new=mock_getUtility1,\n+    )\n     def test_timezone_warning__noreg(self):\n         # If no registry key is available, return True\n         registry = getUtility(IRegistry)\n         reg_key = "plone.portal_timezone"\n         del registry.records[reg_key]\n         self.assertFalse(reg_key in registry)\n-        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertTrue(view.timezone_warning())\n \n-    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n-                new=mock_getUtility2)\n+    @mock.patch(\n+        "Products.CMFPlone.controlpanel.browser.overview.getUtility",\n+        new=mock_getUtility2,\n+    )\n     def test_timezone_warning__emptyreg(self):\n         # If registry key value is empty, return True\n         registry = getUtility(IRegistry)\n         reg_key = "plone.portal_timezone"\n         registry[reg_key] = None\n-        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertTrue(view.timezone_warning())\n \n-    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n-                new=mock_getUtility3)\n+    @mock.patch(\n+        "Products.CMFPlone.controlpanel.browser.overview.getUtility",\n+        new=mock_getUtility3,\n+    )\n     def test_timezone_warning__set(self):\n         # If new plone.portal_timezone is set, return False\n-        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertFalse(view.timezone_warning())\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-02-21T16:58:44+01:00
Author: Benoit Suttor (bsuttor) <benoit.suttor@imio.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/51fe6b9a655e1165fa15e15add553318a6ccb606

add test for gunicorn server_name

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\nindex ac033994a8..090cbabb94 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n@@ -66,3 +66,8 @@ def test_timezone_warning__set(self):\n         # If new plone.portal_timezone is set, return False\n         view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertFalse(view.timezone_warning())\n+\n+    def test_gunicorn_server_name(self):\n+        self.request["SERVER_SOFTWARE"] = "gunicorn/19.6.0"\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n+        self.assertEqual(view.server_info()["server_name"], "gunicorn")\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-02-22T08:59:23+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/281667fce75378bbf395d63e7722c1524febfd1d

Merge pull request #3443 from plone/bsuttor/gunicorn-fix-overview-controlpanel-view

bsuttor/gunicorn fix overview controlpanel view

Files changed:
A news/3442.bugfix
M Products/CMFPlone/controlpanel/browser/overview.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py\nindex 208fded1e9..685ca272bf 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.py\n+++ b/Products/CMFPlone/controlpanel/browser/overview.py\n@@ -15,6 +15,7 @@\n \n try:\n     import plone.app.event\n+\n     plone.app.event  # pyflakes\n     HAS_PAE = True\n except ImportError:\n@@ -23,70 +24,76 @@\n \n class OverviewControlPanel(controlpanel.RegistryEditForm):\n \n-    template = ViewPageTemplateFile(\'overview.pt\')\n+    template = ViewPageTemplateFile("overview.pt")\n \n-    base_category = \'controlpanel\'\n-    ignored_categories = (\'controlpanel_user\')\n+    base_category = "controlpanel"\n+    ignored_categories = "controlpanel_user"\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n+        self.request.set("disable_border", 1)\n         return self.template()\n \n     @memoize\n     def cptool(self):\n-        return getToolByName(aq_inner(self.context), \'portal_controlpanel\')\n+        return getToolByName(aq_inner(self.context), "portal_controlpanel")\n \n     @memoize\n     def migration(self):\n-        return getToolByName(aq_inner(self.context), \'portal_migration\')\n+        return getToolByName(aq_inner(self.context), "portal_migration")\n \n     @memoize\n     def core_versions(self):\n         return self.migration().coreVersions()\n \n     def pil(self):\n-        return \'PIL\' in self.core_versions()\n+        return "PIL" in self.core_versions()\n \n     def server_info(self):\n         wsgi = isinstance(self.request, WSGIRequest)\n-        server_name = \'unknown\'\n-        server_version = \'\'\n+        server_name = "unknown"\n+        server_version = ""\n \n-        server_name = self.request.get(\'SERVER_SOFTWARE\')\n+        server_name = self.request.get("SERVER_SOFTWARE")\n         if server_name:\n-            if \'ZServer\' in server_name:\n-                server_name = \'ZServer\'\n+            if "ZServer" in server_name:\n+                server_name = "ZServer"\n+            elif "/" in server_name:\n+                server_name = server_name.split("/")[0]\n             try:\n                 server = pkg_resources.get_distribution(server_name)\n                 server_version = server.version\n-            except (pkg_resources.DistributionNotFound,\n-                    pkg_resources.RequirementParseError):\n+            except (\n+                pkg_resources.DistributionNotFound,\n+                pkg_resources.RequirementParseError,\n+            ):\n                 pass\n         return {\n-            \'wsgi\': wsgi,\n-            \'server_name\': server_name,\n-            \'version\': server_version,\n+            "wsgi": wsgi,\n+            "server_name": server_name,\n+            "version": server_version,\n         }\n \n     def version_overview(self):\n \n         core_versions = self.core_versions()\n         versions = [\n-            \'Plone {} ({})\'.format(core_versions[\'Plone\'],\n-                               core_versions[\'Plone Instance\'])]\n-\n-        for v in (\'CMF\', \'Zope\', \'Python\'):\n-            versions.append(v + \' \' + core_versions.get(v))\n-        pil = core_versions.get(\'PIL\', None)\n+            "Plone {} ({})".format(\n+                core_versions["Plone"], core_versions["Plone Instance"]\n+            )\n+        ]\n+\n+        for v in ("CMF", "Zope", "Python"):\n+            versions.append(v + " " + core_versions.get(v))\n+        pil = core_versions.get("PIL", None)\n         if pil is not None:\n-            versions.append(\'PIL \' + pil)\n+            versions.append("PIL " + pil)\n         return versions\n \n     def is_dev_mode(self):\n         return getConfiguration().debug_mode\n \n     def upgrade_warning(self):\n-        mt = getToolByName(aq_inner(self.context), \'portal_migration\')\n+        mt = getToolByName(aq_inner(self.context), "portal_migration")\n         if mt.needUpgrading():\n             # if the user can\'t run the upgrade, no sense in displaying the\n             # message\n@@ -97,8 +104,7 @@ def upgrade_warning(self):\n \n     def mailhost_warning(self):\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(\n-            IMailSchema, prefix=\'plone\', check=False)\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone", check=False)\n         mailhost = mail_settings.smtp_host\n         email = mail_settings.email_from_address\n         if mailhost and email:\n@@ -106,8 +112,7 @@ def mailhost_warning(self):\n         return True\n \n     def timezone_warning(self):\n-        """Returns true, if the portal_timezone is not set in the registry.\n-        """\n+        """Returns true, if the portal_timezone is not set in the registry."""\n         if not HAS_PAE:\n             # No point of having a portal timezone configured without\n             # plone.app.event installed.\n@@ -121,7 +126,7 @@ def timezone_warning(self):\n         if reg_key not in registry:\n             # else use \'plone.app.event.portal_timezone\'\n             # < Plone 5\n-            reg_key = \'plone.app.event.portal_timezone\'\n+            reg_key = "plone.app.event.portal_timezone"\n         if reg_key not in registry:\n             return True\n         portal_timezone = registry[reg_key]\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\nindex 55a368e5d5..090cbabb94 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n@@ -4,6 +4,7 @@\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from unittest import mock\n+import os\n import unittest\n \n \n@@ -12,15 +13,15 @@ def mock_getUtility1(iface):\n \n \n def mock_getUtility2(iface):\n-    return {\'plone.portal_timezone\': None}\n+    return {"plone.portal_timezone": None}\n \n \n def mock_getUtility3(iface):\n-    return {\'plone.portal_timezone\': \'Europe/Amsterdam\'}\n+    return {"plone.portal_timezone": "Europe/Amsterdam"}\n \n \n def mock_getUtility4(iface):\n-    return {\'plone.app.event.portal_timezone\': \'Europe/Amsterdam\'}\n+    return {"plone.app.event.portal_timezone": "Europe/Amsterdam"}\n \n \n class TestControlPanel(unittest.TestCase):\n@@ -28,34 +29,45 @@ class TestControlPanel(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n-                new=mock_getUtility1)\n+    @mock.patch(\n+        "Products.CMFPlone.controlpanel.browser.overview.getUtility",\n+        new=mock_getUtility1,\n+    )\n     def test_timezone_warning__noreg(self):\n         # If no registry key is available, return True\n         registry = getUtility(IRegistry)\n         reg_key = "plone.portal_timezone"\n         del registry.records[reg_key]\n         self.assertFalse(reg_key in registry)\n-        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertTrue(view.timezone_warning())\n \n-    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n-                new=mock_getUtility2)\n+    @mock.patch(\n+        "Products.CMFPlone.controlpanel.browser.overview.getUtility",\n+        new=mock_getUtility2,\n+    )\n     def test_timezone_warning__emptyreg(self):\n         # If registry key value is empty, return True\n         registry = getUtility(IRegistry)\n         reg_key = "plone.portal_timezone"\n         registry[reg_key] = None\n-        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertTrue(view.timezone_warning())\n \n-    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n-                new=mock_getUtility3)\n+    @mock.patch(\n+        "Products.CMFPlone.controlpanel.browser.overview.getUtility",\n+        new=mock_getUtility3,\n+    )\n     def test_timezone_warning__set(self):\n         # If new plone.portal_timezone is set, return False\n-        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n         self.assertFalse(view.timezone_warning())\n+\n+    def test_gunicorn_server_name(self):\n+        self.request["SERVER_SOFTWARE"] = "gunicorn/19.6.0"\n+        view = self.portal.restrictedTraverse("@@overview-controlpanel")\n+        self.assertEqual(view.server_info()["server_name"], "gunicorn")\ndiff --git a/news/3442.bugfix b/news/3442.bugfix\nnew file mode 100644\nindex 0000000000..211b196b26\n--- /dev/null\n+++ b/news/3442.bugfix\n@@ -0,0 +1,2 @@\n+Fix overview-controlpanel view for Gunicorn WSGI HTTP Server.\n+[bsuttor]\n'

