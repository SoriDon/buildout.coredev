Repository: plone.app.layout


Branch: refs/heads/master
Date: 2023-04-24T22:36:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/f440efb96211dc3e312deb27fd5920880505fc43

fix circular depedendcy, also rm AT deps

Files changed:
A news/rm-archetypes-code.bugfix
A news/rm-dep-pamultilingual.bugfix
M plone/app/layout/viewlets/content.py
M setup.py

b'diff --git a/news/rm-archetypes-code.bugfix b/news/rm-archetypes-code.bugfix\nnew file mode 100644\nindex 00000000..443301b0\n--- /dev/null\n+++ b/news/rm-archetypes-code.bugfix\n@@ -0,0 +1,2 @@\n+Remove dead code for Archetypes relations lookup.\n+[@jensens]\ndiff --git a/news/rm-dep-pamultilingual.bugfix b/news/rm-dep-pamultilingual.bugfix\nnew file mode 100644\nindex 00000000..de545b98\n--- /dev/null\n+++ b/news/rm-dep-pamultilingual.bugfix\n@@ -0,0 +1,5 @@\n+Add another unused `get_translations` method to deprecated ones.\n+Circula dependency on plone.app.multilingual is only for unused deprecated methods.\n+Move it\'s imports into methods-body and remove dependency from setup.py.\n+[@jensens]\n+\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex c0b64e20..28633600 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -4,9 +4,7 @@\n from plone.app.content.browser.interfaces import IFolderContentsView\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.viewlets import ViewletBase\n-from plone.app.multilingual.browser.vocabularies import translated_languages\n-from plone.app.multilingual.interfaces import ITranslatable\n-from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.app.relationfield.behavior import IRelatedItems\n from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import ISecuritySchema\n from plone.base.interfaces import ISiteSchema\n@@ -28,21 +26,6 @@\n from zope.component import queryMultiAdapter\n from zope.deprecation import deprecation\n \n-import pkg_resources\n-\n-\n-try:\n-    pkg_resources.get_distribution("plone.app.relationfield")\n-except pkg_resources.DistributionNotFound:\n-    HAS_RELATIONFIELD = False\n-else:\n-    from plone.app.relationfield.behavior import IRelatedItems\n-\n-    HAS_RELATIONFIELD = True\n-\n-# XXX needs refactoring, since Plone 5 we have PAM in core.\n-HAS_PAM = True\n-\n \n class DocumentActionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("document_actions.pt")\n@@ -75,7 +58,7 @@ def context_state(self):\n         "The has_pam property is unused and will be removed in Plone 7"\n     )\n     def has_pam(self):\n-        return HAS_PAM\n+        return True\n \n     @property\n     @memoize_contextless\n@@ -178,6 +161,10 @@ def pub_date(self):\n         "The get_translations method is unused and will be removed in Plone 7"\n     )\n     def get_translations(self):\n+        from plone.app.multilingual.browser.vocabularies import translated_languages\n+        from plone.app.multilingual.interfaces import ITranslatable\n+        from plone.app.multilingual.interfaces import ITranslationManager\n+\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n@@ -206,13 +193,19 @@ def update(self):\n             (self.context, self.request), name="plone_context_state"\n         )\n         self.anonymous = self.portal_state.anonymous()\n-        self.has_pam = HAS_PAM\n \n     def __call__(self):\n         self.update()\n \n         return self.index()\n \n+    @property\n+    @deprecation.deprecate(\n+        "The has_pam property is unused and will be removed in Plone 7"\n+    )\n+    def has_pam(self):\n+        return True\n+\n     def show(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n@@ -300,7 +293,14 @@ def pub_date(self):\n \n         return DateTime(date)\n \n+    @deprecation.deprecate(\n+        "The get_translations method is unused and will be removed in Plone 7"\n+    )\n     def get_translations(self):\n+        from plone.app.multilingual.browser.vocabularies import translated_languages\n+        from plone.app.multilingual.interfaces import ITranslatable\n+        from plone.app.multilingual.interfaces import ITranslationManager\n+\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n@@ -320,35 +320,12 @@ class ContentRelatedItems(ViewletBase):\n     index = ViewPageTemplateFile("document_relateditems.pt")\n \n     def related_items(self):\n-        context = aq_inner(self.context)\n-        res = ()\n-\n-        # Archetypes\n-        if base_hasattr(context, "getRawRelatedItems"):\n-            catalog = getToolByName(context, "portal_catalog")\n-            related = context.getRawRelatedItems()\n-            if not related:\n-                return ()\n-            brains = catalog(UID=related)\n-            if brains:\n-                # build a position dict by iterating over the items once\n-                positions = {v: i for (i, v) in enumerate(related)}\n-                # We need to keep the ordering intact\n-                res = list(brains)\n-\n-                def _key(brain):\n-                    return positions.get(brain.UID, -1)\n-\n-                res.sort(key=_key)\n-\n-        # Dexterity\n-        if HAS_RELATIONFIELD and IRelatedItems.providedBy(context):\n-            related = context.relatedItems\n-            if not related:\n-                return ()\n-            res = self.related2brains(related)\n-\n-        return res\n+        if not IRelatedItems.providedBy(self.context):\n+            return ()\n+        related = aq_inner(self.context).relatedItems\n+        if not related:\n+            return ()\n+        return self.related2brains(related)\n \n     def related2brains(self, related):\n         """Return a list of brains based on a list of relations. Will filter\ndiff --git a/setup.py b/setup.py\nindex 263c558d..2e41fbed 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,7 +39,6 @@\n     install_requires=[\n         "BTrees",\n         "plone.app.content",\n-        "plone.app.multilingual",\n         "plone.app.relationfield",\n         "plone.app.uuid",\n         "plone.app.viewletmanager >=1.2",\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2023-04-24T23:38:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/e4b7e4e5a2a703d2bf9c3e213db6a94d70d438f3

Merge pull request #336 from plone/rm-dep-pa.multilingual

fix circular depedendcy, also rm AT deps

Files changed:
A news/rm-archetypes-code.bugfix
A news/rm-dep-pamultilingual.bugfix
M plone/app/layout/viewlets/content.py
M setup.py

b'diff --git a/news/rm-archetypes-code.bugfix b/news/rm-archetypes-code.bugfix\nnew file mode 100644\nindex 00000000..443301b0\n--- /dev/null\n+++ b/news/rm-archetypes-code.bugfix\n@@ -0,0 +1,2 @@\n+Remove dead code for Archetypes relations lookup.\n+[@jensens]\ndiff --git a/news/rm-dep-pamultilingual.bugfix b/news/rm-dep-pamultilingual.bugfix\nnew file mode 100644\nindex 00000000..de545b98\n--- /dev/null\n+++ b/news/rm-dep-pamultilingual.bugfix\n@@ -0,0 +1,5 @@\n+Add another unused `get_translations` method to deprecated ones.\n+Circula dependency on plone.app.multilingual is only for unused deprecated methods.\n+Move it\'s imports into methods-body and remove dependency from setup.py.\n+[@jensens]\n+\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex c0b64e20..28633600 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -4,9 +4,7 @@\n from plone.app.content.browser.interfaces import IFolderContentsView\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.viewlets import ViewletBase\n-from plone.app.multilingual.browser.vocabularies import translated_languages\n-from plone.app.multilingual.interfaces import ITranslatable\n-from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.app.relationfield.behavior import IRelatedItems\n from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import ISecuritySchema\n from plone.base.interfaces import ISiteSchema\n@@ -28,21 +26,6 @@\n from zope.component import queryMultiAdapter\n from zope.deprecation import deprecation\n \n-import pkg_resources\n-\n-\n-try:\n-    pkg_resources.get_distribution("plone.app.relationfield")\n-except pkg_resources.DistributionNotFound:\n-    HAS_RELATIONFIELD = False\n-else:\n-    from plone.app.relationfield.behavior import IRelatedItems\n-\n-    HAS_RELATIONFIELD = True\n-\n-# XXX needs refactoring, since Plone 5 we have PAM in core.\n-HAS_PAM = True\n-\n \n class DocumentActionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("document_actions.pt")\n@@ -75,7 +58,7 @@ def context_state(self):\n         "The has_pam property is unused and will be removed in Plone 7"\n     )\n     def has_pam(self):\n-        return HAS_PAM\n+        return True\n \n     @property\n     @memoize_contextless\n@@ -178,6 +161,10 @@ def pub_date(self):\n         "The get_translations method is unused and will be removed in Plone 7"\n     )\n     def get_translations(self):\n+        from plone.app.multilingual.browser.vocabularies import translated_languages\n+        from plone.app.multilingual.interfaces import ITranslatable\n+        from plone.app.multilingual.interfaces import ITranslationManager\n+\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n@@ -206,13 +193,19 @@ def update(self):\n             (self.context, self.request), name="plone_context_state"\n         )\n         self.anonymous = self.portal_state.anonymous()\n-        self.has_pam = HAS_PAM\n \n     def __call__(self):\n         self.update()\n \n         return self.index()\n \n+    @property\n+    @deprecation.deprecate(\n+        "The has_pam property is unused and will be removed in Plone 7"\n+    )\n+    def has_pam(self):\n+        return True\n+\n     def show(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(\n@@ -300,7 +293,14 @@ def pub_date(self):\n \n         return DateTime(date)\n \n+    @deprecation.deprecate(\n+        "The get_translations method is unused and will be removed in Plone 7"\n+    )\n     def get_translations(self):\n+        from plone.app.multilingual.browser.vocabularies import translated_languages\n+        from plone.app.multilingual.interfaces import ITranslatable\n+        from plone.app.multilingual.interfaces import ITranslationManager\n+\n         cts = []\n         if ITranslatable.providedBy(self.context):\n             t_langs = translated_languages(self.context)\n@@ -320,35 +320,12 @@ class ContentRelatedItems(ViewletBase):\n     index = ViewPageTemplateFile("document_relateditems.pt")\n \n     def related_items(self):\n-        context = aq_inner(self.context)\n-        res = ()\n-\n-        # Archetypes\n-        if base_hasattr(context, "getRawRelatedItems"):\n-            catalog = getToolByName(context, "portal_catalog")\n-            related = context.getRawRelatedItems()\n-            if not related:\n-                return ()\n-            brains = catalog(UID=related)\n-            if brains:\n-                # build a position dict by iterating over the items once\n-                positions = {v: i for (i, v) in enumerate(related)}\n-                # We need to keep the ordering intact\n-                res = list(brains)\n-\n-                def _key(brain):\n-                    return positions.get(brain.UID, -1)\n-\n-                res.sort(key=_key)\n-\n-        # Dexterity\n-        if HAS_RELATIONFIELD and IRelatedItems.providedBy(context):\n-            related = context.relatedItems\n-            if not related:\n-                return ()\n-            res = self.related2brains(related)\n-\n-        return res\n+        if not IRelatedItems.providedBy(self.context):\n+            return ()\n+        related = aq_inner(self.context).relatedItems\n+        if not related:\n+            return ()\n+        return self.related2brains(related)\n \n     def related2brains(self, related):\n         """Return a list of brains based on a list of relations. Will filter\ndiff --git a/setup.py b/setup.py\nindex 263c558d..2e41fbed 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,7 +39,6 @@\n     install_requires=[\n         "BTrees",\n         "plone.app.content",\n-        "plone.app.multilingual",\n         "plone.app.relationfield",\n         "plone.app.uuid",\n         "plone.app.viewletmanager >=1.2",\n'

