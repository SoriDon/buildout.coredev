Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-18T15:06:24+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/16123e268bafd93d362c72fe9fb702103a26c942

Set timezone for creation and modification dates of comments

Files changed:
M plone/app/discussion/browser/comments.py
M plone/app/discussion/comment.py
M plone/app/discussion/profiles/default/metadata.xml
M plone/app/discussion/upgrades.py
M plone/app/discussion/upgrades.zcml

b'diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 387ceadf..2056aa2a 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -2,6 +2,7 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from datetime import datetime\n+from datetime import timezone\n from DateTime import DateTime\n from plone.app.discussion import _\n from plone.app.discussion.browser.validator import CaptchaValidator\n@@ -192,8 +193,8 @@ def create_comment(self, data):\n             setattr(comment, attribute, data[attribute])\n \n         # Set dates\n-        comment.creation_date = datetime.utcnow()\n-        comment.modification_date = datetime.utcnow()\n+        comment.creation_date = datetime.now(timezone.utc)\n+        comment.modification_date = datetime.now(timezone.utc)\n \n         # Get author name and email\n         comment.author_name, comment.author_email = self.get_author(data)\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 438e7266..8e9be092 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -6,6 +6,7 @@\n from Acquisition import aq_parent\n from Acquisition import Implicit\n from datetime import datetime\n+from datetime import timezone\n from OFS.owner import Owned\n from OFS.role import RoleManager\n from OFS.Traversable import Traversable\n@@ -119,7 +120,7 @@ class Comment(\n     # IConversation.addComment().\n \n     def __init__(self):\n-        self.creation_date = self.modification_date = datetime.utcnow()\n+        self.creation_date = self.modification_date = datetime.now(timezone.utc)\n         self.mime_type = "text/plain"\n \n         user = getSecurityManager().getUser()\ndiff --git a/plone/app/discussion/profiles/default/metadata.xml b/plone/app/discussion/profiles/default/metadata.xml\nindex 141a440c..3b4e7301 100644\n--- a/plone/app/discussion/profiles/default/metadata.xml\n+++ b/plone/app/discussion/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n- <version>2000</version>\n+ <version>2001</version>\n  <dependencies>\n   <dependency>profile-plone.resource:default</dependency>\n   <dependency>profile-plone.app.registry:default</dependency>\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 40cdc8fe..fbad45cf 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -2,6 +2,8 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n+from plone import api\n+from datetime import timezone\n \n import logging\n \n@@ -77,3 +79,24 @@ def add_js_to_plone_legacy(context):\n def extend_review_workflow(context):\n     """Apply changes made to review workflow."""\n     upgrade_comment_workflows_retain_current_workflow(context)\n+\n+\n+def set_timezone_on_dates(context):\n+    """Ensure timezone data is stored against all creation/modified dates"""\n+    pc = api.portal.get_tool(\'portal_catalog\')\n+    creations = 0\n+    modifieds = 0\n+    logger.info(\'Setting timezone information on comment dates\')\n+    comments = pc.search({\'Type\': \'Comment\'})\n+    for cbrain in comments:\n+        comment = cbrain.getObject()\n+        if not comment.creation_date.tzinfo:\n+            creations += 1\n+            comment.creation_date = \\\n+                comment.creation_date.astimezone(timezone.utc)\n+        if not comment.modification_date.tzinfo:\n+            modifieds += 1\n+            comment.modification_date = \\\n+                comment.modification_date.astimezone(timezone.utc)\n+    logger.info(\'Updated %i creation dates and %i modification dates\' %\n+                (creations, modifieds))\ndiff --git a/plone/app/discussion/upgrades.zcml b/plone/app/discussion/upgrades.zcml\nindex 20b288e0..7f8ffe7f 100644\n--- a/plone/app/discussion/upgrades.zcml\n+++ b/plone/app/discussion/upgrades.zcml\n@@ -88,4 +88,15 @@\n         handler=".upgrades.upgrade_comment_workflows" />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+    source="2000"\n+    destination="2001"\n+    profile="plone.app.discussion:default">\n+    <genericsetup:upgradeStep\n+        title="Set timezone on comment dates"\n+        description="Ensure the timezone is set for comment dates"\n+        handler=".upgrades.set_timezone_on_dates"\n+        />\n+  </genericsetup:upgradeSteps>\n+\n </configure>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-18T15:17:17+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/42e52386228813594a1f3069e0278c1b90f3d932

Update tests

Files changed:
M plone/app/discussion/tests/test_catalog.py

b'diff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex 395f6c2f..03af8e94 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -1,6 +1,7 @@\n """Test the plone.app.discussion catalog indexes\n """\n from datetime import datetime\n+from datetime import timezone\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.testing import (  # noqa\n     PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n@@ -67,8 +68,10 @@ def setUp(self):\n         comment1.text = "Comment text"\n         comment1.creator = "jim"\n         comment1.author_username = "Jim"\n-        comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n-        comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n+        comment1.creation_date = \\\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n+        comment1.modification_date = \\\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n \n         new_comment1_id = conversation.addComment(comment1)\n         self.comment_id = new_comment1_id\n@@ -115,15 +118,17 @@ def test_last_comment_date(self):\n         self.assertTrue("last_comment_date" in self.doc1_brain)\n         self.assertEqual(\n             self.doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12),\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc),\n         )\n \n         # Add another comment and check if last comment date is updated.\n         comment2 = createObject("plone.Comment")\n         comment2.title = "Comment 2"\n         comment2.text = "Comment text"\n-        comment2.creation_date = datetime(2009, 9, 17, 14, 18, 12)\n-        comment2.modification_date = datetime(2009, 9, 17, 14, 18, 12)\n+        comment2.creation_date = \\\n+            datetime(2009, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n+        comment2.modification_date = \\\n+            datetime(2009, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n@@ -141,7 +146,7 @@ def test_last_comment_date(self):\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2009, 9, 17, 14, 18, 12),\n+            datetime(2009, 9, 17, 14, 18, 12).astimezone(timezone.utc),\n         )\n \n         # Remove the comment again\n@@ -158,7 +163,7 @@ def test_last_comment_date(self):\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12),\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc),\n         )\n \n         # remove all comments\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-18T15:17:30+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/9f34a7f10df60a6fd722dc24e50181694c93de79

Add changelog

Files changed:
A news/204.bugfix

b'diff --git a/news/204.bugfix b/news/204.bugfix\nnew file mode 100644\nindex 00000000..6fe3d20a\n--- /dev/null\n+++ b/news/204.bugfix\n@@ -0,0 +1 @@\n+ - Set timezones for creation and modification dates of comments [instification]\n\\ No newline at end of file\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-18T15:33:08+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/f1b753d088db6628a1787b4c94e20b2297a147e4

Update tests

Files changed:
M plone/app/discussion/tests/test_comment.py

b'diff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex a0a06696..f9a9ac05 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -63,7 +63,7 @@ def test_UTCDates(self):\n                 "get hidden by that"\n             )\n         comment1 = createObject("plone.Comment")\n-        local_utc = datetime.datetime.utcnow()\n+        local_utc = datetime.datetime.now().astimezone(datetime.timezone.utc)\n         for date in (comment1.creation_date, comment1.modification_date):\n             difference = abs(date - local_utc)\n             difference = difference.seconds\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-18T15:40:30+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/d6bbff89c72505ebcab1c818cabbddd708aa92c4

update conversation tests

Files changed:
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex febce286..69179c0d 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -8,6 +8,7 @@\n from Acquisition import aq_parent\n from datetime import datetime\n from datetime import timedelta\n+from datetime import timezone\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\n@@ -70,7 +71,9 @@ def test_add_comment(self):\n         self.assertEqual(len(tuple(conversation.getThreads())), 1)\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n-            conversation.last_comment_date - datetime.utcnow() < timedelta(seconds=1),\n+            conversation.last_comment_date\n+            - datetime.now().astimezone(timezone.utc)() \n+            < timedelta(seconds=1),\n         )\n \n     def test_private_comment(self):\n@@ -488,27 +491,32 @@ def test_last_comment_date(self):\n         # swapped in\n         comment1 = createObject("plone.Comment")\n         comment1.text = "Comment text"\n-        comment1.creation_date = datetime.utcnow() - timedelta(4)\n+        comment1.creation_date =\\\n+            datetime.now().astimezone(timezone.utc)() - timedelta(4)\n         conversation.addComment(comment1)\n \n         comment2 = createObject("plone.Comment")\n         comment2.text = "Comment text"\n-        comment2.creation_date = datetime.utcnow() - timedelta(2)\n+        comment2.creation_date =\\\n+            datetime.now().astimezone(timezone.utc)() - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment text"\n-        comment3.creation_date = datetime.utcnow() - timedelta(1)\n+        comment3.creation_date =\\\n+            datetime.now().astimezone(timezone.utc)() - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.utcnow() - timedelta(hours=23, minutes=59, seconds=59),\n+            < datetime.now().astimezone(timezone.utc)()\n+            - timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.utcnow() - timedelta(days=1, seconds=1),\n+            > datetime.now().astimezone(timezone.utc)()\n+            - timedelta(days=1, seconds=1),\n         )\n \n         # remove the latest comment\n@@ -518,11 +526,13 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.utcnow() - timedelta(days=1, hours=23, minutes=59, seconds=59),\n+            < datetime.now().astimezone(timezone.utc)()\n+            - timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.utcnow() - timedelta(days=2, seconds=1),\n+            > datetime.now().astimezone(timezone.utc)()\n+            - timedelta(days=2, seconds=1),\n         )\n \n         # remove the latest comment again\n@@ -532,11 +542,13 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.utcnow() - timedelta(days=3, hours=23, minutes=59, seconds=59),\n+            < datetime.now().astimezone(timezone.utc)()\n+            - timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.utcnow() - timedelta(days=4, seconds=2),\n+            > datetime.now().astimezone(timezone.utc)()\n+            - timedelta(days=4, seconds=2),\n         )\n \n     def test_get_comments_full(self):\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-18T15:56:05+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/45ef9a51c48f023384815c1d5002925181578514

Fix syntax errors

Files changed:
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 69179c0d..92b72ce9 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -72,7 +72,7 @@ def test_add_comment(self):\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n             conversation.last_comment_date\n-            - datetime.now().astimezone(timezone.utc)() \n+            - datetime.now().astimezone(timezone.utc) \n             < timedelta(seconds=1),\n         )\n \n@@ -492,30 +492,30 @@ def test_last_comment_date(self):\n         comment1 = createObject("plone.Comment")\n         comment1.text = "Comment text"\n         comment1.creation_date =\\\n-            datetime.now().astimezone(timezone.utc)() - timedelta(4)\n+            datetime.now().astimezone(timezone.utc) - timedelta(4)\n         conversation.addComment(comment1)\n \n         comment2 = createObject("plone.Comment")\n         comment2.text = "Comment text"\n         comment2.creation_date =\\\n-            datetime.now().astimezone(timezone.utc)() - timedelta(2)\n+            datetime.now().astimezone(timezone.utc) - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment text"\n         comment3.creation_date =\\\n-            datetime.now().astimezone(timezone.utc)() - timedelta(1)\n+            datetime.now().astimezone(timezone.utc) - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.now().astimezone(timezone.utc)()\n+            < datetime.now().astimezone(timezone.utc)\n             - timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.now().astimezone(timezone.utc)()\n+            > datetime.now().astimezone(timezone.utc)\n             - timedelta(days=1, seconds=1),\n         )\n \n@@ -526,12 +526,12 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.now().astimezone(timezone.utc)()\n+            < datetime.now().astimezone(timezone.utc)\n             - timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.now().astimezone(timezone.utc)()\n+            > datetime.now().astimezone(timezone.utc)\n             - timedelta(days=2, seconds=1),\n         )\n \n@@ -542,12 +542,12 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.now().astimezone(timezone.utc)()\n+            < datetime.now().astimezone(timezone.utc)\n             - timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.now().astimezone(timezone.utc)()\n+            > datetime.now().astimezone(timezone.utc)\n             - timedelta(days=4, seconds=2),\n         )\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T14:16:58+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/fd1cfa8cadb5a2b5fffc6d490b33fd9488e1a250

Use local timezone when setting dates

Files changed:
M plone/app/discussion/browser/comments.py
M plone/app/discussion/comment.py

b'diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 2056aa2a..0c566515 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -11,6 +11,7 @@\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n+from plone.app.event.base import localized_now\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n@@ -193,8 +194,8 @@ def create_comment(self, data):\n             setattr(comment, attribute, data[attribute])\n \n         # Set dates\n-        comment.creation_date = datetime.now(timezone.utc)\n-        comment.modification_date = datetime.now(timezone.utc)\n+        comment.creation_date = localized_now()\n+        comment.modification_date = localized_now()\n \n         # Get author name and email\n         comment.author_name, comment.author_email = self.get_author(data)\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 8e9be092..3a02628c 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -21,6 +21,7 @@\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.event.base import localized_now\n from plone.base.interfaces.controlpanel import IMailSchema\n from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n@@ -120,7 +121,7 @@ class Comment(\n     # IConversation.addComment().\n \n     def __init__(self):\n-        self.creation_date = self.modification_date = datetime.now(timezone.utc)\n+        self.creation_date = self.modification_date = localized_now()\n         self.mime_type = "text/plain"\n \n         user = getSecurityManager().getUser()\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T14:17:34+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/103bd894d988b9ce35681ae2030758cb566b105e

Use correct timezone when indexing comments

Files changed:
M plone/app/discussion/catalog.py

b'diff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 6413d114..bc7bdebe 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -109,7 +109,7 @@ def effective(object):\n         object.creation_date.hour,\n         object.creation_date.minute,\n         object.creation_date.second,\n-        "GMT",\n+        object.creation_date.tzname(),\n     )\n \n \n@@ -123,7 +123,7 @@ def created(object):\n         object.creation_date.hour,\n         object.creation_date.minute,\n         object.creation_date.second,\n-        "GMT",\n+        object.creation_date.tzname(),\n     )\n \n \n@@ -137,7 +137,7 @@ def modified(object):\n         object.modification_date.hour,\n         object.modification_date.minute,\n         object.modification_date.second,\n-        "GMT",\n+        object.modification_date.tzname(),\n     )\n \n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T14:18:09+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/2506286c43ebba59de8b9e94c3dd9dce5311970c

Create custom __getattribute__ method to return timezone aware dates from older Comment objects

Files changed:
M plone/app/discussion/comment.py

b'diff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 3a02628c..62d7811b 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -135,6 +135,17 @@ def __init__(self):\n                 user.getId(): ["Owner"],\n             }\n \n+    def __getattribute__(self, attr):\n+        # In older versions of the add-on dates were set timezone naive.\n+        # In tz aware versions, the value is stored as self._creation_date\n+        if attr in ["creation_date", "modification_date"]:\n+            old_date = super(Comment, self).__getattribute__(attr)\n+            if old_date.tzinfo is None:\n+                # Naive dates were always stored utc\n+                return old_date.astimezone(timezone.utc)\n+            return old_date\n+        return super(Comment, self).__getattribute__(attr)\n+\n     @property\n     def __name__(self):\n         return self.comment_id and str(self.comment_id) or None\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T14:19:27+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/c70abe2b6342bcd40a50b97a0e8de9a9e3b4b456

Create a test for the custom getter to ensure timezones are being added

Files changed:
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 92b72ce9..b1484dfd 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -76,6 +76,36 @@ def test_add_comment(self):\n             < timedelta(seconds=1),\n         )\n \n+    def test_timezone_naive_comment(self):\n+        # Create a conversation. In this case we doesn\'t assign it to an\n+        # object, as we just want to check the Conversation object API.\n+        conversation = IConversation(self.portal.doc1)\n+\n+        # Add a comment. Note: in real life, we always create comments via the\n+        # factory to allow different factories to be swapped in\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+\n+        new_id = conversation.addComment(comment)\n+\n+        # Check that comments have timezones\n+        self.assertTrue(comment.creation_date.tzinfo)\n+        self.assertTrue(comment.modification_date.tzinfo)\n+        \n+        # Remove the timezone from the comment dates\n+        comment.creation_date = comment.creation_date.replace(tzinfo=None)\n+        comment.modification_date = comment.modification_date.replace(tzinfo=None)\n+\n+        # Check that the date is still correct\n+        self.assertTrue(\n+            conversation.last_comment_date\n+            - datetime.now().astimezone(timezone.utc) \n+            < timedelta(seconds=1),\n+        )\n+        # Check that comments still have timezones\n+        self.assertTrue(comment.creation_date.tzinfo)\n+        self.assertTrue(comment.modification_date.tzinfo)\n+\n     def test_private_comment(self):\n         conversation = IConversation(self.portal.doc1)\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T14:20:32+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/f0cd076fd749d6ce0ad7f582d7886487144186f2

Update test_indexers to account for local timezones. Test across daylight savings bounds.

Files changed:
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex b1b30f1e..1257c7b3 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -4,11 +4,18 @@\n from ..interfaces import IConversation\n from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from datetime import datetime\n+from datetime import timezone\n+from dateutil import tz\n from DateTime import DateTime\n+from plone.app.event.base import localized_now\n+from plone.app.event.base import default_timezone\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.indexer.delegate import DelegatingIndexerFactory\n+from plone.registry.interfaces import IRegistry\n from zope.component import createObject\n+from zope.component import getUtility\n+import os\n \n import unittest\n \n@@ -36,6 +43,13 @@ def setUp(self):\n         workflow = self.portal.portal_workflow\n         workflow.doActionFor(self.portal.doc1, "publish")\n \n+        # Change the timezone to europe to test timezones properly\n+        os.environ[\'TZ\'] = \'UTC\'\n+        reg_key = "plone.portal_timezone"\n+        registry = getUtility(IRegistry)\n+        registry[reg_key] = "Europe/Berlin"\n+        self.portal_timezone = tz.gettz(default_timezone())\n+\n         # Create a conversation.\n         conversation = IConversation(self.portal.doc1)\n \n@@ -43,6 +57,8 @@ def setUp(self):\n         comment1.text = "Comment Text"\n         comment1.creator = "jim"\n         comment1.author_username = "Jim"\n+        # Purposefully exclude timezone to test the conversation getter\n+        # (see plone.app.discussion.comment.Comment object)\n         comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n         self.new_id1 = conversation.addComment(comment1)\n@@ -51,16 +67,16 @@ def setUp(self):\n         comment2.text = "Comment Text"\n         comment2.creator = "emma"\n         comment2.author_username = "Emma"\n-        comment2.creation_date = datetime(2007, 12, 13, 4, 18, 12)\n-        comment2.modification_date = datetime(2007, 12, 13, 4, 18, 12)\n+        comment2.creation_date = datetime(2007, 12, 13, 4, 18, 12).astimezone(self.portal_timezone)\n+        comment2.modification_date = datetime(2007, 12, 13, 4, 18, 12).astimezone(self.portal_timezone)\n         self.new_id2 = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment Text"\n         comment3.creator = "lukas"\n         comment3.author_username = "Lukas"\n-        comment3.creation_date = datetime(2009, 4, 12, 11, 12, 12)\n-        comment3.modification_date = datetime(2009, 4, 12, 11, 12, 12)\n+        comment3.creation_date = datetime(2009, 4, 12, 11, 12, 12).astimezone(self.portal_timezone)\n+        comment3.modification_date = datetime(2009, 4, 12, 11, 12, 12).astimezone(self.portal_timezone)\n         self.new_id3 = conversation.addComment(comment3)\n \n         self.conversation = conversation\n@@ -88,12 +104,12 @@ def test_conversation_last_comment_date(self):\n         )\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2009, 4, 12, 11, 12, 12),\n+            datetime(2009, 4, 12, 11, 12, 12).astimezone(self.portal_timezone),\n         )\n         del self.conversation[self.new_id3]\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2007, 12, 13, 4, 18, 12),\n+            datetime(2007, 12, 13, 4, 18, 12).astimezone(self.portal_timezone),\n         )\n         del self.conversation[self.new_id2]\n         del self.conversation[self.new_id1]\n@@ -122,12 +138,24 @@ def setUp(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n+        # Change the timezone to europe to test timezones properly\n+        os.environ[\'TZ\'] = \'UTC\'\n+        reg_key = "plone.portal_timezone"\n+        registry = getUtility(IRegistry)\n+        registry[reg_key] = "Europe/Berlin"\n+        portal_timezone = tz.gettz(default_timezone())\n+\n+\n         comment = createObject("plone.Comment")\n         comment.text = "Lorem ipsum dolor sit amet."\n         comment.creator = "jim"\n         comment.author_name = "Jim"\n-        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n-        comment.modification_date = datetime(2008, 3, 12, 7, 32, 52)\n+        \n+        # Create date in CEST (ie not daylight savings = UTC+2)\n+        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).astimezone(portal_timezone)\n+        \n+        # Create date in CET (ie daylight savings = UTC+1)\n+        comment.modification_date = datetime(2008, 3, 12, 7, 32, 52).astimezone(portal_timezone)\n \n         self.comment_id = conversation.addComment(comment)\n         self.comment = comment.__of__(conversation)\n@@ -161,15 +189,15 @@ def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n+            DateTime(2006, 9, 17, 16, 18, 12, "GMT+2"),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n+            DateTime(2006, 9, 17, 16, 18, 12, "GMT+2"),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, "GMT"),\n+            DateTime(2008, 3, 12, 8, 32, 52, "GMT+1"),\n         )\n \n     def test_searchable_text(self):\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T16:11:19+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/99447966279f947412512222c31922f073711846

Fix timezone tests

Files changed:
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex b1484dfd..610ac4b7 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -9,6 +9,8 @@\n from datetime import datetime\n from datetime import timedelta\n from datetime import timezone\n+from dateutil import tz\n+from plone.app.event.base import default_timezone\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\n@@ -72,7 +74,7 @@ def test_add_comment(self):\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n             conversation.last_comment_date\n-            - datetime.now().astimezone(timezone.utc) \n+            - datetime.now().astimezone(tz.gettz(default_timezone())) \n             < timedelta(seconds=1),\n         )\n \n@@ -99,7 +101,7 @@ def test_timezone_naive_comment(self):\n         # Check that the date is still correct\n         self.assertTrue(\n             conversation.last_comment_date\n-            - datetime.now().astimezone(timezone.utc) \n+            - datetime.now().astimezone(tz.gettz(default_timezone())) \n             < timedelta(seconds=1),\n         )\n         # Check that comments still have timezones\n@@ -522,30 +524,30 @@ def test_last_comment_date(self):\n         comment1 = createObject("plone.Comment")\n         comment1.text = "Comment text"\n         comment1.creation_date =\\\n-            datetime.now().astimezone(timezone.utc) - timedelta(4)\n+            datetime.now().astimezone(tz.gettz(default_timezone())) - timedelta(4)\n         conversation.addComment(comment1)\n \n         comment2 = createObject("plone.Comment")\n         comment2.text = "Comment text"\n         comment2.creation_date =\\\n-            datetime.now().astimezone(timezone.utc) - timedelta(2)\n+            datetime.now().astimezone(tz.gettz(default_timezone())) - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment text"\n         comment3.creation_date =\\\n-            datetime.now().astimezone(timezone.utc) - timedelta(1)\n+            datetime.now().astimezone(tz.gettz(default_timezone())) - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.now().astimezone(timezone.utc)\n+            < datetime.now().astimezone(tz.gettz(default_timezone()))\n             - timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.now().astimezone(timezone.utc)\n+            > datetime.now().astimezone(tz.gettz(default_timezone()))\n             - timedelta(days=1, seconds=1),\n         )\n \n@@ -556,12 +558,12 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.now().astimezone(timezone.utc)\n+            < datetime.now().astimezone(tz.gettz(default_timezone()))\n             - timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.now().astimezone(timezone.utc)\n+            > datetime.now().astimezone(tz.gettz(default_timezone()))\n             - timedelta(days=2, seconds=1),\n         )\n \n@@ -572,12 +574,12 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.now().astimezone(timezone.utc)\n+            < datetime.now().astimezone(tz.gettz(default_timezone()))\n             - timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.now().astimezone(timezone.utc)\n+            > datetime.now().astimezone(tz.gettz(default_timezone()))\n             - timedelta(days=4, seconds=2),\n         )\n \ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 1257c7b3..034543d1 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -15,8 +15,9 @@\n from plone.registry.interfaces import IRegistry\n from zope.component import createObject\n from zope.component import getUtility\n-import os\n \n+import time\n+import os\n import unittest\n \n \n@@ -44,7 +45,8 @@ def setUp(self):\n         workflow.doActionFor(self.portal.doc1, "publish")\n \n         # Change the timezone to europe to test timezones properly\n-        os.environ[\'TZ\'] = \'UTC\'\n+        os.environ[\'TZ\'] = \'Europe/Berlin\'\n+        time.tzset()\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n         registry[reg_key] = "Europe/Berlin"\n@@ -139,7 +141,8 @@ def setUp(self):\n         # factory to allow different factories to be swapped in\n \n         # Change the timezone to europe to test timezones properly\n-        os.environ[\'TZ\'] = \'UTC\'\n+        os.environ[\'TZ\'] = \'Europe/Berlin\'\n+        time.tzset()\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n         registry[reg_key] = "Europe/Berlin"\n@@ -189,15 +192,15 @@ def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 16, 18, 12, "GMT+2"),\n+            DateTime(2006, 9, 17, 14, 18, 12, "GMT+2"),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 16, 18, 12, "GMT+2"),\n+            DateTime(2006, 9, 17, 14, 18, 12, "GMT+2"),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 8, 32, 52, "GMT+1"),\n+            DateTime(2008, 3, 12, 7, 32, 52, "GMT+1"),\n         )\n \n     def test_searchable_text(self):\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-21T17:12:08+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/b28d6d1f91a964d880089003e184147bff5b51b6

Don't set the server timezone, seems to break other tests

Files changed:
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 034543d1..4e11c0ef 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -45,8 +45,6 @@ def setUp(self):\n         workflow.doActionFor(self.portal.doc1, "publish")\n \n         # Change the timezone to europe to test timezones properly\n-        os.environ[\'TZ\'] = \'Europe/Berlin\'\n-        time.tzset()\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n         registry[reg_key] = "Europe/Berlin"\n@@ -140,14 +138,10 @@ def setUp(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        # Change the timezone to europe to test timezones properly\n-        os.environ[\'TZ\'] = \'Europe/Berlin\'\n-        time.tzset()\n+        # Get the default timezone from the portal\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n         registry[reg_key] = "Europe/Berlin"\n-        portal_timezone = tz.gettz(default_timezone())\n-\n \n         comment = createObject("plone.Comment")\n         comment.text = "Lorem ipsum dolor sit amet."\n@@ -155,10 +149,10 @@ def setUp(self):\n         comment.author_name = "Jim"\n         \n         # Create date in CEST (ie not daylight savings = UTC+2)\n-        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).astimezone(portal_timezone)\n+        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).replace(tzinfo=tz.gettz("Europe/Berlin"))\n         \n         # Create date in CET (ie daylight savings = UTC+1)\n-        comment.modification_date = datetime(2008, 3, 12, 7, 32, 52).astimezone(portal_timezone)\n+        comment.modification_date = datetime(2008, 3, 12, 7, 32, 52).replace(tzinfo=tz.gettz("Europe/Berlin"))\n \n         self.comment_id = conversation.addComment(comment)\n         self.comment = comment.__of__(conversation)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-22T10:48:10+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/194f2d9f76ac8cc73274296eec1a95cd0049d791

Use configured portal timezone in tests

Files changed:
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 610ac4b7..a36f88bb 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -20,6 +20,7 @@\n from zope import interface\n from zope.annotation.interfaces import IAnnotations\n from zope.component import createObject\n+from zope.component import getUtility\n from zope.component import queryUtility\n \n import unittest\n@@ -34,6 +35,11 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         interface.alsoProvides(self.portal.REQUEST, IDiscussionLayer)\n \n+        # Set the portal timezone to something non-utc\n+        reg_key = "plone.portal_timezone"\n+        registry = getUtility(IRegistry)\n+        registry[reg_key] = "Europe/Berlin"\n+\n         self.typetool = self.portal.portal_types\n         self.portal_discussion = getToolByName(\n             self.portal,\n@@ -90,23 +96,25 @@ def test_timezone_naive_comment(self):\n \n         new_id = conversation.addComment(comment)\n \n-        # Check that comments have timezones\n-        self.assertTrue(comment.creation_date.tzinfo)\n-        self.assertTrue(comment.modification_date.tzinfo)\n+        # Check that comments have the correct portal timezones\n+        self.assertTrue(comment.creation_date.tzinfo,\n+                        tz.gettz("Europe/Berlin"))\n+        self.assertTrue(comment.modification_date.tzinfo,\n+                        tz.gettz("Europe/Berlin"))\n         \n         # Remove the timezone from the comment dates\n-        comment.creation_date = comment.creation_date.replace(tzinfo=None)\n-        comment.modification_date = comment.modification_date.replace(tzinfo=None)\n-\n-        # Check that the date is still correct\n+        comment.creation_date = datetime.utcnow()\n+        comment.modification_date = datetime.utcnow()\n+        \n+        # Check that the timezone naive date is converted to UTC\n+        # See https://github.com/plone/plone.app.discussion/pull/204\n         self.assertTrue(\n             conversation.last_comment_date\n-            - datetime.now().astimezone(tz.gettz(default_timezone())) \n+            - datetime.now().astimezone(timezone.utc) \n             < timedelta(seconds=1),\n         )\n-        # Check that comments still have timezones\n-        self.assertTrue(comment.creation_date.tzinfo)\n-        self.assertTrue(comment.modification_date.tzinfo)\n+        self.assertTrue(comment.creation_date.tzinfo, timezone.utc)\n+        self.assertTrue(comment.modification_date.tzinfo, timezone.utc)\n \n     def test_private_comment(self):\n         conversation = IConversation(self.portal.doc1)\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 4e11c0ef..79c81a09 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -138,7 +138,7 @@ def setUp(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        # Get the default timezone from the portal\n+        # Set the portal timezone to something non-utc\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n         registry[reg_key] = "Europe/Berlin"\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-22T11:16:14+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/35b11a0120a267e875e5c0e733b823a10ad090c4

Prevent test failures when converting to timezone

Files changed:
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex a36f88bb..54a63950 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -110,7 +110,7 @@ def test_timezone_naive_comment(self):\n         # See https://github.com/plone/plone.app.discussion/pull/204\n         self.assertTrue(\n             conversation.last_comment_date\n-            - datetime.now().astimezone(timezone.utc) \n+            - datetime.utcnow().replace(tzinfo=timezone.utc) \n             < timedelta(seconds=1),\n         )\n         self.assertTrue(comment.creation_date.tzinfo, timezone.utc)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-22T12:13:20+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/2df8ff4ea75567187a2c27769ce0f51b541ddddb

Try reindexing comment and increasing delta (in case of slow test causing failure)

Files changed:
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 54a63950..b177c74a 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -105,13 +105,15 @@ def test_timezone_naive_comment(self):\n         # Remove the timezone from the comment dates\n         comment.creation_date = datetime.utcnow()\n         comment.modification_date = datetime.utcnow()\n+\n+        comment.reindexObject()\n         \n         # Check that the timezone naive date is converted to UTC\n         # See https://github.com/plone/plone.app.discussion/pull/204\n         self.assertTrue(\n             conversation.last_comment_date\n             - datetime.utcnow().replace(tzinfo=timezone.utc) \n-            < timedelta(seconds=1),\n+            < timedelta(seconds=10),\n         )\n         self.assertTrue(comment.creation_date.tzinfo, timezone.utc)\n         self.assertTrue(comment.modification_date.tzinfo, timezone.utc)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-23T09:24:59+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/0d643964a22755547450742831175eedb4d288e2

Don't convert time when adding timezone in getter. Refactor time comparison in tests to correct direction (avoid comparing against negative deltas)

Files changed:
M plone/app/discussion/comment.py
M plone/app/discussion/tests/test_conversation.py

b'diff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 62d7811b..dc22187f 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -142,7 +142,7 @@ def __getattribute__(self, attr):\n             old_date = super(Comment, self).__getattribute__(attr)\n             if old_date.tzinfo is None:\n                 # Naive dates were always stored utc\n-                return old_date.astimezone(timezone.utc)\n+                return old_date.replace(tzinfo=timezone.utc)\n             return old_date\n         return super(Comment, self).__getattribute__(attr)\n \ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex b177c74a..569b5f31 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -79,9 +79,9 @@ def test_add_comment(self):\n         self.assertEqual(len(tuple(conversation.getThreads())), 1)\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n-            conversation.last_comment_date\n-            - datetime.now().astimezone(tz.gettz(default_timezone())) \n-            < timedelta(seconds=1),\n+            datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - conversation.last_comment_date \n+            >= timedelta(seconds=0) <= timedelta(seconds=1),\n         )\n \n     def test_timezone_naive_comment(self):\n@@ -105,15 +105,13 @@ def test_timezone_naive_comment(self):\n         # Remove the timezone from the comment dates\n         comment.creation_date = datetime.utcnow()\n         comment.modification_date = datetime.utcnow()\n-\n-        comment.reindexObject()\n         \n         # Check that the timezone naive date is converted to UTC\n         # See https://github.com/plone/plone.app.discussion/pull/204\n         self.assertTrue(\n-            conversation.last_comment_date\n-            - datetime.utcnow().replace(tzinfo=timezone.utc) \n-            < timedelta(seconds=10),\n+            datetime.utcnow().replace(tzinfo=timezone.utc) \n+            - conversation.last_comment_date \n+            >= timedelta(seconds=0) <= timedelta(seconds=1),\n         )\n         self.assertTrue(comment.creation_date.tzinfo, timezone.utc)\n         self.assertTrue(comment.modification_date.tzinfo, timezone.utc)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-23T09:35:27+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/2380bdacb3b0f4a1d758247a2717bfb0d9ef81b7

black/flake8

Files changed:
M plone/app/discussion/browser/comments.py
M plone/app/discussion/comment.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 0c566515..02ca122d 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -1,8 +1,6 @@\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n-from datetime import datetime\n-from datetime import timezone\n from DateTime import DateTime\n from plone.app.discussion import _\n from plone.app.discussion.browser.validator import CaptchaValidator\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex dc22187f..c4610484 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -5,11 +5,10 @@\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from Acquisition import Implicit\n-from datetime import datetime\n-from datetime import timezone\n from OFS.owner import Owned\n from OFS.role import RoleManager\n from OFS.Traversable import Traversable\n+from datetime import timezone\n from persistent import Persistent\n from plone.app.discussion import _\n from plone.app.discussion.events import CommentAddedEvent\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 569b5f31..ba70de90 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -80,8 +80,9 @@ def test_add_comment(self):\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n             datetime.now().astimezone(tz.gettz(default_timezone()))\n-            - conversation.last_comment_date \n-            >= timedelta(seconds=0) <= timedelta(seconds=1),\n+            - conversation.last_comment_date\n+            >= timedelta(seconds=0)\n+            <= timedelta(seconds=1),\n         )\n \n     def test_timezone_naive_comment(self):\n@@ -94,24 +95,23 @@ def test_timezone_naive_comment(self):\n         comment = createObject("plone.Comment")\n         comment.text = "Comment text"\n \n-        new_id = conversation.addComment(comment)\n+        conversation.addComment(comment)\n \n         # Check that comments have the correct portal timezones\n-        self.assertTrue(comment.creation_date.tzinfo,\n-                        tz.gettz("Europe/Berlin"))\n-        self.assertTrue(comment.modification_date.tzinfo,\n-                        tz.gettz("Europe/Berlin"))\n-        \n+        self.assertTrue(comment.creation_date.tzinfo, tz.gettz("Europe/Berlin"))\n+        self.assertTrue(comment.modification_date.tzinfo, tz.gettz("Europe/Berlin"))\n+\n         # Remove the timezone from the comment dates\n         comment.creation_date = datetime.utcnow()\n         comment.modification_date = datetime.utcnow()\n-        \n+\n         # Check that the timezone naive date is converted to UTC\n         # See https://github.com/plone/plone.app.discussion/pull/204\n         self.assertTrue(\n-            datetime.utcnow().replace(tzinfo=timezone.utc) \n-            - conversation.last_comment_date \n-            >= timedelta(seconds=0) <= timedelta(seconds=1),\n+            datetime.utcnow().replace(tzinfo=timezone.utc)\n+            - conversation.last_comment_date\n+            >= timedelta(seconds=0)\n+            <= timedelta(seconds=1),\n         )\n         self.assertTrue(comment.creation_date.tzinfo, timezone.utc)\n         self.assertTrue(comment.modification_date.tzinfo, timezone.utc)\n@@ -531,20 +531,23 @@ def test_last_comment_date(self):\n         # swapped in\n         comment1 = createObject("plone.Comment")\n         comment1.text = "Comment text"\n-        comment1.creation_date =\\\n-            datetime.now().astimezone(tz.gettz(default_timezone())) - timedelta(4)\n+        comment1.creation_date = datetime.now().astimezone(\n+            tz.gettz(default_timezone())\n+        ) - timedelta(4)\n         conversation.addComment(comment1)\n \n         comment2 = createObject("plone.Comment")\n         comment2.text = "Comment text"\n-        comment2.creation_date =\\\n-            datetime.now().astimezone(tz.gettz(default_timezone())) - timedelta(2)\n+        comment2.creation_date = datetime.now().astimezone(\n+            tz.gettz(default_timezone())\n+        ) - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment text"\n-        comment3.creation_date =\\\n-            datetime.now().astimezone(tz.gettz(default_timezone())) - timedelta(1)\n+        comment3.creation_date = datetime.now().astimezone(\n+            tz.gettz(default_timezone())\n+        ) - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 79c81a09..5944b85e 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -4,10 +4,8 @@\n from ..interfaces import IConversation\n from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from datetime import datetime\n-from datetime import timezone\n from dateutil import tz\n from DateTime import DateTime\n-from plone.app.event.base import localized_now\n from plone.app.event.base import default_timezone\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -16,8 +14,6 @@\n from zope.component import createObject\n from zope.component import getUtility\n \n-import time\n-import os\n import unittest\n \n \n@@ -147,10 +143,10 @@ def setUp(self):\n         comment.text = "Lorem ipsum dolor sit amet."\n         comment.creator = "jim"\n         comment.author_name = "Jim"\n-        \n+\n         # Create date in CEST (ie not daylight savings = UTC+2)\n         comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).replace(tzinfo=tz.gettz("Europe/Berlin"))\n-        \n+\n         # Create date in CET (ie daylight savings = UTC+1)\n         comment.modification_date = datetime(2008, 3, 12, 7, 32, 52).replace(tzinfo=tz.gettz("Europe/Berlin"))\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T21:09:49+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/a069f49719adde298ce394131ae963450d00a6ea

Change timezone to America/Los_Angeles to expose DateTime exceptions

Files changed:
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex ba70de90..b14888ec 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -38,7 +38,7 @@ def setUp(self):\n         # Set the portal timezone to something non-utc\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n-        registry[reg_key] = "Europe/Berlin"\n+        registry[reg_key] = "America/Los_Angeles"\n \n         self.typetool = self.portal.portal_types\n         self.portal_discussion = getToolByName(\n@@ -98,8 +98,8 @@ def test_timezone_naive_comment(self):\n         conversation.addComment(comment)\n \n         # Check that comments have the correct portal timezones\n-        self.assertTrue(comment.creation_date.tzinfo, tz.gettz("Europe/Berlin"))\n-        self.assertTrue(comment.modification_date.tzinfo, tz.gettz("Europe/Berlin"))\n+        self.assertTrue(comment.creation_date.tzinfo, tz.gettz("America/Los_Angeles"))\n+        self.assertTrue(comment.modification_date.tzinfo, tz.gettz("America/Los_Angeles"))\n \n         # Remove the timezone from the comment dates\n         comment.creation_date = datetime.utcnow()\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 5944b85e..d654e454 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -40,10 +40,10 @@ def setUp(self):\n         workflow = self.portal.portal_workflow\n         workflow.doActionFor(self.portal.doc1, "publish")\n \n-        # Change the timezone to europe to test timezones properly\n+        # Change the timezone to PDT to test timezones properly\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n-        registry[reg_key] = "Europe/Berlin"\n+        registry[reg_key] = "America/Los_Angeles"\n         self.portal_timezone = tz.gettz(default_timezone())\n \n         # Create a conversation.\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T21:10:12+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/ab92def1a6a6791a7bad0c5c9e685846d055ec1f

Use plone.app.event.base.DT to convert datetime -&gt; DateTime

Files changed:
M plone/app/discussion/catalog.py

b'diff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex bc7bdebe..59a83a6a 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -6,6 +6,7 @@\n from DateTime import DateTime\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n+from plone.app.event.base import DT\n from plone.base.utils import safe_text\n from plone.indexer import indexer\n from plone.uuid.interfaces import IUUID\n@@ -102,43 +103,19 @@ def in_response_to(object):\n @indexer(IComment)\n def effective(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DateTime(\n-        object.creation_date.year,\n-        object.creation_date.month,\n-        object.creation_date.day,\n-        object.creation_date.hour,\n-        object.creation_date.minute,\n-        object.creation_date.second,\n-        object.creation_date.tzname(),\n-    )\n+    return DT( object.creation_date )\n \n \n @indexer(IComment)\n def created(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DateTime(\n-        object.creation_date.year,\n-        object.creation_date.month,\n-        object.creation_date.day,\n-        object.creation_date.hour,\n-        object.creation_date.minute,\n-        object.creation_date.second,\n-        object.creation_date.tzname(),\n-    )\n+    return DT(object.modification_date)\n \n \n @indexer(IComment)\n def modified(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DateTime(\n-        object.modification_date.year,\n-        object.modification_date.month,\n-        object.modification_date.day,\n-        object.modification_date.hour,\n-        object.modification_date.minute,\n-        object.modification_date.second,\n-        object.modification_date.tzname(),\n-    )\n+    return DT(object.modification_date)\n \n \n # Override the conversation indexers for comments\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T21:10:26+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/a95e67bcaed2dfb36b6340fad1ea816fee1090ac

Use py3 super syntax

Files changed:
M plone/app/discussion/comment.py

b'diff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex c4610484..0186a6e9 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -143,7 +143,7 @@ def __getattribute__(self, attr):\n                 # Naive dates were always stored utc\n                 return old_date.replace(tzinfo=timezone.utc)\n             return old_date\n-        return super(Comment, self).__getattribute__(attr)\n+        return super().__getattribute__(attr)\n \n     @property\n     def __name__(self):\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T21:10:39+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/a3818a4743472f18585fd98c76c1dd2de84c8ced

Update changelog

Files changed:
M news/204.bugfix

b'diff --git a/news/204.bugfix b/news/204.bugfix\nindex 6fe3d20a..c6f022d7 100644\n--- a/news/204.bugfix\n+++ b/news/204.bugfix\n@@ -1 +1 @@\n- - Set timezones for creation and modification dates of comments [instification]\n\\ No newline at end of file\n+ Set timezones for creation and modification dates of comments [instification]\n\\ No newline at end of file\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T21:44:57+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/c5f17dc5e86d8d90aafdf72a03e739a448745752

Bump version for linked plone.restapi test_statictime version check

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 31aa7769..e5dfd165 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "4.0.0b4.dev0"\n+version = "4.0.0b4.dev1"\n \n install_requires = [\n     "setuptools",\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T22:43:35+01:00
Author: Jon Pentland (instification) <jon.pentland@pretagov.co.uk>
Commit: https://github.com/plone/plone.app.discussion/commit/aa38be3ac2b220f5d1abb5e5f3202653c820909f

Use correct date when indexing. Update comment indexes to use America/Los_Angeles

Files changed:
M plone/app/discussion/catalog.py
M plone/app/discussion/tests/test_indexers.py

b'diff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 59a83a6a..5acb28ba 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -109,7 +109,7 @@ def effective(object):\n @indexer(IComment)\n def created(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DT(object.modification_date)\n+    return DT(object.creation_date)\n \n \n @indexer(IComment)\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex d654e454..a6f577fe 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -137,18 +137,18 @@ def setUp(self):\n         # Set the portal timezone to something non-utc\n         reg_key = "plone.portal_timezone"\n         registry = getUtility(IRegistry)\n-        registry[reg_key] = "Europe/Berlin"\n+        registry[reg_key] = "America/Los_Angeles"\n \n         comment = createObject("plone.Comment")\n         comment.text = "Lorem ipsum dolor sit amet."\n         comment.creator = "jim"\n         comment.author_name = "Jim"\n \n-        # Create date in CEST (ie not daylight savings = UTC+2)\n-        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).replace(tzinfo=tz.gettz("Europe/Berlin"))\n+        # Create date in PDT (ie daylight savings)\n+        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).replace(tzinfo=tz.gettz("America/Los_Angeles"))\n \n-        # Create date in CET (ie daylight savings = UTC+1)\n-        comment.modification_date = datetime(2008, 3, 12, 7, 32, 52).replace(tzinfo=tz.gettz("Europe/Berlin"))\n+        # Create date in PST (ie not daylight savings)\n+        comment.modification_date = datetime(2008, 2, 12, 7, 32, 52).replace(tzinfo=tz.gettz("America/Los_Angeles"))\n \n         self.comment_id = conversation.addComment(comment)\n         self.comment = comment.__of__(conversation)\n@@ -182,15 +182,15 @@ def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, "GMT+2"),\n+            DateTime(2006, 9, 17, 14, 18, 12, "America/Los_Angeles"),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, "GMT+2"),\n+            DateTime(2006, 9, 17, 14, 18, 12, "America/Los_Angeles"),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, "GMT+1"),\n+            DateTime(2008, 2, 12, 7, 32, 52, "America/Los_Angeles"),\n         )\n \n     def test_searchable_text(self):\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-10-24T15:38:11-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.discussion/commit/c73a50d1d80393bd2687a0b7fe1419e9e441d8d5

Merge pull request #204 from plone/set_timezone

Set timezone for creation and modification dates of comments

Files changed:
A news/204.bugfix
M plone/app/discussion/browser/comments.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/profiles/default/metadata.xml
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/upgrades.zcml
M setup.py

b'diff --git a/news/204.bugfix b/news/204.bugfix\nnew file mode 100644\nindex 00000000..c6f022d7\n--- /dev/null\n+++ b/news/204.bugfix\n@@ -0,0 +1 @@\n+ Set timezones for creation and modification dates of comments [instification]\n\\ No newline at end of file\ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 387ceadf..02ca122d 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -1,7 +1,6 @@\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n-from datetime import datetime\n from DateTime import DateTime\n from plone.app.discussion import _\n from plone.app.discussion.browser.validator import CaptchaValidator\n@@ -10,6 +9,7 @@\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n+from plone.app.event.base import localized_now\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n@@ -192,8 +192,8 @@ def create_comment(self, data):\n             setattr(comment, attribute, data[attribute])\n \n         # Set dates\n-        comment.creation_date = datetime.utcnow()\n-        comment.modification_date = datetime.utcnow()\n+        comment.creation_date = localized_now()\n+        comment.modification_date = localized_now()\n \n         # Get author name and email\n         comment.author_name, comment.author_email = self.get_author(data)\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 6413d114..5acb28ba 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -6,6 +6,7 @@\n from DateTime import DateTime\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n+from plone.app.event.base import DT\n from plone.base.utils import safe_text\n from plone.indexer import indexer\n from plone.uuid.interfaces import IUUID\n@@ -102,43 +103,19 @@ def in_response_to(object):\n @indexer(IComment)\n def effective(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DateTime(\n-        object.creation_date.year,\n-        object.creation_date.month,\n-        object.creation_date.day,\n-        object.creation_date.hour,\n-        object.creation_date.minute,\n-        object.creation_date.second,\n-        "GMT",\n-    )\n+    return DT( object.creation_date )\n \n \n @indexer(IComment)\n def created(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DateTime(\n-        object.creation_date.year,\n-        object.creation_date.month,\n-        object.creation_date.day,\n-        object.creation_date.hour,\n-        object.creation_date.minute,\n-        object.creation_date.second,\n-        "GMT",\n-    )\n+    return DT(object.creation_date)\n \n \n @indexer(IComment)\n def modified(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n-    return DateTime(\n-        object.modification_date.year,\n-        object.modification_date.month,\n-        object.modification_date.day,\n-        object.modification_date.hour,\n-        object.modification_date.minute,\n-        object.modification_date.second,\n-        "GMT",\n-    )\n+    return DT(object.modification_date)\n \n \n # Override the conversation indexers for comments\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 438e7266..0186a6e9 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -5,10 +5,10 @@\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from Acquisition import Implicit\n-from datetime import datetime\n from OFS.owner import Owned\n from OFS.role import RoleManager\n from OFS.Traversable import Traversable\n+from datetime import timezone\n from persistent import Persistent\n from plone.app.discussion import _\n from plone.app.discussion.events import CommentAddedEvent\n@@ -20,6 +20,7 @@\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.event.base import localized_now\n from plone.base.interfaces.controlpanel import IMailSchema\n from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n@@ -119,7 +120,7 @@ class Comment(\n     # IConversation.addComment().\n \n     def __init__(self):\n-        self.creation_date = self.modification_date = datetime.utcnow()\n+        self.creation_date = self.modification_date = localized_now()\n         self.mime_type = "text/plain"\n \n         user = getSecurityManager().getUser()\n@@ -133,6 +134,17 @@ def __init__(self):\n                 user.getId(): ["Owner"],\n             }\n \n+    def __getattribute__(self, attr):\n+        # In older versions of the add-on dates were set timezone naive.\n+        # In tz aware versions, the value is stored as self._creation_date\n+        if attr in ["creation_date", "modification_date"]:\n+            old_date = super(Comment, self).__getattribute__(attr)\n+            if old_date.tzinfo is None:\n+                # Naive dates were always stored utc\n+                return old_date.replace(tzinfo=timezone.utc)\n+            return old_date\n+        return super().__getattribute__(attr)\n+\n     @property\n     def __name__(self):\n         return self.comment_id and str(self.comment_id) or None\ndiff --git a/plone/app/discussion/profiles/default/metadata.xml b/plone/app/discussion/profiles/default/metadata.xml\nindex 141a440c..3b4e7301 100644\n--- a/plone/app/discussion/profiles/default/metadata.xml\n+++ b/plone/app/discussion/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n- <version>2000</version>\n+ <version>2001</version>\n  <dependencies>\n   <dependency>profile-plone.resource:default</dependency>\n   <dependency>profile-plone.app.registry:default</dependency>\ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex 395f6c2f..03af8e94 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -1,6 +1,7 @@\n """Test the plone.app.discussion catalog indexes\n """\n from datetime import datetime\n+from datetime import timezone\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.testing import (  # noqa\n     PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n@@ -67,8 +68,10 @@ def setUp(self):\n         comment1.text = "Comment text"\n         comment1.creator = "jim"\n         comment1.author_username = "Jim"\n-        comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n-        comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n+        comment1.creation_date = \\\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n+        comment1.modification_date = \\\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n \n         new_comment1_id = conversation.addComment(comment1)\n         self.comment_id = new_comment1_id\n@@ -115,15 +118,17 @@ def test_last_comment_date(self):\n         self.assertTrue("last_comment_date" in self.doc1_brain)\n         self.assertEqual(\n             self.doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12),\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc),\n         )\n \n         # Add another comment and check if last comment date is updated.\n         comment2 = createObject("plone.Comment")\n         comment2.title = "Comment 2"\n         comment2.text = "Comment text"\n-        comment2.creation_date = datetime(2009, 9, 17, 14, 18, 12)\n-        comment2.modification_date = datetime(2009, 9, 17, 14, 18, 12)\n+        comment2.creation_date = \\\n+            datetime(2009, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n+        comment2.modification_date = \\\n+            datetime(2009, 9, 17, 14, 18, 12).astimezone(timezone.utc)\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n@@ -141,7 +146,7 @@ def test_last_comment_date(self):\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2009, 9, 17, 14, 18, 12),\n+            datetime(2009, 9, 17, 14, 18, 12).astimezone(timezone.utc),\n         )\n \n         # Remove the comment again\n@@ -158,7 +163,7 @@ def test_last_comment_date(self):\n         doc1_brain = brains[0]\n         self.assertEqual(\n             doc1_brain.last_comment_date,\n-            datetime(2006, 9, 17, 14, 18, 12),\n+            datetime(2006, 9, 17, 14, 18, 12).astimezone(timezone.utc),\n         )\n \n         # remove all comments\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex a0a06696..f9a9ac05 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -63,7 +63,7 @@ def test_UTCDates(self):\n                 "get hidden by that"\n             )\n         comment1 = createObject("plone.Comment")\n-        local_utc = datetime.datetime.utcnow()\n+        local_utc = datetime.datetime.now().astimezone(datetime.timezone.utc)\n         for date in (comment1.creation_date, comment1.modification_date):\n             difference = abs(date - local_utc)\n             difference = difference.seconds\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex febce286..b14888ec 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -8,6 +8,9 @@\n from Acquisition import aq_parent\n from datetime import datetime\n from datetime import timedelta\n+from datetime import timezone\n+from dateutil import tz\n+from plone.app.event.base import default_timezone\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\n@@ -17,6 +20,7 @@\n from zope import interface\n from zope.annotation.interfaces import IAnnotations\n from zope.component import createObject\n+from zope.component import getUtility\n from zope.component import queryUtility\n \n import unittest\n@@ -31,6 +35,11 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         interface.alsoProvides(self.portal.REQUEST, IDiscussionLayer)\n \n+        # Set the portal timezone to something non-utc\n+        reg_key = "plone.portal_timezone"\n+        registry = getUtility(IRegistry)\n+        registry[reg_key] = "America/Los_Angeles"\n+\n         self.typetool = self.portal.portal_types\n         self.portal_discussion = getToolByName(\n             self.portal,\n@@ -70,8 +79,42 @@ def test_add_comment(self):\n         self.assertEqual(len(tuple(conversation.getThreads())), 1)\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n-            conversation.last_comment_date - datetime.utcnow() < timedelta(seconds=1),\n+            datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - conversation.last_comment_date\n+            >= timedelta(seconds=0)\n+            <= timedelta(seconds=1),\n+        )\n+\n+    def test_timezone_naive_comment(self):\n+        # Create a conversation. In this case we doesn\'t assign it to an\n+        # object, as we just want to check the Conversation object API.\n+        conversation = IConversation(self.portal.doc1)\n+\n+        # Add a comment. Note: in real life, we always create comments via the\n+        # factory to allow different factories to be swapped in\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+\n+        conversation.addComment(comment)\n+\n+        # Check that comments have the correct portal timezones\n+        self.assertTrue(comment.creation_date.tzinfo, tz.gettz("America/Los_Angeles"))\n+        self.assertTrue(comment.modification_date.tzinfo, tz.gettz("America/Los_Angeles"))\n+\n+        # Remove the timezone from the comment dates\n+        comment.creation_date = datetime.utcnow()\n+        comment.modification_date = datetime.utcnow()\n+\n+        # Check that the timezone naive date is converted to UTC\n+        # See https://github.com/plone/plone.app.discussion/pull/204\n+        self.assertTrue(\n+            datetime.utcnow().replace(tzinfo=timezone.utc)\n+            - conversation.last_comment_date\n+            >= timedelta(seconds=0)\n+            <= timedelta(seconds=1),\n         )\n+        self.assertTrue(comment.creation_date.tzinfo, timezone.utc)\n+        self.assertTrue(comment.modification_date.tzinfo, timezone.utc)\n \n     def test_private_comment(self):\n         conversation = IConversation(self.portal.doc1)\n@@ -488,27 +531,35 @@ def test_last_comment_date(self):\n         # swapped in\n         comment1 = createObject("plone.Comment")\n         comment1.text = "Comment text"\n-        comment1.creation_date = datetime.utcnow() - timedelta(4)\n+        comment1.creation_date = datetime.now().astimezone(\n+            tz.gettz(default_timezone())\n+        ) - timedelta(4)\n         conversation.addComment(comment1)\n \n         comment2 = createObject("plone.Comment")\n         comment2.text = "Comment text"\n-        comment2.creation_date = datetime.utcnow() - timedelta(2)\n+        comment2.creation_date = datetime.now().astimezone(\n+            tz.gettz(default_timezone())\n+        ) - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment text"\n-        comment3.creation_date = datetime.utcnow() - timedelta(1)\n+        comment3.creation_date = datetime.now().astimezone(\n+            tz.gettz(default_timezone())\n+        ) - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.utcnow() - timedelta(hours=23, minutes=59, seconds=59),\n+            < datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.utcnow() - timedelta(days=1, seconds=1),\n+            > datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - timedelta(days=1, seconds=1),\n         )\n \n         # remove the latest comment\n@@ -518,11 +569,13 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.utcnow() - timedelta(days=1, hours=23, minutes=59, seconds=59),\n+            < datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.utcnow() - timedelta(days=2, seconds=1),\n+            > datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - timedelta(days=2, seconds=1),\n         )\n \n         # remove the latest comment again\n@@ -532,11 +585,13 @@ def test_last_comment_date(self):\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n             conversation.last_comment_date\n-            < datetime.utcnow() - timedelta(days=3, hours=23, minutes=59, seconds=59),\n+            < datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n             conversation.last_comment_date\n-            > datetime.utcnow() - timedelta(days=4, seconds=2),\n+            > datetime.now().astimezone(tz.gettz(default_timezone()))\n+            - timedelta(days=4, seconds=2),\n         )\n \n     def test_get_comments_full(self):\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex b1b30f1e..a6f577fe 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -4,11 +4,15 @@\n from ..interfaces import IConversation\n from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from datetime import datetime\n+from dateutil import tz\n from DateTime import DateTime\n+from plone.app.event.base import default_timezone\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.indexer.delegate import DelegatingIndexerFactory\n+from plone.registry.interfaces import IRegistry\n from zope.component import createObject\n+from zope.component import getUtility\n \n import unittest\n \n@@ -36,6 +40,12 @@ def setUp(self):\n         workflow = self.portal.portal_workflow\n         workflow.doActionFor(self.portal.doc1, "publish")\n \n+        # Change the timezone to PDT to test timezones properly\n+        reg_key = "plone.portal_timezone"\n+        registry = getUtility(IRegistry)\n+        registry[reg_key] = "America/Los_Angeles"\n+        self.portal_timezone = tz.gettz(default_timezone())\n+\n         # Create a conversation.\n         conversation = IConversation(self.portal.doc1)\n \n@@ -43,6 +53,8 @@ def setUp(self):\n         comment1.text = "Comment Text"\n         comment1.creator = "jim"\n         comment1.author_username = "Jim"\n+        # Purposefully exclude timezone to test the conversation getter\n+        # (see plone.app.discussion.comment.Comment object)\n         comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n         self.new_id1 = conversation.addComment(comment1)\n@@ -51,16 +63,16 @@ def setUp(self):\n         comment2.text = "Comment Text"\n         comment2.creator = "emma"\n         comment2.author_username = "Emma"\n-        comment2.creation_date = datetime(2007, 12, 13, 4, 18, 12)\n-        comment2.modification_date = datetime(2007, 12, 13, 4, 18, 12)\n+        comment2.creation_date = datetime(2007, 12, 13, 4, 18, 12).astimezone(self.portal_timezone)\n+        comment2.modification_date = datetime(2007, 12, 13, 4, 18, 12).astimezone(self.portal_timezone)\n         self.new_id2 = conversation.addComment(comment2)\n \n         comment3 = createObject("plone.Comment")\n         comment3.text = "Comment Text"\n         comment3.creator = "lukas"\n         comment3.author_username = "Lukas"\n-        comment3.creation_date = datetime(2009, 4, 12, 11, 12, 12)\n-        comment3.modification_date = datetime(2009, 4, 12, 11, 12, 12)\n+        comment3.creation_date = datetime(2009, 4, 12, 11, 12, 12).astimezone(self.portal_timezone)\n+        comment3.modification_date = datetime(2009, 4, 12, 11, 12, 12).astimezone(self.portal_timezone)\n         self.new_id3 = conversation.addComment(comment3)\n \n         self.conversation = conversation\n@@ -88,12 +100,12 @@ def test_conversation_last_comment_date(self):\n         )\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2009, 4, 12, 11, 12, 12),\n+            datetime(2009, 4, 12, 11, 12, 12).astimezone(self.portal_timezone),\n         )\n         del self.conversation[self.new_id3]\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n-            datetime(2007, 12, 13, 4, 18, 12),\n+            datetime(2007, 12, 13, 4, 18, 12).astimezone(self.portal_timezone),\n         )\n         del self.conversation[self.new_id2]\n         del self.conversation[self.new_id1]\n@@ -122,12 +134,21 @@ def setUp(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n+        # Set the portal timezone to something non-utc\n+        reg_key = "plone.portal_timezone"\n+        registry = getUtility(IRegistry)\n+        registry[reg_key] = "America/Los_Angeles"\n+\n         comment = createObject("plone.Comment")\n         comment.text = "Lorem ipsum dolor sit amet."\n         comment.creator = "jim"\n         comment.author_name = "Jim"\n-        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n-        comment.modification_date = datetime(2008, 3, 12, 7, 32, 52)\n+\n+        # Create date in PDT (ie daylight savings)\n+        comment.creation_date = datetime(2006, 9, 17, 14, 18, 12).replace(tzinfo=tz.gettz("America/Los_Angeles"))\n+\n+        # Create date in PST (ie not daylight savings)\n+        comment.modification_date = datetime(2008, 2, 12, 7, 32, 52).replace(tzinfo=tz.gettz("America/Los_Angeles"))\n \n         self.comment_id = conversation.addComment(comment)\n         self.comment = comment.__of__(conversation)\n@@ -161,15 +182,15 @@ def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n+            DateTime(2006, 9, 17, 14, 18, 12, "America/Los_Angeles"),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n+            DateTime(2006, 9, 17, 14, 18, 12, "America/Los_Angeles"),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, "GMT"),\n+            DateTime(2008, 2, 12, 7, 32, 52, "America/Los_Angeles"),\n         )\n \n     def test_searchable_text(self):\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 40cdc8fe..fbad45cf 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -2,6 +2,8 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n+from plone import api\n+from datetime import timezone\n \n import logging\n \n@@ -77,3 +79,24 @@ def add_js_to_plone_legacy(context):\n def extend_review_workflow(context):\n     """Apply changes made to review workflow."""\n     upgrade_comment_workflows_retain_current_workflow(context)\n+\n+\n+def set_timezone_on_dates(context):\n+    """Ensure timezone data is stored against all creation/modified dates"""\n+    pc = api.portal.get_tool(\'portal_catalog\')\n+    creations = 0\n+    modifieds = 0\n+    logger.info(\'Setting timezone information on comment dates\')\n+    comments = pc.search({\'Type\': \'Comment\'})\n+    for cbrain in comments:\n+        comment = cbrain.getObject()\n+        if not comment.creation_date.tzinfo:\n+            creations += 1\n+            comment.creation_date = \\\n+                comment.creation_date.astimezone(timezone.utc)\n+        if not comment.modification_date.tzinfo:\n+            modifieds += 1\n+            comment.modification_date = \\\n+                comment.modification_date.astimezone(timezone.utc)\n+    logger.info(\'Updated %i creation dates and %i modification dates\' %\n+                (creations, modifieds))\ndiff --git a/plone/app/discussion/upgrades.zcml b/plone/app/discussion/upgrades.zcml\nindex 20b288e0..7f8ffe7f 100644\n--- a/plone/app/discussion/upgrades.zcml\n+++ b/plone/app/discussion/upgrades.zcml\n@@ -88,4 +88,15 @@\n         handler=".upgrades.upgrade_comment_workflows" />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+    source="2000"\n+    destination="2001"\n+    profile="plone.app.discussion:default">\n+    <genericsetup:upgradeStep\n+        title="Set timezone on comment dates"\n+        description="Ensure the timezone is set for comment dates"\n+        handler=".upgrades.set_timezone_on_dates"\n+        />\n+  </genericsetup:upgradeSteps>\n+\n </configure>\ndiff --git a/setup.py b/setup.py\nindex 31aa7769..e5dfd165 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "4.0.0b4.dev0"\n+version = "4.0.0b4.dev1"\n \n install_requires = [\n     "setuptools",\n'

