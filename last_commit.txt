Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-01-15T15:43:00+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/6a56122120742d6d7cad22eb6a2beb878d976ee3

Remove the upgrade steps that are not relevant anymore in Plone 6

Closes #613

Files changed:
A news/613.breaking
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/upgrades.py
M plone/app/contenttypes/upgrades.zcml
D plone/app/contenttypes/tests/test_upgrade.py

b'diff --git a/news/613.breaking b/news/613.breaking\nnew file mode 100644\nindex 00000000..9c229295\n--- /dev/null\n+++ b/news/613.breaking\n@@ -0,0 +1 @@\n+Remove upgrade steps that are not relevant anymore in Plone 6 [ale-rt]\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex a2261918..a4783797 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -2,7 +2,6 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n-from plone.app.contenttypes.upgrades import use_new_view_names\n from plone.app.dexterity.behaviors import constrains\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.fti import IDexterityFTI\n@@ -329,4 +328,3 @@ def setup_various(context):\n     target_language, is_combined_language, locale = _get_locales_info(portal)\n     _setup_calendar(portal, locale)\n     _setup_visible_ids(portal, target_language, locale)\n-    use_new_view_names(portal, types_to_fix=[\'Plone Site\'])\ndiff --git a/plone/app/contenttypes/tests/test_upgrade.py b/plone/app/contenttypes/tests/test_upgrade.py\ndeleted file mode 100644\nindex e0f0d5ed..00000000\n--- a/plone/app/contenttypes/tests/test_upgrade.py\n+++ /dev/null\n@@ -1,181 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n-from plone.app.contenttypes.upgrades import update_fti\n-from plone.app.contenttypes.upgrades import use_new_view_names\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.dexterity.interfaces import IDexterityFTI\n-from zope.component import queryUtility\n-\n-import unittest\n-\n-\n-class UpgradeTo1000IntegrationTest(unittest.TestCase):\n-\n-    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-\n-    def test_update_fti_document(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:document.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:document.xml\'\n-        )\n-\n-    def test_update_fti_file(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:file.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:file.xml\'\n-        )\n-\n-    def test_update_fti_folder(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:folder.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:folder.xml\'\n-        )\n-\n-    def test_update_fti_image(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:image.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:file.xml\'\n-        )\n-\n-    def test_update_fti_link(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:link.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:link.xml\'\n-        )\n-\n-    def test_update_fti_news_item(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:news_item.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:news_item.xml\'\n-        )\n-\n-    def test_use_new_view_names(self):\n-        old_methods = (\n-            \'atct_album_view\',\n-            \'folder_summary_view\',\n-            \'folder_tabular_view\',\n-            \'folder_listing\',\n-        )\n-\n-        new_methods = (\n-            \'listing_view\',\n-            \'summary_view\',\n-            \'tabular_view\',\n-            \'full_view\',\n-            \'album_view\',\n-            \'event_listing\'\n-        )\n-\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        folder = self.portal[\'folder1\']\n-        folder.setLayout(\'folder_summary_view\')\n-        folder_fti = queryUtility(IDexterityFTI, name=\'Folder\')\n-        folder_fti.manage_changeProperties(\n-            view_methods=old_methods,\n-            default_view=\'folder_summary_view\',\n-        )\n-\n-        portal_fti = self.portal.portal_types.get(\'Plone Site\')\n-        portal_fti.manage_changeProperties(\n-            view_methods=old_methods,\n-            default_view=\'folder_listing\',\n-        )\n-        self.portal.setLayout(\'folder_tabular_view\')\n-        self.portal.setDefaultPage(\'folder1\')\n-\n-        self.assertEqual(folder_fti.view_methods, old_methods)\n-        self.assertEqual(folder_fti.default_view, \'folder_summary_view\')\n-\n-        self.assertEqual(portal_fti.view_methods, old_methods)\n-        self.assertEqual(portal_fti.default_view, \'folder_listing\')\n-\n-        # run upgrade-step\n-        use_new_view_names(self.portal, types_to_fix=[\'Folder\', \'Plone Site\'])\n-\n-        self.assertEqual(folder_fti.view_methods, new_methods)\n-        self.assertEqual(folder_fti.default_view, \'summary_view\')\n-        self.assertEqual(folder.getLayout(), \'summary_view\')\n-\n-        self.assertEqual(self.portal.getLayout(), \'tabular_view\')\n-        self.assertEqual(self.portal.getDefaultPage(), \'folder1\')\n-        self.assertEqual(portal_fti.default_view, \'listing_view\')\n-        self.assertEqual(portal_fti.view_methods, new_methods)\ndiff --git a/plone/app/contenttypes/upgrades.py b/plone/app/contenttypes/upgrades.py\nindex a58b7174..b18a17cd 100644\n--- a/plone/app/contenttypes/upgrades.py\n+++ b/plone/app/contenttypes/upgrades.py\n@@ -1,262 +1,12 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.utils import DEFAULT_TYPES\n from plone.dexterity.interfaces import IDexterityFTI\n-from Products.CMFCore.utils import getToolByName\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n \n import logging\n \n \n logger = logging.getLogger(name=\'plone.app.contenttypes upgrade\')\n \n-LISTING_VIEW_MAPPING = {  # OLD (AT and old DX) : NEW\n-    \'all_content\': \'full_view\',\n-    \'atct_album_view\': \'album_view\',\n-    \'atct_topic_view\': \'listing_view\',\n-    \'collection_view\': \'listing_view\',\n-    \'folder_album_view\': \'album_view\',\n-    \'folder_full_view\': \'full_view\',\n-    \'folder_listing\': \'listing_view\',\n-    \'folder_listing_view\': \'listing_view\',\n-    \'folder_summary_view\': \'summary_view\',\n-    \'folder_tabular_view\': \'tabular_view\',\n-    \'standard_view\': \'listing_view\',\n-    \'thumbnail_view\': \'album_view\',\n-    \'view\': \'listing_view\',\n-}\n-\n-\n-def _brains2objs(brains):\n-    \'\'\' Generator that takes a brains lazy map and:\n-    - yields the objects that can be resolved\n-    - logs the brain that cannot be resolved\n-    \'\'\'\n-    for brain in brains:\n-        obj = brain.getObject()\n-        if obj:\n-            yield obj\n-        else:\n-            logger.warning(\n-                \'Cannot resolve brain %s\',\n-                brain.getPath(),\n-            )\n-\n-\n-def update_fti(context):\n-    """ Schema-files moved into their own folder after 1.0b1\n-    """\n-    # Document\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Document\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:document.xml\'\n-    # File\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'File\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:file.xml\'\n-    # Folder\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Folder\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:folder.xml\'\n-    # Image\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Image\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:image.xml\'\n-    # Link\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Link\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:link.xml\'\n-    # News Item\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'News Item\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:news_item.xml\'\n-\n-\n-def enable_collection_behavior(context):\n-    """Enable collection behavior on Collection."""\n-\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Collection\'\n-    )\n-    behavior = \'plone.app.contenttypes.behaviors.collection.ICollection\'\n-    if behavior in fti.behaviors:\n-        return\n-    behaviors = list(fti.behaviors)\n-    behaviors.append(behavior)\n-    behaviors = tuple(behaviors)\n-    fti._updateProperty(\'behaviors\', behaviors)\n-\n-\n-def migrate_to_richtext(context):\n-    """Update fti\'s to add RichText behaviors and remove old text-fields."""\n-\n-    behavior = \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\'\n-    types = [\n-        \'Document\',\n-        \'News Item\',\n-        \'Event\',\n-        \'Collection\',\n-    ]\n-    for type_name in types:\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=type_name\n-        )\n-        if not fti:\n-            continue\n-        if behavior in fti.behaviors:\n-            continue\n-        behaviors = list(fti.behaviors)\n-        behaviors.append(behavior)\n-        fti._updateProperty(\'behaviors\', tuple(behaviors))\n-\n-\n-def migrate_album_view(context):\n-    """That task is now done by use_new_view_names (1103->1104)"""\n-    pass\n-\n-\n-def enable_shortname_behavior(context):\n-    """Add IShortName to all types."""\n-\n-    behavior = \'plone.app.dexterity.behaviors.id.IShortName\'\n-    for type_id in DEFAULT_TYPES:\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=type_id\n-        )\n-        if fti is None:\n-            continue\n-\n-        if behavior in fti.behaviors:\n-            continue\n-        behaviors = list(fti.behaviors)\n-        behaviors.append(behavior)\n-        behaviors = tuple(behaviors)\n-        fti._updateProperty(\'behaviors\', behaviors)\n-\n-\n-def use_new_view_names(context, types_to_fix=None):  # noqa\n-    """Migrate old view names to new view names."""\n-    # Don\'t reload the profile. Only change the settings.\n-    logger.info(\'Start updating view names...\')\n-    portal = getSite()\n-    portal_types = getToolByName(portal, \'portal_types\')\n-    if types_to_fix is None:\n-        types_to_fix = [\'Folder\', \'Collection\', \'Plone Site\']\n-    outdated_methods = [\n-        \'folder_listing\',\n-        \'folder_full_view\',\n-        \'folder_summary_view\',\n-        \'folder_tabular_view\',\n-        \'folder_album_view\',\n-        \'atct_album_view\',\n-        \'standard_view\',\n-        \'collection_view\',\n-        \'all_content\',\n-        \'thumbnail_view\',\n-    ]\n-    new_methods = [\n-        \'listing_view\',\n-        \'summary_view\',\n-        \'tabular_view\',\n-        \'full_view\',\n-        \'album_view\',\n-        \'event_listing\',\n-    ]\n-    for ctype in types_to_fix:\n-        fti = queryUtility(IDexterityFTI, name=ctype)\n-        if fti is None and ctype == \'Plone Site\':\n-            fti = portal_types.get(ctype)\n-        if fti is None:\n-            return\n-        view_methods = [i for i in fti.getAvailableViewMethods(None)]\n-        changed = False\n-        for method in outdated_methods:\n-            if method in view_methods:\n-                view_methods.remove(method)\n-                changed = True\n-        for method in new_methods:\n-            if method not in view_methods:\n-                view_methods.append(method)\n-                changed = True\n-        default_view = fti.default_view\n-        if default_view in outdated_methods:\n-            default_view = LISTING_VIEW_MAPPING.get(default_view)\n-            changed = True\n-        if changed:\n-            fti.manage_changeProperties(\n-                view_methods=tuple(view_methods),\n-                default_view=default_view,\n-            )\n-            logger.info(\'Updated view_methods for {0}\'.format(ctype))\n-\n-    def _fixup(obj, view_map):\n-        current = obj.getLayout()\n-        if current in view_map:\n-            default_page = obj.getDefaultPage()\n-            obj.setLayout(view_map[current])\n-            logger.info(\'Set view to {0} for {1}\'.format(\n-                view_map[current],\n-                obj.absolute_url(),\n-            ))\n-            if default_page:\n-                # any defaultPage is switched of by setLayout\n-                # and needs to set again\n-                obj.setDefaultPage(default_page)\n-\n-    catalog = getToolByName(portal, \'portal_catalog\')\n-    search = catalog.unrestrictedSearchResults\n-    for portal_type in types_to_fix:\n-        logger.info(\'Updating view names for {}\'.format(portal_type))\n-        brains = search(portal_type=portal_type)\n-        objs = _brains2objs(brains)\n-        for obj in objs:\n-            _fixup(obj, LISTING_VIEW_MAPPING)\n-        if portal_type == \'Plone Site\':\n-            _fixup(context, LISTING_VIEW_MAPPING)\n-\n-\n-def searchabletext_collections(context):\n-    """Reindex Collections for SearchableText."""\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    search = catalog.unrestrictedSearchResults\n-    brains = search(portal_type=\'Collection\')\n-    objs = _brains2objs(brains)\n-    for obj in objs:\n-        obj.reindexObject(idxs=[\'SearchableText\'])\n-\n-\n-def searchabletext_richtext(context):\n-    """Reindex rich text types for SearchableText.\n-\n-    Our SearchableText indexer has been going back and forth between\n-    taking the raw text or the output, and using the original mimetype\n-    or the output mimetype.  We are on the third combination now\n-    (original raw source with original mimetype) so it is time to reindex.\n-\n-    See https://github.com/plone/Products.CMFPlone/issues/2066\n-    """\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    search = catalog.unrestrictedSearchResults\n-    brains = search(portal_type=[\'Collection\', \'Document\', \'News Item\'])\n-    objs = _brains2objs(brains)\n-    for obj in objs:\n-        obj.reindexObject(idxs=[\'SearchableText\'])\n-\n \n def update_type_icons(context):\n     """Update portal_type icons.\ndiff --git a/plone/app/contenttypes/upgrades.zcml b/plone/app/contenttypes/upgrades.zcml\nindex 0799f68c..13cba253 100644\n--- a/plone/app/contenttypes/upgrades.zcml\n+++ b/plone/app/contenttypes/upgrades.zcml\n@@ -3,90 +3,6 @@\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n-  <genericsetup:upgradeStep\n-      source="*"\n-      destination="1000"\n-      title="Update plone.app.contenttypes fti"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.update_fti"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1000"\n-      destination="1001"\n-      title="Update collection fti to behavior"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.enable_collection_behavior"\n-      />\n-\n-  <!-- We still need Archetypes to use Products.contentmigration -->\n-  <configure zcml:condition="installed Products.Archetypes">\n-  <configure zcml:condition="installed archetypes.schemaextender">\n-  <genericsetup:upgradeStep\n-      source="1001"\n-      destination="1100"\n-      title="Update from old dx events to plone.app.event types"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".migration.dxmigration.migrate_to_pa_event"\n-      />\n-  </configure>\n-  </configure>\n-\n-  <genericsetup:upgradeStep\n-      source="1100"\n-      destination="1101"\n-      title="Update to new RichText behavior"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.migrate_to_richtext"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1101"\n-      destination="1102"\n-      title="Empty upgrade-step"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.migrate_album_view"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1102"\n-      destination="1103"\n-      title="Add shortname-behavior"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.enable_shortname_behavior"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1103"\n-      destination="1104"\n-      title="Use new view names"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.use_new_view_names"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1104"\n-      destination="1105"\n-      title="Reindex SearchableText for Collections"\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.searchabletext_collections"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1105"\n-      destination="1106"\n-      title="Reindex SearchableText for all rich text types"\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.searchabletext_richtext"\n-      />\n-\n   <genericsetup:upgradeStep\n       source="*"\n       destination="3000"\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-01-18T09:35:29+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/c9cc2bc007b48022c06eaba0b49f0d131cf1117c

fixup! Remove the upgrade steps that are not relevant anymore in Plone 6

Files changed:
M plone/app/contenttypes/tests/test_indexes.py

b'diff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex a93151dd..7c3eebb8 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -174,35 +174,6 @@ def test_text_in_searchable_text_index(self):\n             \'/plone/folder/collection\' in paths\n         )\n \n-    def test_collection_text_in_searchable_text_index_after_upgrade(self):\n-        # At first, the text field of Collections did not end up\n-        # in the SearchableText index.\n-        # To mimic this, we reindex the object and afterwards set the text.\n-        self.collection.reindexObject()\n-        # Check that nothing is found yet.\n-        # This is needed to force a flush of the indexing queue.\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n-        self.assertEqual(len(brains), 0)\n-        self.collection.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n-        self.assertEqual(len(brains), 0)\n-        # Now we apply the upgrade.\n-        from plone.app.contenttypes.upgrades import searchabletext_collections\n-        searchabletext_collections(self.portal.portal_setup)\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/folder/collection\')\n-\n     def test_html_stripped_searchable_text_index(self):\n         """Ensure, html tags are stripped out from the content and not indexed.\n         """\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-01-18T12:13:33+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.contenttypes/commit/09c4db641f07d3979c016ddbf5833b028ba0405f

Merge pull request #630 from plone/remove-obsolete-upgrade-steps

Remove the upgrade steps that are not relevant anymore in Plone 6

Files changed:
A news/613.breaking
M plone/app/contenttypes/setuphandlers.py
M plone/app/contenttypes/tests/test_indexes.py
M plone/app/contenttypes/upgrades.py
M plone/app/contenttypes/upgrades.zcml
D plone/app/contenttypes/tests/test_upgrade.py

b'diff --git a/news/613.breaking b/news/613.breaking\nnew file mode 100644\nindex 00000000..9c229295\n--- /dev/null\n+++ b/news/613.breaking\n@@ -0,0 +1 @@\n+Remove upgrade steps that are not relevant anymore in Plone 6 [ale-rt]\ndiff --git a/plone/app/contenttypes/setuphandlers.py b/plone/app/contenttypes/setuphandlers.py\nindex a2261918..a4783797 100644\n--- a/plone/app/contenttypes/setuphandlers.py\n+++ b/plone/app/contenttypes/setuphandlers.py\n@@ -2,7 +2,6 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n-from plone.app.contenttypes.upgrades import use_new_view_names\n from plone.app.dexterity.behaviors import constrains\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.fti import IDexterityFTI\n@@ -329,4 +328,3 @@ def setup_various(context):\n     target_language, is_combined_language, locale = _get_locales_info(portal)\n     _setup_calendar(portal, locale)\n     _setup_visible_ids(portal, target_language, locale)\n-    use_new_view_names(portal, types_to_fix=[\'Plone Site\'])\ndiff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex a93151dd..7c3eebb8 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -174,35 +174,6 @@ def test_text_in_searchable_text_index(self):\n             \'/plone/folder/collection\' in paths\n         )\n \n-    def test_collection_text_in_searchable_text_index_after_upgrade(self):\n-        # At first, the text field of Collections did not end up\n-        # in the SearchableText index.\n-        # To mimic this, we reindex the object and afterwards set the text.\n-        self.collection.reindexObject()\n-        # Check that nothing is found yet.\n-        # This is needed to force a flush of the indexing queue.\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n-        self.assertEqual(len(brains), 0)\n-        self.collection.text = RichTextValue(\n-            u\'Lorem ipsum\',\n-            \'text/plain\',\n-            \'text/html\'\n-        )\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n-        self.assertEqual(len(brains), 0)\n-        # Now we apply the upgrade.\n-        from plone.app.contenttypes.upgrades import searchabletext_collections\n-        searchabletext_collections(self.portal.portal_setup)\n-        brains = self.catalog.searchResults(dict(\n-            SearchableText=u\'Lorem ipsum\',\n-        ))\n-        self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/folder/collection\')\n-\n     def test_html_stripped_searchable_text_index(self):\n         """Ensure, html tags are stripped out from the content and not indexed.\n         """\ndiff --git a/plone/app/contenttypes/tests/test_upgrade.py b/plone/app/contenttypes/tests/test_upgrade.py\ndeleted file mode 100644\nindex e0f0d5ed..00000000\n--- a/plone/app/contenttypes/tests/test_upgrade.py\n+++ /dev/null\n@@ -1,181 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n-from plone.app.contenttypes.upgrades import update_fti\n-from plone.app.contenttypes.upgrades import use_new_view_names\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.dexterity.interfaces import IDexterityFTI\n-from zope.component import queryUtility\n-\n-import unittest\n-\n-\n-class UpgradeTo1000IntegrationTest(unittest.TestCase):\n-\n-    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-\n-    def test_update_fti_document(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:document.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Document\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:document.xml\'\n-        )\n-\n-    def test_update_fti_file(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:file.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:file.xml\'\n-        )\n-\n-    def test_update_fti_folder(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:folder.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Folder\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:folder.xml\'\n-        )\n-\n-    def test_update_fti_image(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:image.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'File\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:file.xml\'\n-        )\n-\n-    def test_update_fti_link(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:link.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'Link\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:link.xml\'\n-        )\n-\n-    def test_update_fti_news_item(self):\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n-        fti.model_file = \'plone.app.contenttypes:news_item.xml\'\n-\n-        update_fti(self.portal)\n-\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=\'News Item\'\n-        )\n-        self.assertEqual(\n-            fti.model_file,\n-            \'plone.app.contenttypes.schema:news_item.xml\'\n-        )\n-\n-    def test_use_new_view_names(self):\n-        old_methods = (\n-            \'atct_album_view\',\n-            \'folder_summary_view\',\n-            \'folder_tabular_view\',\n-            \'folder_listing\',\n-        )\n-\n-        new_methods = (\n-            \'listing_view\',\n-            \'summary_view\',\n-            \'tabular_view\',\n-            \'full_view\',\n-            \'album_view\',\n-            \'event_listing\'\n-        )\n-\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        folder = self.portal[\'folder1\']\n-        folder.setLayout(\'folder_summary_view\')\n-        folder_fti = queryUtility(IDexterityFTI, name=\'Folder\')\n-        folder_fti.manage_changeProperties(\n-            view_methods=old_methods,\n-            default_view=\'folder_summary_view\',\n-        )\n-\n-        portal_fti = self.portal.portal_types.get(\'Plone Site\')\n-        portal_fti.manage_changeProperties(\n-            view_methods=old_methods,\n-            default_view=\'folder_listing\',\n-        )\n-        self.portal.setLayout(\'folder_tabular_view\')\n-        self.portal.setDefaultPage(\'folder1\')\n-\n-        self.assertEqual(folder_fti.view_methods, old_methods)\n-        self.assertEqual(folder_fti.default_view, \'folder_summary_view\')\n-\n-        self.assertEqual(portal_fti.view_methods, old_methods)\n-        self.assertEqual(portal_fti.default_view, \'folder_listing\')\n-\n-        # run upgrade-step\n-        use_new_view_names(self.portal, types_to_fix=[\'Folder\', \'Plone Site\'])\n-\n-        self.assertEqual(folder_fti.view_methods, new_methods)\n-        self.assertEqual(folder_fti.default_view, \'summary_view\')\n-        self.assertEqual(folder.getLayout(), \'summary_view\')\n-\n-        self.assertEqual(self.portal.getLayout(), \'tabular_view\')\n-        self.assertEqual(self.portal.getDefaultPage(), \'folder1\')\n-        self.assertEqual(portal_fti.default_view, \'listing_view\')\n-        self.assertEqual(portal_fti.view_methods, new_methods)\ndiff --git a/plone/app/contenttypes/upgrades.py b/plone/app/contenttypes/upgrades.py\nindex a58b7174..b18a17cd 100644\n--- a/plone/app/contenttypes/upgrades.py\n+++ b/plone/app/contenttypes/upgrades.py\n@@ -1,262 +1,12 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.utils import DEFAULT_TYPES\n from plone.dexterity.interfaces import IDexterityFTI\n-from Products.CMFCore.utils import getToolByName\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n \n import logging\n \n \n logger = logging.getLogger(name=\'plone.app.contenttypes upgrade\')\n \n-LISTING_VIEW_MAPPING = {  # OLD (AT and old DX) : NEW\n-    \'all_content\': \'full_view\',\n-    \'atct_album_view\': \'album_view\',\n-    \'atct_topic_view\': \'listing_view\',\n-    \'collection_view\': \'listing_view\',\n-    \'folder_album_view\': \'album_view\',\n-    \'folder_full_view\': \'full_view\',\n-    \'folder_listing\': \'listing_view\',\n-    \'folder_listing_view\': \'listing_view\',\n-    \'folder_summary_view\': \'summary_view\',\n-    \'folder_tabular_view\': \'tabular_view\',\n-    \'standard_view\': \'listing_view\',\n-    \'thumbnail_view\': \'album_view\',\n-    \'view\': \'listing_view\',\n-}\n-\n-\n-def _brains2objs(brains):\n-    \'\'\' Generator that takes a brains lazy map and:\n-    - yields the objects that can be resolved\n-    - logs the brain that cannot be resolved\n-    \'\'\'\n-    for brain in brains:\n-        obj = brain.getObject()\n-        if obj:\n-            yield obj\n-        else:\n-            logger.warning(\n-                \'Cannot resolve brain %s\',\n-                brain.getPath(),\n-            )\n-\n-\n-def update_fti(context):\n-    """ Schema-files moved into their own folder after 1.0b1\n-    """\n-    # Document\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Document\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:document.xml\'\n-    # File\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'File\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:file.xml\'\n-    # Folder\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Folder\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:folder.xml\'\n-    # Image\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Image\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:image.xml\'\n-    # Link\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Link\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:link.xml\'\n-    # News Item\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'News Item\'\n-    )\n-    fti.model_file = \'plone.app.contenttypes.schema:news_item.xml\'\n-\n-\n-def enable_collection_behavior(context):\n-    """Enable collection behavior on Collection."""\n-\n-    fti = queryUtility(\n-        IDexterityFTI,\n-        name=\'Collection\'\n-    )\n-    behavior = \'plone.app.contenttypes.behaviors.collection.ICollection\'\n-    if behavior in fti.behaviors:\n-        return\n-    behaviors = list(fti.behaviors)\n-    behaviors.append(behavior)\n-    behaviors = tuple(behaviors)\n-    fti._updateProperty(\'behaviors\', behaviors)\n-\n-\n-def migrate_to_richtext(context):\n-    """Update fti\'s to add RichText behaviors and remove old text-fields."""\n-\n-    behavior = \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\'\n-    types = [\n-        \'Document\',\n-        \'News Item\',\n-        \'Event\',\n-        \'Collection\',\n-    ]\n-    for type_name in types:\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=type_name\n-        )\n-        if not fti:\n-            continue\n-        if behavior in fti.behaviors:\n-            continue\n-        behaviors = list(fti.behaviors)\n-        behaviors.append(behavior)\n-        fti._updateProperty(\'behaviors\', tuple(behaviors))\n-\n-\n-def migrate_album_view(context):\n-    """That task is now done by use_new_view_names (1103->1104)"""\n-    pass\n-\n-\n-def enable_shortname_behavior(context):\n-    """Add IShortName to all types."""\n-\n-    behavior = \'plone.app.dexterity.behaviors.id.IShortName\'\n-    for type_id in DEFAULT_TYPES:\n-        fti = queryUtility(\n-            IDexterityFTI,\n-            name=type_id\n-        )\n-        if fti is None:\n-            continue\n-\n-        if behavior in fti.behaviors:\n-            continue\n-        behaviors = list(fti.behaviors)\n-        behaviors.append(behavior)\n-        behaviors = tuple(behaviors)\n-        fti._updateProperty(\'behaviors\', behaviors)\n-\n-\n-def use_new_view_names(context, types_to_fix=None):  # noqa\n-    """Migrate old view names to new view names."""\n-    # Don\'t reload the profile. Only change the settings.\n-    logger.info(\'Start updating view names...\')\n-    portal = getSite()\n-    portal_types = getToolByName(portal, \'portal_types\')\n-    if types_to_fix is None:\n-        types_to_fix = [\'Folder\', \'Collection\', \'Plone Site\']\n-    outdated_methods = [\n-        \'folder_listing\',\n-        \'folder_full_view\',\n-        \'folder_summary_view\',\n-        \'folder_tabular_view\',\n-        \'folder_album_view\',\n-        \'atct_album_view\',\n-        \'standard_view\',\n-        \'collection_view\',\n-        \'all_content\',\n-        \'thumbnail_view\',\n-    ]\n-    new_methods = [\n-        \'listing_view\',\n-        \'summary_view\',\n-        \'tabular_view\',\n-        \'full_view\',\n-        \'album_view\',\n-        \'event_listing\',\n-    ]\n-    for ctype in types_to_fix:\n-        fti = queryUtility(IDexterityFTI, name=ctype)\n-        if fti is None and ctype == \'Plone Site\':\n-            fti = portal_types.get(ctype)\n-        if fti is None:\n-            return\n-        view_methods = [i for i in fti.getAvailableViewMethods(None)]\n-        changed = False\n-        for method in outdated_methods:\n-            if method in view_methods:\n-                view_methods.remove(method)\n-                changed = True\n-        for method in new_methods:\n-            if method not in view_methods:\n-                view_methods.append(method)\n-                changed = True\n-        default_view = fti.default_view\n-        if default_view in outdated_methods:\n-            default_view = LISTING_VIEW_MAPPING.get(default_view)\n-            changed = True\n-        if changed:\n-            fti.manage_changeProperties(\n-                view_methods=tuple(view_methods),\n-                default_view=default_view,\n-            )\n-            logger.info(\'Updated view_methods for {0}\'.format(ctype))\n-\n-    def _fixup(obj, view_map):\n-        current = obj.getLayout()\n-        if current in view_map:\n-            default_page = obj.getDefaultPage()\n-            obj.setLayout(view_map[current])\n-            logger.info(\'Set view to {0} for {1}\'.format(\n-                view_map[current],\n-                obj.absolute_url(),\n-            ))\n-            if default_page:\n-                # any defaultPage is switched of by setLayout\n-                # and needs to set again\n-                obj.setDefaultPage(default_page)\n-\n-    catalog = getToolByName(portal, \'portal_catalog\')\n-    search = catalog.unrestrictedSearchResults\n-    for portal_type in types_to_fix:\n-        logger.info(\'Updating view names for {}\'.format(portal_type))\n-        brains = search(portal_type=portal_type)\n-        objs = _brains2objs(brains)\n-        for obj in objs:\n-            _fixup(obj, LISTING_VIEW_MAPPING)\n-        if portal_type == \'Plone Site\':\n-            _fixup(context, LISTING_VIEW_MAPPING)\n-\n-\n-def searchabletext_collections(context):\n-    """Reindex Collections for SearchableText."""\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    search = catalog.unrestrictedSearchResults\n-    brains = search(portal_type=\'Collection\')\n-    objs = _brains2objs(brains)\n-    for obj in objs:\n-        obj.reindexObject(idxs=[\'SearchableText\'])\n-\n-\n-def searchabletext_richtext(context):\n-    """Reindex rich text types for SearchableText.\n-\n-    Our SearchableText indexer has been going back and forth between\n-    taking the raw text or the output, and using the original mimetype\n-    or the output mimetype.  We are on the third combination now\n-    (original raw source with original mimetype) so it is time to reindex.\n-\n-    See https://github.com/plone/Products.CMFPlone/issues/2066\n-    """\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    search = catalog.unrestrictedSearchResults\n-    brains = search(portal_type=[\'Collection\', \'Document\', \'News Item\'])\n-    objs = _brains2objs(brains)\n-    for obj in objs:\n-        obj.reindexObject(idxs=[\'SearchableText\'])\n-\n \n def update_type_icons(context):\n     """Update portal_type icons.\ndiff --git a/plone/app/contenttypes/upgrades.zcml b/plone/app/contenttypes/upgrades.zcml\nindex 0799f68c..13cba253 100644\n--- a/plone/app/contenttypes/upgrades.zcml\n+++ b/plone/app/contenttypes/upgrades.zcml\n@@ -3,90 +3,6 @@\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n-  <genericsetup:upgradeStep\n-      source="*"\n-      destination="1000"\n-      title="Update plone.app.contenttypes fti"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.update_fti"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1000"\n-      destination="1001"\n-      title="Update collection fti to behavior"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.enable_collection_behavior"\n-      />\n-\n-  <!-- We still need Archetypes to use Products.contentmigration -->\n-  <configure zcml:condition="installed Products.Archetypes">\n-  <configure zcml:condition="installed archetypes.schemaextender">\n-  <genericsetup:upgradeStep\n-      source="1001"\n-      destination="1100"\n-      title="Update from old dx events to plone.app.event types"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".migration.dxmigration.migrate_to_pa_event"\n-      />\n-  </configure>\n-  </configure>\n-\n-  <genericsetup:upgradeStep\n-      source="1100"\n-      destination="1101"\n-      title="Update to new RichText behavior"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.migrate_to_richtext"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1101"\n-      destination="1102"\n-      title="Empty upgrade-step"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.migrate_album_view"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1102"\n-      destination="1103"\n-      title="Add shortname-behavior"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.enable_shortname_behavior"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1103"\n-      destination="1104"\n-      title="Use new view names"\n-      description=""\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.use_new_view_names"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1104"\n-      destination="1105"\n-      title="Reindex SearchableText for Collections"\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.searchabletext_collections"\n-      />\n-\n-  <genericsetup:upgradeStep\n-      source="1105"\n-      destination="1106"\n-      title="Reindex SearchableText for all rich text types"\n-      profile="plone.app.contenttypes:default"\n-      handler=".upgrades.searchabletext_richtext"\n-      />\n-\n   <genericsetup:upgradeStep\n       source="*"\n       destination="3000"\n'

