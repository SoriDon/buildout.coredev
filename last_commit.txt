Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-18T02:00:29+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/1498c97a8816d6320f5661ac3346f5dac6e337ba

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/80cf330f.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..697a54c\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "80cf330f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/80cf330f.internal b/news/80cf330f.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/80cf330f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 4f43707..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,11 +1,23 @@\n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8e3aeb2\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.portlets\n+extras =\n+    test\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T12:33:20+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/64fd679777955e5e0582e67024a2e93e18c32e91

chore: pyupgrade

Files changed:
M plone/portlets/assignable.py
M plone/portlets/interfaces.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/utils.py

b'diff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py\nindex b044f7b..9cf8082 100644\n--- a/plone/portlets/assignable.py\n+++ b/plone/portlets/assignable.py\n@@ -39,7 +39,7 @@ def localPortletAssignmentMappingAdapter(context, manager):\n \n \n @implementer(ILocalPortletAssignmentManager)\n-class LocalPortletAssignmentManager(object):\n+class LocalPortletAssignmentManager:\n     """Default implementation of ILocalPortletAssignmentManager which stores\n     information in an annotation.\n     """\n@@ -90,9 +90,7 @@ class BlockingLocalPortletAssignmentManager(LocalPortletAssignmentManager):\n     adapts(ILocalPortletAssignable, IBlockingPortletManager)\n \n     def getBlacklistStatus(self, category):\n-        value = super(\n-            BlockingLocalPortletAssignmentManager, self\n-        ).getBlacklistStatus(category)\n+        value = super().getBlacklistStatus(category)\n         if category is CONTEXT_CATEGORY and value is None:\n             return True\n         return value\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex 71346cb..5a4d4a0 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -28,7 +28,7 @@ class IPortletContext(Interface):\n     """\n \n     uid = schema.TextLine(\n-        title=u"A unique id or path for this specific context", required=True\n+        title="A unique id or path for this specific context", required=True\n     )\n \n     def getParent():\n@@ -83,13 +83,13 @@ class IPortletType(Interface):\n     providing IPortletType, so that UI can find them.\n     """\n \n-    title = schema.TextLine(title=u\'Title\', required=True)\n+    title = schema.TextLine(title=\'Title\', required=True)\n \n-    description = schema.Text(title=u\'Description\', required=False)\n+    description = schema.Text(title=\'Description\', required=False)\n \n     addview = schema.TextLine(\n-        title=u\'Add view\',\n-        description=u\'The name of the add view for assignments for this portlet type\',\n+        title=\'Add view\',\n+        description=\'The name of the add view for assignments for this portlet type\',\n         required=True,\n     )\n \n@@ -137,19 +137,19 @@ class IPortletAssignment(IContained, IAttributeAnnotatable):\n     """\n \n     title = schema.Bool(\n-        title=u\'Title\',\n-        description=u\'The title of this assignment as displayed to the user\',\n+        title=\'Title\',\n+        description=\'The title of this assignment as displayed to the user\',\n         required=True,\n     )\n \n     available = schema.Bool(\n-        title=u\'Available\',\n-        description=u\'Whether or not this portlet should be rendered\',\n+        title=\'Available\',\n+        description=\'Whether or not this portlet should be rendered\',\n         required=True,\n         readonly=True,\n     )\n \n-    data = Attribute(u\'Portlet data object\')\n+    data = Attribute(\'Portlet data object\')\n \n \n # A content provider capable of rendering portlets - each type of portlet will\n@@ -167,8 +167,8 @@ class IPortletRenderer(IContentProvider):\n     """\n \n     __portlet_metadata__ = schema.Dict(\n-        title=u"Metadata",\n-        description=u"Information about the portlet set during portlet retrieval",\n+        title="Metadata",\n+        description="Information about the portlet set during portlet retrieval",\n         required=True,\n         readonly=True,\n         key_type=schema.ASCIILine(),\n@@ -176,8 +176,8 @@ class IPortletRenderer(IContentProvider):\n     )\n \n     available = schema.Bool(\n-        title=u\'Available\',\n-        description=u\'Whether or not this portlet shuld be rendered\',\n+        title=\'Available\',\n+        description=\'Whether or not this portlet shuld be rendered\',\n         required=True,\n         readonly=True,\n     )\n@@ -245,10 +245,10 @@ class IPortletAssignmentMapping(\n     contains(\'plone.portlets.interfaces.IPortletAssignment\')\n \n     __manager__ = schema.TextLine(\n-        title=u"Name of the portlet manager this mapping belongs to"\n+        title="Name of the portlet manager this mapping belongs to"\n     )\n     __category__ = schema.TextLine(\n-        title=u\'Name of the category this mapping belongs to\'\n+        title=\'Name of the category this mapping belongs to\'\n     )\n \n \n@@ -344,8 +344,8 @@ class IPortletManagerRenderer(IContentProvider):\n     )\n \n     visible = schema.Bool(\n-        title=u\'Visible\',\n-        description=u\'Whether or not this portlet manager (column) will be rendered at all\',\n+        title=\'Visible\',\n+        description=\'Whether or not this portlet manager (column) will be rendered at all\',\n         required=True,\n         default=True,\n     )\ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex 2fe16a9..95fcd77 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -24,7 +24,7 @@\n \n @implementer(IPortletManagerRenderer)\n @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n-class PortletManagerRenderer(object):\n+class PortletManagerRenderer:\n \n     """Default renderer for portlet managers.\n \n@@ -84,7 +84,7 @@ def render(self):\n         if self.template:\n             return self.template(portlets=portlets)\n         else:\n-            return u\'\\n\'.join([p[\'renderer\'].render() for p in portlets])\n+            return \'\\n\'.join([p[\'renderer\'].render() for p in portlets])\n \n     def safe_render(self, portlet_renderer):\n         try:\n@@ -92,7 +92,7 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % (self,))\n+            logger.exception(f\'Error while rendering {self!r}\')\n             return self.error_message()\n \n     # Note: By passing in a parameter that\'s different for each portlet\ndiff --git a/plone/portlets/registration.py b/plone/portlets/registration.py\nindex b53bd6e..93f3d44 100644\n--- a/plone/portlets/registration.py\n+++ b/plone/portlets/registration.py\n@@ -10,8 +10,8 @@ class PortletType(Persistent):\n     This is persistent so that it can be stored as a local utility.\n     """\n \n-    title = u\'\'\n-    description = u\'\'\n-    addview = u\'\'\n+    title = \'\'\n+    description = \'\'\n+    addview = \'\'\n     editview = None\n     for_ = None\ndiff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py\nindex 4f45dbf..0ffa011 100644\n--- a/plone/portlets/retriever.py\n+++ b/plone/portlets/retriever.py\n@@ -16,7 +16,7 @@\n \n \n @implementer(IPortletRetriever)\n-class PortletRetriever(object):\n+class PortletRetriever:\n     """The default portlet retriever.\n \n     This will examine the context and its parents for contextual portlets,\ndiff --git a/plone/portlets/storage.py b/plone/portlets/storage.py\nindex 8f31f72..3333f7f 100644\n--- a/plone/portlets/storage.py\n+++ b/plone/portlets/storage.py\n@@ -54,25 +54,25 @@ class PortletCategoryMapping(BTreeContainer, Contained):\n     # The shole BTreeContainer/SampleContainer mess is a pain in the backside\n \n     def __getitem__(self, key):\n-        return super(PortletCategoryMapping, self).__getitem__(_coerce(key))\n+        return super().__getitem__(_coerce(key))\n \n     def get(self, key, default=None):\n         \'\'\'See interface `IReadContainer`\'\'\'\n-        return super(PortletCategoryMapping, self).get(_coerce(key), default)\n+        return super().get(_coerce(key), default)\n \n     def __contains__(self, key):\n         \'\'\'See interface `IReadContainer`\'\'\'\n-        return super(PortletCategoryMapping, self).__contains__(_coerce(key))\n+        return super().__contains__(_coerce(key))\n \n     has_key = __contains__\n \n     def __setitem__(self, key, object):\n         \'\'\'See interface `IWriteContainer`\'\'\'\n-        super(PortletCategoryMapping, self).__setitem__(_coerce(key), object)\n+        super().__setitem__(_coerce(key), object)\n \n     def __delitem__(self, key):\n         \'\'\'See interface `IWriteContainer`\'\'\'\n-        super(PortletCategoryMapping, self).__delitem__(_coerce(key))\n+        super().__delitem__(_coerce(key))\n \n \n @implementer(IPortletAssignmentMapping)\n@@ -80,11 +80,11 @@ class PortletAssignmentMapping(OrderedContainer):\n     """The default assignment mapping storage.\n     """\n \n-    __manager__ = u\'\'\n-    __category__ = u\'\'\n-    __name__ = u\'\'\n+    __manager__ = \'\'\n+    __category__ = \'\'\n+    __name__ = \'\'\n \n-    def __init__(self, manager=u\'\', category=u\'\', name=u\'\'):\n+    def __init__(self, manager=\'\', category=\'\', name=\'\'):\n         # XXX: This depends on implementation detail in OrderedContainer,\n         # but it uses a PersistentDict, which sucks :-/\n         OrderedContainer.__init__(self)\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 604d7c9..24aff3c 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -102,7 +102,7 @@ def available(self):\n             return getattr(self, \'__portlet_metadata__\', False)\n \n         def render(self):\n-            return u\'dummy portlet renderer\'\n+            return \'dummy portlet renderer\'\n \n         def update(self):\n             pass\n@@ -112,7 +112,7 @@ def update(self):\n     # PortletRenderer as p[\'assignment\'].data. For that, we need a class\n     # where we can set an attribute \'data\'\n \n-    class Obj(object):\n+    class Obj:\n         pass\n \n     from plone.portlets.constants import CONTEXT_CATEGORY\n@@ -125,7 +125,7 @@ class DummyPortletRetriever(PortletRetriever):\n         def getPortlets(self):\n             p = dict()\n             p[\'category\'] = CONTEXT_CATEGORY\n-            p[\'key\'] = p[\'name\'] = u\'dummy\'\n+            p[\'key\'] = p[\'name\'] = \'dummy\'\n             p[\'assignment\'] = obj = Obj()\n             obj.data = DummyPortletRenderer()\n             obj.available = True\n@@ -136,7 +136,7 @@ def getPortlets(self):\n     # We need a dummy context that implements Interface\n \n     @implementer(Interface)\n-    class DummyContext(object):\n+    class DummyContext:\n         pass\n \n     # We now test the PortletManagerRenderer. We override the _dataToPortlet\ndiff --git a/plone/portlets/utils.py b/plone/portlets/utils.py\nindex 91d3574..cfb6caa 100644\n--- a/plone/portlets/utils.py\n+++ b/plone/portlets/utils.py\n@@ -53,7 +53,7 @@ def hashPortletInfo(info):\n         if hasattr(v, \'decode\'):\n             v = v.decode(\'utf8\')\n         newinfo[k] = v\n-    concat_txt = u\'%(manager)s\\n%(category)s\\n%(key)s\\n%(name)s\' % newinfo\n+    concat_txt = \'%(manager)s\\n%(category)s\\n%(key)s\\n%(name)s\' % newinfo\n     info[\'hash\'] = binascii.b2a_hex(concat_txt.encode(\'utf8\'))\n     return info[\'hash\']\n \n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T12:33:38+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/ddb3e603cb1a6547bd527950c53766e68d4f1751

chore: isort

Files changed:
M plone/portlets/interfaces.py
M plone/portlets/tests.py

b'diff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex 5a4d4a0..5575f23 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -4,10 +4,10 @@\n from zope.container.interfaces import IContainer\n from zope.container.interfaces import IContainerNamesContainer\n from zope.container.interfaces import IOrderedContainer\n-from zope.location.interfaces import IContained\n from zope.contentprovider.interfaces import IContentProvider\n from zope.interface import Attribute\n from zope.interface import Interface\n+from zope.location.interfaces import IContained\n \n \n # Context - the application layer must provide these\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 24aff3c..1891621 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -12,14 +12,14 @@\n def configurationSetUp(test=None):\n     setUp()\n \n+    import plone.memoize\n+    import plone.portlets\n     import zope.annotation\n     import zope.browserpage\n     import zope.component\n     import zope.container\n     import zope.contentprovider\n     import zope.security\n-    import plone.memoize\n-    import plone.portlets\n \n     XMLConfig(\'meta.zcml\', zope.security)()\n     XMLConfig(\'meta.zcml\', zope.component)()\n@@ -74,15 +74,13 @@ def test_portlet_metadata_availability():\n     # the PortletManagerRenderer checks for the availability of\n     # the PortletRenderers\n \n+    # Define a dummy PortletManager\n+    from plone.portlets.interfaces import IPortletManager\n     from zope.component import adapter\n     from zope.component import provideAdapter\n     from zope.interface import implementer\n     from zope.interface import Interface\n \n-    # Define a dummy PortletManager\n-\n-    from plone.portlets.interfaces import IPortletManager\n-\n     class IDummyPortletManager(IPortletManager):\n         "Dummy portlet manager"\n \n@@ -154,8 +152,8 @@ def _dataToPortlet(self, data):\n     from zope.publisher.browser import TestRequest\n     request = TestRequest()\n \n-    from zope.interface import alsoProvides\n     from zope.annotation.interfaces import IAttributeAnnotatable\n+    from zope.interface import alsoProvides\n     alsoProvides(request, IAttributeAnnotatable)\n \n     # Check that a PortletManagerRenderer is capable of rendering our\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T12:34:35+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/76dc3b23a6eeab73ff688c4d69755250d6764c26

chore: black

Files changed:
M plone/__init__.py
M plone/portlets/assignable.py
M plone/portlets/constants.py
M plone/portlets/interfaces.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 5d74e30..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py\nindex 9cf8082..049ac6d 100644\n--- a/plone/portlets/assignable.py\n+++ b/plone/portlets/assignable.py\n@@ -68,9 +68,7 @@ def _getBlacklist(self, create=False):\n         local = annotations.get(CONTEXT_BLACKLIST_STATUS_KEY, None)\n         if local is None:\n             if create:\n-                local = annotations[\n-                    CONTEXT_BLACKLIST_STATUS_KEY\n-                ] = PersistentDict()\n+                local = annotations[CONTEXT_BLACKLIST_STATUS_KEY] = PersistentDict()\n             else:\n                 return None\n         blacklist = local.get(self.manager.__name__, None)\ndiff --git a/plone/portlets/constants.py b/plone/portlets/constants.py\nindex 708418e..b94d7c8 100644\n--- a/plone/portlets/constants.py\n+++ b/plone/portlets/constants.py\n@@ -1,15 +1,15 @@\n # Annotation keys\n \n-CONTEXT_ASSIGNMENT_KEY = \'plone.portlets.contextassignments\'\n-CONTEXT_BLACKLIST_STATUS_KEY = \'plone.portlets.categoryblackliststatus\'\n-ASSIGNMENT_SETTINGS_KEY = \'plone.portlets.assignmentsettings\'\n+CONTEXT_ASSIGNMENT_KEY = "plone.portlets.contextassignments"\n+CONTEXT_BLACKLIST_STATUS_KEY = "plone.portlets.categoryblackliststatus"\n+ASSIGNMENT_SETTINGS_KEY = "plone.portlets.assignmentsettings"\n \n # Portlet assignment categories\n \n-USER_CATEGORY = \'user\'\n-GROUP_CATEGORY = \'group\'\n-CONTENT_TYPE_CATEGORY = \'content_type\'\n+USER_CATEGORY = "user"\n+GROUP_CATEGORY = "group"\n+CONTENT_TYPE_CATEGORY = "content_type"\n \n # This is stored under the CONTEXT_ASSIGNMENT_KEY annotation, not in the\n # IPortletManager utility\n-CONTEXT_CATEGORY = \'context\'\n+CONTEXT_CATEGORY = "context"\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex 5575f23..717a0c3 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -83,19 +83,19 @@ class IPortletType(Interface):\n     providing IPortletType, so that UI can find them.\n     """\n \n-    title = schema.TextLine(title=\'Title\', required=True)\n+    title = schema.TextLine(title="Title", required=True)\n \n-    description = schema.Text(title=\'Description\', required=False)\n+    description = schema.Text(title="Description", required=False)\n \n     addview = schema.TextLine(\n-        title=\'Add view\',\n-        description=\'The name of the add view for assignments for this portlet type\',\n+        title="Add view",\n+        description="The name of the add view for assignments for this portlet type",\n         required=True,\n     )\n \n     for_ = Attribute(\n-        \'An interface a portlet manager must have to allow this type of portlet. \'\n-        \'May be None if there are no restrictions.\'\n+        "An interface a portlet manager must have to allow this type of portlet. "\n+        "May be None if there are no restrictions."\n     )\n \n \n@@ -137,19 +137,19 @@ class IPortletAssignment(IContained, IAttributeAnnotatable):\n     """\n \n     title = schema.Bool(\n-        title=\'Title\',\n-        description=\'The title of this assignment as displayed to the user\',\n+        title="Title",\n+        description="The title of this assignment as displayed to the user",\n         required=True,\n     )\n \n     available = schema.Bool(\n-        title=\'Available\',\n-        description=\'Whether or not this portlet should be rendered\',\n+        title="Available",\n+        description="Whether or not this portlet should be rendered",\n         required=True,\n         readonly=True,\n     )\n \n-    data = Attribute(\'Portlet data object\')\n+    data = Attribute("Portlet data object")\n \n \n # A content provider capable of rendering portlets - each type of portlet will\n@@ -176,8 +176,8 @@ class IPortletRenderer(IContentProvider):\n     )\n \n     available = schema.Bool(\n-        title=\'Available\',\n-        description=\'Whether or not this portlet shuld be rendered\',\n+        title="Available",\n+        description="Whether or not this portlet shuld be rendered",\n         required=True,\n         readonly=True,\n     )\n@@ -215,7 +215,7 @@ class IPortletStorage(IContainer):\n     Some common keys are found in plone.portlets.constants.\n     """\n \n-    contains(\'plone.portlets.interfaces.IPortletCategoryMapping\')\n+    contains("plone.portlets.interfaces.IPortletCategoryMapping")\n \n \n class IPortletCategoryMapping(IContainer, IContained):\n@@ -227,7 +227,7 @@ class IPortletCategoryMapping(IContainer, IContained):\n     which would be given a particular IPortletAssignmentMapping.\n     """\n \n-    contains(\'plone.portlets.interfaces.IPortletAssignmentMapping\')\n+    contains("plone.portlets.interfaces.IPortletAssignmentMapping")\n \n \n class IPortletAssignmentMapping(\n@@ -242,14 +242,12 @@ class IPortletAssignmentMapping(\n     appropriate container.\n     """\n \n-    contains(\'plone.portlets.interfaces.IPortletAssignment\')\n+    contains("plone.portlets.interfaces.IPortletAssignment")\n \n     __manager__ = schema.TextLine(\n         title="Name of the portlet manager this mapping belongs to"\n     )\n-    __category__ = schema.TextLine(\n-        title=\'Name of the category this mapping belongs to\'\n-    )\n+    __category__ = schema.TextLine(title="Name of the category this mapping belongs to")\n \n \n class ILocalPortletAssignmentManager(Interface):\n@@ -329,8 +327,7 @@ class IPlacelessPortletManager(IPortletManager):\n \n \n class IPortletManagerRenderer(IContentProvider):\n-    """A content provider for rendering a portlet manager.\n-    """\n+    """A content provider for rendering a portlet manager."""\n \n     template = Attribute(\n         """A page template object to render the manager with.\n@@ -344,8 +341,8 @@ class IPortletManagerRenderer(IContentProvider):\n     )\n \n     visible = schema.Bool(\n-        title=\'Visible\',\n-        description=\'Whether or not this portlet manager (column) will be rendered at all\',\n+        title="Visible",\n+        description="Whether or not this portlet manager (column) will be rendered at all",\n         required=True,\n         default=True,\n     )\n@@ -372,7 +369,7 @@ def safe_render(portlet_renderer):\n \n \n class IPortletAssignmentSettings(Interface):\n-    """ Adapts IPortletAssignment to return additional settings for a portlet assignment.\n+    """Adapts IPortletAssignment to return additional settings for a portlet assignment.\n \n     Implementations of this interface will typically be stored in an annotation\n     of the assignment.\ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex 95fcd77..8725c5e 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -19,7 +19,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'portlets\')\n+logger = logging.getLogger("portlets")\n \n \n @implementer(IPortletManagerRenderer)\n@@ -53,7 +53,7 @@ def filter(self, portlets):\n         filtered = []\n         for p in portlets:\n             try:\n-                if p[\'assignment\'].available:\n+                if p["assignment"].available:\n                     filtered.append(p)\n             except ConflictError:\n                 raise\n@@ -61,12 +61,12 @@ def filter(self, portlets):\n                 logger.exception(\n                     "Error while determining assignment availability of "\n                     "portlet (%r %r %r): %s"\n-                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                    % (p["category"], p["key"], p["name"], str(e))\n                 )\n         return filtered\n \n     def portletsToShow(self):\n-        return [p for p in self.allPortlets() if p[\'available\']]\n+        return [p for p in self.allPortlets() if p["available"]]\n \n     def allPortlets(self):\n         return self._lazyLoadPortlets(self.manager)\n@@ -74,7 +74,7 @@ def allPortlets(self):\n     def update(self):\n         self.__updated = True\n         for p in self.portletsToShow():\n-            p[\'renderer\'].update()\n+            p["renderer"].update()\n \n     def render(self):\n         if not self.__updated:\n@@ -84,7 +84,7 @@ def render(self):\n         if self.template:\n             return self.template(portlets=portlets)\n         else:\n-            return \'\\n\'.join([p[\'renderer\'].render() for p in portlets])\n+            return "\\n".join([p["renderer"].render() for p in portlets])\n \n     def safe_render(self, portlet_renderer):\n         try:\n@@ -92,7 +92,7 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(f\'Error while rendering {self!r}\')\n+            logger.exception(f"Error while rendering {self!r}")\n             return self.error_message()\n \n     # Note: By passing in a parameter that\'s different for each portlet\n@@ -107,14 +107,14 @@ def _lazyLoadPortlets(self, manager):\n         retriever = getMultiAdapter((self.context, manager), IPortletRetriever)\n         items = []\n         for p in self.filter(retriever.getPortlets()):\n-            renderer = self._dataToPortlet(p[\'assignment\'].data)\n+            renderer = self._dataToPortlet(p["assignment"].data)\n             info = p.copy()\n-            info[\'manager\'] = self.manager.__name__\n-            info[\'renderer\'] = renderer\n+            info["manager"] = self.manager.__name__\n+            info["renderer"] = renderer\n             hashPortletInfo(info)\n             # Record metadata on the renderer\n             renderer.__portlet_metadata__ = info.copy()\n-            del renderer.__portlet_metadata__[\'renderer\']\n+            del renderer.__portlet_metadata__["renderer"]\n             try:\n                 isAvailable = renderer.available\n             except ConflictError:\n@@ -123,11 +123,10 @@ def _lazyLoadPortlets(self, manager):\n                 isAvailable = False\n                 logger.exception(\n                     "Error while determining renderer availability of portlet "\n-                    "(%r %r %r): %s"\n-                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                    "(%r %r %r): %s" % (p["category"], p["key"], p["name"], str(e))\n                 )\n \n-            info[\'available\'] = isAvailable\n+            info["available"] = isAvailable\n             items.append(info)\n \n         return items\n@@ -153,9 +152,7 @@ class PortletManager(PortletStorage):\n     __name__ = __parent__ = None\n \n     def __call__(self, context, request, view):\n-        return getMultiAdapter(\n-            (context, request, view, self), IPortletManagerRenderer\n-        )\n+        return getMultiAdapter((context, request, view, self), IPortletManagerRenderer)\n \n     def getAddablePortletTypes(self):\n         addable = []\ndiff --git a/plone/portlets/registration.py b/plone/portlets/registration.py\nindex 93f3d44..5f92c14 100644\n--- a/plone/portlets/registration.py\n+++ b/plone/portlets/registration.py\n@@ -10,8 +10,8 @@ class PortletType(Persistent):\n     This is persistent so that it can be stored as a local utility.\n     """\n \n-    title = \'\'\n-    description = \'\'\n-    addview = \'\'\n+    title = ""\n+    description = ""\n+    addview = ""\n     editview = None\n     for_ = None\ndiff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py\nindex 0ffa011..adad4eb 100644\n--- a/plone/portlets/retriever.py\n+++ b/plone/portlets/retriever.py\n@@ -141,17 +141,17 @@ def getPortlets(self):\n         for category, key, assignment in categories:\n             try:\n                 settings = IPortletAssignmentSettings(assignment)\n-                if not settings.get(\'visible\', True):\n+                if not settings.get("visible", True):\n                     continue\n             except TypeError:\n                 # Portlet does not exist any longer\n                 continue\n             assignments.append(\n                 {\n-                    \'category\': category,\n-                    \'key\': key,\n-                    \'name\': str(assignment.__name__),\n-                    \'assignment\': assignment,\n+                    "category": category,\n+                    "key": key,\n+                    "name": str(assignment.__name__),\n+                    "assignment": assignment,\n                 }\n             )\n         return assignments\n@@ -190,15 +190,15 @@ def getPortlets(self):\n                         # Portlet does not exist any longer\n                         continue\n                     else:\n-                        if not settings.get(\'visible\', True):\n+                        if not settings.get("visible", True):\n                             continue\n \n                     assignments.append(\n                         {\n-                            \'category\': category,\n-                            \'key\': key,\n-                            \'name\': assignment.__name__,\n-                            \'assignment\': assignment,\n+                            "category": category,\n+                            "key": key,\n+                            "name": assignment.__name__,\n+                            "assignment": assignment,\n                         }\n                     )\n \ndiff --git a/plone/portlets/settings.py b/plone/portlets/settings.py\nindex 14680de..dc5456f 100644\n--- a/plone/portlets/settings.py\n+++ b/plone/portlets/settings.py\n@@ -34,8 +34,6 @@ def portletAssignmentSettingsFactory(context):\n     settings = annotations.get(ASSIGNMENT_SETTINGS_KEY, None)\n \n     if settings is None:\n-        settings = annotations[\n-            ASSIGNMENT_SETTINGS_KEY\n-        ] = PortletAssignmentSettings()\n+        settings = annotations[ASSIGNMENT_SETTINGS_KEY] = PortletAssignmentSettings()\n \n     return settings\ndiff --git a/plone/portlets/storage.py b/plone/portlets/storage.py\nindex 3333f7f..425d00a 100644\n--- a/plone/portlets/storage.py\n+++ b/plone/portlets/storage.py\n@@ -18,7 +18,7 @@\n # Directory where user ids are binary GUIDs. However, that\'s a problem for\n # another day, since it\'ll require more complex migration.\n \n-LOG = logging.getLogger(\'portlets\')\n+LOG = logging.getLogger("portlets")\n \n if sys.version_info[0] > 2:\n     text_type = str\n@@ -31,24 +31,22 @@\n def _coerce(key):\n     if isinstance(key, binary_type):\n         try:\n-            key = text_type(key, encoding=\'utf-8\')\n+            key = text_type(key, encoding="utf-8")\n         except UnicodeDecodeError:\n-            LOG.warn(\'Unable to convert %r to unicode\' % key)\n-            return text_type(key, \'utf-8\', \'ignore\')\n+            LOG.warn("Unable to convert %r to unicode" % key)\n+            return text_type(key, "utf-8", "ignore")\n \n     return key\n \n \n @implementer(IPortletStorage)\n class PortletStorage(BTreeContainer):\n-    """The default portlet storage.\n-    """\n+    """The default portlet storage."""\n \n \n @implementer(IPortletCategoryMapping)\n class PortletCategoryMapping(BTreeContainer, Contained):\n-    """The default category/key mapping storage.\n-    """\n+    """The default category/key mapping storage."""\n \n     # We need to hack some stuff to make sure keys are unicode.\n     # The shole BTreeContainer/SampleContainer mess is a pain in the backside\n@@ -57,34 +55,33 @@ def __getitem__(self, key):\n         return super().__getitem__(_coerce(key))\n \n     def get(self, key, default=None):\n-        \'\'\'See interface `IReadContainer`\'\'\'\n+        """See interface `IReadContainer`"""\n         return super().get(_coerce(key), default)\n \n     def __contains__(self, key):\n-        \'\'\'See interface `IReadContainer`\'\'\'\n+        """See interface `IReadContainer`"""\n         return super().__contains__(_coerce(key))\n \n     has_key = __contains__\n \n     def __setitem__(self, key, object):\n-        \'\'\'See interface `IWriteContainer`\'\'\'\n+        """See interface `IWriteContainer`"""\n         super().__setitem__(_coerce(key), object)\n \n     def __delitem__(self, key):\n-        \'\'\'See interface `IWriteContainer`\'\'\'\n+        """See interface `IWriteContainer`"""\n         super().__delitem__(_coerce(key))\n \n \n @implementer(IPortletAssignmentMapping)\n class PortletAssignmentMapping(OrderedContainer):\n-    """The default assignment mapping storage.\n-    """\n+    """The default assignment mapping storage."""\n \n-    __manager__ = \'\'\n-    __category__ = \'\'\n-    __name__ = \'\'\n+    __manager__ = ""\n+    __category__ = ""\n+    __name__ = ""\n \n-    def __init__(self, manager=\'\', category=\'\', name=\'\'):\n+    def __init__(self, manager="", category="", name=""):\n         # XXX: This depends on implementation detail in OrderedContainer,\n         # but it uses a PersistentDict, which sucks :-/\n         OrderedContainer.__init__(self)\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 1891621..dfea2de 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -21,18 +21,18 @@ def configurationSetUp(test=None):\n     import zope.contentprovider\n     import zope.security\n \n-    XMLConfig(\'meta.zcml\', zope.security)()\n-    XMLConfig(\'meta.zcml\', zope.component)()\n-    XMLConfig(\'meta.zcml\', zope.browserpage)()\n+    XMLConfig("meta.zcml", zope.security)()\n+    XMLConfig("meta.zcml", zope.component)()\n+    XMLConfig("meta.zcml", zope.browserpage)()\n \n-    XMLConfig(\'configure.zcml\', zope.annotation)()\n-    XMLConfig(\'configure.zcml\', zope.component)()\n-    XMLConfig(\'configure.zcml\', zope.security)()\n-    XMLConfig(\'configure.zcml\', zope.container)()\n-    XMLConfig(\'configure.zcml\', zope.contentprovider)()\n-    XMLConfig(\'configure.zcml\', plone.memoize)()\n+    XMLConfig("configure.zcml", zope.annotation)()\n+    XMLConfig("configure.zcml", zope.component)()\n+    XMLConfig("configure.zcml", zope.security)()\n+    XMLConfig("configure.zcml", zope.container)()\n+    XMLConfig("configure.zcml", zope.contentprovider)()\n+    XMLConfig("configure.zcml", plone.memoize)()\n \n-    XMLConfig(\'configure.zcml\', plone.portlets)()\n+    XMLConfig("configure.zcml", plone.portlets)()\n \n \n def configurationTearDown(test=None):\n@@ -97,10 +97,10 @@ class DummyPortletManager:\n     class DummyPortletRenderer:\n         @property\n         def available(self):\n-            return getattr(self, \'__portlet_metadata__\', False)\n+            return getattr(self, "__portlet_metadata__", False)\n \n         def render(self):\n-            return \'dummy portlet renderer\'\n+            return "dummy portlet renderer"\n \n         def update(self):\n             pass\n@@ -122,9 +122,9 @@ class Obj:\n     class DummyPortletRetriever(PortletRetriever):\n         def getPortlets(self):\n             p = dict()\n-            p[\'category\'] = CONTEXT_CATEGORY\n-            p[\'key\'] = p[\'name\'] = \'dummy\'\n-            p[\'assignment\'] = obj = Obj()\n+            p["category"] = CONTEXT_CATEGORY\n+            p["key"] = p["name"] = "dummy"\n+            p["assignment"] = obj = Obj()\n             obj.data = DummyPortletRenderer()\n             obj.available = True\n             return (p,)\n@@ -150,10 +150,12 @@ def _dataToPortlet(self, data):\n     # prepare a memoizeable test request\n \n     from zope.publisher.browser import TestRequest\n+\n     request = TestRequest()\n \n     from zope.annotation.interfaces import IAttributeAnnotatable\n     from zope.interface import alsoProvides\n+\n     alsoProvides(request, IAttributeAnnotatable)\n \n     # Check that a PortletManagerRenderer is capable of rendering our\n@@ -171,19 +173,19 @@ def test_suite():\n     return unittest.TestSuite(\n         (\n             doctest.DocFileSuite(\n-                \'README.txt\',\n+                "README.txt",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\n             ),\n             doctest.DocFileSuite(\n-                \'uisupport.txt\',\n+                "uisupport.txt",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\n             ),\n             doctest.DocFileSuite(\n-                \'utils.txt\',\n+                "utils.txt",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\ndiff --git a/plone/portlets/utils.py b/plone/portlets/utils.py\nindex cfb6caa..92d5955 100644\n--- a/plone/portlets/utils.py\n+++ b/plone/portlets/utils.py\n@@ -50,12 +50,12 @@ def hashPortletInfo(info):\n     # Make sure all info values are decoded\n     newinfo = {}\n     for k, v in info.items():\n-        if hasattr(v, \'decode\'):\n-            v = v.decode(\'utf8\')\n+        if hasattr(v, "decode"):\n+            v = v.decode("utf8")\n         newinfo[k] = v\n-    concat_txt = \'%(manager)s\\n%(category)s\\n%(key)s\\n%(name)s\' % newinfo\n-    info[\'hash\'] = binascii.b2a_hex(concat_txt.encode(\'utf8\'))\n-    return info[\'hash\']\n+    concat_txt = "%(manager)s\\n%(category)s\\n%(key)s\\n%(name)s" % newinfo\n+    info["hash"] = binascii.b2a_hex(concat_txt.encode("utf8"))\n+    return info["hash"]\n \n \n def unhashPortletInfo(hash):\n@@ -66,7 +66,5 @@ def unhashPortletInfo(hash):\n     """\n     concat_txt = binascii.a2b_hex(hash).decode()\n     manager, category, key, name = concat_txt.splitlines()\n-    info = dict(\n-        manager=manager, category=category, key=key, name=name, hash=hash\n-    )\n+    info = dict(manager=manager, category=category, key=key, name=name, hash=hash)\n     return info\ndiff --git a/setup.py b/setup.py\nindex 0826145..93c5887 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,15 +2,13 @@\n from setuptools import setup\n \n \n-version = \'2.3.4.dev0\'\n+version = "2.3.4.dev0"\n \n setup(\n-    name=\'plone.portlets\',\n+    name="plone.portlets",\n     version=version,\n     description="An extension of zope.viewlet to support dynamic portlets",\n-    long_description=(\n-        open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n-    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -34,35 +32,35 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'portlet viewlet\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.portlets\',\n-    license=\'GPL version 2\',\n+    keywords="portlet viewlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.portlets",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=\'>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*\',\n+    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n     extras_require=dict(\n         test=[\n-            \'zope.browserpage\',\n-            \'zope.configuration\',\n-            \'zope.location\',\n-            \'zope.security\',\n+            "zope.browserpage",\n+            "zope.configuration",\n+            "zope.location",\n+            "zope.security",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'ZODB\',\n-        \'plone.memoize\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.contentprovider\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.site\',\n+        "setuptools",\n+        "ZODB",\n+        "plone.memoize",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.container",\n+        "zope.contentprovider",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.site",\n     ],\n )\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T12:34:53+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/276f7006256b87c6528975a12bab539e8ffcbc64

chore: zpretty

Files changed:
M plone/portlets/configure.zcml

b'diff --git a/plone/portlets/configure.zcml b/plone/portlets/configure.zcml\nindex 606c281..8643022 100644\n--- a/plone/portlets/configure.zcml\n+++ b/plone/portlets/configure.zcml\n@@ -1,20 +1,20 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package="zope.annotation" />\n+  <include package="zope.annotation" />\n \n-    <adapter factory=".assignable.localPortletAssignmentMappingAdapter" />\n-    <adapter factory=".assignable.LocalPortletAssignmentManager" />\n-    <adapter factory=".assignable.BlockingLocalPortletAssignmentManager" />\n+  <adapter factory=".assignable.localPortletAssignmentMappingAdapter" />\n+  <adapter factory=".assignable.LocalPortletAssignmentManager" />\n+  <adapter factory=".assignable.BlockingLocalPortletAssignmentManager" />\n \n-    <adapter factory=".retriever.PortletRetriever" />\n-    <adapter factory=".retriever.PlacelessPortletRetriever" />\n+  <adapter factory=".retriever.PortletRetriever" />\n+  <adapter factory=".retriever.PlacelessPortletRetriever" />\n \n-    <adapter factory=".manager.PortletManagerRenderer" />\n+  <adapter factory=".manager.PortletManagerRenderer" />\n \n-    <adapter factory=".settings.portletAssignmentSettingsFactory"/>\n+  <adapter factory=".settings.portletAssignmentSettingsFactory" />\n \n-    <subscriber handler=".events.dispatchToComponent" />\n-    <subscriber handler=".events.registerPortletManagerRenderer" />\n-    <subscriber handler=".events.unregisterPortletManagerRenderer" />\n+  <subscriber handler=".events.dispatchToComponent" />\n+  <subscriber handler=".events.registerPortletManagerRenderer" />\n+  <subscriber handler=".events.unregisterPortletManagerRenderer" />\n \n </configure>\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T12:38:40+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/b3a102e394374409618b8338bc0a2c468042f437

feat: flake8

Files changed:
M plone/portlets/storage.py

b'diff --git a/plone/portlets/storage.py b/plone/portlets/storage.py\nindex 425d00a..e2c58ca 100644\n--- a/plone/portlets/storage.py\n+++ b/plone/portlets/storage.py\n@@ -8,33 +8,24 @@\n from zope.interface import implementer\n \n import logging\n-import sys\n \n \n-# XXX: We coerce all mapping keys (things like user and group ids)\n-# to unicode, because the OOBTree that we store them in will fall over with\n-# mixed encoded-str and unicode keys. It may be better to store byte strings\n-# (and thus coerce the other way), especially to support things like Active\n-# Directory where user ids are binary GUIDs. However, that\'s a problem for\n-# another day, since it\'ll require more complex migration.\n-\n LOG = logging.getLogger("portlets")\n \n-if sys.version_info[0] > 2:\n-    text_type = str\n-    binary_type = bytes\n-else:\n-    text_type = unicode\n-    binary_type = str\n-\n \n def _coerce(key):\n-    if isinstance(key, binary_type):\n+    # XXX: We coerce all mapping keys (things like user and group ids)\n+    # to unicode, because the OOBTree that we store them in will fall over with\n+    # mixed encoded-str and unicode keys. It may be better to store byte strings\n+    # (and thus coerce the other way), especially to support things like Active\n+    # Directory where user ids are binary GUIDs. However, that\'s a problem for\n+    # another day, since it\'ll require more complex migration.\n+    if isinstance(key, bytes):\n         try:\n-            key = text_type(key, encoding="utf-8")\n+            key = str(key, encoding="utf-8")\n         except UnicodeDecodeError:\n             LOG.warn("Unable to convert %r to unicode" % key)\n-            return text_type(key, "utf-8", "ignore")\n+            return str(key, "utf-8", "ignore")\n \n     return key\n \n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T12:41:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/8bfb29f4c4f0ad02d02121291f7d7a44829ae868

feat: codespell

Files changed:
M plone/portlets/README.txt
M plone/portlets/interfaces.py
M plone/portlets/tests.py
M plone/portlets/utils.txt

b'diff --git a/plone/portlets/README.txt b/plone/portlets/README.txt\nindex a1c2198..868f7da 100644\n--- a/plone/portlets/README.txt\n+++ b/plone/portlets/README.txt\n@@ -897,7 +897,7 @@ And are hidden in the view.\n Using a different retrieval algorithm\n -------------------------------------\n \n-The examples above show the default portlet retrival algorithm, which finds\n+The examples above show the default portlet retrieval algorithm, which finds\n portlets for children before those for parents before those for users\n before those for groups. It is relatively easy to plug in different composition\n algorithm, however.\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex 717a0c3..cf5d7ca 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -43,7 +43,7 @@ def getParent():\n     def globalPortletCategories(placeless=False):\n         """Get global portlet key-value pairs, in order.\n \n-        When rendered, a portlet manger (column) will be filled first by\n+        When rendered, a portlet manager (column) will be filled first by\n         contextual portlets (if the context and/or its parents provide\n         ILocalPortletAssignable), and then by global portlets. Global portlet\n         assignments may include portlets per user, per group, or per content\n@@ -177,7 +177,7 @@ class IPortletRenderer(IContentProvider):\n \n     available = schema.Bool(\n         title="Available",\n-        description="Whether or not this portlet shuld be rendered",\n+        description="Whether or not this portlet should be rendered",\n         required=True,\n         readonly=True,\n     )\n@@ -203,7 +203,7 @@ def getPortlets():\n         """\n \n \n-# Portlet managment\n+# Portlet management\n \n \n class IPortletStorage(IContainer):\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex dfea2de..2bfdfa7 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -106,7 +106,7 @@ def update(self):\n             pass\n \n     # Define a dummy portlet retriever that adapts our dummy portlet manager\n-    # and returns in its getPortlets a mock dictinary with a dummy\n+    # and returns in its getPortlets a mock dictionary with a dummy\n     # PortletRenderer as p[\'assignment\'].data. For that, we need a class\n     # where we can set an attribute \'data\'\n \ndiff --git a/plone/portlets/utils.txt b/plone/portlets/utils.txt\nindex ce1294e..c649122 100644\n--- a/plone/portlets/utils.txt\n+++ b/plone/portlets/utils.txt\n@@ -3,7 +3,7 @@ Portlet utils\n =============\n \n The portlets need a hash that can play as an id in the html\n-page. For this, a pair of symetric hash and unhash functions\n+page. For this, a pair of symmetric hash and unhash functions\n is provided.\n \n   >>> from plone.portlets.utils import hashPortletInfo, unhashPortletInfo\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T18:25:25+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/2e1ea5a45f58899531295b4f7d436b58f1eb9d41

chore: require python 3.8

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 93c5887..2b94798 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -41,7 +41,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n             "zope.browserpage",\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-19T18:26:26+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/ec7ee0288c69f27d080824b5786e9df7a9546037

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 2b94798..21a900d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,9 +51,11 @@\n         ]\n     ),\n     install_requires=[\n+        "BTrees",\n         "setuptools",\n         "ZODB",\n         "plone.memoize",\n+        "persistent",\n         "zope.annotation",\n         "zope.component",\n         "zope.container",\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:00:54+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/c5c431ee33228cd6117c9b5f8ee4b750637210fd

Add zope.testing to test requires.

Otherwise test_portlet_metadata_availability fails with a ComponentLookupError.
Simply having the package available is enough, we don't need to call it.
So add it to the dependencies ignores.

Files changed:
M .meta.toml
M setup.py

b'diff --git a/.meta.toml b/.meta.toml\nindex 697a54c..605f7d7 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,6 @@\n [meta]\n template = "default"\n commit-id = "80cf330f"\n+\n+[dependencies]\n+ignores = "[\'zope.testing\']"\ndiff --git a/setup.py b/setup.py\nindex 21a900d..9ab1566 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -48,6 +48,7 @@\n             "zope.configuration",\n             "zope.location",\n             "zope.security",\n+            \'zope.testing\',\n         ]\n     ),\n     install_requires=[\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:02:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/8013be9995ac17eaafce7fa75cb5a0e2879f47b0

Configuring with plone/meta

Files changed:
A news/e380661b.internal
M .meta.toml
M .pre-commit-config.yaml
M pyproject.toml
M tox.ini

b'diff --git a/.meta.toml b/.meta.toml\nindex 605f7d7..a35d36f 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,7 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "80cf330f"\n+commit-id = "e380661b"\n \n [dependencies]\n ignores = "[\'zope.testing\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex 582f8ac..449e951 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -19,7 +19,7 @@ repos:\n     hooks:\n     -   id: black\n -   repo: https://github.com/collective/zpretty\n-    rev: 3.0.2\n+    rev: 3.0.3\n     hooks:\n     -   id: zpretty\n -   repo: https://github.com/PyCQA/flake8\ndiff --git a/news/e380661b.internal b/news/e380661b.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/e380661b.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..b371489 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,4 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+ignore-packages = [\'zope.testing\']\ndiff --git a/tox.ini b/tox.ini\nindex 8e3aeb2..6b8d487 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,6 +1,8 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n     format\n     lint\n@@ -41,6 +43,7 @@ commands =\n \n [testenv:test]\n usedevelop = true\n+constrain_package_deps = true\n deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:02:57+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/76977c6587aee5f1df5be292315cac0e0c4cfe96

quotes

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 9ab1566..3d97fe5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -48,7 +48,7 @@\n             "zope.configuration",\n             "zope.location",\n             "zope.security",\n-            \'zope.testing\',\n+            "zope.testing",\n         ]\n     ),\n     install_requires=[\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:03:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/e0c49d2ecb9e9f23a7f27dc360a45df9467f1a62

Remove duplicate news file after updating again.

Files changed:
D news/e380661b.internal

b'diff --git a/news/e380661b.internal b/news/e380661b.internal\ndeleted file mode 100644\nindex c08f539..0000000\n--- a/news/e380661b.internal\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Update configuration files.\n-[plone devs]\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:04:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/cb8883dbdbbfb133d3b4c85e62c5598e8dbb61bb

tox -e test: allow passing arguments.

For example: `tox -e test -- -D` to get a debug prompt after a test failure.

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 6b8d487..432f0b7 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -48,6 +48,6 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.portlets\n+    zope-testrunner --test-path={toxinidir} -s plone.portlets {posargs}\n extras =\n     test\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:10:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/e8bed7663883742fdf71415c6b5376fe6c953bb9

Bumped version for breaking release.

Updated classifiers, added breaking news snippet.

Files changed:
A news/9.breaking
M setup.py

b'diff --git a/news/9.breaking b/news/9.breaking\nnew file mode 100644\nindex 0000000..f5dd8cf\n--- /dev/null\n+++ b/news/9.breaking\n@@ -0,0 +1,3 @@\n+Drop support for Plone 5.2 and Python 2.\n+Only Plone 6.0 on Python 3.8+ is supported.\n+[plone devs]\ndiff --git a/setup.py b/setup.py\nindex 3d97fe5..ce89ed6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "2.3.4.dev0"\n+version = "3.0.0.dev0"\n \n setup(\n     name="plone.portlets",\n@@ -13,20 +13,12 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T12:15:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlets/commit/b32d092807d17ccb15780d8bd5e9833a9205ea41

Removed unused zope.interface imports from uisupport tests.

This fixes an incompatibility with the most recent zope.interface.
Fixes https://github.com/plone/plone.portlets/issues/8

Files changed:
M plone/portlets/uisupport.txt

b'diff --git a/plone/portlets/uisupport.txt b/plone/portlets/uisupport.txt\nindex 088ffef..679771d 100644\n--- a/plone/portlets/uisupport.txt\n+++ b/plone/portlets/uisupport.txt\n@@ -16,9 +16,7 @@ manager must have in order for the portlet to be addable to it.\n \n First, we must create a local site manager at a fictional root folder.\n \n-  >>> from zope.interface import implements, Interface, directlyProvides\n-  >>> from zope.component import adapts, provideAdapter\n-\n+  >>> from zope.interface import directlyProvides\n   >>> from zope.site.folder import rootFolder, Folder\n   >>> rootFolder = rootFolder()\n \n'

Repository: plone.portlets


Branch: refs/heads/master
Date: 2023-03-28T13:01:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/516fc194427f8ffe67a9ecdbcf6d0adb30dfa40d

Merge pull request #9 from plone/config-with-default-template-8b1d4add

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/80cf330f.internal
A news/9.breaking
A tox.ini
M plone/__init__.py
M plone/portlets/README.txt
M plone/portlets/assignable.py
M plone/portlets/configure.zcml
M plone/portlets/constants.py
M plone/portlets/interfaces.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/uisupport.txt
M plone/portlets/utils.py
M plone/portlets/utils.txt
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..a35d36f\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "e380661b"\n+\n+[dependencies]\n+ignores = "[\'zope.testing\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/80cf330f.internal b/news/80cf330f.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/80cf330f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/news/9.breaking b/news/9.breaking\nnew file mode 100644\nindex 0000000..f5dd8cf\n--- /dev/null\n+++ b/news/9.breaking\n@@ -0,0 +1,3 @@\n+Drop support for Plone 5.2 and Python 2.\n+Only Plone 6.0 on Python 3.8+ is supported.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 5d74e30..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/portlets/README.txt b/plone/portlets/README.txt\nindex a1c2198..868f7da 100644\n--- a/plone/portlets/README.txt\n+++ b/plone/portlets/README.txt\n@@ -897,7 +897,7 @@ And are hidden in the view.\n Using a different retrieval algorithm\n -------------------------------------\n \n-The examples above show the default portlet retrival algorithm, which finds\n+The examples above show the default portlet retrieval algorithm, which finds\n portlets for children before those for parents before those for users\n before those for groups. It is relatively easy to plug in different composition\n algorithm, however.\ndiff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py\nindex b044f7b..049ac6d 100644\n--- a/plone/portlets/assignable.py\n+++ b/plone/portlets/assignable.py\n@@ -39,7 +39,7 @@ def localPortletAssignmentMappingAdapter(context, manager):\n \n \n @implementer(ILocalPortletAssignmentManager)\n-class LocalPortletAssignmentManager(object):\n+class LocalPortletAssignmentManager:\n     """Default implementation of ILocalPortletAssignmentManager which stores\n     information in an annotation.\n     """\n@@ -68,9 +68,7 @@ def _getBlacklist(self, create=False):\n         local = annotations.get(CONTEXT_BLACKLIST_STATUS_KEY, None)\n         if local is None:\n             if create:\n-                local = annotations[\n-                    CONTEXT_BLACKLIST_STATUS_KEY\n-                ] = PersistentDict()\n+                local = annotations[CONTEXT_BLACKLIST_STATUS_KEY] = PersistentDict()\n             else:\n                 return None\n         blacklist = local.get(self.manager.__name__, None)\n@@ -90,9 +88,7 @@ class BlockingLocalPortletAssignmentManager(LocalPortletAssignmentManager):\n     adapts(ILocalPortletAssignable, IBlockingPortletManager)\n \n     def getBlacklistStatus(self, category):\n-        value = super(\n-            BlockingLocalPortletAssignmentManager, self\n-        ).getBlacklistStatus(category)\n+        value = super().getBlacklistStatus(category)\n         if category is CONTEXT_CATEGORY and value is None:\n             return True\n         return value\ndiff --git a/plone/portlets/configure.zcml b/plone/portlets/configure.zcml\nindex 606c281..8643022 100644\n--- a/plone/portlets/configure.zcml\n+++ b/plone/portlets/configure.zcml\n@@ -1,20 +1,20 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package="zope.annotation" />\n+  <include package="zope.annotation" />\n \n-    <adapter factory=".assignable.localPortletAssignmentMappingAdapter" />\n-    <adapter factory=".assignable.LocalPortletAssignmentManager" />\n-    <adapter factory=".assignable.BlockingLocalPortletAssignmentManager" />\n+  <adapter factory=".assignable.localPortletAssignmentMappingAdapter" />\n+  <adapter factory=".assignable.LocalPortletAssignmentManager" />\n+  <adapter factory=".assignable.BlockingLocalPortletAssignmentManager" />\n \n-    <adapter factory=".retriever.PortletRetriever" />\n-    <adapter factory=".retriever.PlacelessPortletRetriever" />\n+  <adapter factory=".retriever.PortletRetriever" />\n+  <adapter factory=".retriever.PlacelessPortletRetriever" />\n \n-    <adapter factory=".manager.PortletManagerRenderer" />\n+  <adapter factory=".manager.PortletManagerRenderer" />\n \n-    <adapter factory=".settings.portletAssignmentSettingsFactory"/>\n+  <adapter factory=".settings.portletAssignmentSettingsFactory" />\n \n-    <subscriber handler=".events.dispatchToComponent" />\n-    <subscriber handler=".events.registerPortletManagerRenderer" />\n-    <subscriber handler=".events.unregisterPortletManagerRenderer" />\n+  <subscriber handler=".events.dispatchToComponent" />\n+  <subscriber handler=".events.registerPortletManagerRenderer" />\n+  <subscriber handler=".events.unregisterPortletManagerRenderer" />\n \n </configure>\ndiff --git a/plone/portlets/constants.py b/plone/portlets/constants.py\nindex 708418e..b94d7c8 100644\n--- a/plone/portlets/constants.py\n+++ b/plone/portlets/constants.py\n@@ -1,15 +1,15 @@\n # Annotation keys\n \n-CONTEXT_ASSIGNMENT_KEY = \'plone.portlets.contextassignments\'\n-CONTEXT_BLACKLIST_STATUS_KEY = \'plone.portlets.categoryblackliststatus\'\n-ASSIGNMENT_SETTINGS_KEY = \'plone.portlets.assignmentsettings\'\n+CONTEXT_ASSIGNMENT_KEY = "plone.portlets.contextassignments"\n+CONTEXT_BLACKLIST_STATUS_KEY = "plone.portlets.categoryblackliststatus"\n+ASSIGNMENT_SETTINGS_KEY = "plone.portlets.assignmentsettings"\n \n # Portlet assignment categories\n \n-USER_CATEGORY = \'user\'\n-GROUP_CATEGORY = \'group\'\n-CONTENT_TYPE_CATEGORY = \'content_type\'\n+USER_CATEGORY = "user"\n+GROUP_CATEGORY = "group"\n+CONTENT_TYPE_CATEGORY = "content_type"\n \n # This is stored under the CONTEXT_ASSIGNMENT_KEY annotation, not in the\n # IPortletManager utility\n-CONTEXT_CATEGORY = \'context\'\n+CONTEXT_CATEGORY = "context"\ndiff --git a/plone/portlets/interfaces.py b/plone/portlets/interfaces.py\nindex 71346cb..cf5d7ca 100644\n--- a/plone/portlets/interfaces.py\n+++ b/plone/portlets/interfaces.py\n@@ -4,10 +4,10 @@\n from zope.container.interfaces import IContainer\n from zope.container.interfaces import IContainerNamesContainer\n from zope.container.interfaces import IOrderedContainer\n-from zope.location.interfaces import IContained\n from zope.contentprovider.interfaces import IContentProvider\n from zope.interface import Attribute\n from zope.interface import Interface\n+from zope.location.interfaces import IContained\n \n \n # Context - the application layer must provide these\n@@ -28,7 +28,7 @@ class IPortletContext(Interface):\n     """\n \n     uid = schema.TextLine(\n-        title=u"A unique id or path for this specific context", required=True\n+        title="A unique id or path for this specific context", required=True\n     )\n \n     def getParent():\n@@ -43,7 +43,7 @@ def getParent():\n     def globalPortletCategories(placeless=False):\n         """Get global portlet key-value pairs, in order.\n \n-        When rendered, a portlet manger (column) will be filled first by\n+        When rendered, a portlet manager (column) will be filled first by\n         contextual portlets (if the context and/or its parents provide\n         ILocalPortletAssignable), and then by global portlets. Global portlet\n         assignments may include portlets per user, per group, or per content\n@@ -83,19 +83,19 @@ class IPortletType(Interface):\n     providing IPortletType, so that UI can find them.\n     """\n \n-    title = schema.TextLine(title=u\'Title\', required=True)\n+    title = schema.TextLine(title="Title", required=True)\n \n-    description = schema.Text(title=u\'Description\', required=False)\n+    description = schema.Text(title="Description", required=False)\n \n     addview = schema.TextLine(\n-        title=u\'Add view\',\n-        description=u\'The name of the add view for assignments for this portlet type\',\n+        title="Add view",\n+        description="The name of the add view for assignments for this portlet type",\n         required=True,\n     )\n \n     for_ = Attribute(\n-        \'An interface a portlet manager must have to allow this type of portlet. \'\n-        \'May be None if there are no restrictions.\'\n+        "An interface a portlet manager must have to allow this type of portlet. "\n+        "May be None if there are no restrictions."\n     )\n \n \n@@ -137,19 +137,19 @@ class IPortletAssignment(IContained, IAttributeAnnotatable):\n     """\n \n     title = schema.Bool(\n-        title=u\'Title\',\n-        description=u\'The title of this assignment as displayed to the user\',\n+        title="Title",\n+        description="The title of this assignment as displayed to the user",\n         required=True,\n     )\n \n     available = schema.Bool(\n-        title=u\'Available\',\n-        description=u\'Whether or not this portlet should be rendered\',\n+        title="Available",\n+        description="Whether or not this portlet should be rendered",\n         required=True,\n         readonly=True,\n     )\n \n-    data = Attribute(u\'Portlet data object\')\n+    data = Attribute("Portlet data object")\n \n \n # A content provider capable of rendering portlets - each type of portlet will\n@@ -167,8 +167,8 @@ class IPortletRenderer(IContentProvider):\n     """\n \n     __portlet_metadata__ = schema.Dict(\n-        title=u"Metadata",\n-        description=u"Information about the portlet set during portlet retrieval",\n+        title="Metadata",\n+        description="Information about the portlet set during portlet retrieval",\n         required=True,\n         readonly=True,\n         key_type=schema.ASCIILine(),\n@@ -176,8 +176,8 @@ class IPortletRenderer(IContentProvider):\n     )\n \n     available = schema.Bool(\n-        title=u\'Available\',\n-        description=u\'Whether or not this portlet shuld be rendered\',\n+        title="Available",\n+        description="Whether or not this portlet should be rendered",\n         required=True,\n         readonly=True,\n     )\n@@ -203,7 +203,7 @@ def getPortlets():\n         """\n \n \n-# Portlet managment\n+# Portlet management\n \n \n class IPortletStorage(IContainer):\n@@ -215,7 +215,7 @@ class IPortletStorage(IContainer):\n     Some common keys are found in plone.portlets.constants.\n     """\n \n-    contains(\'plone.portlets.interfaces.IPortletCategoryMapping\')\n+    contains("plone.portlets.interfaces.IPortletCategoryMapping")\n \n \n class IPortletCategoryMapping(IContainer, IContained):\n@@ -227,7 +227,7 @@ class IPortletCategoryMapping(IContainer, IContained):\n     which would be given a particular IPortletAssignmentMapping.\n     """\n \n-    contains(\'plone.portlets.interfaces.IPortletAssignmentMapping\')\n+    contains("plone.portlets.interfaces.IPortletAssignmentMapping")\n \n \n class IPortletAssignmentMapping(\n@@ -242,14 +242,12 @@ class IPortletAssignmentMapping(\n     appropriate container.\n     """\n \n-    contains(\'plone.portlets.interfaces.IPortletAssignment\')\n+    contains("plone.portlets.interfaces.IPortletAssignment")\n \n     __manager__ = schema.TextLine(\n-        title=u"Name of the portlet manager this mapping belongs to"\n-    )\n-    __category__ = schema.TextLine(\n-        title=u\'Name of the category this mapping belongs to\'\n+        title="Name of the portlet manager this mapping belongs to"\n     )\n+    __category__ = schema.TextLine(title="Name of the category this mapping belongs to")\n \n \n class ILocalPortletAssignmentManager(Interface):\n@@ -329,8 +327,7 @@ class IPlacelessPortletManager(IPortletManager):\n \n \n class IPortletManagerRenderer(IContentProvider):\n-    """A content provider for rendering a portlet manager.\n-    """\n+    """A content provider for rendering a portlet manager."""\n \n     template = Attribute(\n         """A page template object to render the manager with.\n@@ -344,8 +341,8 @@ class IPortletManagerRenderer(IContentProvider):\n     )\n \n     visible = schema.Bool(\n-        title=u\'Visible\',\n-        description=u\'Whether or not this portlet manager (column) will be rendered at all\',\n+        title="Visible",\n+        description="Whether or not this portlet manager (column) will be rendered at all",\n         required=True,\n         default=True,\n     )\n@@ -372,7 +369,7 @@ def safe_render(portlet_renderer):\n \n \n class IPortletAssignmentSettings(Interface):\n-    """ Adapts IPortletAssignment to return additional settings for a portlet assignment.\n+    """Adapts IPortletAssignment to return additional settings for a portlet assignment.\n \n     Implementations of this interface will typically be stored in an annotation\n     of the assignment.\ndiff --git a/plone/portlets/manager.py b/plone/portlets/manager.py\nindex 2fe16a9..8725c5e 100644\n--- a/plone/portlets/manager.py\n+++ b/plone/portlets/manager.py\n@@ -19,12 +19,12 @@\n import logging\n \n \n-logger = logging.getLogger(\'portlets\')\n+logger = logging.getLogger("portlets")\n \n \n @implementer(IPortletManagerRenderer)\n @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager)\n-class PortletManagerRenderer(object):\n+class PortletManagerRenderer:\n \n     """Default renderer for portlet managers.\n \n@@ -53,7 +53,7 @@ def filter(self, portlets):\n         filtered = []\n         for p in portlets:\n             try:\n-                if p[\'assignment\'].available:\n+                if p["assignment"].available:\n                     filtered.append(p)\n             except ConflictError:\n                 raise\n@@ -61,12 +61,12 @@ def filter(self, portlets):\n                 logger.exception(\n                     "Error while determining assignment availability of "\n                     "portlet (%r %r %r): %s"\n-                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                    % (p["category"], p["key"], p["name"], str(e))\n                 )\n         return filtered\n \n     def portletsToShow(self):\n-        return [p for p in self.allPortlets() if p[\'available\']]\n+        return [p for p in self.allPortlets() if p["available"]]\n \n     def allPortlets(self):\n         return self._lazyLoadPortlets(self.manager)\n@@ -74,7 +74,7 @@ def allPortlets(self):\n     def update(self):\n         self.__updated = True\n         for p in self.portletsToShow():\n-            p[\'renderer\'].update()\n+            p["renderer"].update()\n \n     def render(self):\n         if not self.__updated:\n@@ -84,7 +84,7 @@ def render(self):\n         if self.template:\n             return self.template(portlets=portlets)\n         else:\n-            return u\'\\n\'.join([p[\'renderer\'].render() for p in portlets])\n+            return "\\n".join([p["renderer"].render() for p in portlets])\n \n     def safe_render(self, portlet_renderer):\n         try:\n@@ -92,7 +92,7 @@ def safe_render(self, portlet_renderer):\n         except ConflictError:\n             raise\n         except Exception:\n-            logger.exception(\'Error while rendering %r\' % (self,))\n+            logger.exception(f"Error while rendering {self!r}")\n             return self.error_message()\n \n     # Note: By passing in a parameter that\'s different for each portlet\n@@ -107,14 +107,14 @@ def _lazyLoadPortlets(self, manager):\n         retriever = getMultiAdapter((self.context, manager), IPortletRetriever)\n         items = []\n         for p in self.filter(retriever.getPortlets()):\n-            renderer = self._dataToPortlet(p[\'assignment\'].data)\n+            renderer = self._dataToPortlet(p["assignment"].data)\n             info = p.copy()\n-            info[\'manager\'] = self.manager.__name__\n-            info[\'renderer\'] = renderer\n+            info["manager"] = self.manager.__name__\n+            info["renderer"] = renderer\n             hashPortletInfo(info)\n             # Record metadata on the renderer\n             renderer.__portlet_metadata__ = info.copy()\n-            del renderer.__portlet_metadata__[\'renderer\']\n+            del renderer.__portlet_metadata__["renderer"]\n             try:\n                 isAvailable = renderer.available\n             except ConflictError:\n@@ -123,11 +123,10 @@ def _lazyLoadPortlets(self, manager):\n                 isAvailable = False\n                 logger.exception(\n                     "Error while determining renderer availability of portlet "\n-                    "(%r %r %r): %s"\n-                    % (p[\'category\'], p[\'key\'], p[\'name\'], str(e))\n+                    "(%r %r %r): %s" % (p["category"], p["key"], p["name"], str(e))\n                 )\n \n-            info[\'available\'] = isAvailable\n+            info["available"] = isAvailable\n             items.append(info)\n \n         return items\n@@ -153,9 +152,7 @@ class PortletManager(PortletStorage):\n     __name__ = __parent__ = None\n \n     def __call__(self, context, request, view):\n-        return getMultiAdapter(\n-            (context, request, view, self), IPortletManagerRenderer\n-        )\n+        return getMultiAdapter((context, request, view, self), IPortletManagerRenderer)\n \n     def getAddablePortletTypes(self):\n         addable = []\ndiff --git a/plone/portlets/registration.py b/plone/portlets/registration.py\nindex b53bd6e..5f92c14 100644\n--- a/plone/portlets/registration.py\n+++ b/plone/portlets/registration.py\n@@ -10,8 +10,8 @@ class PortletType(Persistent):\n     This is persistent so that it can be stored as a local utility.\n     """\n \n-    title = u\'\'\n-    description = u\'\'\n-    addview = u\'\'\n+    title = ""\n+    description = ""\n+    addview = ""\n     editview = None\n     for_ = None\ndiff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py\nindex 4f45dbf..adad4eb 100644\n--- a/plone/portlets/retriever.py\n+++ b/plone/portlets/retriever.py\n@@ -16,7 +16,7 @@\n \n \n @implementer(IPortletRetriever)\n-class PortletRetriever(object):\n+class PortletRetriever:\n     """The default portlet retriever.\n \n     This will examine the context and its parents for contextual portlets,\n@@ -141,17 +141,17 @@ def getPortlets(self):\n         for category, key, assignment in categories:\n             try:\n                 settings = IPortletAssignmentSettings(assignment)\n-                if not settings.get(\'visible\', True):\n+                if not settings.get("visible", True):\n                     continue\n             except TypeError:\n                 # Portlet does not exist any longer\n                 continue\n             assignments.append(\n                 {\n-                    \'category\': category,\n-                    \'key\': key,\n-                    \'name\': str(assignment.__name__),\n-                    \'assignment\': assignment,\n+                    "category": category,\n+                    "key": key,\n+                    "name": str(assignment.__name__),\n+                    "assignment": assignment,\n                 }\n             )\n         return assignments\n@@ -190,15 +190,15 @@ def getPortlets(self):\n                         # Portlet does not exist any longer\n                         continue\n                     else:\n-                        if not settings.get(\'visible\', True):\n+                        if not settings.get("visible", True):\n                             continue\n \n                     assignments.append(\n                         {\n-                            \'category\': category,\n-                            \'key\': key,\n-                            \'name\': assignment.__name__,\n-                            \'assignment\': assignment,\n+                            "category": category,\n+                            "key": key,\n+                            "name": assignment.__name__,\n+                            "assignment": assignment,\n                         }\n                     )\n \ndiff --git a/plone/portlets/settings.py b/plone/portlets/settings.py\nindex 14680de..dc5456f 100644\n--- a/plone/portlets/settings.py\n+++ b/plone/portlets/settings.py\n@@ -34,8 +34,6 @@ def portletAssignmentSettingsFactory(context):\n     settings = annotations.get(ASSIGNMENT_SETTINGS_KEY, None)\n \n     if settings is None:\n-        settings = annotations[\n-            ASSIGNMENT_SETTINGS_KEY\n-        ] = PortletAssignmentSettings()\n+        settings = annotations[ASSIGNMENT_SETTINGS_KEY] = PortletAssignmentSettings()\n \n     return settings\ndiff --git a/plone/portlets/storage.py b/plone/portlets/storage.py\nindex 8f31f72..e2c58ca 100644\n--- a/plone/portlets/storage.py\n+++ b/plone/portlets/storage.py\n@@ -8,83 +8,71 @@\n from zope.interface import implementer\n \n import logging\n-import sys\n \n \n-# XXX: We coerce all mapping keys (things like user and group ids)\n-# to unicode, because the OOBTree that we store them in will fall over with\n-# mixed encoded-str and unicode keys. It may be better to store byte strings\n-# (and thus coerce the other way), especially to support things like Active\n-# Directory where user ids are binary GUIDs. However, that\'s a problem for\n-# another day, since it\'ll require more complex migration.\n-\n-LOG = logging.getLogger(\'portlets\')\n-\n-if sys.version_info[0] > 2:\n-    text_type = str\n-    binary_type = bytes\n-else:\n-    text_type = unicode\n-    binary_type = str\n+LOG = logging.getLogger("portlets")\n \n \n def _coerce(key):\n-    if isinstance(key, binary_type):\n+    # XXX: We coerce all mapping keys (things like user and group ids)\n+    # to unicode, because the OOBTree that we store them in will fall over with\n+    # mixed encoded-str and unicode keys. It may be better to store byte strings\n+    # (and thus coerce the other way), especially to support things like Active\n+    # Directory where user ids are binary GUIDs. However, that\'s a problem for\n+    # another day, since it\'ll require more complex migration.\n+    if isinstance(key, bytes):\n         try:\n-            key = text_type(key, encoding=\'utf-8\')\n+            key = str(key, encoding="utf-8")\n         except UnicodeDecodeError:\n-            LOG.warn(\'Unable to convert %r to unicode\' % key)\n-            return text_type(key, \'utf-8\', \'ignore\')\n+            LOG.warn("Unable to convert %r to unicode" % key)\n+            return str(key, "utf-8", "ignore")\n \n     return key\n \n \n @implementer(IPortletStorage)\n class PortletStorage(BTreeContainer):\n-    """The default portlet storage.\n-    """\n+    """The default portlet storage."""\n \n \n @implementer(IPortletCategoryMapping)\n class PortletCategoryMapping(BTreeContainer, Contained):\n-    """The default category/key mapping storage.\n-    """\n+    """The default category/key mapping storage."""\n \n     # We need to hack some stuff to make sure keys are unicode.\n     # The shole BTreeContainer/SampleContainer mess is a pain in the backside\n \n     def __getitem__(self, key):\n-        return super(PortletCategoryMapping, self).__getitem__(_coerce(key))\n+        return super().__getitem__(_coerce(key))\n \n     def get(self, key, default=None):\n-        \'\'\'See interface `IReadContainer`\'\'\'\n-        return super(PortletCategoryMapping, self).get(_coerce(key), default)\n+        """See interface `IReadContainer`"""\n+        return super().get(_coerce(key), default)\n \n     def __contains__(self, key):\n-        \'\'\'See interface `IReadContainer`\'\'\'\n-        return super(PortletCategoryMapping, self).__contains__(_coerce(key))\n+        """See interface `IReadContainer`"""\n+        return super().__contains__(_coerce(key))\n \n     has_key = __contains__\n \n     def __setitem__(self, key, object):\n-        \'\'\'See interface `IWriteContainer`\'\'\'\n-        super(PortletCategoryMapping, self).__setitem__(_coerce(key), object)\n+        """See interface `IWriteContainer`"""\n+        super().__setitem__(_coerce(key), object)\n \n     def __delitem__(self, key):\n-        \'\'\'See interface `IWriteContainer`\'\'\'\n-        super(PortletCategoryMapping, self).__delitem__(_coerce(key))\n+        """See interface `IWriteContainer`"""\n+        super().__delitem__(_coerce(key))\n \n \n @implementer(IPortletAssignmentMapping)\n class PortletAssignmentMapping(OrderedContainer):\n-    """The default assignment mapping storage.\n-    """\n+    """The default assignment mapping storage."""\n \n-    __manager__ = u\'\'\n-    __category__ = u\'\'\n-    __name__ = u\'\'\n+    __manager__ = ""\n+    __category__ = ""\n+    __name__ = ""\n \n-    def __init__(self, manager=u\'\', category=u\'\', name=u\'\'):\n+    def __init__(self, manager="", category="", name=""):\n         # XXX: This depends on implementation detail in OrderedContainer,\n         # but it uses a PersistentDict, which sucks :-/\n         OrderedContainer.__init__(self)\ndiff --git a/plone/portlets/tests.py b/plone/portlets/tests.py\nindex 604d7c9..2bfdfa7 100644\n--- a/plone/portlets/tests.py\n+++ b/plone/portlets/tests.py\n@@ -12,27 +12,27 @@\n def configurationSetUp(test=None):\n     setUp()\n \n+    import plone.memoize\n+    import plone.portlets\n     import zope.annotation\n     import zope.browserpage\n     import zope.component\n     import zope.container\n     import zope.contentprovider\n     import zope.security\n-    import plone.memoize\n-    import plone.portlets\n \n-    XMLConfig(\'meta.zcml\', zope.security)()\n-    XMLConfig(\'meta.zcml\', zope.component)()\n-    XMLConfig(\'meta.zcml\', zope.browserpage)()\n+    XMLConfig("meta.zcml", zope.security)()\n+    XMLConfig("meta.zcml", zope.component)()\n+    XMLConfig("meta.zcml", zope.browserpage)()\n \n-    XMLConfig(\'configure.zcml\', zope.annotation)()\n-    XMLConfig(\'configure.zcml\', zope.component)()\n-    XMLConfig(\'configure.zcml\', zope.security)()\n-    XMLConfig(\'configure.zcml\', zope.container)()\n-    XMLConfig(\'configure.zcml\', zope.contentprovider)()\n-    XMLConfig(\'configure.zcml\', plone.memoize)()\n+    XMLConfig("configure.zcml", zope.annotation)()\n+    XMLConfig("configure.zcml", zope.component)()\n+    XMLConfig("configure.zcml", zope.security)()\n+    XMLConfig("configure.zcml", zope.container)()\n+    XMLConfig("configure.zcml", zope.contentprovider)()\n+    XMLConfig("configure.zcml", plone.memoize)()\n \n-    XMLConfig(\'configure.zcml\', plone.portlets)()\n+    XMLConfig("configure.zcml", plone.portlets)()\n \n \n def configurationTearDown(test=None):\n@@ -74,15 +74,13 @@ def test_portlet_metadata_availability():\n     # the PortletManagerRenderer checks for the availability of\n     # the PortletRenderers\n \n+    # Define a dummy PortletManager\n+    from plone.portlets.interfaces import IPortletManager\n     from zope.component import adapter\n     from zope.component import provideAdapter\n     from zope.interface import implementer\n     from zope.interface import Interface\n \n-    # Define a dummy PortletManager\n-\n-    from plone.portlets.interfaces import IPortletManager\n-\n     class IDummyPortletManager(IPortletManager):\n         "Dummy portlet manager"\n \n@@ -99,20 +97,20 @@ class DummyPortletManager:\n     class DummyPortletRenderer:\n         @property\n         def available(self):\n-            return getattr(self, \'__portlet_metadata__\', False)\n+            return getattr(self, "__portlet_metadata__", False)\n \n         def render(self):\n-            return u\'dummy portlet renderer\'\n+            return "dummy portlet renderer"\n \n         def update(self):\n             pass\n \n     # Define a dummy portlet retriever that adapts our dummy portlet manager\n-    # and returns in its getPortlets a mock dictinary with a dummy\n+    # and returns in its getPortlets a mock dictionary with a dummy\n     # PortletRenderer as p[\'assignment\'].data. For that, we need a class\n     # where we can set an attribute \'data\'\n \n-    class Obj(object):\n+    class Obj:\n         pass\n \n     from plone.portlets.constants import CONTEXT_CATEGORY\n@@ -124,9 +122,9 @@ class Obj(object):\n     class DummyPortletRetriever(PortletRetriever):\n         def getPortlets(self):\n             p = dict()\n-            p[\'category\'] = CONTEXT_CATEGORY\n-            p[\'key\'] = p[\'name\'] = u\'dummy\'\n-            p[\'assignment\'] = obj = Obj()\n+            p["category"] = CONTEXT_CATEGORY\n+            p["key"] = p["name"] = "dummy"\n+            p["assignment"] = obj = Obj()\n             obj.data = DummyPortletRenderer()\n             obj.available = True\n             return (p,)\n@@ -136,7 +134,7 @@ def getPortlets(self):\n     # We need a dummy context that implements Interface\n \n     @implementer(Interface)\n-    class DummyContext(object):\n+    class DummyContext:\n         pass\n \n     # We now test the PortletManagerRenderer. We override the _dataToPortlet\n@@ -152,10 +150,12 @@ def _dataToPortlet(self, data):\n     # prepare a memoizeable test request\n \n     from zope.publisher.browser import TestRequest\n+\n     request = TestRequest()\n \n-    from zope.interface import alsoProvides\n     from zope.annotation.interfaces import IAttributeAnnotatable\n+    from zope.interface import alsoProvides\n+\n     alsoProvides(request, IAttributeAnnotatable)\n \n     # Check that a PortletManagerRenderer is capable of rendering our\n@@ -173,19 +173,19 @@ def test_suite():\n     return unittest.TestSuite(\n         (\n             doctest.DocFileSuite(\n-                \'README.txt\',\n+                "README.txt",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\n             ),\n             doctest.DocFileSuite(\n-                \'uisupport.txt\',\n+                "uisupport.txt",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\n             ),\n             doctest.DocFileSuite(\n-                \'utils.txt\',\n+                "utils.txt",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\ndiff --git a/plone/portlets/uisupport.txt b/plone/portlets/uisupport.txt\nindex 088ffef..679771d 100644\n--- a/plone/portlets/uisupport.txt\n+++ b/plone/portlets/uisupport.txt\n@@ -16,9 +16,7 @@ manager must have in order for the portlet to be addable to it.\n \n First, we must create a local site manager at a fictional root folder.\n \n-  >>> from zope.interface import implements, Interface, directlyProvides\n-  >>> from zope.component import adapts, provideAdapter\n-\n+  >>> from zope.interface import directlyProvides\n   >>> from zope.site.folder import rootFolder, Folder\n   >>> rootFolder = rootFolder()\n \ndiff --git a/plone/portlets/utils.py b/plone/portlets/utils.py\nindex 91d3574..92d5955 100644\n--- a/plone/portlets/utils.py\n+++ b/plone/portlets/utils.py\n@@ -50,12 +50,12 @@ def hashPortletInfo(info):\n     # Make sure all info values are decoded\n     newinfo = {}\n     for k, v in info.items():\n-        if hasattr(v, \'decode\'):\n-            v = v.decode(\'utf8\')\n+        if hasattr(v, "decode"):\n+            v = v.decode("utf8")\n         newinfo[k] = v\n-    concat_txt = u\'%(manager)s\\n%(category)s\\n%(key)s\\n%(name)s\' % newinfo\n-    info[\'hash\'] = binascii.b2a_hex(concat_txt.encode(\'utf8\'))\n-    return info[\'hash\']\n+    concat_txt = "%(manager)s\\n%(category)s\\n%(key)s\\n%(name)s" % newinfo\n+    info["hash"] = binascii.b2a_hex(concat_txt.encode("utf8"))\n+    return info["hash"]\n \n \n def unhashPortletInfo(hash):\n@@ -66,7 +66,5 @@ def unhashPortletInfo(hash):\n     """\n     concat_txt = binascii.a2b_hex(hash).decode()\n     manager, category, key, name = concat_txt.splitlines()\n-    info = dict(\n-        manager=manager, category=category, key=key, name=name, hash=hash\n-    )\n+    info = dict(manager=manager, category=category, key=key, name=name, hash=hash)\n     return info\ndiff --git a/plone/portlets/utils.txt b/plone/portlets/utils.txt\nindex ce1294e..c649122 100644\n--- a/plone/portlets/utils.txt\n+++ b/plone/portlets/utils.txt\n@@ -3,7 +3,7 @@ Portlet utils\n =============\n \n The portlets need a hash that can play as an id in the html\n-page. For this, a pair of symetric hash and unhash functions\n+page. For this, a pair of symmetric hash and unhash functions\n is provided.\n \n   >>> from plone.portlets.utils import hashPortletInfo, unhashPortletInfo\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..b371489 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,44 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'zope.testing\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 4f43707..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,11 +1,23 @@\n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 0826145..ce89ed6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,67 +2,60 @@\n from setuptools import setup\n \n \n-version = \'2.3.4.dev0\'\n+version = "3.0.0.dev0"\n \n setup(\n-    name=\'plone.portlets\',\n+    name="plone.portlets",\n     version=version,\n     description="An extension of zope.viewlet to support dynamic portlets",\n-    long_description=(\n-        open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n-    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'portlet viewlet\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.portlets\',\n-    license=\'GPL version 2\',\n+    keywords="portlet viewlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.portlets",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=\'>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*\',\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n-            \'zope.browserpage\',\n-            \'zope.configuration\',\n-            \'zope.location\',\n-            \'zope.security\',\n+            "zope.browserpage",\n+            "zope.configuration",\n+            "zope.location",\n+            "zope.security",\n+            "zope.testing",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'ZODB\',\n-        \'plone.memoize\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.contentprovider\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.site\',\n+        "BTrees",\n+        "setuptools",\n+        "ZODB",\n+        "plone.memoize",\n+        "persistent",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.container",\n+        "zope.contentprovider",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.site",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..432f0b7\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.portlets {posargs}\n+extras =\n+    test\n'

