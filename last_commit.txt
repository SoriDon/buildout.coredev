Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-02-02T00:29:06+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/0909383eb2bbc8d31794a7dbf4392eec6236be22

Ignore invalid `sort_on` parameters in catalog `searchResults`.

Otherwise you get a `CatalogError`.
I get crazy sort_ons like '194' or 'null'.

Files changed:
M CHANGES.rst
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/testCatalogTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5bc5dbd88..a557d38c6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -35,6 +35,11 @@ New Features:
 
 Bug Fixes:
 
+- Ignore invalid ``sort_on`` parameters in catalog ``searchResults``.
+  Otherwise you get a ``CatalogError``.
+  I get crazy sort_ons like '194' or 'null'.
+  [maurits]
+
 - Register the ``ExceptionView`` for the unspecific ``zope.interface.Interface`` for easier overloading.
   Fixes a problem, where plone.rest couldn't overload the ExceptionView with an adapter bound to ``plone.rest.interfaces.IAPIRequest``.
   [thet]
diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py
index cce0a34f7..8c39d0dc8 100644
--- a/Products/CMFPlone/CatalogTool.py
+++ b/Products/CMFPlone/CatalogTool.py
@@ -458,6 +458,11 @@ def searchResults(self, query=None, **kw):
         if not show_inactive and not self.allow_inactive(kw):
             kw['effectiveRange'] = DateTime()
 
+        sort_on = kw.get('sort_on')
+        if sort_on and sort_on not in self.indexes():
+            # I get crazy sort_ons like '194' or 'null'.
+            kw.pop('sort_on')
+
         return ZCatalog.searchResults(self, query, **kw)
 
     __call__ = searchResults
diff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py
index a9559b760..c64e08ff4 100644
--- a/Products/CMFPlone/tests/testCatalogTool.py
+++ b/Products/CMFPlone/tests/testCatalogTool.py
@@ -528,6 +528,16 @@ def afterSetUp(self):
         self.folder.doc5.reindexObject()
         self.folder.doc6.reindexObject()
 
+    def testUnknownSortOnIsIgnored(self):
+        # You should not get a CatalogError when an invalid sort_on is passed.
+        # I get crazy sort_ons like '194' or 'null'.
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='194')) > 0)
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='null')) > 0)
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='relevance')) > 0)
+
     def testSortTitleReturnsProperOrderForNumbers(self):
         # Documents should be returned in proper numeric order
         results = self.catalog(SearchableText='foo', sort_on='sortable_title')


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-02-02T21:58:07+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1db95d954fa395eaa5479a93d376b9a55030f4cc

Merge pull request #2287 from plone/ignore-unknown-sort-ons-52

Ignore invalid `sort_on` parameters in catalog `searchResults`. [master]

Files changed:
M CHANGES.rst
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/testCatalogTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5bc5dbd88..a557d38c6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -35,6 +35,11 @@ New Features:
 
 Bug Fixes:
 
+- Ignore invalid ``sort_on`` parameters in catalog ``searchResults``.
+  Otherwise you get a ``CatalogError``.
+  I get crazy sort_ons like '194' or 'null'.
+  [maurits]
+
 - Register the ``ExceptionView`` for the unspecific ``zope.interface.Interface`` for easier overloading.
   Fixes a problem, where plone.rest couldn't overload the ExceptionView with an adapter bound to ``plone.rest.interfaces.IAPIRequest``.
   [thet]
diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py
index cce0a34f7..8c39d0dc8 100644
--- a/Products/CMFPlone/CatalogTool.py
+++ b/Products/CMFPlone/CatalogTool.py
@@ -458,6 +458,11 @@ def searchResults(self, query=None, **kw):
         if not show_inactive and not self.allow_inactive(kw):
             kw['effectiveRange'] = DateTime()
 
+        sort_on = kw.get('sort_on')
+        if sort_on and sort_on not in self.indexes():
+            # I get crazy sort_ons like '194' or 'null'.
+            kw.pop('sort_on')
+
         return ZCatalog.searchResults(self, query, **kw)
 
     __call__ = searchResults
diff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py
index a9559b760..c64e08ff4 100644
--- a/Products/CMFPlone/tests/testCatalogTool.py
+++ b/Products/CMFPlone/tests/testCatalogTool.py
@@ -528,6 +528,16 @@ def afterSetUp(self):
         self.folder.doc5.reindexObject()
         self.folder.doc6.reindexObject()
 
+    def testUnknownSortOnIsIgnored(self):
+        # You should not get a CatalogError when an invalid sort_on is passed.
+        # I get crazy sort_ons like '194' or 'null'.
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='194')) > 0)
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='null')) > 0)
+        self.assertTrue(len(
+            self.catalog(SearchableText='foo', sort_on='relevance')) > 0)
+
     def testSortTitleReturnsProperOrderForNumbers(self):
         # Documents should be returned in proper numeric order
         results = self.catalog(SearchableText='foo', sort_on='sortable_title')


