Repository: plone.autoinclude


Branch: refs/heads/main
Date: 2022-05-06T19:55:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.autoinclude/commit/936ff40e254b16efd2623f9affd06dc2ccf44e03

Raise an exception when a module cannot be imported.

When environment variable `AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1` is set, we log an error and continue.
Fixes https://github.com/plone/plone.autoinclude/issues/19

Work in progress: the tests fail with this.

Files changed:
A news/19.feature
M src/plone/autoinclude/loader.py

b'diff --git a/news/19.feature b/news/19.feature\nnew file mode 100644\nindex 0000000..26f367c\n--- /dev/null\n+++ b/news/19.feature\n@@ -0,0 +1,5 @@\n+Raise an exception when a module cannot be imported.\n+When environment variable ``AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1`` is set, we log an error and continue.\n+See `issue 19 <https://github.com/plone/plone.autoinclude/issues/19>`_.\n+[maurits]\n+\ndiff --git a/src/plone/autoinclude/loader.py b/src/plone/autoinclude/loader.py\nindex 134066c..f1e6042 100644\n--- a/src/plone/autoinclude/loader.py\n+++ b/src/plone/autoinclude/loader.py\n@@ -14,6 +14,10 @@\n \n # Dictionary of project names and packages that we have already imported.\n _known_module_names = {}\n+# Maybe allow ModuleNotFoundError.\n+AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = bool(\n+    int(os.getenv("AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR", 0))\n+)\n \n \n def load_z3c_packages(target=""):\n@@ -37,6 +41,15 @@ def load_z3c_packages(target=""):\n             except ModuleNotFoundError:\n                 # Note: this may happen a lot, at least for z3c.autoinclude,\n                 # because the project name may not be the same as the package/module.\n+                # If we accept it, we may hide real errors though:\n+                # the module may be there but have an ImportError.\n+                if not AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR:\n+                    logger.error(\n+                        f"Could not import {module_name}. Set environment variable "\n+                        "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1 if you want to "\n+                        "allow this."\n+                    )\n+                    raise\n                 logger.exception(f"Could not import {module_name}.")\n                 _known_module_names[module_name] = None\n                 continue\n'

Repository: plone.autoinclude


Branch: refs/heads/main
Date: 2022-05-09T13:09:49+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.autoinclude/commit/0756119203ad82542af7e8dd6d02abe56badedbb

Allow ModuleNotFoundErrors in tests.

Files changed:
M src/plone/autoinclude/tests/test_loader.py
M test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py
M test-packages/example.basetestpackage/src/example/basetestpackage/utils.py

b'diff --git a/src/plone/autoinclude/tests/test_loader.py b/src/plone/autoinclude/tests/test_loader.py\nindex 8d10be1..e15ecec 100644\n--- a/src/plone/autoinclude/tests/test_loader.py\n+++ b/src/plone/autoinclude/tests/test_loader.py\n@@ -23,6 +23,13 @@\n \n class TestLoader(unittest.TestCase):\n     def setUp(self):\n+        from plone.autoinclude import loader\n+\n+        # Allow module not found errors in these tests.\n+        self._orig_AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = \\\n+            loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR\n+        loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = True\n+\n         workingset = pkg_resources.working_set\n         self.workingdir = os.getcwd()\n         self.stored_syspath = copy(sys.path)\n@@ -46,6 +53,12 @@ def setUp(self):\n         os.chdir(self.workingdir)\n \n     def tearDown(self):\n+        from plone.autoinclude import loader\n+\n+        # Restore original setting.\n+        loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = \\\n+            self._orig_AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR\n+\n         os.chdir(self.workingdir)\n         sys.path = self.stored_syspath\n         workingset = pkg_resources.working_set\ndiff --git a/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py b/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\nindex 23a7beb..e959eb2 100644\n--- a/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\n+++ b/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\n@@ -1,3 +1,4 @@\n+from .utils import allow_module_not_found_error\n from .utils import get_configuration_context\n from importlib import import_module\n \n@@ -62,10 +63,11 @@ def import_me(self):\n     def test_load_packages(self):\n         from plone.autoinclude.loader import load_packages\n \n-        packages = load_packages()\n+        with allow_module_not_found_error():\n+            packages = load_packages()\n         if self.module_name:\n-            # Module name differs from project name.\n             # Only module names get in the packages list.\n+            # Module name differs from project name.\n             self.assertNotIn(self.project_name, packages.keys())\n             if not self.uses_plone_autoinclude:\n                 # The package uses the old z3c.autoinclude.\ndiff --git a/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py b/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\nindex e6d72d4..30e301e 100644\n--- a/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\n+++ b/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\n@@ -1,3 +1,4 @@\n+from contextlib import contextmanager\n from zope.configuration.config import ConfigurationMachine\n from zope.configuration.xmlconfig import registerCommonDirectives\n \n@@ -17,3 +18,18 @@ def get_configuration_context(package=None):\n         # When you set context.package, context.path(filename) works nicely.\n         context.package = package\n     return context\n+\n+\n+@contextmanager\n+def allow_module_not_found_error():\n+    from plone.autoinclude import loader\n+\n+    # Temporarily allow module not found error.\n+    orig = loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR\n+    loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = True\n+\n+    try:\n+        yield\n+    finally:\n+        # restore\n+        loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = orig\n'

Repository: plone.autoinclude


Branch: refs/heads/main
Date: 2022-05-09T16:50:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.autoinclude/commit/68c6c7813c6825ba2c1041ea1e9758be760298b3

AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR: allow comma-separated list.

Fix tests.
Add documentation.

Files changed:
M README.rst
M news/19.feature
M src/plone/autoinclude/loader.py
M src/plone/autoinclude/tests/test_loader.py
M test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py
M test-packages/example.basetestpackage/src/example/basetestpackage/utils.py

b'diff --git a/README.rst b/README.rst\nindex 06c871d..d7a619f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -105,6 +105,40 @@ You must specify at least one option, otherwise the entry point does not exist.\n \n ``module``\n     Use this when your package name is different from what you import in Python.\n+    See also the next section.\n+\n+\n+Different project and module name\n+---------------------------------\n+\n+Usually the project name of an add-on (what is in ``setup.py`` or ``setup.cfg``) is the same as how you would import it in Python code.\n+It could be different though.\n+In that case, you may get a ``ModuleNotFoundError`` on startup: ``plone.autoinclude`` tries to import the project name and this fails.\n+\n+The easiest way to solve this, is to switch from ``z3c.autoinclude.plugin`` to ``plone.autoinclude.plugin``, if you have not done so already,\n+and specify the module.\n+In ``setup.py``::\n+\n+    setup(\n+        name="example.different2",\n+        entry_points="""\n+        [plone.autoinclude.plugin]\n+        module = example.somethingelse2\n+        """,\n+    )\n+\n+If you must still support Plone 5.2 and are tied to ``z3c.autoinclude.plugin``, or if you cannot edit the problematic package, you can work around it.\n+You set an environment variable ``AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR``.\n+To accept ``ModuleNotFoundError`` in all packages::\n+\n+    export AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1\n+\n+To accept ``ModuleNotFoundError`` only in specific packages, use a comma-separated list of project names, with or without spaces::\n+\n+    export AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=example.different,example.different2\n+\n+In the logs you will see a traceback so you can investigate, but startup continues.\n+You should make sure the zcml of this package is loaded in some other way.\n \n \n Comparison with ``z3c.autoinclude``\ndiff --git a/news/19.feature b/news/19.feature\nindex 26f367c..8f9b0d6 100644\n--- a/news/19.feature\n+++ b/news/19.feature\n@@ -1,5 +1,5 @@\n-Raise an exception when a module cannot be imported.\n+Raise an exception when a module is not found.\n When environment variable ``AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1`` is set, we log an error and continue.\n+To accept ``ModuleNotFoundError`` only in specific packages, use a comma-separated list of project names, with or without spaces.\n See `issue 19 <https://github.com/plone/plone.autoinclude/issues/19>`_.\n [maurits]\n-\ndiff --git a/src/plone/autoinclude/loader.py b/src/plone/autoinclude/loader.py\nindex f1e6042..2b819b1 100644\n--- a/src/plone/autoinclude/loader.py\n+++ b/src/plone/autoinclude/loader.py\n@@ -14,10 +14,21 @@\n \n # Dictionary of project names and packages that we have already imported.\n _known_module_names = {}\n+\n # Maybe allow ModuleNotFoundError.\n-AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = bool(\n-    int(os.getenv("AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR", 0))\n+# This can be a boolean (0/1) or a list of project names (from setup.py),\n+# separated by comma.\n+AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = os.getenv(\n+    "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR", ""\n )\n+ALLOW_MODULE_NOT_FOUND_SET = set()\n+ALLOW_MODULE_NOT_FOUND_ALL = False\n+try:\n+    ALLOW_MODULE_NOT_FOUND_ALL = bool(int(AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR))\n+except (ValueError, TypeError):\n+    _allowed = AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR.replace(" ", "").split(",")\n+    if _allowed:\n+        ALLOW_MODULE_NOT_FOUND_SET = set(_allowed)\n \n \n def load_z3c_packages(target=""):\n@@ -43,14 +54,23 @@ def load_z3c_packages(target=""):\n                 # because the project name may not be the same as the package/module.\n                 # If we accept it, we may hide real errors though:\n                 # the module may be there but have an ImportError.\n-                if not AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR:\n+                if (\n+                    not ALLOW_MODULE_NOT_FOUND_ALL\n+                    and module_name not in ALLOW_MODULE_NOT_FOUND_SET\n+                ):\n                     logger.error(\n                         f"Could not import {module_name}. Set environment variable "\n                         "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1 if you want to "\n-                        "allow this."\n+                        f"allow this. Or set it to \'{module_name}\' to only allow for "\n+                        "this project. Can be a comma-separated list of project "\n+                        "names. Or replace the z3c.autoinclude.plugin entry point of "\n+                        "this project with plone.autoinclude.plugin and a module name."\n                     )\n                     raise\n-                logger.exception(f"Could not import {module_name}.")\n+                logger.exception(\n+                    f"Could not import {module_name}. Accepted due to "\n+                    "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR environment variable."\n+                )\n                 _known_module_names[module_name] = None\n                 continue\n             _known_module_names[module_name] = dist\ndiff --git a/src/plone/autoinclude/tests/test_loader.py b/src/plone/autoinclude/tests/test_loader.py\nindex e15ecec..3c6048f 100644\n--- a/src/plone/autoinclude/tests/test_loader.py\n+++ b/src/plone/autoinclude/tests/test_loader.py\n@@ -26,9 +26,8 @@ def setUp(self):\n         from plone.autoinclude import loader\n \n         # Allow module not found errors in these tests.\n-        self._orig_AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = \\\n-            loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR\n-        loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = True\n+        self._orig_ALLOW_MODULE_NOT_FOUND_ALL = loader.ALLOW_MODULE_NOT_FOUND_ALL\n+        loader.ALLOW_MODULE_NOT_FOUND_ALL = True\n \n         workingset = pkg_resources.working_set\n         self.workingdir = os.getcwd()\n@@ -56,8 +55,7 @@ def tearDown(self):\n         from plone.autoinclude import loader\n \n         # Restore original setting.\n-        loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = \\\n-            self._orig_AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR\n+        loader.ALLOW_MODULE_NOT_FOUND_ALL = self._orig_ALLOW_MODULE_NOT_FOUND_ALL\n \n         os.chdir(self.workingdir)\n         sys.path = self.stored_syspath\ndiff --git a/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py b/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\nindex e959eb2..090c346 100644\n--- a/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\n+++ b/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\n@@ -37,6 +37,10 @@ class PackageTestCase:\n     project_name = ""\n     # If module name differs from project name, fill this in:\n     module_name = ""\n+    # Accept ModuleNotFound errors for some projects with different module names.\n+    # This should be same list for all test packages, and should contain all\n+    # test packages with the old z3c.autoinclude.plugin that have this problem.\n+    allow_module_not_found = {"example.different"}\n     # Does the package use plone.autoinclude (True) or the old z3c.autoinclude (False)?\n     # Attribute is only used when we have a different module_name.\n     uses_plone_autoinclude = True\n@@ -62,12 +66,24 @@ def import_me(self):\n     @unittest.skipIf(not HAS_PLONE_AUTOINCLUDE, "plone.autoinclude missing")\n     def test_load_packages(self):\n         from plone.autoinclude.loader import load_packages\n+        from plone.autoinclude import loader\n \n-        with allow_module_not_found_error():\n+        # Empty the known module names, so projects are loaded again.\n+        loader._known_module_names = {}\n+        if self.module_name and not self.uses_plone_autoinclude:\n+            # Module name differs from project name.\n+            # Allowing ModuleNotFound in all known ones except our own,\n+            # should fail, so the user knows something is wrong.\n+            allowed = self.allow_module_not_found - {self.project_name}\n+            with allow_module_not_found_error(allowed):\n+                with self.assertRaises(ModuleNotFoundError):\n+                    packages = load_packages()\n+\n+        # User can allow some modules to have ModuleNotFoundErrors.\n+        with allow_module_not_found_error(self.allow_module_not_found):\n             packages = load_packages()\n         if self.module_name:\n             # Only module names get in the packages list.\n-            # Module name differs from project name.\n             self.assertNotIn(self.project_name, packages.keys())\n             if not self.uses_plone_autoinclude:\n                 # The package uses the old z3c.autoinclude.\ndiff --git a/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py b/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\nindex 30e301e..ee51f0a 100644\n--- a/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\n+++ b/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\n@@ -21,15 +21,20 @@ def get_configuration_context(package=None):\n \n \n @contextmanager\n-def allow_module_not_found_error():\n+def allow_module_not_found_error(allowed):\n     from plone.autoinclude import loader\n \n-    # Temporarily allow module not found error.\n-    orig = loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR\n-    loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = True\n-\n+    # save original settings\n+    orig_all = loader.ALLOW_MODULE_NOT_FOUND_ALL\n+    orig_set = loader.ALLOW_MODULE_NOT_FOUND_SET\n+    # Temporarily allow module not found error for only the\n+    # packages in the allowed set.\n+    loader.ALLOW_MODULE_NOT_FOUND_ALL = False\n+    loader.ALLOW_MODULE_NOT_FOUND_SET = allowed\n+    # breakpoint()\n     try:\n         yield\n     finally:\n         # restore\n-        loader.AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = orig\n+        loader.ALLOW_MODULE_NOT_FOUND_ALL = orig_all\n+        loader.ALLOW_MODULE_NOT_FOUND_SET = orig_set\n'

Repository: plone.autoinclude


Branch: refs/heads/main
Date: 2022-05-13T15:52:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.autoinclude/commit/e01ebaa3633ac435cc909e1f5b54d2a8b62c938c

Merge pull request #20 from plone/maurits-env-allow-module-not-found

Raise an exception when a module cannot be imported.

Files changed:
A news/19.feature
M README.rst
M src/plone/autoinclude/loader.py
M src/plone/autoinclude/tests/test_loader.py
M test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py
M test-packages/example.basetestpackage/src/example/basetestpackage/utils.py

b'diff --git a/README.rst b/README.rst\nindex 06c871d..d7a619f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -105,6 +105,40 @@ You must specify at least one option, otherwise the entry point does not exist.\n \n ``module``\n     Use this when your package name is different from what you import in Python.\n+    See also the next section.\n+\n+\n+Different project and module name\n+---------------------------------\n+\n+Usually the project name of an add-on (what is in ``setup.py`` or ``setup.cfg``) is the same as how you would import it in Python code.\n+It could be different though.\n+In that case, you may get a ``ModuleNotFoundError`` on startup: ``plone.autoinclude`` tries to import the project name and this fails.\n+\n+The easiest way to solve this, is to switch from ``z3c.autoinclude.plugin`` to ``plone.autoinclude.plugin``, if you have not done so already,\n+and specify the module.\n+In ``setup.py``::\n+\n+    setup(\n+        name="example.different2",\n+        entry_points="""\n+        [plone.autoinclude.plugin]\n+        module = example.somethingelse2\n+        """,\n+    )\n+\n+If you must still support Plone 5.2 and are tied to ``z3c.autoinclude.plugin``, or if you cannot edit the problematic package, you can work around it.\n+You set an environment variable ``AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR``.\n+To accept ``ModuleNotFoundError`` in all packages::\n+\n+    export AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1\n+\n+To accept ``ModuleNotFoundError`` only in specific packages, use a comma-separated list of project names, with or without spaces::\n+\n+    export AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=example.different,example.different2\n+\n+In the logs you will see a traceback so you can investigate, but startup continues.\n+You should make sure the zcml of this package is loaded in some other way.\n \n \n Comparison with ``z3c.autoinclude``\ndiff --git a/news/19.feature b/news/19.feature\nnew file mode 100644\nindex 0000000..8f9b0d6\n--- /dev/null\n+++ b/news/19.feature\n@@ -0,0 +1,5 @@\n+Raise an exception when a module is not found.\n+When environment variable ``AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1`` is set, we log an error and continue.\n+To accept ``ModuleNotFoundError`` only in specific packages, use a comma-separated list of project names, with or without spaces.\n+See `issue 19 <https://github.com/plone/plone.autoinclude/issues/19>`_.\n+[maurits]\ndiff --git a/src/plone/autoinclude/loader.py b/src/plone/autoinclude/loader.py\nindex 134066c..2b819b1 100644\n--- a/src/plone/autoinclude/loader.py\n+++ b/src/plone/autoinclude/loader.py\n@@ -15,6 +15,21 @@\n # Dictionary of project names and packages that we have already imported.\n _known_module_names = {}\n \n+# Maybe allow ModuleNotFoundError.\n+# This can be a boolean (0/1) or a list of project names (from setup.py),\n+# separated by comma.\n+AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR = os.getenv(\n+    "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR", ""\n+)\n+ALLOW_MODULE_NOT_FOUND_SET = set()\n+ALLOW_MODULE_NOT_FOUND_ALL = False\n+try:\n+    ALLOW_MODULE_NOT_FOUND_ALL = bool(int(AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR))\n+except (ValueError, TypeError):\n+    _allowed = AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR.replace(" ", "").split(",")\n+    if _allowed:\n+        ALLOW_MODULE_NOT_FOUND_SET = set(_allowed)\n+\n \n def load_z3c_packages(target=""):\n     """Load packages from the z3c.autoinclude.plugin entry points.\n@@ -37,7 +52,25 @@ def load_z3c_packages(target=""):\n             except ModuleNotFoundError:\n                 # Note: this may happen a lot, at least for z3c.autoinclude,\n                 # because the project name may not be the same as the package/module.\n-                logger.exception(f"Could not import {module_name}.")\n+                # If we accept it, we may hide real errors though:\n+                # the module may be there but have an ImportError.\n+                if (\n+                    not ALLOW_MODULE_NOT_FOUND_ALL\n+                    and module_name not in ALLOW_MODULE_NOT_FOUND_SET\n+                ):\n+                    logger.error(\n+                        f"Could not import {module_name}. Set environment variable "\n+                        "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR=1 if you want to "\n+                        f"allow this. Or set it to \'{module_name}\' to only allow for "\n+                        "this project. Can be a comma-separated list of project "\n+                        "names. Or replace the z3c.autoinclude.plugin entry point of "\n+                        "this project with plone.autoinclude.plugin and a module name."\n+                    )\n+                    raise\n+                logger.exception(\n+                    f"Could not import {module_name}. Accepted due to "\n+                    "AUTOINCLUDE_ALLOW_MODULE_NOT_FOUND_ERROR environment variable."\n+                )\n                 _known_module_names[module_name] = None\n                 continue\n             _known_module_names[module_name] = dist\ndiff --git a/src/plone/autoinclude/tests/test_loader.py b/src/plone/autoinclude/tests/test_loader.py\nindex 8d10be1..3c6048f 100644\n--- a/src/plone/autoinclude/tests/test_loader.py\n+++ b/src/plone/autoinclude/tests/test_loader.py\n@@ -23,6 +23,12 @@\n \n class TestLoader(unittest.TestCase):\n     def setUp(self):\n+        from plone.autoinclude import loader\n+\n+        # Allow module not found errors in these tests.\n+        self._orig_ALLOW_MODULE_NOT_FOUND_ALL = loader.ALLOW_MODULE_NOT_FOUND_ALL\n+        loader.ALLOW_MODULE_NOT_FOUND_ALL = True\n+\n         workingset = pkg_resources.working_set\n         self.workingdir = os.getcwd()\n         self.stored_syspath = copy(sys.path)\n@@ -46,6 +52,11 @@ def setUp(self):\n         os.chdir(self.workingdir)\n \n     def tearDown(self):\n+        from plone.autoinclude import loader\n+\n+        # Restore original setting.\n+        loader.ALLOW_MODULE_NOT_FOUND_ALL = self._orig_ALLOW_MODULE_NOT_FOUND_ALL\n+\n         os.chdir(self.workingdir)\n         sys.path = self.stored_syspath\n         workingset = pkg_resources.working_set\ndiff --git a/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py b/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\nindex 23a7beb..090c346 100644\n--- a/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\n+++ b/test-packages/example.basetestpackage/src/example/basetestpackage/package_base.py\n@@ -1,3 +1,4 @@\n+from .utils import allow_module_not_found_error\n from .utils import get_configuration_context\n from importlib import import_module\n \n@@ -36,6 +37,10 @@ class PackageTestCase:\n     project_name = ""\n     # If module name differs from project name, fill this in:\n     module_name = ""\n+    # Accept ModuleNotFound errors for some projects with different module names.\n+    # This should be same list for all test packages, and should contain all\n+    # test packages with the old z3c.autoinclude.plugin that have this problem.\n+    allow_module_not_found = {"example.different"}\n     # Does the package use plone.autoinclude (True) or the old z3c.autoinclude (False)?\n     # Attribute is only used when we have a different module_name.\n     uses_plone_autoinclude = True\n@@ -61,10 +66,23 @@ def import_me(self):\n     @unittest.skipIf(not HAS_PLONE_AUTOINCLUDE, "plone.autoinclude missing")\n     def test_load_packages(self):\n         from plone.autoinclude.loader import load_packages\n+        from plone.autoinclude import loader\n \n-        packages = load_packages()\n-        if self.module_name:\n+        # Empty the known module names, so projects are loaded again.\n+        loader._known_module_names = {}\n+        if self.module_name and not self.uses_plone_autoinclude:\n             # Module name differs from project name.\n+            # Allowing ModuleNotFound in all known ones except our own,\n+            # should fail, so the user knows something is wrong.\n+            allowed = self.allow_module_not_found - {self.project_name}\n+            with allow_module_not_found_error(allowed):\n+                with self.assertRaises(ModuleNotFoundError):\n+                    packages = load_packages()\n+\n+        # User can allow some modules to have ModuleNotFoundErrors.\n+        with allow_module_not_found_error(self.allow_module_not_found):\n+            packages = load_packages()\n+        if self.module_name:\n             # Only module names get in the packages list.\n             self.assertNotIn(self.project_name, packages.keys())\n             if not self.uses_plone_autoinclude:\ndiff --git a/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py b/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\nindex e6d72d4..ee51f0a 100644\n--- a/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\n+++ b/test-packages/example.basetestpackage/src/example/basetestpackage/utils.py\n@@ -1,3 +1,4 @@\n+from contextlib import contextmanager\n from zope.configuration.config import ConfigurationMachine\n from zope.configuration.xmlconfig import registerCommonDirectives\n \n@@ -17,3 +18,23 @@ def get_configuration_context(package=None):\n         # When you set context.package, context.path(filename) works nicely.\n         context.package = package\n     return context\n+\n+\n+@contextmanager\n+def allow_module_not_found_error(allowed):\n+    from plone.autoinclude import loader\n+\n+    # save original settings\n+    orig_all = loader.ALLOW_MODULE_NOT_FOUND_ALL\n+    orig_set = loader.ALLOW_MODULE_NOT_FOUND_SET\n+    # Temporarily allow module not found error for only the\n+    # packages in the allowed set.\n+    loader.ALLOW_MODULE_NOT_FOUND_ALL = False\n+    loader.ALLOW_MODULE_NOT_FOUND_SET = allowed\n+    # breakpoint()\n+    try:\n+        yield\n+    finally:\n+        # restore\n+        loader.ALLOW_MODULE_NOT_FOUND_ALL = orig_all\n+        loader.ALLOW_MODULE_NOT_FOUND_SET = orig_set\n'

