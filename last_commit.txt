Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:44:50+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/76716c4eb9f48cb4a39e686a48b0f54f1b9eee5e

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/2ed8f544.internal
M pyproject.toml
M setup.cfg
M tox.ini
D .travis.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..e2b4515\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2ed8f544"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex fffab78..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,18 +0,0 @@\n-language: python\n-\n-python:\n-  - 2.7\n-  - 3.4\n-  - 3.5\n-  - 3.6\n-  - 3.7\n-  - 3.8\n-  - pypy\n-  - pypy3\n-\n-cache:\n-  - pip\n-\n-install: pip install tox-travis\n-\n-script: tox\ndiff --git a/news/2ed8f544.internal b/news/2ed8f544.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2ed8f544.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 44915d9..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,10 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n-    .travis.yml\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-\n-[bdist_wheel]\n-universal = 1\n-\n-[zest.releaser]\n-create-wheel = yes\ndiff --git a/tox.ini b/tox.ini\nindex 2e06e52..7e83074 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,8 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,py34,py35,py36,py37,py38,pypy,pypy3\n+    format\n+    lint\n+    test\n \n [testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.intelligenttext {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    python setup.py -q install\n-    python setup.py -q test\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.intelligenttext {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:47:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/cf10ceddcf225e9c9146b56315fdf1c0995c71fb

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/intelligenttext/__init__.py
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/intelligenttext/__init__.py b/plone/intelligenttext/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/intelligenttext/__init__.py\n+++ b/plone/intelligenttext/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py\nindex c36534f..2fad35f 100644\n--- a/plone/intelligenttext/tests.py\n+++ b/plone/intelligenttext/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import doctest\n import unittest\n \ndiff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py\nindex 23c7768..06f3ee0 100644\n--- a/plone/intelligenttext/transforms.py\n+++ b/plone/intelligenttext/transforms.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import re\n import sys\n \n@@ -17,7 +16,7 @@ def safe_decode(s, encoding=\'utf-8\', errors=\'strict\'):\n     return s.decode(encoding)\n \n \n-class WebIntelligentToHtmlConverter(object):\n+class WebIntelligentToHtmlConverter:\n     urlRegexp = re.compile(\n         r\'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\\b(?::\\d+)?(?:\\/[^"\\\'<>()\\[\\]{}\\s\\x7f-\\xff]*(?:[.,?]+[^"\\\'<>()\\[\\]{}\\s\\x7f-\\xff]+)*)?)\',\n         re.I | re.S | re.U\n@@ -99,7 +98,7 @@ def replaceURL(cls, match):\n             linktext = linktext[:-1]\n \n         # rel="nofollow" shall avoid spamming\n-        return \'<a href="%s" rel="nofollow">%s</a>%s\' % (url, linktext, end)\n+        return f\'<a href="{url}" rel="nofollow">{linktext}</a>{end}\'\n \n     @staticmethod\n     def replaceEmail(match):\n@@ -109,7 +108,7 @@ def replaceEmail(match):\n         # following unicode substitutions shall avoid email spam\n         # crawlers to pickup email addresses\n         url = url.replace(\'@\', \'&#0064;\')\n-        return \'<a href="&#0109;ailto&#0058;%s">%s</a>\' % (url, url)\n+        return f\'<a href="&#0109;ailto&#0058;{url}">{url}</a>\'\n \n     def indentWhitespace(self, match):\n         """Make leading whitespace on a line into &nbsp; to preserve indents\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:47:21+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/d6755dbe97ed030c732ed54c5bfe274ff416da9c

chore: isort

Files changed:
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M setup.py

b"diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py\nindex 2fad35f..6b16077 100644\n--- a/plone/intelligenttext/tests.py\n+++ b/plone/intelligenttext/tests.py\n@@ -1,6 +1,7 @@\n import doctest\n import unittest\n \n+\n optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n \n \ndiff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py\nindex 06f3ee0..d75dbbb 100644\n--- a/plone/intelligenttext/transforms.py\n+++ b/plone/intelligenttext/transforms.py\n@@ -1,6 +1,7 @@\n import re\n import sys\n \n+\n PY3 = sys.version_info[0] == 3\n if PY3:\n     from html.entities import name2codepoint\ndiff --git a/setup.py b/setup.py\nindex 590510d..e7657d2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = '3.1.1.dev0'\n \n"

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:47:42+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/837a88650e2366026848b1de9c2273dbe2d8f7e3

chore: black

Files changed:
M plone/__init__.py
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py\nindex 6b16077..76673c3 100644\n--- a/plone/intelligenttext/tests.py\n+++ b/plone/intelligenttext/tests.py\n@@ -2,7 +2,7 @@\n import unittest\n \n \n-optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n def bprint(s):\n@@ -12,11 +12,13 @@ def bprint(s):\n \n \n def test_suite():\n-    return unittest.TestSuite([\n-        doctest.DocFileSuite(\n-            \'README.rst\',\n-            globs={\'bprint\': bprint},\n-            encoding=\'utf-8\',\n-            optionflags=optionflags,\n-        )\n-    ])\n+    return unittest.TestSuite(\n+        [\n+            doctest.DocFileSuite(\n+                "README.rst",\n+                globs={"bprint": bprint},\n+                encoding="utf-8",\n+                optionflags=optionflags,\n+            )\n+        ]\n+    )\ndiff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py\nindex d75dbbb..590483d 100644\n--- a/plone/intelligenttext/transforms.py\n+++ b/plone/intelligenttext/transforms.py\n@@ -5,13 +5,14 @@\n PY3 = sys.version_info[0] == 3\n if PY3:\n     from html.entities import name2codepoint\n+\n     unicode = str\n     unichr = chr\n else:\n     from htmlentitydefs import name2codepoint\n \n \n-def safe_decode(s, encoding=\'utf-8\', errors=\'strict\'):\n+def safe_decode(s, encoding="utf-8", errors="strict"):\n     if isinstance(s, unicode):\n         return s\n     return s.decode(encoding)\n@@ -20,13 +21,12 @@ def safe_decode(s, encoding=\'utf-8\', errors=\'strict\'):\n class WebIntelligentToHtmlConverter:\n     urlRegexp = re.compile(\n         r\'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\\b(?::\\d+)?(?:\\/[^"\\\'<>()\\[\\]{}\\s\\x7f-\\xff]*(?:[.,?]+[^"\\\'<>()\\[\\]{}\\s\\x7f-\\xff]+)*)?)\',\n-        re.I | re.S | re.U\n+        re.I | re.S | re.U,\n     )\n     emailRegexp = re.compile(\n-        r\'["=]?(\\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\\.[A-Z]{2,4}\\b)\',\n-        re.I | re.S | re.U\n+        r\'["=]?(\\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\\.[A-Z]{2,4}\\b)\', re.I | re.S | re.U\n     )\n-    indentRegexp = re.compile(r\'^(\\s+)\', re.M | re.U)\n+    indentRegexp = re.compile(r"^(\\s+)", re.M | re.U)\n \n     def __init__(self, orig, tab_width=4):\n         self.orig = orig\n@@ -35,65 +35,63 @@ def __init__(self, orig, tab_width=4):\n     def __call__(self):\n         text = self.orig\n         if text is None:\n-            text = \'\'\n-        text = safe_decode(text, errors=\'replace\')\n+            text = ""\n+        text = safe_decode(text, errors="replace")\n \n         # Do &amp; separately, else, it may replace an already-inserted & from\n         # an entity with &amp;, so < becomes &lt; becomes &amp;lt;\n-        text = text.replace(\'&\', \'&amp;\')\n+        text = text.replace("&", "&amp;")\n         # Make funny characters into html entity defs\n         for entity, codepoint in name2codepoint.items():\n-            if entity != \'amp\':\n-                text = text.replace(unichr(codepoint), \'&\' + entity + \';\')\n+            if entity != "amp":\n+                text = text.replace(unichr(codepoint), "&" + entity + ";")\n \n         text = self.urlRegexp.subn(self.replaceURL, text)[0]\n         text = self.emailRegexp.subn(self.replaceEmail, text)[0]\n         text = self.indentRegexp.subn(self.indentWhitespace, text)[0]\n \n         # convert windows line endings\n-        text = text.replace(\'\\r\\n\', \'\\n\')\n+        text = text.replace("\\r\\n", "\\n")\n         # Finally, make \\n\'s into br\'s\n-        text = text.replace(\'\\n\', \'<br />\')\n+        text = text.replace("\\n", "<br />")\n \n         if not PY3:\n-            text = text.encode(\'utf-8\')\n+            text = text.encode("utf-8")\n \n         return text\n \n     @staticmethod\n     def abbreviateUrl(url, max=60, ellipsis="[&hellip;]"):\n-        """very long urls are abbreviated to allow nicer layout\n-        """\n+        """very long urls are abbreviated to allow nicer layout"""\n         if len(url) < max:\n             return url\n         protocol = ""\n         protocolend = url.find("//")\n         if protocolend != -1:\n-            protocol = url[0:protocolend+2]\n-            url = url[protocolend+2:]\n+            protocol = url[0 : protocolend + 2]\n+            url = url[protocolend + 2 :]\n         list = url.split("/")\n         if len(list) < 3 or len(list[0]) + len(list[-1]) > max:\n             url = protocol + url\n-            center = (max-5) // 2\n+            center = (max - 5) // 2\n             return url[:center] + ellipsis + url[-center:]\n \n         return protocol + list[0] + "/" + ellipsis + "/" + list[-1]\n \n     @classmethod\n     def replaceURL(cls, match):\n-        """Replace hyperlinks with clickable <a> tags\n-        """\n+        """Replace hyperlinks with clickable <a> tags"""\n         url = match.groups()[0]\n         linktext = cls.abbreviateUrl(url)\n         # Also with <some link> we should only link to some link, not\n         # including the brackets.\n-        end = \'\'\n+        end = ""\n         # XXX Probably better to fix the regex above.  Maurits\n-        if url.endswith(\'&gt;\'):\n-            url = url[:-len(\'&gt;\')]\n-            linktext = linktext[:-len(\'&gt;\')]\n-            end = \'&gt;\'\n-        elif url.endswith(\'.\') or url.endswith(\'?\') or url.endswith(\'!\'):\n+        if url.endswith("&gt;"):\n+            url = url[: -len("&gt;")]\n+            linktext = linktext[: -len("&gt;")]\n+            end = "&gt;"\n+        elif url.endswith(".") or url.endswith("?") or url.endswith("!"):\n             end = url[-1]\n             url = url[:-1]\n             linktext = linktext[:-1]\n@@ -103,25 +101,22 @@ def replaceURL(cls, match):\n \n     @staticmethod\n     def replaceEmail(match):\n-        """Replace email strings with mailto: links\n-        """\n+        """Replace email strings with mailto: links"""\n         url = match.groups()[0]\n         # following unicode substitutions shall avoid email spam\n         # crawlers to pickup email addresses\n-        url = url.replace(\'@\', \'&#0064;\')\n+        url = url.replace("@", "&#0064;")\n         return f\'<a href="&#0109;ailto&#0058;{url}">{url}</a>\'\n \n     def indentWhitespace(self, match):\n-        """Make leading whitespace on a line into &nbsp; to preserve indents\n-        """\n+        """Make leading whitespace on a line into &nbsp; to preserve indents"""\n         indent = match.groups()[0]\n-        indent = indent.replace(\' \', \'&nbsp;\')\n-        return indent.replace(\'\\t\', \'&nbsp;\' * self.tab_width)\n+        indent = indent.replace(" ", "&nbsp;")\n+        return indent.replace("\\t", "&nbsp;" * self.tab_width)\n \n \n def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):\n-    """Converts text/x-web-intelligent to text/html\n-    """\n+    """Converts text/x-web-intelligent to text/html"""\n     try:\n         # tab_width could be a string like \'4\'\n         tab_width = int(tab_width)\n@@ -132,31 +127,31 @@ def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):\n \n \n def convertHtmlToWebIntelligentPlainText(orig):\n-    """Converts text/html to text/x-web-intelligent.\n-    """\n-    preRegex = re.compile(r\'<\\s*pre[^>]*>(.*?)<\\s*/pre\\s*>\', re.I | re.S)\n+    """Converts text/html to text/x-web-intelligent."""\n+    preRegex = re.compile(r"<\\s*pre[^>]*>(.*?)<\\s*/pre\\s*>", re.I | re.S)\n \n-    tagWhitespaceRegex = re.compile(r\'\\s+((<[^>]+>)\\s+)+\')\n-    whitespaceRegex = re.compile(r\'\\s+\')\n+    tagWhitespaceRegex = re.compile(r"\\s+((<[^>]+>)\\s+)+")\n+    whitespaceRegex = re.compile(r"\\s+")\n \n-    tdRegex = re.compile(r\'<\\s*(td)([^>])*>\', re.I)\n-    breakRegex = re.compile(r\'<\\s*(br)\\s*/?>\', re.I)\n-    startBlockRegex = re.compile(r\'<\\s*(dt)[^>]*>\', re.I)\n-    endBlockRegex = re.compile(r\'<\\s*/\\s*(p|div|tr|ul|ol|dl)[^>]*>\', re.I)\n-    indentBlockRegex = re.compile(r\'<\\s*(blockquote|dd)[^>]*>\', re.I)\n-    listBlockRegex = re.compile(r\'<\\s*(li)[^>]*>\', re.I)\n+    tdRegex = re.compile(r"<\\s*(td)([^>])*>", re.I)\n+    breakRegex = re.compile(r"<\\s*(br)\\s*/?>", re.I)\n+    startBlockRegex = re.compile(r"<\\s*(dt)[^>]*>", re.I)\n+    endBlockRegex = re.compile(r"<\\s*/\\s*(p|div|tr|ul|ol|dl)[^>]*>", re.I)\n+    indentBlockRegex = re.compile(r"<\\s*(blockquote|dd)[^>]*>", re.I)\n+    listBlockRegex = re.compile(r"<\\s*(li)[^>]*>", re.I)\n \n-    tagRegex = re.compile(r\'<[^>]+>\', re.I | re.M)\n+    tagRegex = re.compile(r"<[^>]+>", re.I | re.M)\n \n     # Save all <pre> sections and restore after other transforms\n     preSections = {}\n \n     def savePres(match):\n-        marker = \'__pre_marker__%d__\' % len(preSections)\n+        marker = "__pre_marker__%d__" % len(preSections)\n         preSections[marker] = match.group(1)\n         return marker\n+\n     if orig is None:\n-        orig = \'\'\n+        orig = ""\n     text = preRegex.sub(savePres, orig)\n \n     def fixTagWhitespace(match):\n@@ -164,53 +159,51 @@ def fixTagWhitespace(match):\n         Repeat this in case there are directly nested tags.\n         """\n         # Remove any superfluous whitespace, but preserve one leading space\n-        return \' \' + whitespaceRegex.sub(\'\', match.group(0))\n+        return " " + whitespaceRegex.sub("", match.group(0))\n+\n     text = tagWhitespaceRegex.sub(fixTagWhitespace, text)\n \n     # Make all whitespace into a single space\n-    text = whitespaceRegex.sub(\' \', text)\n+    text = whitespaceRegex.sub(" ", text)\n \n     # Fix entities\n-    text = text.replace(\'&nbsp;\', \' \')\n+    text = text.replace("&nbsp;", " ")\n     for entity, codepoint in name2codepoint.items():\n         # Do &lt; and &gt; later, else we may be creating what looks like\n         # tags\n-        if entity != \'lt\' and entity != \'gt\' and entity != \'amp\':\n-            text = text.replace(\n-                \'&\' + entity + \';\',\n-                \'&#\' + str(codepoint) + \';\'\n-            )\n+        if entity != "lt" and entity != "gt" and entity != "amp":\n+            text = text.replace("&" + entity + ";", "&#" + str(codepoint) + ";")\n \n     # XXX: Remove <head>, <script>, <style> ?\n \n     # Make tabs out of td\'s\n-    text = tdRegex.sub(\'\\t\', text)\n+    text = tdRegex.sub("\\t", text)\n \n     # Make br\'s and li\'s into newlines\n-    text = breakRegex.sub(\'\\n\', text)\n+    text = breakRegex.sub("\\n", text)\n \n     # Make the start of list blocks into paragraphs\n-    text = startBlockRegex.sub(\'\\n\\n\', text)\n+    text = startBlockRegex.sub("\\n\\n", text)\n \n     # Make the close of p\'s, div\'s and tr\'s into paragraphs\n-    text = endBlockRegex.sub(\'\\n\\n\', text)\n+    text = endBlockRegex.sub("\\n\\n", text)\n \n     # Make blockquotes and dd blocks indented\n-    text = indentBlockRegex.sub(\'\\n\\n  \', text)\n+    text = indentBlockRegex.sub("\\n\\n  ", text)\n \n     # Make list items indented and prefixed with -\n-    text = listBlockRegex.sub(\'\\n\\n  - \', text)\n+    text = listBlockRegex.sub("\\n\\n  - ", text)\n \n     # Remove other tags\n-    text = tagRegex.sub(\'\', text)\n+    text = tagRegex.sub("", text)\n \n     # Fix < and > entities\n-    text = text.replace(\'&lt;\', \'<\')\n-    text = text.replace(\'&gt;\', \'>\')\n-    text = text.replace(\'&amp;\', \'&\')\n+    text = text.replace("&lt;", "<")\n+    text = text.replace("&gt;", ">")\n+    text = text.replace("&amp;", "&")\n \n     # Restore pres\n     for marker, section in preSections.items():\n-        text = text.replace(marker, \'\\n\\n\' + section + \'\\n\\n\')\n+        text = text.replace(marker, "\\n\\n" + section + "\\n\\n")\n \n     return text\ndiff --git a/setup.py b/setup.py\nindex e7657d2..d928769 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,18 +2,14 @@\n from setuptools import setup\n \n \n-version = \'3.1.1.dev0\'\n+version = "3.1.1.dev0"\n \n setup(\n-    name=\'plone.intelligenttext\',\n+    name="plone.intelligenttext",\n     version=version,\n     description="Provides transforms from text/x-web-intelligent to "\n-                "text/html and vice versa.",\n-    long_description=(\n-        open("README.rst").read() +\n-        "\\n" +\n-        open("CHANGES.rst").read()\n-    ),\n+    "text/html and vice versa.",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -39,18 +35,18 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: Implementation :: CPython",\n         "Programming Language :: Python :: Implementation :: PyPy",\n-      ],\n-    keywords=\'transform intelligenttext\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.intelligenttext\',\n-    license=\'GPL version 2\',\n+    ],\n+    keywords="transform intelligenttext",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.intelligenttext",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     test_suite="plone.intelligenttext.tests.test_suite",\n     install_requires=[\n-      \'setuptools\',\n+        "setuptools",\n     ],\n )\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:49:28+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/41a83b4075bb1b5cbf02f5aeed18200a7603be68

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex d928769..9f7fd53 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -14,25 +14,16 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.0",\n-        "Framework :: Plone :: 4.1",\n-        "Framework :: Plone :: 4.2",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.4",\n-        "Programming Language :: Python :: 3.5",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Programming Language :: Python :: Implementation :: CPython",\n         "Programming Language :: Python :: Implementation :: PyPy",\n     ],\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:49:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/f06442a11863485bbe2f208d42c1fa2fd656f322

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 9f7fd53..1952050 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -36,6 +36,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     test_suite="plone.intelligenttext.tests.test_suite",\n     install_requires=[\n         "setuptools",\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:51:26+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/1558c5efa0d776626e88c4aa8772375522d4f452

feat: codespell

Files changed:
M CHANGES.rst
M plone/intelligenttext/transforms.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex dbc98c8..634f863 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -192,7 +192,7 @@ Fixes:\n ---\n \n - Initial development by Martin Aspeli (optilude@gmx.net). For further\n-  informations see http://dev.plone.org/collective/browser/intelligenttext/\n+  information see http://dev.plone.org/collective/browser/intelligenttext/\n \n - The transform was originally based on the url_to_hyperlink transform from\n   Ploneboard by Plone Solutions and others.\ndiff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py\nindex 590483d..976ce57 100644\n--- a/plone/intelligenttext/transforms.py\n+++ b/plone/intelligenttext/transforms.py\n@@ -202,7 +202,7 @@ def fixTagWhitespace(match):\n     text = text.replace("&gt;", ">")\n     text = text.replace("&amp;", "&")\n \n-    # Restore pres\n+    # Restore `pre`s\n     for marker, section in preSections.items():\n         text = text.replace(marker, "\\n\\n" + section + "\\n\\n")\n \n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:55:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/aca2929a87b1145c0901fac8773bbd3d49a5b1f4

feat: drop python 2.7 support

Files changed:
M plone/intelligenttext/transforms.py

b'diff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py\nindex 976ce57..181aae0 100644\n--- a/plone/intelligenttext/transforms.py\n+++ b/plone/intelligenttext/transforms.py\n@@ -1,19 +1,10 @@\n-import re\n-import sys\n-\n-\n-PY3 = sys.version_info[0] == 3\n-if PY3:\n-    from html.entities import name2codepoint\n+from html.entities import name2codepoint\n \n-    unicode = str\n-    unichr = chr\n-else:\n-    from htmlentitydefs import name2codepoint\n+import re\n \n \n def safe_decode(s, encoding="utf-8", errors="strict"):\n-    if isinstance(s, unicode):\n+    if isinstance(s, str):\n         return s\n     return s.decode(encoding)\n \n@@ -44,7 +35,7 @@ def __call__(self):\n         # Make funny characters into html entity defs\n         for entity, codepoint in name2codepoint.items():\n             if entity != "amp":\n-                text = text.replace(unichr(codepoint), "&" + entity + ";")\n+                text = text.replace(chr(codepoint), "&" + entity + ";")\n \n         text = self.urlRegexp.subn(self.replaceURL, text)[0]\n         text = self.emailRegexp.subn(self.replaceEmail, text)[0]\n@@ -55,9 +46,6 @@ def __call__(self):\n         # Finally, make \\n\'s into br\'s\n         text = text.replace("\\n", "<br />")\n \n-        if not PY3:\n-            text = text.encode("utf-8")\n-\n         return text\n \n     @staticmethod\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T09:59:10+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/ab44697dedf59b06b6b70f87dacdc2684282594f

cleanup: drop test code unused

According to `tox -e coverage` this code path is never used, thus it is
safe to be removed.

Files changed:
M plone/intelligenttext/tests.py

b'diff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py\nindex 76673c3..49a98b1 100644\n--- a/plone/intelligenttext/tests.py\n+++ b/plone/intelligenttext/tests.py\n@@ -6,8 +6,6 @@\n \n \n def bprint(s):\n-    if not isinstance(s, str):\n-        s = s.decode()\n     print(s.strip())\n \n \n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T10:00:46+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/e6e79dfff8f7f75e16127e562a54b0c1cb38021a

chore: bump version

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 1952050..e8fc4ad 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "3.1.1.dev0"\n+version = "4.0.0.dev0"\n \n setup(\n     name="plone.intelligenttext",\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-16T10:00:46+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.intelligenttext/commit/66360f00c85de4b77d0bda163ed76138625198ea

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\n'

Repository: plone.intelligenttext


Branch: refs/heads/master
Date: 2023-04-24T12:43:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.intelligenttext/commit/a5550f3d08842174ad041815cfa33d702cac18f5

Merge pull request #10 from plone/config-with-default-template-af845a75

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.breaking
A news/2ed8f544.internal
M CHANGES.rst
M plone/__init__.py
M plone/intelligenttext/__init__.py
M plone/intelligenttext/tests.py
M plone/intelligenttext/transforms.py
M pyproject.toml
M setup.cfg
M setup.py
M tox.ini
D .travis.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..e2b4515\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2ed8f544"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex fffab78..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,18 +0,0 @@\n-language: python\n-\n-python:\n-  - 2.7\n-  - 3.4\n-  - 3.5\n-  - 3.6\n-  - 3.7\n-  - 3.8\n-  - pypy\n-  - pypy3\n-\n-cache:\n-  - pip\n-\n-install: pip install tox-travis\n-\n-script: tox\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex dbc98c8..634f863 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -192,7 +192,7 @@ Fixes:\n ---\n \n - Initial development by Martin Aspeli (optilude@gmx.net). For further\n-  informations see http://dev.plone.org/collective/browser/intelligenttext/\n+  information see http://dev.plone.org/collective/browser/intelligenttext/\n \n - The transform was originally based on the url_to_hyperlink transform from\n   Ploneboard by Plone Solutions and others.\ndiff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\ndiff --git a/news/2ed8f544.internal b/news/2ed8f544.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/2ed8f544.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/intelligenttext/__init__.py b/plone/intelligenttext/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/intelligenttext/__init__.py\n+++ b/plone/intelligenttext/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/intelligenttext/tests.py b/plone/intelligenttext/tests.py\nindex c36534f..49a98b1 100644\n--- a/plone/intelligenttext/tests.py\n+++ b/plone/intelligenttext/tests.py\n@@ -1,22 +1,22 @@\n-# -*- coding: utf-8 -*-\n import doctest\n import unittest\n \n-optionflags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+\n+optionflags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n \n def bprint(s):\n-    if not isinstance(s, str):\n-        s = s.decode()\n     print(s.strip())\n \n \n def test_suite():\n-    return unittest.TestSuite([\n-        doctest.DocFileSuite(\n-            \'README.rst\',\n-            globs={\'bprint\': bprint},\n-            encoding=\'utf-8\',\n-            optionflags=optionflags,\n-        )\n-    ])\n+    return unittest.TestSuite(\n+        [\n+            doctest.DocFileSuite(\n+                "README.rst",\n+                globs={"bprint": bprint},\n+                encoding="utf-8",\n+                optionflags=optionflags,\n+            )\n+        ]\n+    )\ndiff --git a/plone/intelligenttext/transforms.py b/plone/intelligenttext/transforms.py\nindex 23c7768..181aae0 100644\n--- a/plone/intelligenttext/transforms.py\n+++ b/plone/intelligenttext/transforms.py\n@@ -1,32 +1,23 @@\n-# -*- coding: utf-8 -*-\n-import re\n-import sys\n+from html.entities import name2codepoint\n \n-PY3 = sys.version_info[0] == 3\n-if PY3:\n-    from html.entities import name2codepoint\n-    unicode = str\n-    unichr = chr\n-else:\n-    from htmlentitydefs import name2codepoint\n+import re\n \n \n-def safe_decode(s, encoding=\'utf-8\', errors=\'strict\'):\n-    if isinstance(s, unicode):\n+def safe_decode(s, encoding="utf-8", errors="strict"):\n+    if isinstance(s, str):\n         return s\n     return s.decode(encoding)\n \n \n-class WebIntelligentToHtmlConverter(object):\n+class WebIntelligentToHtmlConverter:\n     urlRegexp = re.compile(\n         r\'((?:ftp|https?)://(localhost|([12]?[0-9]{1,2}.){3}([12]?[0-9]{1,2})|(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z]))\\b(?::\\d+)?(?:\\/[^"\\\'<>()\\[\\]{}\\s\\x7f-\\xff]*(?:[.,?]+[^"\\\'<>()\\[\\]{}\\s\\x7f-\\xff]+)*)?)\',\n-        re.I | re.S | re.U\n+        re.I | re.S | re.U,\n     )\n     emailRegexp = re.compile(\n-        r\'["=]?(\\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\\.[A-Z]{2,4}\\b)\',\n-        re.I | re.S | re.U\n+        r\'["=]?(\\b[A-Z0-9._%-]+@[A-Z0-9._%-]+\\.[A-Z]{2,4}\\b)\', re.I | re.S | re.U\n     )\n-    indentRegexp = re.compile(r\'^(\\s+)\', re.M | re.U)\n+    indentRegexp = re.compile(r"^(\\s+)", re.M | re.U)\n \n     def __init__(self, orig, tab_width=4):\n         self.orig = orig\n@@ -35,93 +26,85 @@ def __init__(self, orig, tab_width=4):\n     def __call__(self):\n         text = self.orig\n         if text is None:\n-            text = \'\'\n-        text = safe_decode(text, errors=\'replace\')\n+            text = ""\n+        text = safe_decode(text, errors="replace")\n \n         # Do &amp; separately, else, it may replace an already-inserted & from\n         # an entity with &amp;, so < becomes &lt; becomes &amp;lt;\n-        text = text.replace(\'&\', \'&amp;\')\n+        text = text.replace("&", "&amp;")\n         # Make funny characters into html entity defs\n         for entity, codepoint in name2codepoint.items():\n-            if entity != \'amp\':\n-                text = text.replace(unichr(codepoint), \'&\' + entity + \';\')\n+            if entity != "amp":\n+                text = text.replace(chr(codepoint), "&" + entity + ";")\n \n         text = self.urlRegexp.subn(self.replaceURL, text)[0]\n         text = self.emailRegexp.subn(self.replaceEmail, text)[0]\n         text = self.indentRegexp.subn(self.indentWhitespace, text)[0]\n \n         # convert windows line endings\n-        text = text.replace(\'\\r\\n\', \'\\n\')\n+        text = text.replace("\\r\\n", "\\n")\n         # Finally, make \\n\'s into br\'s\n-        text = text.replace(\'\\n\', \'<br />\')\n-\n-        if not PY3:\n-            text = text.encode(\'utf-8\')\n+        text = text.replace("\\n", "<br />")\n \n         return text\n \n     @staticmethod\n     def abbreviateUrl(url, max=60, ellipsis="[&hellip;]"):\n-        """very long urls are abbreviated to allow nicer layout\n-        """\n+        """very long urls are abbreviated to allow nicer layout"""\n         if len(url) < max:\n             return url\n         protocol = ""\n         protocolend = url.find("//")\n         if protocolend != -1:\n-            protocol = url[0:protocolend+2]\n-            url = url[protocolend+2:]\n+            protocol = url[0 : protocolend + 2]\n+            url = url[protocolend + 2 :]\n         list = url.split("/")\n         if len(list) < 3 or len(list[0]) + len(list[-1]) > max:\n             url = protocol + url\n-            center = (max-5) // 2\n+            center = (max - 5) // 2\n             return url[:center] + ellipsis + url[-center:]\n \n         return protocol + list[0] + "/" + ellipsis + "/" + list[-1]\n \n     @classmethod\n     def replaceURL(cls, match):\n-        """Replace hyperlinks with clickable <a> tags\n-        """\n+        """Replace hyperlinks with clickable <a> tags"""\n         url = match.groups()[0]\n         linktext = cls.abbreviateUrl(url)\n         # Also with <some link> we should only link to some link, not\n         # including the brackets.\n-        end = \'\'\n+        end = ""\n         # XXX Probably better to fix the regex above.  Maurits\n-        if url.endswith(\'&gt;\'):\n-            url = url[:-len(\'&gt;\')]\n-            linktext = linktext[:-len(\'&gt;\')]\n-            end = \'&gt;\'\n-        elif url.endswith(\'.\') or url.endswith(\'?\') or url.endswith(\'!\'):\n+        if url.endswith("&gt;"):\n+            url = url[: -len("&gt;")]\n+            linktext = linktext[: -len("&gt;")]\n+            end = "&gt;"\n+        elif url.endswith(".") or url.endswith("?") or url.endswith("!"):\n             end = url[-1]\n             url = url[:-1]\n             linktext = linktext[:-1]\n \n         # rel="nofollow" shall avoid spamming\n-        return \'<a href="%s" rel="nofollow">%s</a>%s\' % (url, linktext, end)\n+        return f\'<a href="{url}" rel="nofollow">{linktext}</a>{end}\'\n \n     @staticmethod\n     def replaceEmail(match):\n-        """Replace email strings with mailto: links\n-        """\n+        """Replace email strings with mailto: links"""\n         url = match.groups()[0]\n         # following unicode substitutions shall avoid email spam\n         # crawlers to pickup email addresses\n-        url = url.replace(\'@\', \'&#0064;\')\n-        return \'<a href="&#0109;ailto&#0058;%s">%s</a>\' % (url, url)\n+        url = url.replace("@", "&#0064;")\n+        return f\'<a href="&#0109;ailto&#0058;{url}">{url}</a>\'\n \n     def indentWhitespace(self, match):\n-        """Make leading whitespace on a line into &nbsp; to preserve indents\n-        """\n+        """Make leading whitespace on a line into &nbsp; to preserve indents"""\n         indent = match.groups()[0]\n-        indent = indent.replace(\' \', \'&nbsp;\')\n-        return indent.replace(\'\\t\', \'&nbsp;\' * self.tab_width)\n+        indent = indent.replace(" ", "&nbsp;")\n+        return indent.replace("\\t", "&nbsp;" * self.tab_width)\n \n \n def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):\n-    """Converts text/x-web-intelligent to text/html\n-    """\n+    """Converts text/x-web-intelligent to text/html"""\n     try:\n         # tab_width could be a string like \'4\'\n         tab_width = int(tab_width)\n@@ -132,31 +115,31 @@ def convertWebIntelligentPlainTextToHtml(orig, tab_width=4):\n \n \n def convertHtmlToWebIntelligentPlainText(orig):\n-    """Converts text/html to text/x-web-intelligent.\n-    """\n-    preRegex = re.compile(r\'<\\s*pre[^>]*>(.*?)<\\s*/pre\\s*>\', re.I | re.S)\n+    """Converts text/html to text/x-web-intelligent."""\n+    preRegex = re.compile(r"<\\s*pre[^>]*>(.*?)<\\s*/pre\\s*>", re.I | re.S)\n \n-    tagWhitespaceRegex = re.compile(r\'\\s+((<[^>]+>)\\s+)+\')\n-    whitespaceRegex = re.compile(r\'\\s+\')\n+    tagWhitespaceRegex = re.compile(r"\\s+((<[^>]+>)\\s+)+")\n+    whitespaceRegex = re.compile(r"\\s+")\n \n-    tdRegex = re.compile(r\'<\\s*(td)([^>])*>\', re.I)\n-    breakRegex = re.compile(r\'<\\s*(br)\\s*/?>\', re.I)\n-    startBlockRegex = re.compile(r\'<\\s*(dt)[^>]*>\', re.I)\n-    endBlockRegex = re.compile(r\'<\\s*/\\s*(p|div|tr|ul|ol|dl)[^>]*>\', re.I)\n-    indentBlockRegex = re.compile(r\'<\\s*(blockquote|dd)[^>]*>\', re.I)\n-    listBlockRegex = re.compile(r\'<\\s*(li)[^>]*>\', re.I)\n+    tdRegex = re.compile(r"<\\s*(td)([^>])*>", re.I)\n+    breakRegex = re.compile(r"<\\s*(br)\\s*/?>", re.I)\n+    startBlockRegex = re.compile(r"<\\s*(dt)[^>]*>", re.I)\n+    endBlockRegex = re.compile(r"<\\s*/\\s*(p|div|tr|ul|ol|dl)[^>]*>", re.I)\n+    indentBlockRegex = re.compile(r"<\\s*(blockquote|dd)[^>]*>", re.I)\n+    listBlockRegex = re.compile(r"<\\s*(li)[^>]*>", re.I)\n \n-    tagRegex = re.compile(r\'<[^>]+>\', re.I | re.M)\n+    tagRegex = re.compile(r"<[^>]+>", re.I | re.M)\n \n     # Save all <pre> sections and restore after other transforms\n     preSections = {}\n \n     def savePres(match):\n-        marker = \'__pre_marker__%d__\' % len(preSections)\n+        marker = "__pre_marker__%d__" % len(preSections)\n         preSections[marker] = match.group(1)\n         return marker\n+\n     if orig is None:\n-        orig = \'\'\n+        orig = ""\n     text = preRegex.sub(savePres, orig)\n \n     def fixTagWhitespace(match):\n@@ -164,53 +147,51 @@ def fixTagWhitespace(match):\n         Repeat this in case there are directly nested tags.\n         """\n         # Remove any superfluous whitespace, but preserve one leading space\n-        return \' \' + whitespaceRegex.sub(\'\', match.group(0))\n+        return " " + whitespaceRegex.sub("", match.group(0))\n+\n     text = tagWhitespaceRegex.sub(fixTagWhitespace, text)\n \n     # Make all whitespace into a single space\n-    text = whitespaceRegex.sub(\' \', text)\n+    text = whitespaceRegex.sub(" ", text)\n \n     # Fix entities\n-    text = text.replace(\'&nbsp;\', \' \')\n+    text = text.replace("&nbsp;", " ")\n     for entity, codepoint in name2codepoint.items():\n         # Do &lt; and &gt; later, else we may be creating what looks like\n         # tags\n-        if entity != \'lt\' and entity != \'gt\' and entity != \'amp\':\n-            text = text.replace(\n-                \'&\' + entity + \';\',\n-                \'&#\' + str(codepoint) + \';\'\n-            )\n+        if entity != "lt" and entity != "gt" and entity != "amp":\n+            text = text.replace("&" + entity + ";", "&#" + str(codepoint) + ";")\n \n     # XXX: Remove <head>, <script>, <style> ?\n \n     # Make tabs out of td\'s\n-    text = tdRegex.sub(\'\\t\', text)\n+    text = tdRegex.sub("\\t", text)\n \n     # Make br\'s and li\'s into newlines\n-    text = breakRegex.sub(\'\\n\', text)\n+    text = breakRegex.sub("\\n", text)\n \n     # Make the start of list blocks into paragraphs\n-    text = startBlockRegex.sub(\'\\n\\n\', text)\n+    text = startBlockRegex.sub("\\n\\n", text)\n \n     # Make the close of p\'s, div\'s and tr\'s into paragraphs\n-    text = endBlockRegex.sub(\'\\n\\n\', text)\n+    text = endBlockRegex.sub("\\n\\n", text)\n \n     # Make blockquotes and dd blocks indented\n-    text = indentBlockRegex.sub(\'\\n\\n  \', text)\n+    text = indentBlockRegex.sub("\\n\\n  ", text)\n \n     # Make list items indented and prefixed with -\n-    text = listBlockRegex.sub(\'\\n\\n  - \', text)\n+    text = listBlockRegex.sub("\\n\\n  - ", text)\n \n     # Remove other tags\n-    text = tagRegex.sub(\'\', text)\n+    text = tagRegex.sub("", text)\n \n     # Fix < and > entities\n-    text = text.replace(\'&lt;\', \'<\')\n-    text = text.replace(\'&gt;\', \'>\')\n-    text = text.replace(\'&amp;\', \'&\')\n+    text = text.replace("&lt;", "<")\n+    text = text.replace("&gt;", ">")\n+    text = text.replace("&amp;", "&")\n \n-    # Restore pres\n+    # Restore `pre`s\n     for marker, section in preSections.items():\n-        text = text.replace(marker, \'\\n\\n\' + section + \'\\n\\n\')\n+        text = text.replace(marker, "\\n\\n" + section + "\\n\\n")\n \n     return text\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 44915d9..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,10 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n-    .travis.yml\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-\n-[bdist_wheel]\n-universal = 1\n-\n-[zest.releaser]\n-create-wheel = yes\ndiff --git a/setup.py b/setup.py\nindex 590510d..e8fc4ad 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,54 +1,44 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.1.1.dev0\'\n+\n+version = "4.0.0.dev0"\n \n setup(\n-    name=\'plone.intelligenttext\',\n+    name="plone.intelligenttext",\n     version=version,\n     description="Provides transforms from text/x-web-intelligent to "\n-                "text/html and vice versa.",\n-    long_description=(\n-        open("README.rst").read() +\n-        "\\n" +\n-        open("CHANGES.rst").read()\n-    ),\n+    "text/html and vice versa.",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 4.0",\n-        "Framework :: Plone :: 4.1",\n-        "Framework :: Plone :: 4.2",\n-        "Framework :: Plone :: 4.3",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.4",\n-        "Programming Language :: Python :: 3.5",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Programming Language :: Python :: Implementation :: CPython",\n         "Programming Language :: Python :: Implementation :: PyPy",\n-      ],\n-    keywords=\'transform intelligenttext\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.intelligenttext\',\n-    license=\'GPL version 2\',\n+    ],\n+    keywords="transform intelligenttext",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.intelligenttext",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     test_suite="plone.intelligenttext.tests.test_suite",\n     install_requires=[\n-      \'setuptools\',\n+        "setuptools",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nindex 2e06e52..7e83074 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,8 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,py34,py35,py36,py37,py38,pypy,pypy3\n+    format\n+    lint\n+    test\n \n [testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.intelligenttext {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    python setup.py -q install\n-    python setup.py -q test\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.intelligenttext {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

