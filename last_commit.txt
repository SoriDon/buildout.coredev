Repository: plone.app.caching


Branch: refs/heads/master
Date: 2021-08-24T11:45:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/10f9b29a060a6e32540de383fc6c4cbabb60424a

Define etag for layout property.

For the moment this only defines the etag, without actually using it in a caching profile.
We can do this later.

When the layout changes, the modification date stays the same (currently).
So without this etag, you can get a page from the cache with the old layout.

Initially I had an etag for the default page as well.  This could be added to containers.
But the published item is then not the container, but the page.
And the page itself has no default page, so this etag never returned anything.

Files changed:
A news/80.feature
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/etags.py
M plone/app/caching/tests/test_etags.py

b'diff --git a/news/80.feature b/news/80.feature\nnew file mode 100644\nindex 0000000..587d1ae\n--- /dev/null\n+++ b/news/80.feature\n@@ -0,0 +1,4 @@\n+Add etag for layout property.\n+This is not yet added to a caching profile, but this can be done later.\n+Fixes `issue 80 <https://github.com/plone/plone.app.caching/issues/80>`_.\n+[maurits]\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex 83575e5..416c0d4 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -44,5 +44,6 @@\n     <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n     <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n     <adapter factory=".etags.CopyCookie"                name="copy" />\n+    <adapter factory=".etags.Layout"                    name="layout" />\n \n </configure>\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex f2e1645..5463136 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -1,3 +1,4 @@\n+from Acquisition import aq_base\n from Acquisition import aq_inner\n from plone.app.caching.interfaces import IETagValue\n from plone.app.caching.operations.utils import getContext\n@@ -7,6 +8,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.resources.browser.combine import get_override_directory\n from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+from Products.CMFPlone.utils import safe_hasattr\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -253,3 +255,19 @@ def __call__(self):\n         if not isinstance(timestamp, str):\n             timestamp = timestamp.decode("utf-8")\n         return timestamp\n+\n+\n+@implementer(IETagValue)\n+@adapter(Interface, Interface)\n+class Layout(object):\n+    """The \'layout\' etag component, returning they layout of a content item."""\n+\n+    def __init__(self, published, request):\n+        self.published = published\n+        self.request = request\n+\n+    def __call__(self):\n+        context = getContext(self.published)\n+        if not safe_hasattr(aq_base(context), "getLayout"):\n+            return\n+        return context.getLayout()\ndiff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py\nindex 5b02c74..81a6f2e 100644\n--- a/plone/app/caching/tests/test_etags.py\n+++ b/plone/app/caching/tests/test_etags.py\n@@ -10,7 +10,6 @@\n from zope.component import adapter\n from zope.component import provideAdapter\n from zope.component import provideUtility\n-from zope.component.hooks import setSite\n from zope.interface import implementer\n from zope.interface import Interface\n from ZPublisher.HTTPRequest import HTTPRequest\n@@ -22,7 +21,8 @@\n \n @implementer(IContentish)\n class DummyContext(Explicit):\n-    pass\n+    def getLayout(self):\n+        return getattr(self, "_layout", None)\n \n \n class DummyPublished:\n@@ -367,3 +367,31 @@ def getDefaultSkin(self):\n         etag = Skin(published, request)\n \n         self.assertEqual("defaultskin", etag())\n+\n+    # layout\n+\n+    def test_layout_none(self):\n+        from plone.app.caching.operations.etags import Layout\n+\n+        environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n+        response = HTTPResponse()\n+        request = HTTPRequest(StringIO(), environ, response)\n+        published = DummyPublished(DummyContext())\n+\n+        etag = Layout(published, request)\n+\n+        self.assertIsNone(etag())\n+\n+    def test_layout_set(self):\n+        from plone.app.caching.operations.etags import Layout\n+\n+        environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n+        response = HTTPResponse()\n+        request = HTTPRequest(StringIO(), environ, response)\n+        context = DummyContext()\n+        context._layout = "hello_view"\n+        published = DummyPublished(context)\n+\n+        etag = Layout(published, request)\n+\n+        self.assertEqual("hello_view", etag())\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2021-08-27T15:50:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/1a6704f5764ddc640fd009c96b89627baefe58de

Merge pull request #81 from plone/maurits/etag-layout

Define etag for layout property.

Files changed:
A news/80.feature
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/etags.py
M plone/app/caching/tests/test_etags.py

b'diff --git a/news/80.feature b/news/80.feature\nnew file mode 100644\nindex 0000000..587d1ae\n--- /dev/null\n+++ b/news/80.feature\n@@ -0,0 +1,4 @@\n+Add etag for layout property.\n+This is not yet added to a caching profile, but this can be done later.\n+Fixes `issue 80 <https://github.com/plone/plone.app.caching/issues/80>`_.\n+[maurits]\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex 83575e5..416c0d4 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -44,5 +44,6 @@\n     <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n     <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n     <adapter factory=".etags.CopyCookie"                name="copy" />\n+    <adapter factory=".etags.Layout"                    name="layout" />\n \n </configure>\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex f2e1645..5463136 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -1,3 +1,4 @@\n+from Acquisition import aq_base\n from Acquisition import aq_inner\n from plone.app.caching.interfaces import IETagValue\n from plone.app.caching.operations.utils import getContext\n@@ -7,6 +8,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.resources.browser.combine import get_override_directory\n from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+from Products.CMFPlone.utils import safe_hasattr\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -253,3 +255,19 @@ def __call__(self):\n         if not isinstance(timestamp, str):\n             timestamp = timestamp.decode("utf-8")\n         return timestamp\n+\n+\n+@implementer(IETagValue)\n+@adapter(Interface, Interface)\n+class Layout(object):\n+    """The \'layout\' etag component, returning they layout of a content item."""\n+\n+    def __init__(self, published, request):\n+        self.published = published\n+        self.request = request\n+\n+    def __call__(self):\n+        context = getContext(self.published)\n+        if not safe_hasattr(aq_base(context), "getLayout"):\n+            return\n+        return context.getLayout()\ndiff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py\nindex 5b02c74..81a6f2e 100644\n--- a/plone/app/caching/tests/test_etags.py\n+++ b/plone/app/caching/tests/test_etags.py\n@@ -10,7 +10,6 @@\n from zope.component import adapter\n from zope.component import provideAdapter\n from zope.component import provideUtility\n-from zope.component.hooks import setSite\n from zope.interface import implementer\n from zope.interface import Interface\n from ZPublisher.HTTPRequest import HTTPRequest\n@@ -22,7 +21,8 @@\n \n @implementer(IContentish)\n class DummyContext(Explicit):\n-    pass\n+    def getLayout(self):\n+        return getattr(self, "_layout", None)\n \n \n class DummyPublished:\n@@ -367,3 +367,31 @@ def getDefaultSkin(self):\n         etag = Skin(published, request)\n \n         self.assertEqual("defaultskin", etag())\n+\n+    # layout\n+\n+    def test_layout_none(self):\n+        from plone.app.caching.operations.etags import Layout\n+\n+        environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n+        response = HTTPResponse()\n+        request = HTTPRequest(StringIO(), environ, response)\n+        published = DummyPublished(DummyContext())\n+\n+        etag = Layout(published, request)\n+\n+        self.assertIsNone(etag())\n+\n+    def test_layout_set(self):\n+        from plone.app.caching.operations.etags import Layout\n+\n+        environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n+        response = HTTPResponse()\n+        request = HTTPRequest(StringIO(), environ, response)\n+        context = DummyContext()\n+        context._layout = "hello_view"\n+        published = DummyPublished(context)\n+\n+        etag = Layout(published, request)\n+\n+        self.assertEqual("hello_view", etag())\n'

