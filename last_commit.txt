Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-13T23:58:35+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/5643aedce6a77c678cbf08dcea73a6afce5ad41d

Update Markup in Templates

- ready for Plone 6 with Bootstrap 5

Files changed:
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
M Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
M Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt

b'diff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex ca12bb4..94f4ff3 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -1,4 +1,8 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n@@ -8,205 +12,188 @@\n                      pwtool context/portal_placeful_workflow;\n                      config python: pwtool.getWorkflowPolicyConfig(context);\n                      siteroot python: pwtool.isSiteRoot(context);">\n-\n-        <h1 i18n:translate="heading_workflow_policies">\n-            Workflow policies\' local configuration management\n+      <header>\n+        <h1 class="documentFirstHeading" i18n:translate="heading_workflow_policies">\n+          Workflow policies\' local configuration management\n         </h1>\n-\n-        <p i18n:translate="description_workflow_policies">\n-            Set your workflow policies\' local configuration for this folder and below.\n+  \n+        <p class="lead" i18n:translate="description_workflow_policies">\n+          Set your workflow policies\' local configuration for this folder and below.\n         </p>\n-\n-        <tal:site tal:condition="siteroot">\n-\n-          <p i18n:translate="">\n-              You are viewing the root of your site. Local workflow\n-              configuration is only available in subfolders of your site.\n-          </p>\n-\n-        </tal:site>\n-\n-        <tal:nosite tal:condition="not:siteroot">\n-\n-          <p tal:condition="python:not config and context.isPrincipiaFolderish">\n-            <form action="placeful_workflow_configuration" method="POST">\n-                <button type="submit" name="add_wp_for_type" i18n:translate="description_add_workflow_policy_for_type">\n-                  Add a workflow policy\'s local configuration in the\n-                  <span tal:replace="python:context.translate(context.portal_type)"\n-                        i18n:name="portal_type">\n-                      portal type\n-                  </span>\n-                </button>\n-            </form>\n-          </p>\n-\n-          <p tal:condition="python:not context.isPrincipiaFolderish and context is not container">\n-              <form action="placeful_workflow_configuration" method="POST">\n-                <button type="submit" name="add_wp_local_config" i18n:translate="description_add_workflow_policy">\n-                  Add Workflow policy\'s local configuration\n-                </button>\n-              </form>\n-          </p>\n-\n-          <form id="edit_form"\n-                name="edit_form"\n-                method="POST"\n-                action="${context/absolute_url}/@@placeful_workflow_configuration"\n-                tal:condition="config">\n-\n-              <fieldset tal:define="policies pwtool/getWorkflowPolicyInfos;\n-                                    policy_in_id config/getPolicyInId;\n-                                    policy_below_id config/getPolicyBelowId;">\n-\n-                  <legend i18n:translate="legend_publishing_details">\n-                      Workflow policies\n-                  </legend>\n-\n-                  <strong i18n:translate="label_in_this_folder">For this Folder</strong>\n-                  <div class="formHelp"\n-                       i18n:translate="description_in_this_folder">\n-                      Modify the workflows of this folder and below. If you don\'t want\n-                      to modify the workflow of this Folder use \'Below this Folder\' section.\n-                  </div>\n-\n-                  <div class="field">\n-\n-                      <tal:policy tal:repeat="policy policies">\n-\n-                          <input type="radio" class="noborder" name="policy_in"\n-                                 value="policy" id="cb_policy"\n-                                 tal:attributes="id python: \'cb_policy_\' + policy[\'id\'];\n-                                                 value policy/id;\n-                                                 checked python: policy[\'id\'] == policy_in_id" />\n-\n-                          <label for="cb_policy"\n-                                 tal:attributes="for python: \'cb_\' + policy[\'id\']"\n-                                 tal:content="policy/title"\n-                                 i18n:domain="cmfplacefulworkflow"\n-                                 i18n:translate="">\n-                              Policy Label\n-                          </label>\n-                          <br />\n-                          <span class="formHelp"\n-                                tal:content="policy/description">\n-                              Workflow policy description\n-                          </span>\n-                          <br />\n-                      </tal:policy>\n-\n-                      <input type="radio" class="noborder" name="policy_in"\n-                             id="cb_default_policy" title="" checked="checked"\n-                             tal:attributes="value python:\'\';\n-                                             checked not:config/getPolicyIn" />\n-\n-                      <label for="cb_default_policy"\n-                             i18n:translate="label_default_policy">\n-                          Default Policy\n-                      </label>\n-                      <br />\n-                      <span class="formHelp"\n-                            i18n:translate="help_default_workflow_policy">\n-                          The default workflow policy.\n-                      </span>\n-                      <br />\n-                  </div>\n-\n-                  <hr/>\n-\n-                  <strong i18n:translate="label_below_this_folder">Below this Folder</strong>\n-                  <div class="formHelp"\n-                       i18n:translate="description_below_this_folder">\n-                      Modify the workflows only below this Folder. If you want to\n-                      modify the workflow of this Folder use \'For this Folder\' section.\n-                  </div>\n-\n-                  <div class="field">\n-\n-                      <tal:policy tal:repeat="policy policies">\n-\n-                          <input type="radio" class="noborder" name="policy_below"\n-                                 value="policy" id="cb_policy"\n-                                 tal:attributes="id python: \'cb_policy_\' + policy[\'id\'];\n-                                                 value policy/id;\n-                                                 checked python: policy[\'id\'] == policy_below_id" />\n-\n-                          <label for="cb_policy"\n-                                 tal:attributes="for python: \'cb_\' + policy[\'id\']"\n-                                 tal:content="policy/title"\n-                                 i18n:domain="cmfplacefulworkflow"\n-                                 i18n:translate="">\n-                              Policy Label\n-                          </label>\n-                          <br />\n-                          <span class="formHelp"\n-                                tal:content="policy/description">\n-                              Workflow policy description\n-                          </span>\n-                          <br />\n-\n-                      </tal:policy>\n-\n-                      <input type="radio"\n-                             class="noborder"\n-                             name="policy_below"\n-                             id="cb_default_policy"\n-                             title=""\n-                             checked="1"\n-                             tal:attributes="value python:\'\';\n-                                             checked not: config/getPolicyBelow" />\n-\n-                      <label for="cb_default_policy"\n-                             i18n:translate="label_default_policy">\n-                          Default Policy\n-                      </label>\n-                      <br />\n-                      <span class="formHelp"\n-                            i18n:translate="help_default_workflow_policy">\n-                          The default workflow policy.\n-                      </span>\n-                      <br />\n-\n-                  </div>\n-\n-                  <strong i18n:translate="label_update_security">Update security</strong>\n-                  <div class="formHelp"\n-                       i18n:translate="description_update_security">\n-                      Update catalog security (update role mappings). Note that updating catalog\n-                      security might be a very long operation if there are a lot of brains to be\n-                      re-indexed. This operation can be done afterwards as a separate upgrade step.\n-                  </div>\n-\n-                  <div class="field">\n-\n-                    <input type="checkbox" checked="checked" class="noborder"\n-                           name="update_security" value="update_security" id="cb_update_security" />\n-\n-                    <label for="cb_update_security"\n-                           i18n:domain="cmfplacefulworkflow"\n-                           i18n:translate="">\n-                        Update catalog role mappings\n-                    </label>\n-\n-                  </div>\n-                  <br />\n-\n-                  <div class="formControls" i18n:domain="plone">\n-\n-                      <input class="context"\n-                             type="submit"\n-                             name="submit"\n-                             value="Save"\n-                             i18n:attributes="value label_save;" />\n-                      <input class="standalone"\n-                             type="submit"\n-                             name="submit"\n-                             value="Cancel"\n-                             i18n:attributes="value label_cancel;" />\n-                  </div>\n-              </fieldset>\n-          </form>\n-\n-        </tal:nosite>\n-\n+      </header>\n+      \n+\n+      <tal:site tal:condition="siteroot">\n+\n+      <div class="alert alert-warning mb-5" i18n:translate="">\n+        You are viewing the root of your site. Local workflow\n+        configuration is only available in subfolders of your site.\n+      </div>\n+\n+      </tal:site>\n+\n+      <tal:nosite tal:condition="not:siteroot">\n+      \n+      <form\n+        tal:condition="python:not config and context.isPrincipiaFolderish"\n+        action="placeful_workflow_configuration" method="POST">\n+        <button type="submit" name="add_wp_for_type" class="btn btn-primary"\n+          i18n:translate="description_add_workflow_policy_for_type">\n+          Add a workflow policy\'s local configuration in the\n+          <span tal:replace="python:context.translate(context.portal_type)"\n+            i18n:name="portal_type">portal type</span>\n+        </button>\n+      </form>\n+      \n+      <form\n+        tal:condition="python:not context.isPrincipiaFolderish and context is not container"\n+        action="placeful_workflow_configuration" method="POST">\n+        <button type="submit" name="add_wp_local_config" class="btn btn-primary"\n+          i18n:translate="description_add_workflow_policy">\n+          Add Workflow policy\'s local configuration\n+        </button>\n+      </form>\n+      \n+      <form id="edit_form"\n+        name="edit_form"\n+        method="POST"\n+        action="${context/absolute_url}/@@placeful_workflow_configuration"\n+        tal:condition="config"\n+        tal:define="\n+          policies pwtool/getWorkflowPolicyInfos;\n+          policy_in_id config/getPolicyInId;\n+          policy_below_id config/getPolicyBelowId;">\n+\n+        <h3 i18n:translate="legend_publishing_details">Workflow policies</h3>\n+\n+        <strong i18n:translate="label_in_this_folder">For this Folder</strong>\n+                  \n+        <div class="mb-3 form-text"\n+          i18n:translate="description_in_this_folder">\n+          Modify the workflows of this folder and below. If you don\'t want\n+          to modify the workflow of this Folder use \'Below this Folder\' section.\n+        </div>\n+                  \n+        <div class="mb-3 form-check" tal:repeat="policy policies">                    \n+              \n+          <input type="radio" class="form-check-input" name="policy_in"\n+            value="policy" id="cb_policy"\n+            tal:attributes="\n+              id python: \'cb_policy_\' + policy[\'id\'];\n+              value policy/id;\n+              checked python: policy[\'id\'] == policy_in_id" />\n+              \n+          <label class="form-check-label" for="cb_policy"\n+            tal:attributes="for python: \'cb_policy_\' + policy[\'id\']"\n+            tal:content="policy/title"\n+            i18n:domain="cmfplacefulworkflow"\n+            i18n:translate="">Policy Label</label>\n+              \n+          <div class="form-text" tal:condition="policy/description"\n+            tal:content="policy/description">Workflow policy description</div>\n+            \n+        </div>\n+\n+        <div class="mb-3 form-check">\n+              \n+          <input type="radio" class="form-check-input" name="policy_in"\n+            id="cb_default_policy" title="" checked="checked"\n+            tal:attributes="value python:\'\'; checked not:config/getPolicyIn" />\n+              \n+          <label for="cb_default_policy" class="form-check-label" i18n:translate="label_default_policy">Default Policy</label>\n+              \n+          <div class="form-text"\n+            i18n:translate="help_default_workflow_policy">\n+            The default workflow policy.\n+          </div>                  \n+        \n+        </div>\n+\n+        <strong i18n:translate="label_below_this_folder">Below this Folder</strong>\n+                  \n+        <div class="mb-3 form-text"\n+          i18n:translate="description_below_this_folder">\n+          Modify the workflows only below this Folder. If you want to\n+          modify the workflow of this Folder use \'For this Folder\' section.\n+        </div>\n+            \n+        <div class="mb-3 form-check" tal:repeat="policy policies">\n+           \n+          <input type="radio" class="form-check-input" name="policy_below"\n+            value="policy" id="cb_policy"\n+            tal:attributes="\n+              id python: \'cb_policy_below_\' + policy[\'id\'];\n+              value policy/id;\n+              checked python: policy[\'id\'] == policy_below_id" />\n+\n+          <label for="cb_policy" class="form-check-label" \n+            tal:attributes="for python: \'cb_policy_below_\' + policy[\'id\']"\n+            tal:content="policy/title"\n+            i18n:domain="cmfplacefulworkflow"\n+            i18n:translate="">Policy Label</label>\n+\n+          <div class="form-text" tal:content="policy/description">\n+            Workflow policy description\n+          </div>\n+        \n+        </div>\n+            \n+        <div class="mb-3 form-check">\n+              \n+          <input type="radio"\n+            class="form-check-input"\n+            name="policy_below"\n+            id="cb_default_policy_below"\n+            title=""\n+            checked="1"\n+            tal:attributes="value python:\'\';\n+              checked not: config/getPolicyBelow" />\n+                    \n+          <label for="cb_default_policy_below" class="form-check-label"\n+            i18n:translate="label_default_policy">Default Policy</label>\n+                    \n+          <div class="form-text" i18n:translate="help_default_workflow_policy">\n+            The default workflow policy.\n+          </div>\n+                  \n+        </div>\n+\n+        <strong i18n:translate="label_update_security">Update security</strong>\n+            \n+        <div class="mb-3 form-text"\n+          i18n:translate="description_update_security">\n+          Update catalog security (update role mappings). Note that updating catalog\n+          security might be a very long operation if there are a lot of brains to be\n+          re-indexed. This operation can be done afterwards as a separate upgrade step.\n+        </div>\n+\n+        <div class="mb-3 form-check">\n+              \n+          <input type="checkbox" checked="checked" class="form-check-input"\n+            name="update_security" value="update_security" id="cb_update_security" />\n+\n+          <label for="cb_update_security" class="form-check-label"\n+            i18n:domain="cmfplacefulworkflow"\n+            i18n:translate="">Update catalog role mappings</label>\n+            \n+        </div>\n+\n+        <div class="mb-3" i18n:domain="plone">\n+        \n+          <input class="btn btn-primary"\n+            type="submit"\n+            name="submit"\n+            value="Save"\n+            i18n:attributes="value label_save;" />\n+          \n+          <input class="btn btn-secondary"\n+            type="submit"\n+            name="submit"\n+            value="Cancel"\n+            i18n:attributes="value label_cancel;" />\n+        </div>\n+      </form>\n+      \n+      </tal:nosite>\n     </div>\n </html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nindex 46c3a75..40d47aa 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n@@ -1,4 +1,8 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+<html xmlns="http://www.w3.org/1999/xhtml" \n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en"\n       lang="en"\n       metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n@@ -53,15 +57,15 @@\n                       tal:attributes="action string:${context/absolute_url}/@@prefs_workflow_localpolicies_form"\n                       tal:define="wfp python:context.portal_placeful_workflow;">\n \n-                    <fieldset>\n+                    <fieldset class="mb-3">\n                         <legend i18n:translate="legend_workflow_policies">Existing Workflow Policies</legend>\n \n                         <div tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n-                             class="field">\n+                             class="form-check">\n \n                             <tal:wfp tal:define="wfp python:wfp.getWorkflowPolicyById(wfpid)">\n \n-                            <input type="checkbox" class="noborder" id="policy_id" name="policy_ids:list"\n+                            <input type="checkbox" class="form-check-input" id="policy_id" name="policy_ids:list"\n                                    tal:attributes="id wfpid; value wfpid" />\n \n                             <label for="policy_id"\n@@ -74,7 +78,7 @@\n                                 </a>\n                             </label>\n \n-                            <div class="formHelp"\n+                            <div class="form-text"\n                                  tal:content="python:wfp.getDescription()">\n                                 Description of the policy mapping\n                             </div>\n@@ -85,64 +89,72 @@\n \n                         <div class="formControls"\n                              tal:condition="python:wfp.getWorkflowPolicyIds()">\n-                            <input class="context" type="submit" name="delete" value="Remove selected"\n+                            <input class="btn btn-danger" type="submit" name="delete" value="Remove selected"\n                                    i18n:attributes="value label_remove_selected;"\n                                    />\n                         </div>\n                     </fieldset>\n \n-                    <fieldset>\n+                    <fieldset class="mb-3">\n                         <legend i18n:translate="legend_add_workflow_policy">Add a workflow policy</legend>\n-                        <div class="field"\n+                        <div class="mb-3"\n                              tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:\'field error\' if error else \'field\'">\n+                             tal:attributes="class python:\'field error mb-3\' if error else \'mb-3\'">\n+\n+                            <label class="form-label">\n+                              <span tal:omit-tag="" i18n:translate="label_new_policy_id">New policy Id</span>\n+                              <span class="fieldRequired" title="Required"\n+                                    i18n:domain="plone"\n+                                    i18n:attributes="title title_required;"\n+                                    i18n:translate="label_required">(Required)</span>\n+                            </label>\n \n-                            <label i18n:translate="label_new_policy_id">New policy Id</label>\n-                            <span class="fieldRequired" title="Required"\n-                                  i18n:domain="plone"\n-                                  i18n:attributes="title title_required;"\n-                                  i18n:translate="label_required">(Required)</span>\n+                            <input name="policy_id" class="form-control" value="" size="30" />\n \n-                            <div class="formHelp" id=""\n+                            <div class="form-text" id=""\n                                  i18n:translate="description_new_policy_id">\n                                 Enter an id for the new workflow policy\n                             </div>\n \n                             <div tal:content="error">Validation error output</div>\n \n-                            <input name="policy_id" value="" size="30" />\n                         </div>\n-                        <div class="field"\n+                        <div class="mb-3"\n                              tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                            <label i18n:translate="label_duplicate_policy_id">Duplicate another policy</label>\n-                            <span class="fieldRequired" title="Required"\n-                                  i18n:domain="plone"\n-                                  i18n:attributes="title title_required;"\n-                                  i18n:translate="label_required">(Required)</span>\n-                            <div class="formHelp" id=""\n+                             tal:attributes="class python:\'field error mb-3\' if error else \'field mb-3\'">\n+\n+                            <label >\n+                              <span tal:omit-tag="" i18n:translate="label_duplicate_policy_id">Duplicate another policy</span>                            \n+                              <span class="fieldRequired" title="Required"\n+                                i18n:domain="plone"\n+                                i18n:attributes="title title_required;"\n+                                i18n:translate="label_required">(Required)</span>\n+                            </label>\n+\n+                            <select name="policy_duplicate_id" class="form-select">\n+                              <option value="empty"\n+                                      i18n:translate="label_no_policy_duplicated">\n+                                  No policy duplicated\n+                              </option>\n+                              <option value="portal_workflow"\n+                                      i18n:translate="label_duplicate_portal_workflow">Global workflow</option>\n+                              <option tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n+                                      tal:attributes="value wfpid"\n+                                      tal:content="python:wfp.getWorkflowPolicyById(wfpid).getTitle()">WF policy id</option>\n+                            </select>\n+                            \n+                            <div class="form-text" id=""\n                                  i18n:translate="description_duplicate_policy_id">\n                                 Choose a policy to copy when creating the new policy.\n                                 You also can choose to start with an empty policy.\n                             </div>\n \n                             <div tal:content="error">Validation error output</div>\n-                            <select name="policy_duplicate_id">\n-                                <option value="empty"\n-                                        i18n:translate="label_no_policy_duplicated">\n-                                    No policy duplicated\n-                                </option>\n-                                <option value="portal_workflow"\n-                                        i18n:translate="label_duplicate_portal_workflow">Global workflow</option>\n-                                <option tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n-                                        tal:attributes="value wfpid"\n-                                        tal:content="python:wfp.getWorkflowPolicyById(wfpid).getTitle()">WF policy id</option>\n-                            </select>\n+                            \n                         </div>\n \n                         <div class="formControls">\n-                            <input type="submit" class="context" name="add" value="Add"\n+                            <input type="submit" class="btn btn-primary" name="add" value="Add"\n                                    i18n:attributes="value label_add;"\n                                    />\n                         </div>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nindex f9cce67..74a9d82 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n@@ -1,4 +1,8 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en"\n       lang="en"\n       metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n@@ -54,67 +58,64 @@\n                             Workflow Policy Details\n                         </legend>\n \n-                        <div class="field">\n-\n-                            <label for="title"\n-                                   i18n:domain="plone"\n-                                   i18n:translate="label_title">\n-                                Title\n-                            </label>\n-\n-                            <span class="fieldRequired"\n-                                  title="Required"\n-                                  i18n:domain="plone"\n-                                  i18n:attributes="title title_required;"\n-                                  i18n:translate="label_required">\n+                        <div class="mb-3">\n+\n+                            <label class="form-label"\n+                              for="title"\n+                              i18n:domain="plone">\n+                              <span tal:omit-tag="" i18n:translate="label_title">Title</span>                              \n+                              <span class="fieldRequired"\n+                                title="Required"\n+                                i18n:domain="plone"\n+                                i18n:attributes="title title_required;"\n+                                i18n:translate="label_required">\n                                 (Required)\n-                            </span>\n-                            <br />\n+                              </span>\n+                            </label>\n \n                             <input type="text"\n                                    id="title"\n                                    name="title"\n                                    value=""\n-                                   size="40"\n+                                   class="form-control"\n                                    tal:attributes="value python:request.get(\'title\',wf_policy.getTitle())" />\n                         </div>\n \n-                        <div class="field">\n+                        <div class="mb-3">\n \n                             <label for="description"\n-                                   i18n:domain="plone"\n-                                   i18n:translate="label_description">\n+                                  class="form-label"\n+                                  i18n:domain="plone"\n+                                  i18n:translate="label_description">\n                                 Description\n                             </label>\n \n-                            <div class="formHelp"\n-                                 i18n:translate="help_workflow_policy_description">\n-                                A brief description of the workflow policy.\n-                            </div>\n-\n                             <textarea cols="80"\n                                       rows="2"\n+                                      class="form-control"\n                                       id="description"\n                                       name="description"\n                                       tal:content="python:request.get(\'description\',wf_policy.getDescription())">\n                                 Workflow Policy Description.\n                             </textarea>\n \n+                            <div class="form-text"\n+                                 i18n:translate="help_workflow_policy_description">\n+                                A brief description of the workflow policy.\n+                            </div>\n+\n                         </div>\n \n-                        <div class="field">\n+                        <div class="mb-3">\n \n                             <label for="default_workflow_id"\n-                                   i18n:translate="label_default_workflow">\n+                                  class="form-label"\n+                                  i18n:translate="label_default_workflow">\n                                 Default Workflow\n                             </label>\n \n-                            <div class="formHelp"\n-                                 i18n:translate="help_default_workflow_for_types">\n-                                Default workflow for content types.\n-                            </div>\n-\n                             <select id="select_workflow"\n+                                    class="form-select"\n                                     name="default_workflow_id">\n \n                                 <option tal:repeat="wf wf_list"\n@@ -126,60 +127,66 @@\n                                     example_workflow\n                                 </option>\n                             </select>\n+\n+                            <div class="form-text"\n+                                 i18n:translate="help_default_workflow_for_types">\n+                                Default workflow for content types.\n+                            </div>\n                         </div>\n \n-                        <div class="field">\n+                        <div class="mb-3" \n+                          summary="Workflow to content type mapping."\n+                          i18n:attributes="summary summary_workflow_type_mapping;">\n \n-                            <label for="workflow_id"\n-                                   i18n:translate="label_workflow_by_type">\n+                            <label for="workflow_id" class="form-label"                             \n+                              summary="Workflow to content type mapping."\n+                              i18n:attributes="summary summary_workflow_type_mapping;"\n+                              i18n:translate="label_workflow_by_type">\n                                 Workflows by type\n                             </label>\n-\n-                            <div class="formHelp" i18n:translate="help_workflow_assign_all_types">\n-                                You can assign a workflow for all content types.\n+                            \n+                            <tal:ctype tal:repeat="ctype allowedContentTypes">\n+                              <div class="input-group mb-3"\n+                                tal:define="ctype_title ctype/Title;\n+                                ctype_id ctype/getId;\n+\n+                                chain python:wf_policy.getChainFor(ctype_id, managescreen=True) or (\'backward compatibility\',);">\n+                                <label class="input-group-text"\n+                                  for="select_workflow"\n+                                  tal:content="ctype_title"\n+                                  tal:attributes="for python: \'select_workflow_\' + ctype_id"\n+                                  i18n:translate="">Title</label>\n+                                <select id="select_workflow" name="workflow_id" class="form-select"\n+                                  tal:attributes="name string:wf.${ctype_id}:record;id python: \'select_workflow_\' + ctype_id" >\n+                                  <option value="acquisition"\n+                                    tal:attributes="selected python:\'selected\' if chain is None else None;"\n+                                    i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n+                                  <option value=""\n+                                    tal:attributes="selected python:\'selected\' if chain == () else None;"\n+                                    i18n:translate="label_mapping_no_workflow">No workflow</option>\n+\n+                                  <option value="(Default)"\n+                                    tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n+                                    i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n+                                  <option tal:repeat="wf wf_list"\n+                                    tal:attributes="value wf/id;\n+                                      selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n+                                    tal:content="wf/title"\n+                                    i18n:domain="plone"\n+                                    i18n:translate="">workflow_id</option>\n+                                </select>\n+                              </div>\n+                            </tal:ctype>                            \n+\n+                            <div class="form-text" i18n:translate="help_workflow_assign_all_types">\n+                              You can assign a workflow for all content types.\n                             </div>\n-\n-                            <table class="field"\n-                                   summary="Workflow to content type mapping."\n-                                   i18n:attributes="summary summary_workflow_type_mapping;">\n-                                <tal:ctype tal:repeat="ctype allowedContentTypes">\n-                                    <tr tal:define="ctype_title ctype/Title;\n-                                                    ctype_id ctype/getId;\n-                                                    chain python:wf_policy.getChainFor(ctype_id, managescreen=True) or (\'backward compatibility\',);\n-                                                    ">\n-                                        <td valign="top"\n-                                            tal:content="ctype_title"\n-                                            i18n:translate="">\n-                                            Title\n-                                        </td>\n-                                        <td valign="top">\n-                                            <select id="select_workflow" name="workflow_id"\n-                                                    tal:attributes="name string:wf.${ctype_id}:record;" >\n-                                                <option value="acquisition"\n-                                                        tal:attributes="selected python:\'selected\' if chain is None else None;"\n-                                                        i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n-                                                <option value=""\n-                                                        tal:attributes="selected python:\'selected\' if chain == () else None;"\n-                                                        i18n:translate="label_mapping_no_workflow">No workflow</option>\n-\n-                                                <option value="(Default)"\n-                                                        tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n-                                                        i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n-                                                <option tal:repeat="wf wf_list"\n-                                                        tal:attributes="value wf/id;\n-                                                                        selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n-                                                        tal:content="wf/title"\n-                                                        i18n:domain="plone"\n-                                                        i18n:translate="">workflow_id</option>\n-                                            </select>\n-                                        </td>\n-                                    </tr>\n-                                </tal:ctype>\n-                            </table>\n+                            \n                             <input type="hidden" value="" name="wfpid" tal:attributes="value wfpid" />\n+\n                         </div>\n                         <div class="formControls">\n-                            <input class="context"\n+                            <input class="btn btn-primary"\n                                    type="submit"\n                                    name="submit"\n                                    value="Save"\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-13T23:58:42+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/fc3630742dc2f93e63a068223abbe92b796423e6

Add Message

Files changed:
A news/41.bugfix

b'diff --git a/news/41.bugfix b/news/41.bugfix\nnew file mode 100644\nindex 0000000..a453c42\n--- /dev/null\n+++ b/news/41.bugfix\n@@ -0,0 +1,2 @@\n+Update Markup in Page Templates, made it ready for Plone 6 with Bootstrap 5\n+[1letter]\n\\ No newline at end of file\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-14T07:39:53+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/21f42b64c0426a5e99595690d2f4e78b53ba9453

Merge branch 'master' into 1letter/bs5

Files changed:
M CHANGES.rst
M setup.py
D news/33.bugfix

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3f84401..2bc03b4 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+3.0.0a2 (2022-05-14)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Really remove the old icon from the skin layer, emptying it.\n+  [maurits] (#33)\n+\n+\n 3.0.0a1 (2022-01-25)\n --------------------\n \ndiff --git a/news/33.bugfix b/news/33.bugfix\ndeleted file mode 100644\nindex d6e5d9e..0000000\n--- a/news/33.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Really remove the old icon from the skin layer, emptying it.\n-[maurits]\ndiff --git a/setup.py b/setup.py\nindex c39cef9..fa62bce 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,6 @@\n from setuptools import setup, find_packages\n \n-version = '3.0.0a2.dev0'\n+version = '3.0.0a3.dev0'\n \n \n setup(\n"

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-14T08:26:08+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/0edee139c444959b11e9abb640b66fce19130e87

Update .gitignore

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex f76ed74..a0a211f 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -17,6 +17,9 @@ develop-eggs\n .installed.cfg\n lib\n lib64\n+venv\n+local.cfg\n+src-mrd\n \n # Installer logs\n pip-log.txt\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-14T09:55:00+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/4d049ab92c2a4050d76ae0980634fcde8628037c

Add infrastructure

- add plone 6 buildout based on plonecli template
- can used for local tests

Files changed:
A base.cfg
A buildout.cfg
A constraints.txt
A requirements.txt
A test_plone60.cfg
M setup.cfg

b"diff --git a/base.cfg b/base.cfg\nnew file mode 100644\nindex 0000000..f327c31\n--- /dev/null\n+++ b/base.cfg\n@@ -0,0 +1,111 @@\n+[buildout]\n+show-picked-versions = true\n+extensions =\n+    mr.developer\n+\n+parts =\n+    instance\n+    test\n+    code-analysis\n+    coverage\n+    test-coverage\n+    createcoverage\n+    releaser\n+    i18ndude\n+    omelette\n+    robot\n+    plone-helper-scripts\n+    vscode\n+\n+develop = .\n+\n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    Products.CMFPlacefulWorkflow [test]\n+\n+[vscode]\n+recipe = collective.recipe.vscode\n+eggs = ${instance:eggs}\n+autocomplete-use-omelette = True\n+\n+[code-analysis]\n+recipe = plone.recipe.codeanalysis\n+pre-commit-hook = True\n+directory = ${buildout:directory}/Products\n+return-status-codes = False\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${instance:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ['TZ'] = 'UTC'\n+defaults = ['-s', 'Products.CMFPlacefulWorkflow', '--auto-color', '--auto-progress']\n+\n+\n+[coverage]\n+recipe = zc.recipe.egg\n+eggs = coverage\n+\n+\n+[test-coverage]\n+recipe = collective.recipe.template\n+input = inline:\n+    #!/bin/bash\n+    export TZ=UTC\n+    ${buildout:directory}/bin/coverage run bin/test $*\n+    ${buildout:directory}/bin/coverage html\n+    ${buildout:directory}/bin/coverage report -m --fail-under=90\n+    # Fail (exit status 1) if coverage returns exit status 2 (this happens\n+    # when test coverage is below 100%.\n+output = ${buildout:directory}/bin/test-coverage\n+mode = 755\n+\n+\n+[createcoverage]\n+recipe = zc.recipe.egg\n+eggs = createcoverage\n+\n+\n+[robot]\n+recipe = zc.recipe.egg\n+eggs =\n+    ${test:eggs}\n+    plone.app.robotframework[debug,reload]\n+\n+\n+[releaser]\n+recipe = zc.recipe.egg\n+eggs = zest.releaser\n+\n+\n+[i18ndude]\n+recipe = zc.recipe.egg\n+eggs = i18ndude\n+\n+[plone-helper-scripts]\n+recipe = zc.recipe.egg\n+eggs =\n+   Products.CMFPlone\n+   ${instance:eggs}\n+interpreter = zopepy\n+scripts =\n+   zopepy\n+   plone-compile-resources\n+\n+[versions]\n+# Don't use a released version of Products.CMFPlacefulWorkflow\n+Products.CMFPlacefulWorkflow =\n\\ No newline at end of file\ndiff --git a/buildout.cfg b/buildout.cfg\nnew file mode 100644\nindex 0000000..d7db038\n--- /dev/null\n+++ b/buildout.cfg\n@@ -0,0 +1,5 @@\n+[buildout]\n+\n+# use this extend one of the buildout configuration:\n+extends =\n+    test_plone60.cfg\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 0000000..7d6e997\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1,11 @@\n+-c https://dist.plone.org/release/6.0.0a4/requirements.txt\n+\n+# requirements coredev buildout with es6 includes\n+# setuptools == 59.8.0\n+# zc.buildout == 3.0.0rc2\n+# pip == 22.0.4\n+# wheel == 0.37.1\n+\n+isort>=5\n+black==22.3.0\n+flake8>=4.0.1\n\\ No newline at end of file\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..3ee890e\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,4 @@\n+-c constraints.txt\n+setuptools\n+zc.buildout\n+tox\ndiff --git a/setup.cfg b/setup.cfg\nindex a6c51c7..046ff96 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,3 +7,25 @@ create-wheel = yes\n # When Python 2-3 compatible:\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+profile = black\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\n+\n+[flake8]\n+# black compatible flake8 rules:\n+ignore =\n+    W503,\n+    C812,\n+    E501\n+    T001\n+    C813\n+# E203, E266\n+exclude = bootstrap.py,docs,*.egg.,omelette\n+max-line-length = 88\n+max-complexity = 18\n+select = B,C,E,F,W,T4,B9\n+\n+builtins = unicode,basestring\n\\ No newline at end of file\ndiff --git a/test_plone60.cfg b/test_plone60.cfg\nnew file mode 100644\nindex 0000000..b9a970d\n--- /dev/null\n+++ b/test_plone60.cfg\n@@ -0,0 +1,14 @@\n+[buildout]\n+\n+extends =\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\n+update-versions-file = test_plone60.cfg\n+\n+[versions]\n+createcoverage = 1.5\n+watchdog = 2.1.6\n+# Added by buildout at 2022-06-14 08:45:11.861188\n+plone.recipe.codeanalysis = 3.0.1\n"

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-14T09:56:14+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/2fa954d588bc1b1747d0bf91ce1c36fd65b4855c

Housekeeping

- isort, black, flake8

Files changed:
M Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py
M Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py
M Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py
M Products/CMFPlacefulWorkflow/__init__.py
M Products/CMFPlacefulWorkflow/adapter.py
M Products/CMFPlacefulWorkflow/browser/views.py
M Products/CMFPlacefulWorkflow/exportimport/__init__.py
M Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py
M Products/CMFPlacefulWorkflow/global_symbols.py
M Products/CMFPlacefulWorkflow/interfaces.py
M Products/CMFPlacefulWorkflow/permissions.py
M Products/CMFPlacefulWorkflow/setuphandlers.py
M Products/CMFPlacefulWorkflow/testing.py
M Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py
M Products/CMFPlacefulWorkflow/tests/__init__.py
M Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py
M Products/CMFPlacefulWorkflow/tests/test_configlet.py
M Products/CMFPlacefulWorkflow/tests/test_doctests.py
M Products/CMFPlacefulWorkflow/upgrades.py
M Products/__init__.py

b'diff --git a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\nindex c66ca70..760d18d 100644\n--- a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n+++ b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n@@ -20,9 +20,9 @@\n """\n \n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_base\n-from AccessControl.class_init import InitializeClass\n from os.path import join as path_join\n from Persistence import PersistentMapping\n from Products.CMFCore.utils import getToolByName\n@@ -37,15 +37,15 @@\n import six\n \n \n-DEFAULT_CHAIN = \'(Default)\'\n-_MARKER = \'_MARKER\'\n+DEFAULT_CHAIN = "(Default)"\n+_MARKER = "_MARKER"\n \n \n @implementer(IWorkflowPolicyDefinition)\n class DefaultWorkflowPolicyDefinition(SimpleItemWithProperties):\n \n-    meta_type = \'WorkflowPolicy\'\n-    id = \'default_workflow_policy\'\n+    meta_type = "WorkflowPolicy"\n+    id = "default_workflow_policy"\n     _isAWorkflowPolicy = 1\n \n     _chains_by_type = None  # PersistentMapping\n@@ -53,64 +53,59 @@ class DefaultWorkflowPolicyDefinition(SimpleItemWithProperties):\n \n     security = ClassSecurityInfo()\n \n-    manage_options = (\n-        {\'label\': \'Workflows\', \'action\': \'manage_main\'},\n-    )\n+    manage_options = ({"label": "Workflows", "action": "manage_main"},)\n     #\n     #   ZMI methods\n     #\n \n-    security.declareProtected(ManageWorkflowPolicies, \'_manage_workflows\')\n-    _manage_workflows = PageTemplateFile(path_join(\'www\', \'define_local_workflow_policy\'),\n-                                         globals(),\n-                                         __name__=\'manage_main\')\n+    security.declareProtected(ManageWorkflowPolicies, "_manage_workflows")\n+    _manage_workflows = PageTemplateFile(\n+        path_join("www", "define_local_workflow_policy"),\n+        globals(),\n+        __name__="manage_main",\n+    )\n \n     def __init__(self, id):\n         self.id = id\n-        self.title = \'\'\n-        self.description = \'\'\n+        self.title = ""\n+        self.description = ""\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getId\')\n+    security.declareProtected(ManageWorkflowPolicies, "getId")\n \n     def getId(self):\n-        """ Return the id\n-        """\n+        """Return the id"""\n         return self.id\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getTitle\')\n+    security.declareProtected(ManageWorkflowPolicies, "getTitle")\n \n     def getTitle(self):\n-        """ Return the title\n-        """\n-        title = getattr(self, \'title\', \'\')\n+        """Return the title"""\n+        title = getattr(self, "title", "")\n         return title\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getDescription\')\n+    security.declareProtected(ManageWorkflowPolicies, "getDescription")\n \n     def getDescription(self):\n-        """ Return the description\n-        """\n-        description = getattr(self, \'description\', \'\')\n+        """Return the description"""\n+        description = getattr(self, "description", "")\n         return description\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setTitle\')\n+    security.declareProtected(ManageWorkflowPolicies, "setTitle")\n \n     def setTitle(self, title):\n-        """ Set the title\n-        """\n+        """Set the title"""\n         self.title = title\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setDescription\')\n+    security.declareProtected(ManageWorkflowPolicies, "setDescription")\n \n     def setDescription(self, description):\n-        """ Set the description\n-        """\n+        """Set the description"""\n         self.description = description\n \n-    security.declareProtected(ManageWorkflowPolicies, \'manage_main\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_main")\n \n     def manage_main(self, REQUEST, manage_tabs_message=None):\n-        """ Show a management screen for changing type to workflow connections\n+        """Show a management screen for changing type to workflow connections\n \n         Display \'None\' if there\'s no chain for a type.\n         """\n@@ -124,28 +119,32 @@ def manage_main(self, REQUEST, manage_tabs_message=None):\n                 title = None\n \n             if cbt is not None and id in cbt:\n-                chain = \', \'.join(cbt[id])\n+                chain = ", ".join(cbt[id])\n             else:\n-                chain = \'None\'\n-\n-            types_info.append({\n-                \'id\': id,\n-                \'title\': title,\n-                \'chain\': chain,\n-                # \'cbt\': repr(cbt.get(id)),  # for debug purpose\n-            })\n+                chain = "None"\n+\n+            types_info.append(\n+                {\n+                    "id": id,\n+                    "title": title,\n+                    "chain": chain,\n+                    # \'cbt\': repr(cbt.get(id)),  # for debug purpose\n+                }\n+            )\n         return self._manage_workflows(\n             REQUEST,\n-            default_chain=\', \'.join(self._default_chain or ()),\n+            default_chain=", ".join(self._default_chain or ()),\n             types_info=types_info,\n-            management_view=\'Workflows\',\n-            manage_tabs_message=manage_tabs_message)\n+            management_view="Workflows",\n+            manage_tabs_message=manage_tabs_message,\n+        )\n \n-    security.declareProtected(ManageWorkflowPolicies, \'manage_changeWorkflows\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_changeWorkflows")\n \n     def manage_changeWorkflows(\n-            self, title, description, default_chain, props=None, REQUEST=None):\n-        """ Changes which workflows apply to objects of which type\n+        self, title, description, default_chain, props=None, REQUEST=None\n+    ):\n+        """Changes which workflows apply to objects of which type\n \n         A chain equal to \'None\' is empty we remove the entry.\n         """\n@@ -161,10 +160,10 @@ def manage_changeWorkflows(\n         # Set up the chains by type.\n         for t in ti:\n             id = t.getId()\n-            field_name = \'chain_%s\' % id\n+            field_name = "chain_%s" % id\n             chain = props.get(field_name, DEFAULT_CHAIN).strip()\n \n-            if chain == \'None\':\n+            if chain == "None":\n                 if cbt.get(id, _MARKER) is not _MARKER:\n                     self.delChain(id)\n                 continue\n@@ -174,19 +173,20 @@ def manage_changeWorkflows(\n         # Set up the default chain.\n         self.setDefaultChain(default_chain)\n         if REQUEST is not None:\n-            return self.manage_main(REQUEST, manage_tabs_message=\'Changed.\')\n+            return self.manage_main(REQUEST, manage_tabs_message="Changed.")\n+\n     manage_changeWorkflows = postonly(manage_changeWorkflows)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setChainForPortalTypes\')\n+    security.declareProtected(ManageWorkflowPolicies, "setChainForPortalTypes")\n \n     def setChainForPortalTypes(self, pt_names, chain, REQUEST=None):\n-        """ Set a chain for portal types.\n-        """\n+        """Set a chain for portal types."""\n         for portal_type in pt_names:\n             self.setChain(portal_type, chain)\n+\n     setChainForPortalTypes = postonly(setChainForPortalTypes)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getChainFor\')\n+    security.declareProtected(ManageWorkflowPolicies, "getChainFor")\n \n     def getChainFor(self, ob, managescreen=False):\n         """Returns the chain that applies to the object.\n@@ -202,7 +202,7 @@ def getChainFor(self, ob, managescreen=False):\n         cbt = self._chains_by_type\n         if isinstance(ob, six.string_types):\n             pt = ob\n-        elif hasattr(aq_base(ob), \'_getPortalTypeName\'):\n+        elif hasattr(aq_base(ob), "_getPortalTypeName"):\n             pt = ob._getPortalTypeName()\n         else:\n             pt = None\n@@ -216,9 +216,9 @@ def getChainFor(self, ob, managescreen=False):\n \n         # Backwards compatibility: before chain was a string, not a list\n         if chain is not _MARKER and isinstance(chain, six.string_types):\n-            chain = map(lambda x: x.strip(), chain.split(\',\'))\n+            chain = map(lambda x: x.strip(), chain.split(","))\n \n-        Log.debug(\'Chain founded in policy %s\', chain)\n+        Log.debug("Chain founded in policy %s", chain)\n         if chain is _MARKER or chain is None:\n             return None\n         elif len(chain) == 1 and chain[0] == DEFAULT_CHAIN:\n@@ -233,56 +233,59 @@ def getChainFor(self, ob, managescreen=False):\n \n         return chain\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setDefaultChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "setDefaultChain")\n \n     def setDefaultChain(self, default_chain, REQUEST=None):\n-        """ Sets the default chain for this tool. """\n-        wftool = getToolByName(self, \'portal_workflow\')\n+        """Sets the default chain for this tool."""\n+        wftool = getToolByName(self, "portal_workflow")\n \n         if isinstance(default_chain, six.string_types):\n-            default_chain = map(lambda x: x.strip(), default_chain.split(\',\'))\n+            default_chain = map(lambda x: x.strip(), default_chain.split(","))\n         ids = []\n         for wf_id in default_chain:\n             if wf_id:\n                 if not wftool.getWorkflowById(wf_id):\n-                    raise ValueError("\'%s\' is not a workflow ID.\\nchain: %s" % (\n-                        wf_id, repr(default_chain)))\n+                    raise ValueError(\n+                        "\'%s\' is not a workflow ID.\\nchain: %s"\n+                        % (wf_id, repr(default_chain))\n+                    )\n                 ids.append(wf_id)\n \n         self._default_chain = tuple(ids)\n+\n     setDefaultChain = postonly(setDefaultChain)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getDefaultChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "getDefaultChain")\n \n     def getDefaultChain(self, ob):\n-        """ Returns the default chain."""\n+        """Returns the default chain."""\n         if self._default_chain is None:\n-            wf_tool = getToolByName(self, \'portal_workflow\')\n+            wf_tool = getToolByName(self, "portal_workflow")\n             return wf_tool.getDefaultChainFor(ob)\n         else:\n             return self._default_chain\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "setChain")\n \n     def setChain(self, portal_type, chain, REQUEST=None):\n         """Set the chain for a portal type.\n \n-           @type chain: tuple of strings or None\n-           @param chain: A tuple of workflow ids to be set for the portal type.\n-                         A few special values exsist:\n-                           - C{None}: Acquire chain from a policy above,\n-                                      ultimatly from the portal workflow settings.\n-                           - C{()} (empty tuple): No workflow for this type.\n-                           - C{(\'default\',)}: Use the configured default workflow.\n+        @type chain: tuple of strings or None\n+        @param chain: A tuple of workflow ids to be set for the portal type.\n+                      A few special values exsist:\n+                        - C{None}: Acquire chain from a policy above,\n+                                   ultimatly from the portal workflow settings.\n+                        - C{()} (empty tuple): No workflow for this type.\n+                        - C{(\'default\',)}: Use the configured default workflow.\n         """\n         # Verify input data\n         if portal_type not in [pt.id for pt in self._listTypeInfo()]:\n             raise ValueError("\'%s\' is not a valid portal type." % portal_type)\n \n         if isinstance(chain, six.string_types):\n-            chain = [i.strip() for i in chain.split(\',\')]\n+            chain = [i.strip() for i in chain.split(",")]\n \n-        wftool = getToolByName(self, \'portal_workflow\')\n+        wftool = getToolByName(self, "portal_workflow")\n         cbt = self._chains_by_type\n         if cbt is None:\n             self._chains_by_type = cbt = PersistentMapping()\n@@ -295,36 +298,37 @@ def setChain(self, portal_type, chain, REQUEST=None):\n             cbt[portal_type] = chain\n         else:\n             for wf_id in chain:\n-                if wf_id != \'\' and not wftool.getWorkflowById(wf_id):\n-                    raise ValueError("\'%s\' is not a workflow ID.\\nchain: %s" % (\n-                        wf_id, repr(chain)))\n+                if wf_id != "" and not wftool.getWorkflowById(wf_id):\n+                    raise ValueError(\n+                        "\'%s\' is not a workflow ID.\\nchain: %s" % (wf_id, repr(chain))\n+                    )\n             cbt[portal_type] = tuple(chain)\n+\n     setChain = postonly(setChain)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'delChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "delChain")\n \n     def delChain(self, portal_type, REQUEST=None):\n         """Delete the chain for a portal type."""\n         if portal_type in self._chains_by_type:\n             del self._chains_by_type[portal_type]\n+\n     delChain = postonly(delChain)\n \n     #\n     #   Helper methods\n     #\n-    security.declarePrivate(\'_listTypeInfo\')\n+    security.declarePrivate("_listTypeInfo")\n \n     def _listTypeInfo(self):\n-        """ List the portal types which are available.\n-        """\n-        pt = getToolByName(self, \'portal_types\', None)\n+        """List the portal types which are available."""\n+        pt = getToolByName(self, "portal_types", None)\n         if pt is None:\n             return ()\n         else:\n             return pt.listTypeInfo()\n \n+\n InitializeClass(DefaultWorkflowPolicyDefinition)\n \n-addWorkflowPolicyFactory(\n-    DefaultWorkflowPolicyDefinition,\n-    title=\'Simple Policy\')\n+addWorkflowPolicyFactory(DefaultWorkflowPolicyDefinition, title="Simple Policy")\ndiff --git a/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py b/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py\nindex 3973d26..c48caf7 100644\n--- a/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py\n+++ b/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py\n@@ -21,29 +21,30 @@\n \n from AccessControl import ClassSecurityInfo\n from AccessControl import Unauthorized\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from OFS.Folder import Folder\n from OFS.ObjectManager import IFAwareObjectManager\n+from os.path import join as path_join\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.permissions import View\n-from Products.CMFCore.utils import ImmutableId\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFCore.utils import ImmutableId\n from Products.CMFCore.utils import registerToolInterface\n+from Products.CMFPlacefulWorkflow.interfaces import IPlacefulWorkflowTool\n from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from os.path import join as path_join\n from zope.interface import implementer\n-from Products.CMFPlacefulWorkflow.interfaces import IPlacefulWorkflowTool\n+\n \n WorkflowPolicyConfig_id = ".wf_policy_config"\n _MARKER = object()\n \n \n-def safeEditProperty(obj, key, value, data_type=\'string\'):\n-    """ An add or edit function, surprisingly useful :) """\n+def safeEditProperty(obj, key, value, data_type="string"):\n+    """An add or edit function, surprisingly useful :)"""\n     if obj.hasProperty(key):\n         obj._updateProperty(key, value)\n     else:\n@@ -54,12 +55,12 @@ def addPlacefulWorkflowTool(self, REQUEST={}):\n     """\n     Factory method for the Placeful Workflow Tool\n     """\n-    id = \'portal_placeful_workflow\'\n+    id = "portal_placeful_workflow"\n     pwt = PlacefulWorkflowTool()\n     self._setObject(id, pwt, set_owner=0)\n     getattr(self, id)._post_init()\n     if REQUEST:\n-        return REQUEST.RESPONSE.redirect(self.absolute_url() + \'/manage_main\')\n+        return REQUEST.RESPONSE.redirect(self.absolute_url() + "/manage_main")\n \n \n @implementer(IPlacefulWorkflowTool)\n@@ -68,8 +69,8 @@ class PlacefulWorkflowTool(ImmutableId, Folder, IFAwareObjectManager):\n     PlacefulWorkflow Tool\n     """\n \n-    id = \'portal_placeful_workflow\'\n-    meta_type = \'Placeful Workflow Tool\'\n+    id = "portal_placeful_workflow"\n+    meta_type = "Placeful Workflow Tool"\n \n     _actions = []\n \n@@ -79,63 +80,57 @@ class PlacefulWorkflowTool(ImmutableId, Folder, IFAwareObjectManager):\n \n     def __init__(self):\n         # Properties to be edited by site manager\n-        safeEditProperty(self, \'max_chain_length\', 1, data_type=\'int\')\n+        safeEditProperty(self, "max_chain_length", 1, data_type="int")\n \n     _manage_addWorkflowPolicyForm = PageTemplateFile(\n-        path_join(\'www\', \'add_workflow_policy\'), globals())\n+        path_join("www", "add_workflow_policy"), globals()\n+    )\n \n-    security.declareProtected(\n-        ManageWorkflowPolicies,\n-        \'manage_addWorkflowPolicyForm\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_addWorkflowPolicyForm")\n \n     def manage_addWorkflowPolicyForm(self, REQUEST):\n-        """ Form for adding workflow policies.\n-        """\n+        """Form for adding workflow policies."""\n         wfpt = []\n         for key in _workflow_policy_factories.keys():\n             wfpt.append(key)\n         wfpt.sort()\n-        return self._manage_addWorkflowPolicyForm(\n-            REQUEST, workflow_policy_types=wfpt)\n-\n-    security.declareProtected(\n-        ManageWorkflowPolicies,\n-        \'manage_addWorkflowPolicy\')\n-\n-    def manage_addWorkflowPolicy(self, id,\n-                                 workflow_policy_type=\'default_workflow_policy (Simple Policy)\',\n-                                 duplicate_id=\'empty\',\n-                                 RESPONSE=None,\n-                                 REQUEST=None):\n-        """ Adds a workflow policies from the registered types.\n-        """\n-        if id in (\'empty\', \'portal_workflow\'):\n-            raise ValueError(\n-                "\'%s\' is reserved. Please choose another id." %\n-                id)\n+        return self._manage_addWorkflowPolicyForm(REQUEST, workflow_policy_types=wfpt)\n+\n+    security.declareProtected(ManageWorkflowPolicies, "manage_addWorkflowPolicy")\n+\n+    def manage_addWorkflowPolicy(\n+        self,\n+        id,\n+        workflow_policy_type="default_workflow_policy (Simple Policy)",\n+        duplicate_id="empty",\n+        RESPONSE=None,\n+        REQUEST=None,\n+    ):\n+        """Adds a workflow policies from the registered types."""\n+        if id in ("empty", "portal_workflow"):\n+            raise ValueError("\'%s\' is reserved. Please choose another id." % id)\n \n         factory = _workflow_policy_factories[workflow_policy_type]\n         ob = factory(id)\n         self._setObject(id, ob)\n \n-        if duplicate_id and duplicate_id != \'empty\':\n-            types_tool = getToolByName(self, \'portal_types\')\n+        if duplicate_id and duplicate_id != "empty":\n+            types_tool = getToolByName(self, "portal_types")\n             new_wp = self.getWorkflowPolicyById(id)\n \n-            if duplicate_id == \'portal_workflow\':\n-                wf_tool = getToolByName(self, \'portal_workflow\')\n+            if duplicate_id == "portal_workflow":\n+                wf_tool = getToolByName(self, "portal_workflow")\n \n                 new_wp.setDefaultChain(wf_tool._default_chain)\n \n                 for ptype in types_tool.objectIds():\n-                    chain = wf_tool.getChainForPortalType(\n-                        ptype, managescreen=True)\n+                    chain = wf_tool.getChainForPortalType(ptype, managescreen=True)\n                     if chain:\n                         new_wp.setChain(ptype, chain)\n \n             else:\n                 orig_wp = self.getWorkflowPolicyById(duplicate_id)\n-                new_wp.setDefaultChain(orig_wp.getDefaultChain(\'Document\'))\n+                new_wp.setDefaultChain(orig_wp.getDefaultChain("Document"))\n \n                 for ptype in types_tool.objectIds():\n                     chain = orig_wp.getChainFor(ptype, managescreen=True)\n@@ -143,91 +138,97 @@ def manage_addWorkflowPolicy(self, id,\n                         new_wp.setChain(ptype, chain)\n \n         if RESPONSE is not None:\n-            RESPONSE.redirect(self.absolute_url() +\n-                              \'/manage_main?management_view=Contents\')\n+            RESPONSE.redirect(\n+                self.absolute_url() + "/manage_main?management_view=Contents"\n+            )\n+\n     manage_addWorkflowPolicy = postonly(manage_addWorkflowPolicy)\n \n     def all_meta_types(self):\n         return (\n-            {\'name\': \'WorkflowPolicy\',\n-             \'action\': \'manage_addWorkflowPolicyForm\',\n-             \'permission\': ManageWorkflowPolicies}, )\n+            {\n+                "name": "WorkflowPolicy",\n+                "action": "manage_addWorkflowPolicyForm",\n+                "permission": ManageWorkflowPolicies,\n+            },\n+        )\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getWorkflowPolicyById\')\n+    security.declareProtected(ManageWorkflowPolicies, "getWorkflowPolicyById")\n \n     def getWorkflowPolicyById(self, wfp_id):\n-        """ Retrieve a given workflow policy.\n-        """\n+        """Retrieve a given workflow policy."""\n         if wfp_id is None:\n             return None\n         policy = getattr(self.aq_explicit, wfp_id, _MARKER)\n         if policy is not _MARKER:\n-            if getattr(policy, \'_isAWorkflowPolicy\', 0):\n+            if getattr(policy, "_isAWorkflowPolicy", 0):\n                 return policy\n         return None\n \n-    security.declarePublic(\'isValidPolicyName\')\n+    security.declarePublic("isValidPolicyName")\n \n     def isValidPolicyName(self, policy_id):\n-        """ Return True if a policy exist\n-        """\n+        """Return True if a policy exist"""\n         return self.getWorkflowPolicyById(policy_id) is not None\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getWorkflowPolicies\')\n+    security.declareProtected(ManageWorkflowPolicies, "getWorkflowPolicies")\n \n     def getWorkflowPolicies(self):\n-        """ Return the list of workflow policies.\n-        """\n+        """Return the list of workflow policies."""\n         wfps = []\n         for obj_name, obj in self.objectItems():\n-            if getattr(obj, \'_isAWorkflowPolicy\', 0):\n+            if getattr(obj, "_isAWorkflowPolicy", 0):\n                 wfps.append(obj)\n         return tuple(wfps)\n \n-    security.declarePublic(\'getWorkflowPolicyIds\')\n+    security.declarePublic("getWorkflowPolicyIds")\n \n     def getWorkflowPolicyIds(self):\n-        """ Return the list of workflow policy ids.\n-        """\n+        """Return the list of workflow policy ids."""\n         wfp_ids = []\n \n         for obj_id, obj in self.objectItems():\n-            if getattr(obj, \'_isAWorkflowPolicy\', 0):\n+            if getattr(obj, "_isAWorkflowPolicy", 0):\n                 wfp_ids.append(obj_id)\n \n         return tuple(wfp_ids)\n \n-    security.declarePublic(\'getWorkflowPolicyInfos\')\n+    security.declarePublic("getWorkflowPolicyInfos")\n \n     def getWorkflowPolicyInfos(self):\n-        """ Return the list of workflow policy ids.\n-        """\n+        """Return the list of workflow policy ids."""\n         wfp_ids = []\n         for obj_id, obj in self.objectItems():\n-            if getattr(obj, \'_isAWorkflowPolicy\', 0):\n-                wfp_ids.append({\'id\': obj_id, \'title\': obj.title_or_id(),\n-                                \'description\': obj.description})\n+            if getattr(obj, "_isAWorkflowPolicy", 0):\n+                wfp_ids.append(\n+                    {\n+                        "id": obj_id,\n+                        "title": obj.title_or_id(),\n+                        "description": obj.description,\n+                    }\n+                )\n \n         return tuple(wfp_ids)\n \n-    security.declareProtected(View, \'getWorkflowPolicyConfig\')\n+    security.declareProtected(View, "getWorkflowPolicyConfig")\n \n     def getWorkflowPolicyConfig(self, ob):\n-        """ Return a local workflow configuration if it exist\n-        """\n+        """Return a local workflow configuration if it exist"""\n         if self.isSiteRoot(ob):\n             # Site root use portal_workflow tool as local policy\n             return None\n         if not _checkPermission(ManageWorkflowPolicies, ob):\n-            raise Unauthorized("You need %s permission on %s" % (\n-                ManageWorkflowPolicies, \'/\'.join(ob.getPhysicalPath())))\n+            raise Unauthorized(\n+                "You need %s permission on %s"\n+                % (ManageWorkflowPolicies, "/".join(ob.getPhysicalPath()))\n+            )\n \n         return getattr(ob.aq_explicit, WorkflowPolicyConfig_id, None)\n \n-    security.declareProtected(View, \'isSiteRoot\')\n+    security.declareProtected(View, "isSiteRoot")\n \n     def isSiteRoot(self, ob):\n-        """ Returns a boolean value indicating if the object is an ISiteRoot\n+        """Returns a boolean value indicating if the object is an ISiteRoot\n         or the default page of an ISiteRoot.\n         """\n         siteroot = ISiteRoot.providedBy(ob)\n@@ -235,8 +236,7 @@ def isSiteRoot(self, ob):\n             return True\n         parent = aq_parent(ob)\n         if ISiteRoot.providedBy(parent):\n-            if (getattr(ob, \'isPrincipiaFolderish\', False) and\n-                    ob.isPrincipiaFolderish):\n+            if getattr(ob, "isPrincipiaFolderish", False) and ob.isPrincipiaFolderish:\n                 # We are looking at a folder in the root\n                 return False\n             # We are at a non-folderish item in the root\n@@ -248,22 +248,20 @@ def _post_init(self):\n         _post_init(self) => called from manage_add method, acquired within ZODB (__init__ is not)\n         """\n         pass\n+\n     #\n     #   portal_workflow_policy implementation.\n     #\n \n     def getMaxChainLength(self):\n         """Return the max workflow chain length"""\n-        max_chain_length = self.getProperty(\'max_chain_length\')\n+        max_chain_length = self.getProperty("max_chain_length")\n         return max_chain_length\n \n     def setMaxChainLength(self, max_chain_length):\n         """Set the max workflow chain length"""\n-        safeEditProperty(\n-            self,\n-            \'max_chain_length\',\n-            max_chain_length,\n-            data_type=\'int\')\n+        safeEditProperty(self, "max_chain_length", max_chain_length, data_type="int")\n+\n \n _workflow_policy_factories = {}\n \n@@ -271,12 +269,12 @@ def setMaxChainLength(self, max_chain_length):\n def _makeWorkflowPolicyFactoryKey(factory, id=None, title=None):\n     # The factory should take one argument, id.\n     if id is None:\n-        id = getattr(factory, \'id\', \'\') or getattr(factory, \'meta_type\', \'\')\n+        id = getattr(factory, "id", "") or getattr(factory, "meta_type", "")\n     if title is None:\n-        title = getattr(factory, \'title\', \'\')\n+        title = getattr(factory, "title", "")\n     key = id\n     if title:\n-        key = key + \' (%s)\' % title\n+        key = key + " (%s)" % title\n     return key\n \n \n@@ -286,12 +284,13 @@ def addWorkflowPolicyFactory(factory, id=None, title=None):\n \n \n def _removeWorkflowPolicyFactory(factory, id=None, title=None):\n-    """ Make teardown in unitcase cleaner. """\n+    """Make teardown in unitcase cleaner."""\n     key = _makeWorkflowPolicyFactoryKey(factory, id, title)\n     try:\n         del _workflow_policy_factories[key]\n     except KeyError:\n         pass\n \n+\n InitializeClass(PlacefulWorkflowTool)\n-registerToolInterface(\'portal_placeful_workflow\', IPlacefulWorkflowTool)\n+registerToolInterface("portal_placeful_workflow", IPlacefulWorkflowTool)\ndiff --git a/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py b/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py\nindex dba854d..d0f70a3 100644\n--- a/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py\n+++ b/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py\n@@ -20,100 +20,109 @@\n """\n \n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n from os.path import join as path_join\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlacefulWorkflow.global_symbols import Log\n from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n-from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import WorkflowPolicyConfig_id  # noqa: E501\n+from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import (  # noqa: E501\n+    WorkflowPolicyConfig_id,\n+)\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n \n import six\n \n \n manage_addWorkflowPolicyConfigForm = PageTemplateFile(\n-    path_join(\'www\', \'add_workflow_policy_config_form\'), globals())\n+    path_join("www", "add_workflow_policy_config_form"), globals()\n+)\n \n \n def manage_addWorkflowPolicyConfig(self, REQUEST=None):\n-    \' add a Workflow Policy Configuratio into the system \'\n-    workflow_policy_in = \'\'\n-    workflow_policy_below = \'\'\n+    "add a Workflow Policy Configuratio into the system"\n+    workflow_policy_in = ""\n+    workflow_policy_below = ""\n     if REQUEST:\n-        workflow_policy_in = REQUEST.get(\'workflow_policy_in\', \'\')\n-        workflow_policy_below = REQUEST.get(\'workflow_policy_below\', \'\')\n+        workflow_policy_in = REQUEST.get("workflow_policy_in", "")\n+        workflow_policy_below = REQUEST.get("workflow_policy_below", "")\n \n     # create new workflow policy config\n     i = WorkflowPolicyConfig(workflow_policy_in, workflow_policy_below)\n     self._setObject(WorkflowPolicyConfig_id, i)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n+        REQUEST["RESPONSE"].redirect(self.absolute_url() + "/manage_main")\n \n \n class WorkflowPolicyConfig(SimpleItem):\n     """Workflow policy configuration"""\n-    meta_type = \'Workflow Policy Configuration\'\n+\n+    meta_type = "Workflow Policy Configuration"\n     index_html = None\n     security = ClassSecurityInfo()\n \n-    manage_main = PageTemplateFile(path_join(\'www\', \'manage_workflow_policy_config\'),\n-                                   globals(),\n-                                   __name__=\'manage_main\')\n+    manage_main = PageTemplateFile(\n+        path_join("www", "manage_workflow_policy_config"),\n+        globals(),\n+        __name__="manage_main",\n+    )\n \n-    manage_options = ((\n-        {\'icon\': \'\', \'label\': \'Edit\', \'action\': \'manage_main\', },\n+    manage_options = (\n+        {\n+            "icon": "",\n+            "label": "Edit",\n+            "action": "manage_main",\n+        },\n     ) + SimpleItem.manage_options\n-    )\n \n-    def __init__(self, workflow_policy_in=\'\', workflow_policy_below=\'\'):\n-        """Initialize a new MailHost instance """\n+    def __init__(self, workflow_policy_in="", workflow_policy_below=""):\n+        """Initialize a new MailHost instance"""\n         self.id = WorkflowPolicyConfig_id\n         self.title = "Workflow policy configuration"\n         self.setPolicyIn(workflow_policy_in)\n         self.setPolicyBelow(workflow_policy_below)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'manage_makeChanges\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_makeChanges")\n \n     def manage_makeChanges(self, workflow_policy_in, workflow_policy_below):\n-        """ Store the policies """\n+        """Store the policies"""\n         self.setPolicyIn(workflow_policy_in)\n         self.setPolicyBelow(workflow_policy_below)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyInId\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyInId")\n \n     def getPolicyInId(self):\n         return self.workflow_policy_in\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyBelowId\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyBelowId")\n \n     def getPolicyBelowId(self):\n         return self.workflow_policy_below\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyIn\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyIn")\n \n     def getPolicyIn(self):\n-        pwtool = getToolByName(self, \'portal_placeful_workflow\')\n+        pwtool = getToolByName(self, "portal_placeful_workflow")\n         return pwtool.getWorkflowPolicyById(self.getPolicyInId())\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyBelow\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyBelow")\n \n     def getPolicyBelow(self):\n-        pwtool = getToolByName(self, \'portal_placeful_workflow\')\n+        pwtool = getToolByName(self, "portal_placeful_workflow")\n         return pwtool.getWorkflowPolicyById(self.getPolicyBelowId())\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setPolicyIn\')\n+    security.declareProtected(ManageWorkflowPolicies, "setPolicyIn")\n \n     def setPolicyIn(self, policy, update_security=False):\n         if not isinstance(policy, six.string_types):\n             raise ValueError("Policy must be a six.string_types")\n         self.workflow_policy_in = policy\n         if update_security:\n-            wtool = getToolByName(self, \'portal_workflow\')\n+            wtool = getToolByName(self, "portal_workflow")\n             # wtool.updateRoleMappings(context)    # passing context is not possible :(\n             #\n             # Since WorkflowTool.updateRoleMappings()  from the line above supports\n@@ -123,28 +132,28 @@ def setPolicyIn(self, policy, update_security=False):\n             wfs = {}\n             for id in wtool.objectIds():\n                 wf = wtool.getWorkflowById(id)\n-                if hasattr(aq_base(wf), \'updateRoleMappingsFor\'):\n+                if hasattr(aq_base(wf), "updateRoleMappingsFor"):\n                     wfs[id] = wf\n             context = aq_parent(aq_inner(self))\n             wtool._recursiveUpdateRoleMappings(context, wfs)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setPolicyBelow\')\n+    security.declareProtected(ManageWorkflowPolicies, "setPolicyBelow")\n \n     def setPolicyBelow(self, policy, update_security=False):\n         if not isinstance(policy, six.string_types):\n             raise ValueError("Policy must be a string")\n         self.workflow_policy_below = policy\n         if update_security:\n-            wtool = getToolByName(self, \'portal_workflow\')\n+            wtool = getToolByName(self, "portal_workflow")\n             wfs = {}\n             for id in wtool.objectIds():\n                 wf = wtool.getWorkflowById(id)\n-                if hasattr(aq_base(wf), \'updateRoleMappingsFor\'):\n+                if hasattr(aq_base(wf), "updateRoleMappingsFor"):\n                     wfs[id] = wf\n             context = aq_parent(aq_inner(self))\n             wtool._recursiveUpdateRoleMappings(context, wfs)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPlacefulChainFor\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPlacefulChainFor")\n \n     def getPlacefulChainFor(self, portal_type, start_here=False):\n         """Get the chain for the given portal_type.\n@@ -158,15 +167,14 @@ def getPlacefulChainFor(self, portal_type, start_here=False):\n         In other case we test the \'below\' policy first and, if there\'s no chain\n         found, the \'in\' policy.\n         """\n-        workflow_tool = getToolByName(self, \'portal_placeful_workflow\')\n-        Log.debug(\'below policy id %s\', self.getPolicyBelowId())\n-        Log.debug(\'in policy id %s\', self.getPolicyInId())\n+        workflow_tool = getToolByName(self, "portal_placeful_workflow")\n+        Log.debug("below policy id %s", self.getPolicyBelowId())\n+        Log.debug("in policy id %s", self.getPolicyInId())\n \n         chain = None\n         policy = None\n         if not start_here:\n-            policy = workflow_tool.getWorkflowPolicyById(\n-                self.getPolicyBelowId())\n+            policy = workflow_tool.getWorkflowPolicyById(self.getPolicyBelowId())\n             if policy is not None:\n                 chain = policy.getChainFor(portal_type)\n \ndiff --git a/Products/CMFPlacefulWorkflow/__init__.py b/Products/CMFPlacefulWorkflow/__init__.py\nindex 4af4254..cf48f75 100644\n--- a/Products/CMFPlacefulWorkflow/__init__.py\n+++ b/Products/CMFPlacefulWorkflow/__init__.py\n@@ -26,34 +26,41 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-tools = (PlacefulWorkflowTool.PlacefulWorkflowTool, )\n+tools = (PlacefulWorkflowTool.PlacefulWorkflowTool,)\n \n \n # Initialization method\n def initialize(context):\n     utils.registerIcon(\n         DefaultWorkflowPolicy.DefaultWorkflowPolicyDefinition,\n-        \'images/workflow_policy.gif\',\n-        globals())\n+        "images/workflow_policy.gif",\n+        globals(),\n+    )\n \n     context.registerClass(\n         PlacefulWorkflowTool.PlacefulWorkflowTool,\n         meta_type="Placeful Workflow Tool",\n-        constructors=(PlacefulWorkflowTool.addPlacefulWorkflowTool, ),\n-        icon=\'tool.gif\')\n+        constructors=(PlacefulWorkflowTool.addPlacefulWorkflowTool,),\n+        icon="tool.gif",\n+    )\n \n     context.registerClass(\n         WorkflowPolicyConfig.WorkflowPolicyConfig,\n-        permission=\'Add Workflow Policy\',\n-        constructors=(WorkflowPolicyConfig.manage_addWorkflowPolicyConfigForm,\n-                      WorkflowPolicyConfig.manage_addWorkflowPolicyConfig),\n-        icon=\'www/WorkflowPolicyConfig_icon.gif\',\n+        permission="Add Workflow Policy",\n+        constructors=(\n+            WorkflowPolicyConfig.manage_addWorkflowPolicyConfigForm,\n+            WorkflowPolicyConfig.manage_addWorkflowPolicyConfig,\n+        ),\n+        icon="www/WorkflowPolicyConfig_icon.gif",\n     )\n \n-    utils.ToolInit(\'CMF Placeful Workflow Tool\', tools=tools, icon=\'tool.gif\'\n-                   ).initialize(context)\n+    utils.ToolInit(\n+        "CMF Placeful Workflow Tool", tools=tools, icon="tool.gif"\n+    ).initialize(context)\n+\n \n-ModuleSecurityInfo(\'Products.CMFPlacefulWorkflow\').declarePublic(\n-    \'CMFPlacefulWorkflowMessageFactory\')\n+ModuleSecurityInfo("Products.CMFPlacefulWorkflow").declarePublic(\n+    "CMFPlacefulWorkflowMessageFactory"\n+)\n \n-CMFPlacefulWorkflowMessageFactory = MessageFactory(\'cmfplacefulworkflow\')\n+CMFPlacefulWorkflowMessageFactory = MessageFactory("cmfplacefulworkflow")\ndiff --git a/Products/CMFPlacefulWorkflow/adapter.py b/Products/CMFPlacefulWorkflow/adapter.py\nindex d9abdf7..97f7b48 100644\n--- a/Products/CMFPlacefulWorkflow/adapter.py\n+++ b/Products/CMFPlacefulWorkflow/adapter.py\n@@ -50,7 +50,7 @@ def PlacefulWorkflowChain(ob, tool):\n         # portal_workflow\n         return ToolWorkflowChain(ob, tool)\n \n-    elif hasattr(aq_base(ob), \'getPortalTypeName\'):\n+    elif hasattr(aq_base(ob), "getPortalTypeName"):\n         portal_type = ob.getPortalTypeName()\n     else:\n         portal_type = None\n@@ -67,12 +67,13 @@ def PlacefulWorkflowChain(ob, tool):\n     # start_here is used to check \'In policy\': We check it only in the\n     # first folder\n     start_here = True\n-    portal = aq_base(getToolByName(tool, \'portal_url\').getPortalObject())\n+    portal = aq_base(getToolByName(tool, "portal_url").getPortalObject())\n     while chain is None and current_ob is not None:\n         if base_hasattr(current_ob, WorkflowPolicyConfig_id):\n             wfpolicyconfig = getattr(current_ob, WorkflowPolicyConfig_id)\n-            chain = wfpolicyconfig.getPlacefulChainFor(portal_type,\n-                                                       start_here=start_here)\n+            chain = wfpolicyconfig.getPlacefulChainFor(\n+                portal_type, start_here=start_here\n+            )\n             if chain is not None:\n                 return chain\n \ndiff --git a/Products/CMFPlacefulWorkflow/browser/views.py b/Products/CMFPlacefulWorkflow/browser/views.py\nindex 4899c43..4e81fce 100644\n--- a/Products/CMFPlacefulWorkflow/browser/views.py\n+++ b/Products/CMFPlacefulWorkflow/browser/views.py\n@@ -5,144 +5,157 @@\n \n \n class PlacefulWorkflowConfiguration(BrowserView):\n-    """Manage placeful wf for a item or container\n-    """\n+    """Manage placeful wf for a item or container"""\n \n     def __call__(self):\n         context = self.context\n         request = self.request\n \n-        policy_in = request.form.get(\'policy_in\', None)\n-        policy_below = request.form.get(\'policy_below\', None)\n+        policy_in = request.form.get("policy_in", None)\n+        policy_below = request.form.get("policy_below", None)\n \n         # Form submission will either have update_security as a key\n         # meaning user wants to do it OR no key at all. If this script\n         # is called directly, we use the parameter\n-        update_security = request.form.get(\'update_security\', None)\n+        update_security = request.form.get("update_security", None)\n \n-        if \'add_wp_for_type\' in request.form:\n-            context.manage_addProduct[\'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig(request)\n-            context.plone_utils.addPortalMessage(_(u\'Workflow policy configuration added.\'))\n-            return request.response.redirect(\'placeful_workflow_configuration\')\n+        if "add_wp_for_type" in request.form:\n+            context.manage_addProduct[\n+                "CMFPlacefulWorkflow"\n+            ].manage_addWorkflowPolicyConfig(request)\n+            context.plone_utils.addPortalMessage(\n+                _("Workflow policy configuration added.")\n+            )\n+            return request.response.redirect("placeful_workflow_configuration")\n \n         # This script is used for both the save and cancel button\n         cancel = False\n-        submit = request.form.get(\'submit\', None)\n+        submit = request.form.get("submit", None)\n         if not submit:\n             return self.index()\n \n-        if submit is not None and submit == \'Cancel\':\n+        if submit is not None and submit == "Cancel":\n             cancel = True\n-            message = _(u\'Configuration changes cancelled.\')\n-\n+            message = _("Configuration changes cancelled.")\n \n         if not cancel:\n-            tool = getToolByName(context, \'portal_placeful_workflow\')\n+            tool = getToolByName(context, "portal_placeful_workflow")\n             config = tool.getWorkflowPolicyConfig(context)\n             if not config:\n-                message = _(u\'No config in this folder.\')\n+                message = _("No config in this folder.")\n             else:\n-                if not tool.isValidPolicyName(policy_in) and not policy_in == \'\':\n+                if not tool.isValidPolicyName(policy_in) and not policy_in == "":\n                     raise AttributeError("%s is not a valid policy id" % policy_in)\n \n-                if not tool.isValidPolicyName(policy_below) and not policy_below == \'\':\n+                if not tool.isValidPolicyName(policy_below) and not policy_below == "":\n                     raise AttributeError("%s is not a valid policy id" % policy_below)\n \n                 config.setPolicyIn(policy_in, update_security)\n                 config.setPolicyBelow(policy_below, update_security)\n \n-                message = _(\'Changed policies.\')\n+                message = _("Changed policies.")\n \n         context.plone_utils.addPortalMessage(message)\n-        return request.response.redirect(\'placeful_workflow_configuration\')\n+        return request.response.redirect("placeful_workflow_configuration")\n \n \n class WorkflowPoliciesForm(BrowserView):\n-\n     def __call__(self):\n         context = self.context\n         request = self.request\n \n-        policy_ids = request.get(\'policy_ids\', [])\n-        policy_id = request.get(\'policy_id\', None)\n-        delete = request.get(\'delete\', None)\n-        add = request.get(\'add\', None)\n-        policy_duplicate_id = request.get(\'policy_duplicate_id\', \'empty\')\n+        policy_ids = request.get("policy_ids", [])\n+        policy_id = request.get("policy_id", None)\n+        delete = request.get("delete", None)\n+        add = request.get("add", None)\n+        policy_duplicate_id = request.get("policy_duplicate_id", "empty")\n \n-        pwtool = getToolByName(context, \'portal_placeful_workflow\')\n-        plone_utils = getToolByName(context, \'plone_utils\')\n+        pwtool = getToolByName(context, "portal_placeful_workflow")\n+        plone_utils = getToolByName(context, "plone_utils")\n \n         if delete and policy_ids:\n             for policy_id in policy_ids:\n                 if policy_id in pwtool.objectIds():\n-                    pwtool.manage_delObjects([policy_id, ])\n-            plone_utils.addPortalMessage(_(u\'Deleted Local Workflow Policy.\'), \'info\')\n-            return request.response.redirect(\'@@prefs_workflow_localpolicies_form\')\n+                    pwtool.manage_delObjects(\n+                        [\n+                            policy_id,\n+                        ]\n+                    )\n+            plone_utils.addPortalMessage(_("Deleted Local Workflow Policy."), "info")\n+            return request.response.redirect("@@prefs_workflow_localpolicies_form")\n \n         elif add:\n             if policy_id:\n-                pwtool.manage_addWorkflowPolicy(id=policy_id, duplicate_id=policy_duplicate_id)\n-                plone_utils.addPortalMessage(_(u\'Local Workflow Policy added.\'), \'info\')\n-                return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=\' + policy_id)\n+                pwtool.manage_addWorkflowPolicy(\n+                    id=policy_id, duplicate_id=policy_duplicate_id\n+                )\n+                plone_utils.addPortalMessage(_("Local Workflow Policy added."), "info")\n+                return request.response.redirect(\n+                    "@@prefs_workflow_policy_mapping?wfpid=" + policy_id\n+                )\n \n             else:\n-                plone_utils.addPortalMessage(_(u\'The policy Id is required.\'), \'error\')\n-                return request.response.redirect(\'@@prefs_workflow_localpolicies_form\')\n+                plone_utils.addPortalMessage(_("The policy Id is required."), "error")\n+                return request.response.redirect("@@prefs_workflow_localpolicies_form")\n \n         return self.index()\n \n+\n class WorkflowPolicyMapping(BrowserView):\n-    """\n-    """\n+    """ """\n \n     def __call__(self):\n         # First check that we have a policy id and that it exists.\n         # If we don\'t, return to the overview form.\n         request = self.request\n         context = self.context\n-        plone_utils = getToolByName(context, \'plone_utils\')\n-        wfpid = request.get(\'wfpid\', None)\n+        plone_utils = getToolByName(context, "plone_utils")\n+        wfpid = request.get("wfpid", None)\n         policy = None\n         if wfpid:\n-            tool = getToolByName(context, \'portal_placeful_workflow\')\n+            tool = getToolByName(context, "portal_placeful_workflow")\n             policy = tool.getWorkflowPolicyById(wfpid)\n         if policy is None:\n-            portal_url = getToolByName(context, \'portal_url\')()\n-            plone_utils.addPortalMessage(_(u\'No Policy selected.\'), \'error\')\n-            return request.response.redirect(portal_url + \'/@@prefs_workflow_localpolicies_form\')\n+            portal_url = getToolByName(context, "portal_url")()\n+            plone_utils.addPortalMessage(_("No Policy selected."), "error")\n+            return request.response.redirect(\n+                portal_url + "/@@prefs_workflow_localpolicies_form"\n+            )\n \n-        if not request.get(\'submit\', None):\n+        if not request.get("submit", None):\n             return self.index()\n \n-        title = request.get(\'title\', None)\n-        description = request.get(\'description\', None)\n-        default_workflow_id = request.get(\'default_workflow_id\', None)\n-        wf = request.get(\'wf\', None)\n+        title = request.get("title", None)\n+        description = request.get("description", None)\n+        default_workflow_id = request.get("default_workflow_id", None)\n+        wf = request.get("wf", None)\n \n         if title:\n             plone_utils.addPortalMessage(title)\n             policy.setTitle(title)\n         else:\n-            plone_utils.addPortalMessage(_(u\'Title is required.\'), \'error\')\n-            return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n+            plone_utils.addPortalMessage(_("Title is required."), "error")\n+            return request.response.redirect(\n+                "@@prefs_workflow_policy_mapping?wfpid=%s" % wfpid\n+            )\n \n         policy.setDescription(description)\n-        policy.setDefaultChain(\n-            default_chain=(default_workflow_id, ),\n-            REQUEST=request)\n+        policy.setDefaultChain(default_chain=(default_workflow_id,), REQUEST=request)\n \n         # for filtering special option values\n-        CHAIN_MAP = {\'acquisition\': None, \'\': ()}\n+        CHAIN_MAP = {"acquisition": None, "": ()}\n \n         for pt, wflow in list(wf.items()):\n             if wflow in CHAIN_MAP:\n                 chain = CHAIN_MAP[wflow]\n             else:\n-                chain = (wflow, )\n+                chain = (wflow,)\n             policy.setChain(portal_type=pt, chain=chain, REQUEST=request)\n \n-        wf_tool = getToolByName(context, \'portal_workflow\')\n+        wf_tool = getToolByName(context, "portal_workflow")\n         wf_tool.updateRoleMappings()\n \n-        plone_utils.addPortalMessage(_(u\'Changes to criteria saved.\'))\n-        return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n+        plone_utils.addPortalMessage(_("Changes to criteria saved."))\n+        return request.response.redirect(\n+            "@@prefs_workflow_policy_mapping?wfpid=%s" % wfpid\n+        )\ndiff --git a/Products/CMFPlacefulWorkflow/exportimport/__init__.py b/Products/CMFPlacefulWorkflow/exportimport/__init__.py\nindex 10dd001..23f1026 100644\n--- a/Products/CMFPlacefulWorkflow/exportimport/__init__.py\n+++ b/Products/CMFPlacefulWorkflow/exportimport/__init__.py\n@@ -16,5 +16,9 @@\n # along with this program; see the file COPYING. If not, write to the\n # Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n \n-from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import exportWorkflowPolicies  # noqa: E501,F401\n-from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import importWorkflowPolicies  # noqa: E501,F401\n+from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import (  # noqa: E501,F401\n+    exportWorkflowPolicies,\n+)\n+from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import (  # noqa: E501,F401\n+    importWorkflowPolicies,\n+)\ndiff --git a/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py b/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py\nindex 5f8e9d7..c66c21a 100644\n--- a/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py\n+++ b/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py\n@@ -24,24 +24,24 @@\n from Products.CMFPlacefulWorkflow.DefaultWorkflowPolicy import DEFAULT_CHAIN\n from Products.CMFPlacefulWorkflow.global_symbols import Log\n from Products.GenericSetup.OFSP.exportimport import FolderXMLAdapter\n-from Products.GenericSetup.utils import XMLAdapterBase\n from Products.GenericSetup.utils import exportObjects\n from Products.GenericSetup.utils import importObjects\n+from Products.GenericSetup.utils import XMLAdapterBase\n+\n \n _marker = []\n \n \n class PlacefulWorkflowXMLAdapter(FolderXMLAdapter):\n \n-    _LOGGER_ID = \'placeful_workflow\'\n+    _LOGGER_ID = "placeful_workflow"\n \n-    body = property(XMLAdapterBase._exportBody,\n-                    XMLAdapterBase._importBody)\n+    body = property(XMLAdapterBase._exportBody, XMLAdapterBase._importBody)\n \n \n class WorkflowPoliciesXMLAdapter(WorkflowToolXMLAdapter):\n \n-    _LOGGER_ID = \'placeful_workflow\'\n+    _LOGGER_ID = "placeful_workflow"\n \n     @property\n     def name(self):\n@@ -50,44 +50,43 @@ def name(self):\n \n     def _extractChains(self):\n         fragment = self._doc.createDocumentFragment()\n-        node = self._doc.createElement(\'bindings\')\n-        child = self._doc.createElement(\'default\')\n+        node = self._doc.createElement("bindings")\n+        child = self._doc.createElement("default")\n         for workflow_id in self.context._default_chain or ():\n-            sub = self._doc.createElement(\'bound-workflow\')\n-            sub.setAttribute(\'workflow_id\', workflow_id)\n+            sub = self._doc.createElement("bound-workflow")\n+            sub.setAttribute("workflow_id", workflow_id)\n             child.appendChild(sub)\n         node.appendChild(child)\n         if self.context._chains_by_type:\n-            typestool = getToolByName(self.context, \'portal_types\')\n-            typeinfos = sorted(typestool.listTypeInfo(),\n-                               key=lambda type: type.getId())\n+            typestool = getToolByName(self.context, "portal_types")\n+            typeinfos = sorted(typestool.listTypeInfo(), key=lambda type: type.getId())\n             for ti in typeinfos:\n                 type_id = ti.getId()\n                 chain = self.context._chains_by_type.get(type_id, _marker)\n-                child = self._doc.createElement(\'type\')\n+                child = self._doc.createElement("type")\n                 if chain is _marker:\n                     # If no chain is defined chain is acquired\n                     continue\n \n-                if chain == (DEFAULT_CHAIN, ):\n+                if chain == (DEFAULT_CHAIN,):\n                     # If the type is using the default chain there\'s no chain\n                     # to wait after the attribute\n-                    child.setAttribute(\'type_id\', type_id)\n-                    child.setAttribute(\'default_chain\', "true")\n+                    child.setAttribute("type_id", type_id)\n+                    child.setAttribute("default_chain", "true")\n                     node.appendChild(child)\n                     continue\n \n-                child.setAttribute(\'type_id\', type_id)\n+                child.setAttribute("type_id", type_id)\n                 for workflow_id in chain:\n-                    sub = self._doc.createElement(\'bound-workflow\')\n-                    sub.setAttribute(\'workflow_id\', workflow_id)\n+                    sub = self._doc.createElement("bound-workflow")\n+                    sub.setAttribute("workflow_id", workflow_id)\n                     child.appendChild(sub)\n                 node.appendChild(child)\n         fragment.appendChild(node)\n         return fragment\n \n     def _initChains(self, node):\n-        """ Import policies from XML\n+        """Import policies from XML\n \n         Types specified are in two cases:\n \n@@ -101,33 +100,35 @@ def _initChains(self, node):\n         """\n         seen = set()\n         for child in node.childNodes:\n-            if child.nodeName != \'bindings\':\n+            if child.nodeName != "bindings":\n                 continue\n             for sub in child.childNodes:\n-                if sub.nodeName == \'default\':\n+                if sub.nodeName == "default":\n                     self.context.setDefaultChain(self._getChain(sub))\n-                if sub.nodeName == \'type\':\n-                    type_id = str(sub.getAttribute(\'type_id\'))\n+                if sub.nodeName == "type":\n+                    type_id = str(sub.getAttribute("type_id"))\n                     assert type_id not in seen, (\n-                        \'Type %s listed more than once\' % type_id)\n+                        "Type %s listed more than once" % type_id\n+                    )\n                     seen.add(type_id)\n \n-                    default = sub.getAttribute(\'default_chain\')\n+                    default = sub.getAttribute("default_chain")\n                     chain = self._getChain(sub)\n                     Log.debug(default, chain)\n                     assert not (default and chain), (\n-                        \'Type %s is marked to use default but also \'\n-                        \'included a chain: %s\' % (type_id, chain))\n+                        "Type %s is marked to use default but also "\n+                        "included a chain: %s" % (type_id, chain)\n+                    )\n                     if default:\n                         # omit from the policy to acquire\n                         try:\n-                            self.context.setChain(type_id, (DEFAULT_CHAIN, ))\n-                        except:\n-                            if type_id == \'Collection\':\n+                            self.context.setChain(type_id, (DEFAULT_CHAIN,))\n+                        except Exception:\n+                            if type_id == "Collection":\n                                 # this is really just a plone.app.upgrade?\n                                 # test fix but it should be fine if we retry\n                                 # with Topic instead of Collection\n-                                self.context.setChain(\'Topic\', chain)\n+                                self.context.setChain("Topic", chain)\n                             else:\n                                 raise\n \n@@ -135,36 +136,33 @@ def _initChains(self, node):\n                         try:\n                             self.context.setChain(type_id, chain)\n                         except ValueError:\n-                            if type_id == \'Collection\':\n-                                self.context.setChain(\'Topic\', chain)\n+                            if type_id == "Collection":\n+                                self.context.setChain("Topic", chain)\n                             else:\n                                 raise\n \n     def _getChain(self, node):\n-        result = super(WorkflowPoliciesXMLAdapter,\n-                       self)._getChain(node)\n-        if result == \'\':\n+        result = super(WorkflowPoliciesXMLAdapter, self)._getChain(node)\n+        if result == "":\n             return []\n-        return result.split(\',\')\n+        return result.split(",")\n \n \n def importWorkflowPolicies(context):\n-    """Import workflow policies from the XML file.\n-    """\n+    """Import workflow policies from the XML file."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_placeful_workflow\', None)\n+    tool = getToolByName(site, "portal_placeful_workflow", None)\n     if tool is not None:\n-        importObjects(tool, \'\', context)\n+        importObjects(tool, "", context)\n \n \n def exportWorkflowPolicies(context):\n-    """Export workflow policies as an XML file.\n-    """\n+    """Export workflow policies as an XML file."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_placeful_workflow\', None)\n+    tool = getToolByName(site, "portal_placeful_workflow", None)\n     if tool is None:\n-        logger = context.getLogger(\'workflow_policies\')\n-        logger.info(\'Nothing to export.\')\n+        logger = context.getLogger("workflow_policies")\n+        logger.info("Nothing to export.")\n         return\n \n-    exportObjects(tool, \'\', context)\n+    exportObjects(tool, "", context)\ndiff --git a/Products/CMFPlacefulWorkflow/global_symbols.py b/Products/CMFPlacefulWorkflow/global_symbols.py\nindex b734650..a34aea9 100644\n--- a/Products/CMFPlacefulWorkflow/global_symbols.py\n+++ b/Products/CMFPlacefulWorkflow/global_symbols.py\n@@ -19,16 +19,17 @@\n CMFPlacefulWorkflow product\n """\n \n-from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n from logging import getLogger\n+from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n+\n \n-Log = getLogger(\'CMFPlacefulWorkflow\')\n+Log = getLogger("CMFPlacefulWorkflow")\n placeful_prefs_configlet = {\n-    \'id\': \'placefulworkflow\',\n-    \'appId\': "Placeful Workflow",\n-    \'name\': \'Placeful Workflow\',\n-    \'action\': \'string:$portal_url/prefs_workflow_localpolicies_form\',\n-    \'category\': \'Products\',\n-    \'permission\': (ManageWorkflowPolicies, ),\n-    \'imageUrl\': \'placefulworkflow_icon.png\',\n+    "id": "placefulworkflow",\n+    "appId": "Placeful Workflow",\n+    "name": "Placeful Workflow",\n+    "action": "string:$portal_url/prefs_workflow_localpolicies_form",\n+    "category": "Products",\n+    "permission": (ManageWorkflowPolicies,),\n+    "imageUrl": "placefulworkflow_icon.png",\n }\ndiff --git a/Products/CMFPlacefulWorkflow/interfaces.py b/Products/CMFPlacefulWorkflow/interfaces.py\nindex fc1f5f1..5a5bab7 100644\n--- a/Products/CMFPlacefulWorkflow/interfaces.py\n+++ b/Products/CMFPlacefulWorkflow/interfaces.py\n@@ -24,9 +24,9 @@\n \n \n class IPlacefulWorkflowTool(Interface):\n-    \'\'\'\n-    \'\'\'\n-    id = Attribute(\'id\', \'Must be set to "portal_workflow_policy"\')\n+    """ """\n+\n+    id = Attribute("id", \'Must be set to "portal_workflow_policy"\')\n \n     # security.declarePublic(\'getMaxChainLength\')\n     def getMaxChainLength(self):\n@@ -43,6 +43,6 @@ class IPlacefulMarker(Interface):\n \n \n class IWorkflowPolicyDefinition(Interface):\n-    \'\'\'\n-    \'\'\'\n+    """ """\n+\n     pass\ndiff --git a/Products/CMFPlacefulWorkflow/permissions.py b/Products/CMFPlacefulWorkflow/permissions.py\nindex e078073..9ee65a7 100644\n--- a/Products/CMFPlacefulWorkflow/permissions.py\n+++ b/Products/CMFPlacefulWorkflow/permissions.py\n@@ -5,5 +5,5 @@\n from AccessControl.Permission import addPermission\n \n \n-ManageWorkflowPolicies = \'CMFPlacefulWorkflow: Manage workflow policies\'\n-addPermission(ManageWorkflowPolicies, (\'Manager\', \'Site Administrator\'))\n+ManageWorkflowPolicies = "CMFPlacefulWorkflow: Manage workflow policies"\n+addPermission(ManageWorkflowPolicies, ("Manager", "Site Administrator"))\ndiff --git a/Products/CMFPlacefulWorkflow/setuphandlers.py b/Products/CMFPlacefulWorkflow/setuphandlers.py\nindex ace0261..3279380 100644\n--- a/Products/CMFPlacefulWorkflow/setuphandlers.py\n+++ b/Products/CMFPlacefulWorkflow/setuphandlers.py\n@@ -16,8 +16,7 @@\n # Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n \n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow.global_symbols import \\\n-    placeful_prefs_configlet\n+from Products.CMFPlacefulWorkflow.global_symbols import placeful_prefs_configlet\n from Products.CMFPlacefulWorkflow.interfaces import IPlacefulMarker\n from Products.CMFPlacefulWorkflow.interfaces import IPlacefulWorkflowTool\n from zope.component import getSiteManager\n@@ -27,7 +26,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'Products.CMFPlacefulWorkflow\')\n+logger = logging.getLogger("Products.CMFPlacefulWorkflow")\n \n \n def installMarker(context):\n@@ -35,39 +34,36 @@ def installMarker(context):\n     Apply a marker interface to the workflow tool to indicate that the\n     product is installed.\n     """\n-    wf = getToolByName(context, \'portal_workflow\', None)\n+    wf = getToolByName(context, "portal_workflow", None)\n     if wf is not None:\n         alsoProvides(wf, IPlacefulMarker)\n-        logger.info(\'Added placeful marker to portal_workflow.\')\n+        logger.info("Added placeful marker to portal_workflow.")\n \n \n def uninstall(context):\n     # Note: this function is registered as a pre_handler instead of a\n     # post_handler, because otherwise toolset.xml has already been applied,\n     # which removes the portal_placeful_workflow tool.\n-    portal = getToolByName(context, \'portal_url\').getPortalObject()\n-    tool = getattr(portal, \'portal_placeful_workflow\', None)\n+    portal = getToolByName(context, "portal_url").getPortalObject()\n+    tool = getattr(portal, "portal_placeful_workflow", None)\n     if tool is not None:\n-        getSiteManager(portal).unregisterUtility(\n-            tool,\n-            IPlacefulWorkflowTool)\n-        logger.info(\'Unregistered portal_placeful_workflow\')\n+        getSiteManager(portal).unregisterUtility(tool, IPlacefulWorkflowTool)\n+        logger.info("Unregistered portal_placeful_workflow")\n     # uninstall configlets\n     try:\n-        cptool = getToolByName(portal, \'portal_controlpanel\')\n-        cptool.unregisterConfiglet(placeful_prefs_configlet[\'id\'])\n-        logger.info(\'Removing CMFPlacefulWorkflow Configlet\')\n-    except:\n-        logger.info(\'Failed to remove CMFPlacefulWorkflow Configlet\')\n+        cptool = getToolByName(portal, "portal_controlpanel")\n+        cptool.unregisterConfiglet(placeful_prefs_configlet["id"])\n+        logger.info("Removing CMFPlacefulWorkflow Configlet")\n+    except AttributeError:\n+        logger.info("Failed to remove CMFPlacefulWorkflow Configlet")\n \n-    wf_tool = getToolByName(portal, \'portal_workflow\')\n+    wf_tool = getToolByName(portal, "portal_workflow")\n     if IPlacefulMarker.providedBy(wf_tool):\n         noLongerProvides(wf_tool, IPlacefulMarker)\n-        logger.info(\'Removed placeful marker from portal_workflow.\')\n+        logger.info("Removed placeful marker from portal_workflow.")\n     # Mark our base profile as uninstalled, because:\n     # 1. It is good practice.\n     # 2. Otherwise when the user installs CMFPlacefulWorkflow again,\n     #    portal_setup will not apply our base profile.\n-    portal_setup = getToolByName(portal, \'portal_setup\')\n-    portal_setup.unsetLastVersionForProfile(\n-        \'Products.CMFPlacefulWorkflow:base\')\n+    portal_setup = getToolByName(portal, "portal_setup")\n+    portal_setup.unsetLastVersionForProfile("Products.CMFPlacefulWorkflow:base")\ndiff --git a/Products/CMFPlacefulWorkflow/testing.py b/Products/CMFPlacefulWorkflow/testing.py\nindex 25eac77..f9788c3 100644\n--- a/Products/CMFPlacefulWorkflow/testing.py\n+++ b/Products/CMFPlacefulWorkflow/testing.py\n@@ -25,18 +25,21 @@ def setUpZope(self, app, configurationContext):\n         # layer.\n         self.loadZCML(package=Products.CMFPlacefulWorkflow)\n         profile_registry.registerProfile(\n-            name=\'exportimport\', title=\'Test Placeful Workflow Profile\',\n-            description=(\n-                "Tests the placeful workflow policy handler."),\n-            path=\'profiles/exportimport\',\n-            product=\'Products.CMFPlacefulWorkflow.tests\',\n-            profile_type=EXTENSION, for_=ISiteRoot)\n-        z2.installProduct(app, \'Products.CMFPlacefulWorkflow\')\n+            name="exportimport",\n+            title="Test Placeful Workflow Profile",\n+            description=("Tests the placeful workflow policy handler."),\n+            path="profiles/exportimport",\n+            product="Products.CMFPlacefulWorkflow.tests",\n+            profile_type=EXTENSION,\n+            for_=ISiteRoot,\n+        )\n+        z2.installProduct(app, "Products.CMFPlacefulWorkflow")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n-        applyProfile(portal, \'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\')\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n+        applyProfile(portal, "Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow")\n \n \n PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE = ProductsCmfplacefulworkflowLayer()\n@@ -44,13 +47,13 @@ def setUpPloneSite(self, portal):\n \n PRODUCTS_CMFPLACEFULWORKFLOW_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n-    name=\'ProductsCmfplacefulworkflowLayer:IntegrationTesting\',\n+    name="ProductsCmfplacefulworkflowLayer:IntegrationTesting",\n )\n \n \n PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n-    name=\'ProductsCmfplacefulworkflowLayer:FunctionalTesting\',\n+    name="ProductsCmfplacefulworkflowLayer:FunctionalTesting",\n )\n \n \n@@ -60,5 +63,5 @@ def setUpPloneSite(self, portal):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         z2.ZSERVER_FIXTURE,\n     ),\n-    name=\'ProductsCmfplacefulworkflowLayer:AcceptanceTesting\',\n+    name="ProductsCmfplacefulworkflowLayer:AcceptanceTesting",\n )\ndiff --git a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\nindex 8c0d52d..ae521bc 100644\n--- a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n+++ b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n@@ -18,16 +18,17 @@\n """\n CMFPlacefulWorkflow TestCase module\n """\n-from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n+from Products.CMFPlacefulWorkflow.testing import (\n+    PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING,\n+)\n \n import unittest\n \n \n class CMFPlacefulWorkflowTestCase(unittest.TestCase):\n \n-\n     layer = PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n \n     def getPermissionsOfRole(self, role):\n         perms = self.portal.permissionsOfRole(role)\n-        return [p[\'name\'] for p in perms if p[\'selected\']]\n+        return [p["name"] for p in perms if p["selected"]]\ndiff --git a/Products/CMFPlacefulWorkflow/tests/__init__.py b/Products/CMFPlacefulWorkflow/tests/__init__.py\nindex bae9eea..72a4e41 100644\n--- a/Products/CMFPlacefulWorkflow/tests/__init__.py\n+++ b/Products/CMFPlacefulWorkflow/tests/__init__.py\n@@ -23,4 +23,4 @@\n __version__ = "$Revision: 36863 $"\n # $Source: /cvsroot/ingeniweb/CMFPlacefulWorkflow/tests/__init__.py,v $\n # $Id: __init__.py 36863 2007-02-05 21:30:44Z encolpe $\n-__docformat__ = \'restructuredtext\'\n+__docformat__ = "restructuredtext"\ndiff --git a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\nindex f0f969f..9dd1db0 100644\n--- a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n+++ b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n@@ -19,64 +19,74 @@\n CMFPlacefulWorkflow Unittest\n """\n \n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlacefulWorkflow.interfaces import IPlacefulMarker\n-from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import WorkflowPolicyConfig_id  # noqa: E501\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n+from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import (  # noqa: E501\n+    WorkflowPolicyConfig_id,\n+)\n+from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import (  # noqa: E501\n+    CMFPlacefulWorkflowTestCase,\n+)\n from Products.CMFPlone.utils import get_installer\n-from zExceptions import Forbidden\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import logout\n-from plone.app.testing import login\n+\n \n _edit_permissions = []\n _all_permissions = _edit_permissions\n \n \n class TestPlacefulWorkflow(CMFPlacefulWorkflowTestCase):\n-    """ Testing all add-on and modified method for workflow stuff """\n+    """Testing all add-on and modified method for workflow stuff"""\n \n-    def createMember(self, id, pw, email, roles=(\'Member\', )):\n+    def createMember(self, id, pw, email, roles=("Member",)):\n         pr = self.portal.portal_registration\n         member = pr.addMember(\n-            id, pw, roles, properties={\n-                \'username\': id, \'email\': email})\n+            id, pw, roles, properties={"username": id, "email": email}\n+        )\n         return member\n \n-    def setupSecurityContext(self, ):\n+    def setupSecurityContext(\n+        self,\n+    ):\n         # Create a few members\n-        self.user1 = self.createMember(\'user1\', \'abcd4\', \'abc@domain.tld\')\n-        self.user2 = self.createMember(\'user2\', \'abcd4\', \'abc@domain.tld\')\n-        self.user3 = self.createMember(\'user3\', \'abcd4\', \'abc@domain.tld\')\n+        self.user1 = self.createMember("user1", "abcd4", "abc@domain.tld")\n+        self.user2 = self.createMember("user2", "abcd4", "abc@domain.tld")\n+        self.user3 = self.createMember("user3", "abcd4", "abc@domain.tld")\n \n-        self.folder = self.portal.portal_membership.getHomeFolder(\'user1\')\n+        self.folder = self.portal.portal_membership.getHomeFolder("user1")\n         self.qi = get_installer(self.portal)\n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n-\n-    def setUp(self, ):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n-        self.workflow = getToolByName(self.portal, \'portal_workflow\')\n-        self.membershipTool = getToolByName(self.portal, \'portal_membership\')\n-        self.memberdataTool = getToolByName(self.portal, \'portal_memberdata\')\n+        self.qi.install_product("CMFPlacefulWorkflow")\n+\n+    def setUp(\n+        self,\n+    ):\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+        self.workflow = getToolByName(self.portal, "portal_workflow")\n+        self.membershipTool = getToolByName(self.portal, "portal_membership")\n+        self.memberdataTool = getToolByName(self.portal, "portal_memberdata")\n \n         self.portal_placeful_workflow = getToolByName(\n-            self.portal, \'portal_placeful_workflow\')\n+            self.portal, "portal_placeful_workflow"\n+        )\n \n         self.setupSecurityContext()\n \n         # login(self.portal, \'user1\')\n         # self.createPolicy()\n \n-    def createArticle(self, ):\n+    def createArticle(\n+        self,\n+    ):\n         """\n         Create new policy\n         """\n         # Content creation\n-        self.contentId = \'myPolicy\'\n+        self.contentId = "myPolicy"\n         # XXX\n \n     def test_marker_applied_and_unapplied(self):\n@@ -85,30 +95,32 @@ def test_marker_applied_and_unapplied(self):\n         the install, and removed by the uninstall.\n         """\n         self.assertTrue(IPlacefulMarker.providedBy(self.workflow))\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n         self.assertFalse(IPlacefulMarker.providedBy(self.workflow))\n \n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n+        self.qi.install_product("CMFPlacefulWorkflow")\n         self.assertTrue(IPlacefulMarker.providedBy(self.workflow))\n \n     def test_reinstall(self):\n         """\n         Test if upgrade is going the good way\n         """\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n-        self.assertTrue(\'portal_placeful_workflow\' in self.portal.objectIds())\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n+        self.qi.install_product("CMFPlacefulWorkflow")\n+        self.assertTrue("portal_placeful_workflow" in self.portal.objectIds())\n \n     def test_activation_reactivation(self):\n         """Test multiple installs and uninstalls."""\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n-        self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n-        self.assertTrue(\'portal_placeful_workflow\' in self.portal)\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n-        self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n-\n-    def test_01_addWorkflowPolicyConfig(self, ):\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n+        self.assertFalse("portal_placeful_workflow" in self.portal)\n+        self.qi.install_product("CMFPlacefulWorkflow")\n+        self.assertTrue("portal_placeful_workflow" in self.portal)\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n+        self.assertFalse("portal_placeful_workflow" in self.portal)\n+\n+    def test_01_addWorkflowPolicyConfig(\n+        self,\n+    ):\n         """\n         Add workflow policy config\n         """\n@@ -116,48 +128,61 @@ def test_01_addWorkflowPolicyConfig(self, ):\n         self.assertFalse(WorkflowPolicyConfig_id in self.portal.objectIds())\n         # Add a policy config\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         # Make sure the policy config is there\n         self.assertTrue(WorkflowPolicyConfig_id in self.portal.objectIds())\n \n-    def test_02_checkWorkflowPolicyConfig(self, ):\n+    def test_02_checkWorkflowPolicyConfig(\n+        self,\n+    ):\n         """\n         Add workflow policy config\n         """\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         pc = getattr(self.portal, WorkflowPolicyConfig_id)\n         self.assertEqual(pc.getPolicyBelow(), None)\n         self.assertEqual(pc.getPolicyIn(), None)\n \n-    def test_03_addWorkflowPolicy(self, ):\n+    def test_03_addWorkflowPolicy(\n+        self,\n+    ):\n         """\n         Add workflow policy\n         """\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        gsp = getattr(pwt, \'foo_bar_policy\', None)\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        gsp = getattr(pwt, "foo_bar_policy", None)\n         self.assertTrue(gsp is not None)\n \n-    def test_04_addWorkflowPolicyAndConfigForIt(self, ):\n+    def test_04_addWorkflowPolicyAndConfigForIt(\n+        self,\n+    ):\n         """\n         Add workflow policy\n         """\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         pc = getattr(self.portal, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n-        self.assertEqual(pc.getPolicyInId(), \'foo_bar_policy\')\n-        self.assertEqual(pc.getPolicyBelowId(), \'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n+        self.assertEqual(pc.getPolicyInId(), "foo_bar_policy")\n+        self.assertEqual(pc.getPolicyBelowId(), "foo_bar_policy")\n \n         logout()\n \n-    def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n+    def test_04_addWorkflowPolicyAndDuplicateConfiguration(\n+        self,\n+    ):\n         """Add a workflow policy and duplicate another one\n \n         Use a python script that can duplicate another policy or portal_workflow configuration\n@@ -167,15 +192,14 @@ def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n         ptypes = self.portal.portal_types.objectIds()\n \n         # Part One: duplicate portal_workflow\n-        pw_tool.manage_addWorkflowPolicy(id=\'foo_bar_policy\',\n-                                         duplicate_id=\'portal_workflow\',\n-                                         )\n+        pw_tool.manage_addWorkflowPolicy(\n+            id="foo_bar_policy",\n+            duplicate_id="portal_workflow",\n+        )\n \n-        policy = pw_tool.getWorkflowPolicyById(\'foo_bar_policy\')\n+        policy = pw_tool.getWorkflowPolicyById("foo_bar_policy")\n \n-        self.assertEqual(\n-            policy.getDefaultChain(\'XXX\'),\n-            wf_tool._default_chain)\n+        self.assertEqual(policy.getDefaultChain("XXX"), wf_tool._default_chain)\n         for ptype in ptypes:\n             chain = policy.getChainFor(ptype)\n             if chain is None:\n@@ -185,307 +209,342 @@ def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n             self.assertEqual(chain, wf_tool.getChainFor(ptype))\n \n         # Part Two: duplicate another policy\n-        policy.setDefaultChain([\'plone_workflow\', \'folder_workflow\'])\n-        policy.setChainForPortalTypes([\'Document\', \'Folder\'], [\n-                                      \'plone_workflow\', \'folder_workflow\'])\n-        pw_tool.manage_addWorkflowPolicy(id=\'foo_bar_policy2\',\n-                                         duplicate_id=\'foo_bar_policy\',\n-                                         )\n+        policy.setDefaultChain(["plone_workflow", "folder_workflow"])\n+        policy.setChainForPortalTypes(\n+            ["Document", "Folder"], ["plone_workflow", "folder_workflow"]\n+        )\n+        pw_tool.manage_addWorkflowPolicy(\n+            id="foo_bar_policy2",\n+            duplicate_id="foo_bar_policy",\n+        )\n \n-        policy2 = pw_tool.getWorkflowPolicyById(\'foo_bar_policy2\')\n+        policy2 = pw_tool.getWorkflowPolicyById("foo_bar_policy2")\n \n-        self.assertEqual(policy.getDefaultChain(\n-            \'XXX\'), (\'plone_workflow\', \'folder_workflow\'))\n+        self.assertEqual(\n+            policy.getDefaultChain("XXX"), ("plone_workflow", "folder_workflow")\n+        )\n         for ptype in ptypes:\n-            if ptype not in (\'Document\', \'Folder\'):\n-                self.assertEqual(\n-                    policy2.getChainFor(ptype),\n-                    policy.getChainFor(ptype))\n+            if ptype not in ("Document", "Folder"):\n+                self.assertEqual(policy2.getChainFor(ptype), policy.getChainFor(ptype))\n             else:\n-                self.assertEqual(policy2.getChainFor(\n-                    ptype), (\'plone_workflow\', \'folder_workflow\'))\n+                self.assertEqual(\n+                    policy2.getChainFor(ptype), ("plone_workflow", "folder_workflow")\n+                )\n \n         logout()\n \n-    def test_05_editWorkflowPolicy(self, ):\n-        """Edit workflow policy\n-        """\n+    def test_05_editWorkflowPolicy(\n+        self,\n+    ):\n+        """Edit workflow policy"""\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        gsp = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp.setChainForPortalTypes([\'Document\', \'Folder\'],\n-                                   [\'plone_workflow\', \'folder_workflow\'])\n-        self.assertEqual(gsp.getChainFor(\'Document\'),\n-                             (\'plone_workflow\', \'folder_workflow\', ))\n-        self.assertEqual(gsp.getChainFor(\'Folder\'),\n-                             (\'plone_workflow\', \'folder_workflow\', ))\n-\n-    def test_06_getWorkflowPolicyIds(self, ):\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        gsp = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp.setChainForPortalTypes(\n+            ["Document", "Folder"], ["plone_workflow", "folder_workflow"]\n+        )\n+        self.assertEqual(\n+            gsp.getChainFor("Document"),\n+            (\n+                "plone_workflow",\n+                "folder_workflow",\n+            ),\n+        )\n+        self.assertEqual(\n+            gsp.getChainFor("Folder"),\n+            (\n+                "plone_workflow",\n+                "folder_workflow",\n+            ),\n+        )\n+\n+    def test_06_getWorkflowPolicyIds(\n+        self,\n+    ):\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy_2\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy_2", "default_workflow_policy (Simple Policy)"\n+        )\n         wp_ids = sorted(pwt.getWorkflowPolicyIds())\n         # There are 4 base policies\n-        self.assertEqual(tuple(wp_ids), (\'foo_bar_policy\', \'foo_bar_policy_2\',\n-                                             \'intranet\', \'old-plone\', \'one-state\',\n-                                             \'simple-publication\'))\n-\n-    def test_07_getChainFor(self, ):\n+        self.assertEqual(\n+            tuple(wp_ids),\n+            (\n+                "foo_bar_policy",\n+                "foo_bar_policy_2",\n+                "intranet",\n+                "old-plone",\n+                "one-state",\n+                "simple-publication",\n+            ),\n+        )\n+\n+    def test_07_getChainFor(\n+        self,\n+    ):\n         # Let\'s see what the chain is before\n         pw = self.portal.portal_workflow\n-        self.assertEqual(\n-            pw.getChainFor(\'Document\'), (\'simple_publication_workflow\', ))\n+        self.assertEqual(pw.getChainFor("Document"), ("simple_publication_workflow",))\n \n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_before\',\n-            text=\'foo bar baz\')\n+        self.portal.invokeFactory("Document", id="doc_before", text="foo bar baz")\n \n         # The chain should be different now\n         # Workflow tool should look for policy definition and return\n         # the chain of the correct policy\n-        self.assertEqual(pw.getChainFor(self.portal.doc_before),\n-                             (\'simple_publication_workflow\', ))\n+        self.assertEqual(\n+            pw.getChainFor(self.portal.doc_before), ("simple_publication_workflow",)\n+        )\n \n         # Let\'s define another policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n+        gsp = pwt.getWorkflowPolicyById("foo_bar_policy")\n \n-        gsp.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Try getting the new chain directly\n-        self.assertEqual(gsp.getChainFor(\n-            \'Document\'), (\'folder_workflow\', ))\n+        self.assertEqual(gsp.getChainFor("Document"), ("folder_workflow",))\n \n         # Add a config at the root that will use the new policy\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n-        self.assertTrue(\'.wf_policy_config\' in self.portal.objectIds())\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n+        self.assertTrue(".wf_policy_config" in self.portal.objectIds())\n \n         # Let\'s set the policy to the config\n         pc = getattr(self.portal, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         self.assertEqual(\n-            pc.getPlacefulChainFor(\n-                \'Document\', start_here=1), (\'folder_workflow\', ))\n+            pc.getPlacefulChainFor("Document", start_here=1), ("folder_workflow",)\n+        )\n \n-        self.portal.invokeFactory(\'Document\', id=\'doc\', text=\'foo bar baz\')\n+        self.portal.invokeFactory("Document", id="doc", text="foo bar baz")\n \n         # The chain should be different now\n         # Workflow tool should look for policy definition and return\n         # the chain of the correct policy\n-        self.assertEqual(\n-            pw.getChainFor(\n-                self.portal.doc), (\'folder_workflow\', ))\n+        self.assertEqual(pw.getChainFor(self.portal.doc), ("folder_workflow",))\n         # The chain for the first document should have changed now\n-        self.assertEqual(\n-            pw.getChainFor(\n-                self.portal.doc_before), (\'folder_workflow\', ))\n+        self.assertEqual(pw.getChainFor(self.portal.doc_before), ("folder_workflow",))\n \n-    def test_08_getChainFor(self, ):\n+    def test_08_getChainFor(\n+        self,\n+    ):\n         # Let\'s see what the chain is before\n         pwt = self.portal_placeful_workflow\n         self.assertEqual(pwt.getMaxChainLength(), 1)\n         pwt.setMaxChainLength(2)\n         self.assertEqual(pwt.getMaxChainLength(), 2)\n \n-    def test_09_wft_getChainFor(self, ):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\', text=\'foo\')\n+    def test_09_wft_getChainFor(\n+        self,\n+    ):\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document", text="foo")\n \n         # Check default\n         wft = self.portal.portal_workflow\n-        chain = wft.getChainFor(\'Document\')\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        chain = wft.getChainFor("Document")\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # Check global chain\n-        wft.setChainForPortalTypes((\'Document\', ), (\'wf\', ))\n-        chain = wft.getChainFor(\'Document\')\n-        self.assertEqual(tuple(chain), (\'wf\', ))\n+        wft.setChainForPortalTypes(("Document",), ("wf",))\n+        chain = wft.getChainFor("Document")\n+        self.assertEqual(tuple(chain), ("wf",))\n \n         # Check global chain, using object\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'wf\', ))\n+        self.assertEqual(tuple(chain), ("wf",))\n \n         # Remove global chain\n-        wft.setChainForPortalTypes((\'Document\', ), ())\n+        wft.setChainForPortalTypes(("Document",), ())\n         chain = wft.getChainFor(self.portal.folder.document)\n         self.assertEqual(tuple(chain), ())\n \n     def test_10_wft_getChainFor_placeful(self):\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder.folder2.invokeFactory(\'Document\', id=\'document2\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.folder.invokeFactory("Folder", id="folder2")\n+        self.portal.folder.folder2.invokeFactory("Document", id="document2")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # Create a different policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy2\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy2", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp2 = pwt.getWorkflowPolicyById(\'foo_bar_policy2\')\n-        gsp2.setChainForPortalTypes([\'Document\'], [\'plone_workflow\'])\n+        gsp2 = pwt.getWorkflowPolicyById("foo_bar_policy2")\n+        gsp2.setChainForPortalTypes(["Document"], ["plone_workflow"])\n \n         # Add a different config in the second folder\n         self.portal.folder.folder2.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         pc = getattr(self.portal.folder.folder2, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy2\')\n-        pc.setPolicyBelow(\'foo_bar_policy2\')\n+        pc.setPolicyIn("foo_bar_policy2")\n+        pc.setPolicyBelow("foo_bar_policy2")\n \n         # Check inheritance order\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), ("plone_workflow",))\n \n         # Check empty chain\n-        gsp2.setChain(\'Document\', ())\n+        gsp2.setChain("Document", ())\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n         self.assertEqual(tuple(chain), ())\n \n         # Check default\n-        wft.setDefaultChain(\'folder_workflow\')\n-        gsp2.setChainForPortalTypes((\'Document\', ), (\'(Default)\', ))\n+        wft.setDefaultChain("folder_workflow")\n+        gsp2.setChainForPortalTypes(("Document",), ("(Default)",))\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n     def test_11_In_and_Below(self):\n         """In and below"""\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder.folder2.invokeFactory(\'Document\', id=\'document2\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder3\')\n-        self.portal.folder.folder3.invokeFactory(\'Document\', id=\'document3\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.folder.invokeFactory("Folder", id="folder2")\n+        self.portal.folder.folder2.invokeFactory("Document", id="document2")\n+        self.portal.folder.invokeFactory("Folder", id="folder3")\n+        self.portal.folder.folder3.invokeFactory("Document", id="document3")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'plone_workflow\'])\n-        gsp1.setChainForPortalTypes([\'Folder\'], [\'plone_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["plone_workflow"])\n+        gsp1.setChainForPortalTypes(["Folder"], ["plone_workflow"])\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy2\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy2", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp2 = pwt.getWorkflowPolicyById(\'foo_bar_policy2\')\n-        gsp2.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n-        gsp2.setChainForPortalTypes([\'Folder\'], [\'folder_workflow\'])\n+        gsp2 = pwt.getWorkflowPolicyById("foo_bar_policy2")\n+        gsp2.setChainForPortalTypes(["Document"], ["folder_workflow"])\n+        gsp2.setChainForPortalTypes(["Folder"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n \n         # In folder 1, we want to have plone_workflow\n         # We set PolicyIn to the first policy in folder 1\n-        pc.setPolicyIn(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n \n         # In folder 2, we want to have folder_workflow\n         # We set PolicyBelow to the second policy in folder 2\n-        pc.setPolicyBelow(\'foo_bar_policy2\')\n+        pc.setPolicyBelow("foo_bar_policy2")\n \n         # A document in folder 2 should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # Folder 2 should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # A document in folder 1 should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # Folder 1 should have plone_workflow\n         chain = wft.getChainFor(self.portal.folder)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), ("plone_workflow",))\n \n     def test_11_copy_paste(self):\n-        """ Test security after a copy/paste\n-        """\n+        """Test security after a copy/paste"""\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Document", id="document")\n+        self.portal.invokeFactory("Folder", id="folder")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n \n         # In folder, we want to have folder_workflow\n         # We set PolicyIn to the first policy in folder\n-        pc.setPolicyIn(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n \n-        cb = self.portal.manage_copyObjects([\'document\'])\n+        cb = self.portal.manage_copyObjects(["document"])\n         self.portal.folder.manage_pasteObjects(cb_copy_data=cb)\n \n         # A document in plone root should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.document)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # Folder should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.folder)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # A document in folder should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n     def test_11_getWorkflowPolicyById_edge_cases(self):\n         pwt = self.portal_placeful_workflow\n-        self.assertEqual(pwt.getWorkflowPolicyById(\'dummy\'), None)\n+        self.assertEqual(pwt.getWorkflowPolicyById("dummy"), None)\n \n     def test_12_getWorkflowPolicyById_edge_cases(self):\n         pwt = self.portal_placeful_workflow\n@@ -497,27 +556,29 @@ def test_13_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n     def test_14_getWorkflowPolicyConfig(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder.folder2.invokeFactory(\'Document\', id=\'document2\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.folder.invokeFactory("Folder", id="folder2")\n+        self.portal.folder.folder2.invokeFactory("Document", id="document2")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         # You should only be able to get a config in the folder itself\n         config = pwt.getWorkflowPolicyConfig(self.portal.folder)\n@@ -536,92 +597,98 @@ def test_14_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n         # Not in a document in a folder below\n-        config = pwt.getWorkflowPolicyConfig(\n-            self.portal.folder.folder2.document2)\n+        config = pwt.getWorkflowPolicyConfig(self.portal.folder.folder2.document2)\n         self.assertEqual(config, None)\n \n     def test_15_wft_getChainFor_placeful_with_strange_wrapper(self):\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder2.invokeFactory(\'Document\', id=\'document2\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.invokeFactory("Folder", id="folder2")\n+        self.portal.folder2.invokeFactory("Document", id="document2")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         chain = wft.getChainFor(self.portal.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # What if we acquired the doc from the wrong place\n         wrapped_doc = self.portal.folder2.document2.__of__(self.portal.folder)\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # What if we acquired the container from the wrong place\n         wrapped_doc = self.portal.folder2.__of__(self.portal.folder).document2\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n     def test_16_getWorklists(self):\n-        """Verify if worklists are always accessible with a policy\n-        """\n+        """Verify if worklists are always accessible with a policy"""\n         wf_tool = self.portal.portal_workflow\n         placeful_tool = self.portal_placeful_workflow\n \n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n \n         # Create a policy\n-        placeful_tool.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                               \'default_workflow_policy (Simple Policy)\',\n-                                               \'portal_workflow\', )\n+        placeful_tool.manage_addWorkflowPolicy(\n+            "foo_bar_policy",\n+            "default_workflow_policy (Simple Policy)",\n+            "portal_workflow",\n+        )\n         # And redefine the chain for Document in portal_workflow\n-        wf_tool.setChainForPortalTypes([\'Document\'], ())\n+        wf_tool.setChainForPortalTypes(["Document"], ())\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         config = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        config.setPolicyBelow(\'foo_bar_policy\')\n+        config.setPolicyBelow("foo_bar_policy")\n \n         # we make the document pending\n         document = self.portal.folder.document\n-        wf_tool.doActionFor(document, \'submit\', comment="unittest transition")\n+        wf_tool.doActionFor(document, "submit", comment="unittest transition")\n \n         keys = list(wf_tool.getWorklists().keys())\n-        if \'comment_review_workflow\' in keys:\n+        if "comment_review_workflow" in keys:\n             # This test needs to work on both 4.0 and 4.1\n-            keys.remove(\'comment_review_workflow\')\n+            keys.remove("comment_review_workflow")\n \n         self.assertEqual(\n             sorted(tuple(keys)),\n-            sorted((\n-                \'comment_one_state_workflow\',\n-                \'folder_workflow\',\n-                \'intranet_folder_workflow\',\n-                \'intranet_workflow\',\n-                \'one_state_workflow\',\n-                \'plone_workflow\',\n-                \'simple_publication_workflow\',\n-            )))\n-        self.assertEqual(tuple(wf_tool.getWorklistsResults()), (document, ))\n+            sorted(\n+                (\n+                    "comment_one_state_workflow",\n+                    "folder_workflow",\n+                    "intranet_folder_workflow",\n+                    "intranet_workflow",\n+                    "one_state_workflow",\n+                    "plone_workflow",\n+                    "simple_publication_workflow",\n+                )\n+            ),\n+        )\n+        self.assertEqual(tuple(wf_tool.getWorklistsResults()), (document,))\n \n         logout()\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_configlet.py b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\nindex db48eb2..f58111f 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n@@ -20,78 +20,99 @@\n """\n \n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n+from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import (  # noqa: E501\n+    CMFPlacefulWorkflowTestCase,\n+)\n from transaction import commit\n \n \n class TestConfiglet(CMFPlacefulWorkflowTestCase):\n-\n     def setUp(self):\n         """Init some shortcuts member variables."""\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.ppw = getToolByName(self.portal, \'portal_placeful_workflow\')\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.ppw = getToolByName(self.portal, "portal_placeful_workflow")\n \n         self.createDummyPolicy()\n \n     def getBrowser(self, logged_in=False):\n-        """ instantiate and return a testbrowser for convenience """\n+        """instantiate and return a testbrowser for convenience"""\n         browser = Browser(self.app)\n         if logged_in:\n             # Add an authorization header using the given or default\n             # credentials """\n-            browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD))\n+            browser.addHeader(\n+                "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            )\n         return browser\n \n     def createDummyPolicy(self):\n-        """Create a workflow policy named \'dummy_policy\' for us to work with.\n-        """\n+        """Create a workflow policy named \'dummy_policy\' for us to work with."""\n         # Create a policy\n         self.ppw.manage_addWorkflowPolicy(\n-            \'dummy_policy\', \'default_workflow_policy (Simple Policy)\')\n-        self.ppw.dummy_policy.title = \'Dummy Policy\'\n+            "dummy_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        self.ppw.dummy_policy.title = "Dummy Policy"\n \n     def setLocalChainForPortalType(self, pt, chain):\n-        gp = self.ppw.getWorkflowPolicyById(\'dummy_policy\')\n-        gp.setChainForPortalTypes([pt, ], [chain, ])\n+        gp = self.ppw.getWorkflowPolicyById("dummy_policy")\n+        gp.setChainForPortalTypes(\n+            [\n+                pt,\n+            ],\n+            [\n+                chain,\n+            ],\n+        )\n \n     def test_local_mapping_select_acquisition_chain(self):\n-        """Test setting a local mapping to the special value \'acquisition\'\n-        """\n-        self.setLocalChainForPortalType(\'Document\', \'folder_workflow\')\n+        """Test setting a local mapping to the special value \'acquisition\'"""\n+        self.setLocalChainForPortalType("Document", "folder_workflow")\n         commit()\n         browser = self.getBrowser(logged_in=True)\n         browser.handleErrors = False\n \n         # Check that we get no errors when we do not pass the policy id\n         portal_url = self.portal.absolute_url()\n-        central_form = f\'{portal_url}/@@prefs_workflow_localpolicies_form\'\n-        browser.open(f\'{portal_url}/@@prefs_workflow_policy_mapping\')\n+        central_form = f"{portal_url}/@@prefs_workflow_localpolicies_form"\n+        browser.open(f"{portal_url}/@@prefs_workflow_policy_mapping")\n         self.assertEqual(browser.url, central_form)\n \n         # Try a wrong id.\n-        browser.open(f\'{portal_url}/@@prefs_workflow_policy_mapping?\'\n-                     \'wfpid=no_such_policy\')\n+        browser.open(\n+            f"{portal_url}/@@prefs_workflow_policy_mapping?" "wfpid=no_such_policy"\n+        )\n         self.assertEqual(browser.url, central_form)\n \n         # Now with a proper policy id.\n-        browser.open(f\'{portal_url}/@@prefs_workflow_policy_mapping?\'\n-                     \'wfpid=dummy_policy\')\n-        self.assertEqual(browser.getControl(name=\'wf.Document:record\').value,\n-                         [\'folder_workflow\', ])\n-\n-        browser.getControl(name=\'wf.Document:record\').value = [\'acquisition\', ]\n-        browser.getControl(name=\'submit\').click()\n-\n-        self.assertEqual(browser.url, f\'{portal_url}/@@prefs_workflow_policy_mapping?\'\n-                        \'wfpid=dummy_policy\')\n-        self.assertEqual(browser.getControl(name=\'wf.Document:record\').value,\n-                         [\'acquisition\', ])\n+        browser.open(\n+            f"{portal_url}/@@prefs_workflow_policy_mapping?" "wfpid=dummy_policy"\n+        )\n+        self.assertEqual(\n+            browser.getControl(name="wf.Document:record").value,\n+            [\n+                "folder_workflow",\n+            ],\n+        )\n+\n+        browser.getControl(name="wf.Document:record").value = [\n+            "acquisition",\n+        ]\n+        browser.getControl(name="submit").click()\n+\n+        self.assertEqual(\n+            browser.url,\n+            f"{portal_url}/@@prefs_workflow_policy_mapping?" "wfpid=dummy_policy",\n+        )\n+        self.assertEqual(\n+            browser.getControl(name="wf.Document:record").value,\n+            [\n+                "acquisition",\n+            ],\n+        )\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_doctests.py b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\nindex c4caf6b..98589f9 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n@@ -20,21 +20,29 @@\n """\n \n from plone.testing import layered\n-from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n+from Products.CMFPlacefulWorkflow.testing import (\n+    PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING,\n+)\n+\n import doctest\n import unittest\n \n \n-OPTIONFLAGS = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_UDIFF |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+OPTIONFLAGS = (\n+    doctest.ELLIPSIS\n+    | doctest.NORMALIZE_WHITESPACE\n+    | doctest.REPORT_UDIFF\n+    | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    for testfile in [\'exportimport.txt\', \'policy_form.txt\']:\n-        suite.addTest(layered(doctest.DocFileSuite(testfile,\n-                                                   optionflags=OPTIONFLAGS),\n-                              layer=PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING))\n+    for testfile in ["exportimport.txt", "policy_form.txt"]:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(testfile, optionflags=OPTIONFLAGS),\n+                layer=PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING,\n+            )\n+        )\n     return suite\ndiff --git a/Products/CMFPlacefulWorkflow/upgrades.py b/Products/CMFPlacefulWorkflow/upgrades.py\nindex a406498..2f74be4 100644\n--- a/Products/CMFPlacefulWorkflow/upgrades.py\n+++ b/Products/CMFPlacefulWorkflow/upgrades.py\n@@ -1,4 +1,4 @@\n-PROFILE_ID = \'profile-Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\'\n+PROFILE_ID = "profile-Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow"\n \n \n def apply_full_profile(context):\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-14T09:56:55+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/74b01bb1237602c8aba00205c86f0884556fc8c0

Update setup.py

- add plone.app.robotframework to extras_require[test]

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex fa62bce..6eb6487 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,10 +1,12 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.0.0a3.dev0\'\n+\n+version = "3.0.0a3.dev0"\n \n \n setup(\n-    name=\'Products.CMFPlacefulWorkflow\',\n+    name="Products.CMFPlacefulWorkflow",\n     version=version,\n     description="Workflow policies for Plone",\n     # Note: long_description is in setup.cfg\n@@ -20,29 +22,26 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'CMF Plone Zope2 workflow\',\n-    author=\'Encolpe DEGOUTE\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.CMFPlacefulWorkflow\',\n-    license=\'GPL\',\n+    keywords="CMF Plone Zope2 workflow",\n+    author="Encolpe DEGOUTE",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/Products.CMFPlacefulWorkflow",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n-        test=[\n-            \'plone.app.testing\',\n-            \'zope.testing\',\n-        ],\n+        test=["plone.app.testing", "zope.testing", "plone.app.robotframework"],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'zope.i18nmessageid\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'Products.GenericSetup >= 2.0\',\n+        "setuptools",\n+        "six",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.i18nmessageid",\n+        "Products.CMFCore",\n+        "Products.CMFPlone",\n+        "Products.GenericSetup >= 2.0",\n     ],\n )\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-14T09:57:50+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/50b10b7e0174d2bb577ad5f553ee1a0c7788dcc3

Update Template

- bugfix template vars
- remove style classes form headline

Files changed:
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt

b'diff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex 94f4ff3..79d59a3 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -13,7 +13,7 @@\n                      config python: pwtool.getWorkflowPolicyConfig(context);\n                      siteroot python: pwtool.isSiteRoot(context);">\n       <header>\n-        <h1 class="documentFirstHeading" i18n:translate="heading_workflow_policies">\n+        <h1 i18n:translate="heading_workflow_policies">\n           Workflow policies\' local configuration management\n         </h1>\n   \n@@ -58,11 +58,13 @@\n         name="edit_form"\n         method="POST"\n         action="${context/absolute_url}/@@placeful_workflow_configuration"\n-        tal:condition="config"\n-        tal:define="\n-          policies pwtool/getWorkflowPolicyInfos;\n-          policy_in_id config/getPolicyInId;\n-          policy_below_id config/getPolicyBelowId;">\n+        tal:condition="config">\n+\n+        <tal:defines \n+          tal:define="\n+            policies pwtool/getWorkflowPolicyInfos;\n+            policy_in_id config/getPolicyInId;\n+            policy_below_id config/getPolicyBelowId;">\n \n         <h3 i18n:translate="legend_publishing_details">Workflow policies</h3>\n \n@@ -192,6 +194,8 @@\n             value="Cancel"\n             i18n:attributes="value label_cancel;" />\n         </div>\n+        \n+      </tal:defines>\n       </form>\n       \n       </tal:nosite>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-15T17:13:49+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/17289e76bdf36593e181a10e07ed4d7d28a1c16e

Update project url

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 6eb6487..e190e11 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,7 +25,7 @@\n     keywords="CMF Plone Zope2 workflow",\n     author="Encolpe DEGOUTE",\n     author_email="plone-developers@lists.sourceforge.net",\n-    url="https://pypi.org/project/Products.CMFPlacefulWorkflow",\n+    url="https://github.com/plone/Products.CMFPlacefulWorkflow",\n     license="GPL",\n     packages=find_packages(),\n     namespace_packages=["Products"],\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T11:02:49+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/8bda1cd7ebd9cffafc48fc6964c80ce70b1988d3

more markup update, control panel menu tabs, overall cleanup

Files changed:
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
M Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
M Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt

b'diff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex 79d59a3..54cef6b 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -7,7 +7,7 @@\n       metal:use-macro="context/main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n-    <div metal:fill-slot="main"\n+    <metal:main metal:fill-slot="main"\n          tal:define="wf_list context/portal_workflow/objectIds;\n                      pwtool context/portal_placeful_workflow;\n                      config python: pwtool.getWorkflowPolicyConfig(context);\n@@ -16,188 +16,190 @@\n         <h1 i18n:translate="heading_workflow_policies">\n           Workflow policies\' local configuration management\n         </h1>\n-  \n+\n         <p class="lead" i18n:translate="description_workflow_policies">\n           Set your workflow policies\' local configuration for this folder and below.\n         </p>\n       </header>\n-      \n-\n-      <tal:site tal:condition="siteroot">\n \n-      <div class="alert alert-warning mb-5" i18n:translate="">\n-        You are viewing the root of your site. Local workflow\n-        configuration is only available in subfolders of your site.\n-      </div>\n+      <div id="content-core">\n+        <tal:site tal:condition="siteroot">\n \n-      </tal:site>\n-\n-      <tal:nosite tal:condition="not:siteroot">\n-      \n-      <form\n-        tal:condition="python:not config and context.isPrincipiaFolderish"\n-        action="placeful_workflow_configuration" method="POST">\n-        <button type="submit" name="add_wp_for_type" class="btn btn-primary"\n-          i18n:translate="description_add_workflow_policy_for_type">\n-          Add a workflow policy\'s local configuration in the\n-          <span tal:replace="python:context.translate(context.portal_type)"\n-            i18n:name="portal_type">portal type</span>\n-        </button>\n-      </form>\n-      \n-      <form\n-        tal:condition="python:not context.isPrincipiaFolderish and context is not container"\n-        action="placeful_workflow_configuration" method="POST">\n-        <button type="submit" name="add_wp_local_config" class="btn btn-primary"\n-          i18n:translate="description_add_workflow_policy">\n-          Add Workflow policy\'s local configuration\n-        </button>\n-      </form>\n-      \n-      <form id="edit_form"\n-        name="edit_form"\n-        method="POST"\n-        action="${context/absolute_url}/@@placeful_workflow_configuration"\n-        tal:condition="config">\n-\n-        <tal:defines \n-          tal:define="\n-            policies pwtool/getWorkflowPolicyInfos;\n-            policy_in_id config/getPolicyInId;\n-            policy_below_id config/getPolicyBelowId;">\n-\n-        <h3 i18n:translate="legend_publishing_details">Workflow policies</h3>\n-\n-        <strong i18n:translate="label_in_this_folder">For this Folder</strong>\n-                  \n-        <div class="mb-3 form-text"\n-          i18n:translate="description_in_this_folder">\n-          Modify the workflows of this folder and below. If you don\'t want\n-          to modify the workflow of this Folder use \'Below this Folder\' section.\n-        </div>\n-                  \n-        <div class="mb-3 form-check" tal:repeat="policy policies">                    \n-              \n-          <input type="radio" class="form-check-input" name="policy_in"\n-            value="policy" id="cb_policy"\n-            tal:attributes="\n-              id python: \'cb_policy_\' + policy[\'id\'];\n-              value policy/id;\n-              checked python: policy[\'id\'] == policy_in_id" />\n-              \n-          <label class="form-check-label" for="cb_policy"\n-            tal:attributes="for python: \'cb_policy_\' + policy[\'id\']"\n-            tal:content="policy/title"\n-            i18n:domain="cmfplacefulworkflow"\n-            i18n:translate="">Policy Label</label>\n-              \n-          <div class="form-text" tal:condition="policy/description"\n-            tal:content="policy/description">Workflow policy description</div>\n-            \n+        <div class="alert alert-warning mb-5" i18n:translate="">\n+          You are viewing the root of your site. Local workflow\n+          configuration is only available in subfolders of your site.\n         </div>\n \n-        <div class="mb-3 form-check">\n-              \n-          <input type="radio" class="form-check-input" name="policy_in"\n-            id="cb_default_policy" title="" checked="checked"\n-            tal:attributes="value python:\'\'; checked not:config/getPolicyIn" />\n-              \n-          <label for="cb_default_policy" class="form-check-label" i18n:translate="label_default_policy">Default Policy</label>\n-              \n-          <div class="form-text"\n-            i18n:translate="help_default_workflow_policy">\n-            The default workflow policy.\n-          </div>                  \n-        \n-        </div>\n+        </tal:site>\n+\n+        <tal:nosite tal:condition="not:siteroot">\n+\n+        <form\n+          tal:condition="python:not config and context.isPrincipiaFolderish"\n+          action="placeful_workflow_configuration" method="POST">\n+          <button type="submit" name="add_wp_for_type" class="btn btn-primary"\n+            i18n:translate="description_add_workflow_policy_for_type">\n+            Add a workflow policy\'s local configuration in the\n+            <span tal:replace="python:context.translate(context.portal_type)"\n+              i18n:name="portal_type">portal type</span>\n+          </button>\n+        </form>\n+\n+        <form\n+          tal:condition="python:not context.isPrincipiaFolderish and context is not container"\n+          action="placeful_workflow_configuration" method="POST">\n+          <button type="submit" name="add_wp_local_config" class="btn btn-primary"\n+            i18n:translate="description_add_workflow_policy">\n+            Add Workflow policy\'s local configuration\n+          </button>\n+        </form>\n+\n+        <form id="edit_form"\n+          name="edit_form"\n+          method="POST"\n+          action="${context/absolute_url}/@@placeful_workflow_configuration"\n+          tal:condition="config">\n+\n+          <tal:defines\n+            tal:define="\n+              policies pwtool/getWorkflowPolicyInfos;\n+              policy_in_id config/getPolicyInId;\n+              policy_below_id config/getPolicyBelowId;">\n+\n+          <h3 i18n:translate="legend_publishing_details">Workflow policies</h3>\n+\n+          <strong i18n:translate="label_in_this_folder">For this Folder</strong>\n+\n+          <div class="mb-3 form-text"\n+            i18n:translate="description_in_this_folder">\n+            Modify the workflows of this folder and below. If you don\'t want\n+            to modify the workflow of this Folder use \'Below this Folder\' section.\n+          </div>\n+\n+          <div class="mb-3 form-check" tal:repeat="policy policies">\n+\n+            <input type="radio" class="form-check-input" name="policy_in"\n+              value="policy" id="cb_policy"\n+              tal:attributes="\n+                id python: \'cb_policy_\' + policy[\'id\'];\n+                value policy/id;\n+                checked python: policy[\'id\'] == policy_in_id" />\n+\n+            <label class="form-check-label" for="cb_policy"\n+              tal:attributes="for python: \'cb_policy_\' + policy[\'id\']"\n+              tal:content="policy/title"\n+              i18n:domain="cmfplacefulworkflow"\n+              i18n:translate="">Policy Label</label>\n+\n+            <div class="form-text" tal:condition="policy/description"\n+              tal:content="policy/description">Workflow policy description</div>\n \n-        <strong i18n:translate="label_below_this_folder">Below this Folder</strong>\n-                  \n-        <div class="mb-3 form-text"\n-          i18n:translate="description_below_this_folder">\n-          Modify the workflows only below this Folder. If you want to\n-          modify the workflow of this Folder use \'For this Folder\' section.\n-        </div>\n-            \n-        <div class="mb-3 form-check" tal:repeat="policy policies">\n-           \n-          <input type="radio" class="form-check-input" name="policy_below"\n-            value="policy" id="cb_policy"\n-            tal:attributes="\n-              id python: \'cb_policy_below_\' + policy[\'id\'];\n-              value policy/id;\n-              checked python: policy[\'id\'] == policy_below_id" />\n-\n-          <label for="cb_policy" class="form-check-label" \n-            tal:attributes="for python: \'cb_policy_below_\' + policy[\'id\']"\n-            tal:content="policy/title"\n-            i18n:domain="cmfplacefulworkflow"\n-            i18n:translate="">Policy Label</label>\n-\n-          <div class="form-text" tal:content="policy/description">\n-            Workflow policy description\n           </div>\n-        \n-        </div>\n-            \n-        <div class="mb-3 form-check">\n-              \n-          <input type="radio"\n-            class="form-check-input"\n-            name="policy_below"\n-            id="cb_default_policy_below"\n-            title=""\n-            checked="1"\n-            tal:attributes="value python:\'\';\n-              checked not: config/getPolicyBelow" />\n-                    \n-          <label for="cb_default_policy_below" class="form-check-label"\n-            i18n:translate="label_default_policy">Default Policy</label>\n-                    \n-          <div class="form-text" i18n:translate="help_default_workflow_policy">\n-            The default workflow policy.\n+\n+          <div class="mb-3 form-check">\n+\n+            <input type="radio" class="form-check-input" name="policy_in"\n+              id="cb_default_policy" title="" checked="checked"\n+              tal:attributes="value python:\'\'; checked not:config/getPolicyIn" />\n+\n+            <label for="cb_default_policy" class="form-check-label" i18n:translate="label_default_policy">Default Policy</label>\n+\n+            <div class="form-text"\n+              i18n:translate="help_default_workflow_policy">\n+              The default workflow policy.\n+            </div>\n+\n           </div>\n-                  \n-        </div>\n \n-        <strong i18n:translate="label_update_security">Update security</strong>\n-            \n-        <div class="mb-3 form-text"\n-          i18n:translate="description_update_security">\n-          Update catalog security (update role mappings). Note that updating catalog\n-          security might be a very long operation if there are a lot of brains to be\n-          re-indexed. This operation can be done afterwards as a separate upgrade step.\n-        </div>\n+          <strong i18n:translate="label_below_this_folder">Below this Folder</strong>\n \n-        <div class="mb-3 form-check">\n-              \n-          <input type="checkbox" checked="checked" class="form-check-input"\n-            name="update_security" value="update_security" id="cb_update_security" />\n+          <div class="mb-3 form-text"\n+            i18n:translate="description_below_this_folder">\n+            Modify the workflows only below this Folder. If you want to\n+            modify the workflow of this Folder use \'For this Folder\' section.\n+          </div>\n \n-          <label for="cb_update_security" class="form-check-label"\n-            i18n:domain="cmfplacefulworkflow"\n-            i18n:translate="">Update catalog role mappings</label>\n-            \n-        </div>\n+          <div class="mb-3 form-check" tal:repeat="policy policies">\n \n-        <div class="mb-3" i18n:domain="plone">\n-        \n-          <input class="btn btn-primary"\n-            type="submit"\n-            name="submit"\n-            value="Save"\n-            i18n:attributes="value label_save;" />\n-          \n-          <input class="btn btn-secondary"\n-            type="submit"\n-            name="submit"\n-            value="Cancel"\n-            i18n:attributes="value label_cancel;" />\n-        </div>\n-        \n-      </tal:defines>\n-      </form>\n-      \n-      </tal:nosite>\n-    </div>\n+            <input type="radio" class="form-check-input" name="policy_below"\n+              value="policy" id="cb_policy"\n+              tal:attributes="\n+                id python: \'cb_policy_below_\' + policy[\'id\'];\n+                value policy/id;\n+                checked python: policy[\'id\'] == policy_below_id" />\n+\n+            <label for="cb_policy" class="form-check-label"\n+              tal:attributes="for python: \'cb_policy_below_\' + policy[\'id\']"\n+              tal:content="policy/title"\n+              i18n:domain="cmfplacefulworkflow"\n+              i18n:translate="">Policy Label</label>\n+\n+            <div class="form-text" tal:content="policy/description">\n+              Workflow policy description\n+            </div>\n+\n+          </div>\n+\n+          <div class="mb-3 form-check">\n+\n+            <input type="radio"\n+              class="form-check-input"\n+              name="policy_below"\n+              id="cb_default_policy_below"\n+              title=""\n+              checked="1"\n+              tal:attributes="value python:\'\';\n+                checked not: config/getPolicyBelow" />\n+\n+            <label for="cb_default_policy_below" class="form-check-label"\n+              i18n:translate="label_default_policy">Default Policy</label>\n+\n+            <div class="form-text" i18n:translate="help_default_workflow_policy">\n+              The default workflow policy.\n+            </div>\n+\n+          </div>\n+\n+          <strong i18n:translate="label_update_security">Update security</strong>\n+\n+          <div class="mb-3 form-text"\n+            i18n:translate="description_update_security">\n+            Update catalog security (update role mappings). Note that updating catalog\n+            security might be a very long operation if there are a lot of brains to be\n+            re-indexed. This operation can be done afterwards as a separate upgrade step.\n+          </div>\n+\n+          <div class="mb-3 form-check">\n+\n+            <input type="checkbox" checked="checked" class="form-check-input"\n+              name="update_security" value="update_security" id="cb_update_security" />\n+\n+            <label for="cb_update_security" class="form-check-label"\n+              i18n:domain="cmfplacefulworkflow"\n+              i18n:translate="">Update catalog role mappings</label>\n+\n+          </div>\n+\n+          <div class="mb-3" i18n:domain="plone">\n+\n+            <input class="btn btn-primary"\n+              type="submit"\n+              name="submit"\n+              value="Save"\n+              i18n:attributes="value label_save;" />\n+\n+            <input class="btn btn-secondary"\n+              type="submit"\n+              name="submit"\n+              value="Cancel"\n+              i18n:attributes="value label_cancel;" />\n+          </div>\n+\n+        </tal:defines>\n+        </form>\n+\n+        </tal:nosite>\n+      </div>\n+\n+    </metal:main>\n </html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nindex 40d47aa..b606a66 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n@@ -1,4 +1,4 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" \n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n@@ -7,49 +7,27 @@\n       metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n-    <metal:block fill-slot="top_slot"/>\n-\n-    <div metal:fill-slot="prefs_configlet_content"\n-         tal:define="errors python:request.get(\'errors\', {});"\n-         class="configlet">\n+    <metal:main metal:fill-slot="prefs_configlet_main"\n+         tal:define="errors python:request.get(\'errors\', {});">\n \n         <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n \n-        <div id="content">\n-\n-            <h5 class="hiddenStructure">Views</h5>\n-\n-            <div class="documentContent" id="region-content">\n-\n-                <a name="documentContent"></a>\n-\n-                <h1 i18n:translate="heading_placeful_workflow">\n-                    Workflow Policies\n-                </h1>\n \n-                <a id="setup-link" class="link-parent"\n-                   tal:attributes="href string:$portal_url/@@overview-controlpanel"\n-                   i18n:domain="plone"\n-                   i18n:translate="label_up_to_plone_setup">\n-                    Up to Plone Setup\n-                </a>\n+        <header>\n+            <h1 i18n:translate="title_workflow_policy_setup">\n+                Workflow Policies Setup\n+            </h1>\n+            <p i18n:translate="description_workflow_policy_setup">\n+                Here you can create and configure your workflow policies.\n+                A policy modifies workflows for any items in or below\n+                a specific folder. To apply a policy you have to add a\n+                local workflow policy configuration to the desired\n+                folder using the \'policy\' item in the \'state\' drop-down\n+                menu.\n+            </p>\n+        </header>\n \n-                <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n-                  Portal status message\n-                </div>\n-\n-                <h3 i18n:translate="title_workflow_policy_setup">\n-                    Workflow Policies Setup\n-                </h3>\n-\n-                <p i18n:translate="description_workflow_policy_setup">\n-                    Here you can create and configure your workflow policies.\n-                    A policy modifies workflows for any items in or below\n-                    a specific folder. To apply a policy you have to add a\n-                    local workflow policy configuration to the desired\n-                    folder using the \'policy\' item in the \'state\' drop-down\n-                    menu.\n-                </p>\n+        <div id="content">\n \n                 <form action=""\n                       name=""\n@@ -123,8 +101,8 @@\n                              tal:define="error errors/policy_id | nothing;"\n                              tal:attributes="class python:\'field error mb-3\' if error else \'field mb-3\'">\n \n-                            <label >\n-                              <span tal:omit-tag="" i18n:translate="label_duplicate_policy_id">Duplicate another policy</span>                            \n+                            <label class="form-label">\n+                              <span tal:omit-tag="" i18n:translate="label_duplicate_policy_id">Duplicate another policy</span>\n                               <span class="fieldRequired" title="Required"\n                                 i18n:domain="plone"\n                                 i18n:attributes="title title_required;"\n@@ -142,7 +120,7 @@\n                                       tal:attributes="value wfpid"\n                                       tal:content="python:wfp.getWorkflowPolicyById(wfpid).getTitle()">WF policy id</option>\n                             </select>\n-                            \n+\n                             <div class="form-text" id=""\n                                  i18n:translate="description_duplicate_policy_id">\n                                 Choose a policy to copy when creating the new policy.\n@@ -150,7 +128,7 @@\n                             </div>\n \n                             <div tal:content="error">Validation error output</div>\n-                            \n+\n                         </div>\n \n                         <div class="formControls">\n@@ -163,8 +141,7 @@\n                     </fieldset>\n                 </form>\n \n-            </div>\n         </div>\n \n-    </div>\n+    </metal:main>\n </html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nindex 74a9d82..f45c4fb 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n@@ -7,196 +7,187 @@\n       metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n-    <metal:block fill-slot="top_slot"/>\n \n-    <div metal:fill-slot="prefs_configlet_content"\n+    <metal:main metal:fill-slot="prefs_configlet_main"\n          tal:define="allowedContentTypes allowedSortedContentTypes|context/allowedContentTypes;\n                      wfpid python:request.get(\'wfpid\');\n                      wf_policy python:context.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n                      wtool context/portal_workflow;\n-                     wf_list python: [{\'id\': obj.getId(), \'title\': obj.title_or_id()} for obj in wtool.objectValues()];"\n-         class="configlet">\n+                     wf_list python: [{\'id\': obj.getId(), \'title\': obj.title_or_id()} for obj in wtool.objectValues()];">\n \n         <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n \n-        <div id="content">\n-\n-            <h5 class="hiddenStructure">Views</h5>\n-\n-            <div class="documentContent" id="region-content">\n-\n-                <a name="documentContent"></a>\n-\n-                <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n-                  Portal status message\n-                </div>\n-\n-                <h1>\n-                    <span tal:content="wfpid" />\n-                    <span tal:condition="python:wf_policy.getTitle()">\n-                        (<span tal:content="python:wf_policy.getTitle()" />)\n-                    </span>\n-                </h1>\n-\n-                <a href=""\n-                   class="link-parent"\n-                   tal:attributes="href string:$portal_url/prefs_workflow_localpolicies_form"\n-                   i18n:translate="label_up_to_placeful_workflow">\n-                    Up to Placeful Workflow\n-                </a>\n-\n-                <p i18n:translate="description_workflow_custom_mapping">\n-                    Custom workflow policy which maps content types to workflows.\n-                </p>\n-                <form name="prefs_workflow_policy_mapping_set"\n-                      action="${context/absolute_url}/@@prefs_workflow_policy_mapping"\n-                      method="post">\n-\n-                    <fieldset>\n-\n-                        <legend i18n:translate="legend_workflow_policy_details">\n-                            Workflow Policy Details\n-                        </legend>\n-\n-                        <div class="mb-3">\n-\n-                            <label class="form-label"\n-                              for="title"\n-                              i18n:domain="plone">\n-                              <span tal:omit-tag="" i18n:translate="label_title">Title</span>                              \n-                              <span class="fieldRequired"\n-                                title="Required"\n-                                i18n:domain="plone"\n-                                i18n:attributes="title title_required;"\n-                                i18n:translate="label_required">\n-                                (Required)\n-                              </span>\n-                            </label>\n-\n-                            <input type="text"\n-                                   id="title"\n-                                   name="title"\n-                                   value=""\n-                                   class="form-control"\n-                                   tal:attributes="value python:request.get(\'title\',wf_policy.getTitle())" />\n-                        </div>\n-\n-                        <div class="mb-3">\n-\n-                            <label for="description"\n-                                  class="form-label"\n+        <header>\n+\n+          <h1>\n+            <span tal:replace="wfpid" tal:condition="python:not wf_policy.getTitle()" />\n+            <span tal:condition="python:wf_policy.getTitle()">\n+                <span tal:replace="python:wf_policy.getTitle()" />\n+            </span>\n+          </h1>\n+\n+          <p i18n:translate="description_workflow_custom_mapping">\n+              Custom workflow policy which maps content types to workflows.\n+          </p>\n+\n+          <a href=""\n+            class="link-parent"\n+            tal:attributes="href string:$portal_url/prefs_workflow_localpolicies_form"\n+            i18n:translate="label_up_to_placeful_workflow">\n+            Up to Placeful Workflow\n+          </a>\n+\n+        </header>\n+\n+        <div id="content-core">\n+          <form name="prefs_workflow_policy_mapping_set"\n+                action="${context/absolute_url}/@@prefs_workflow_policy_mapping"\n+                method="post">\n+\n+              <fieldset>\n+\n+                  <legend i18n:translate="legend_workflow_policy_details">\n+                      Workflow Policy Details\n+                  </legend>\n+\n+                  <div class="mb-3">\n+\n+                      <label class="form-label"\n+                        for="title"\n+                        i18n:domain="plone">\n+                        <span tal:omit-tag="" i18n:translate="label_title">Title</span>\n+                        <span class="fieldRequired"\n+                          title="Required"\n+                          i18n:domain="plone"\n+                          i18n:attributes="title title_required;"\n+                          i18n:translate="label_required">\n+                          (Required)\n+                        </span>\n+                      </label>\n+\n+                      <input type="text"\n+                              id="title"\n+                              name="title"\n+                              value=""\n+                              class="form-control"\n+                              tal:attributes="value python:request.get(\'title\',wf_policy.getTitle())" />\n+                  </div>\n+\n+                  <div class="mb-3">\n+\n+                      <label for="description"\n+                            class="form-label"\n+                            i18n:domain="plone"\n+                            i18n:translate="label_description">\n+                          Description\n+                      </label>\n+\n+                      <textarea cols="80"\n+                                rows="2"\n+                                class="form-control"\n+                                id="description"\n+                                name="description"\n+                                tal:content="python:request.get(\'description\',wf_policy.getDescription())">\n+                          Workflow Policy Description.\n+                      </textarea>\n+\n+                      <div class="form-text"\n+                            i18n:translate="help_workflow_policy_description">\n+                          A brief description of the workflow policy.\n+                      </div>\n+\n+                  </div>\n+\n+                  <div class="mb-3">\n+\n+                      <label for="default_workflow_id"\n+                            class="form-label"\n+                            i18n:translate="label_default_workflow">\n+                          Default Workflow\n+                      </label>\n+\n+                      <select id="select_workflow"\n+                              class="form-select"\n+                              name="default_workflow_id">\n+\n+                          <option tal:repeat="wf wf_list"\n+                                  tal:attributes="value wf/id;\n+                                                  selected python:\'selected\' if (wf[\'id\'],)==wf_policy.getDefaultChain(context) else None"\n+                                  tal:content="wf/title"\n                                   i18n:domain="plone"\n-                                  i18n:translate="label_description">\n-                                Description\n-                            </label>\n-\n-                            <textarea cols="80"\n-                                      rows="2"\n-                                      class="form-control"\n-                                      id="description"\n-                                      name="description"\n-                                      tal:content="python:request.get(\'description\',wf_policy.getDescription())">\n-                                Workflow Policy Description.\n-                            </textarea>\n-\n-                            <div class="form-text"\n-                                 i18n:translate="help_workflow_policy_description">\n-                                A brief description of the workflow policy.\n-                            </div>\n-\n-                        </div>\n-\n-                        <div class="mb-3">\n-\n-                            <label for="default_workflow_id"\n-                                  class="form-label"\n-                                  i18n:translate="label_default_workflow">\n-                                Default Workflow\n-                            </label>\n-\n-                            <select id="select_workflow"\n-                                    class="form-select"\n-                                    name="default_workflow_id">\n-\n-                                <option tal:repeat="wf wf_list"\n-                                        tal:attributes="value wf/id;\n-                                                        selected python:\'selected\' if (wf[\'id\'],)==wf_policy.getDefaultChain(context) else None"\n-                                        tal:content="wf/title"\n-                                        i18n:domain="plone"\n-                                        i18n:translate="">\n-                                    example_workflow\n-                                </option>\n-                            </select>\n-\n-                            <div class="form-text"\n-                                 i18n:translate="help_default_workflow_for_types">\n-                                Default workflow for content types.\n-                            </div>\n-                        </div>\n-\n-                        <div class="mb-3" \n-                          summary="Workflow to content type mapping."\n-                          i18n:attributes="summary summary_workflow_type_mapping;">\n-\n-                            <label for="workflow_id" class="form-label"                             \n-                              summary="Workflow to content type mapping."\n-                              i18n:attributes="summary summary_workflow_type_mapping;"\n-                              i18n:translate="label_workflow_by_type">\n-                                Workflows by type\n-                            </label>\n-                            \n-                            <tal:ctype tal:repeat="ctype allowedContentTypes">\n-                              <div class="input-group mb-3"\n-                                tal:define="ctype_title ctype/Title;\n-                                ctype_id ctype/getId;\n-\n-                                chain python:wf_policy.getChainFor(ctype_id, managescreen=True) or (\'backward compatibility\',);">\n-                                <label class="input-group-text"\n-                                  for="select_workflow"\n-                                  tal:content="ctype_title"\n-                                  tal:attributes="for python: \'select_workflow_\' + ctype_id"\n-                                  i18n:translate="">Title</label>\n-                                <select id="select_workflow" name="workflow_id" class="form-select"\n-                                  tal:attributes="name string:wf.${ctype_id}:record;id python: \'select_workflow_\' + ctype_id" >\n-                                  <option value="acquisition"\n-                                    tal:attributes="selected python:\'selected\' if chain is None else None;"\n-                                    i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n-                                  <option value=""\n-                                    tal:attributes="selected python:\'selected\' if chain == () else None;"\n-                                    i18n:translate="label_mapping_no_workflow">No workflow</option>\n-\n-                                  <option value="(Default)"\n-                                    tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n-                                    i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n-                                  <option tal:repeat="wf wf_list"\n-                                    tal:attributes="value wf/id;\n-                                      selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n-                                    tal:content="wf/title"\n-                                    i18n:domain="plone"\n-                                    i18n:translate="">workflow_id</option>\n-                                </select>\n-                              </div>\n-                            </tal:ctype>                            \n-\n-                            <div class="form-text" i18n:translate="help_workflow_assign_all_types">\n-                              You can assign a workflow for all content types.\n-                            </div>\n-                            \n-                            <input type="hidden" value="" name="wfpid" tal:attributes="value wfpid" />\n-\n-                        </div>\n-                        <div class="formControls">\n-                            <input class="btn btn-primary"\n-                                   type="submit"\n-                                   name="submit"\n-                                   value="Save"\n-                                   i18n:domain="plone"\n-                                   i18n:attributes="value label_save;" />\n+                                  i18n:translate="">\n+                              example_workflow\n+                          </option>\n+                      </select>\n+\n+                      <div class="form-text"\n+                            i18n:translate="help_default_workflow_for_types">\n+                          Default workflow for content types.\n+                      </div>\n+                  </div>\n+\n+                  <div class="mb-3"\n+                    summary="Workflow to content type mapping."\n+                    i18n:attributes="summary summary_workflow_type_mapping;">\n+\n+                      <label for="workflow_id" class="form-label"\n+                        summary="Workflow to content type mapping."\n+                        i18n:attributes="summary summary_workflow_type_mapping;"\n+                        i18n:translate="label_workflow_by_type">\n+                          Workflows by type\n+                      </label>\n+\n+                      <tal:ctype tal:repeat="ctype allowedContentTypes">\n+                        <div class="input-group mb-3"\n+                          tal:define="ctype_title ctype/Title;\n+                          ctype_id ctype/getId;\n+\n+                          chain python:wf_policy.getChainFor(ctype_id, managescreen=True) or (\'backward compatibility\',);">\n+                          <label class="input-group-text"\n+                            for="select_workflow"\n+                            tal:content="ctype_title"\n+                            tal:attributes="for python: \'select_workflow_\' + ctype_id"\n+                            i18n:translate="">Title</label>\n+                          <select id="select_workflow" name="workflow_id" class="form-select"\n+                            tal:attributes="name string:wf.${ctype_id}:record;id python: \'select_workflow_\' + ctype_id" >\n+                            <option value="acquisition"\n+                              tal:attributes="selected python:\'selected\' if chain is None else None;"\n+                              i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n+                            <option value=""\n+                              tal:attributes="selected python:\'selected\' if chain == () else None;"\n+                              i18n:translate="label_mapping_no_workflow">No workflow</option>\n+\n+                            <option value="(Default)"\n+                              tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n+                              i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n+                            <option tal:repeat="wf wf_list"\n+                              tal:attributes="value wf/id;\n+                                selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n+                              tal:content="wf/title"\n+                              i18n:domain="plone"\n+                              i18n:translate="">workflow_id</option>\n+                          </select>\n                         </div>\n-                    </fieldset>\n-                </form>\n-            </div>\n+                      </tal:ctype>\n+\n+                      <div class="form-text" i18n:translate="help_workflow_assign_all_types">\n+                        You can assign a workflow for all content types.\n+                      </div>\n+\n+                      <input type="hidden" value="" name="wfpid" tal:attributes="value wfpid" />\n+\n+                  </div>\n+                  <div class="formControls">\n+                      <input class="btn btn-primary"\n+                              type="submit"\n+                              name="submit"\n+                              value="Save"\n+                              i18n:domain="plone"\n+                              i18n:attributes="value label_save;" />\n+                  </div>\n+              </fieldset>\n+          </form>\n         </div>\n-    </div>\n+    </metal:main>\n \n </html>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T22:37:58+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/65ea9d2a52df7163ecbd73b718512db6f9638ac0

Update .gitignore

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex a0a211f..b20286d 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -20,6 +20,7 @@ lib64\n venv\n local.cfg\n src-mrd\n+.vscode\n \n # Installer logs\n pip-log.txt\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T22:39:25+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/b9d2efd326118010fc910ddf900c22ecce7e340c

Rename Browserviews

Files changed:
M Products/CMFPlacefulWorkflow/browser/configure.zcml
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
M Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
M Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt
M Products/CMFPlacefulWorkflow/browser/views.py
M Products/CMFPlacefulWorkflow/global_symbols.py
M Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml

b'diff --git a/Products/CMFPlacefulWorkflow/browser/configure.zcml b/Products/CMFPlacefulWorkflow/browser/configure.zcml\nindex 28ba777..3bc2cb0 100644\n--- a/Products/CMFPlacefulWorkflow/browser/configure.zcml\n+++ b/Products/CMFPlacefulWorkflow/browser/configure.zcml\n@@ -5,7 +5,7 @@\n \n     <browser:page\n         for="*"\n-        name="placeful_workflow_configuration"\n+        name="workflow-policies-controlpanel"\n         class=".views.PlacefulWorkflowConfiguration"\n         template="placeful_workflow_configuration.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n@@ -13,7 +13,7 @@\n \n     <browser:page\n         for="*"\n-        name="prefs_workflow_policy_mapping"\n+        name="prefs-workflow-policy-mapping"\n         class=".views.WorkflowPolicyMapping"\n         template="prefs_workflow_policy_mapping.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n@@ -21,7 +21,7 @@\n \n     <browser:page\n         for="*"\n-        name="prefs_workflow_localpolicies_form"\n+        name="prefs-workflow-localpolicies-form"\n         class=".views.WorkflowPoliciesForm"\n         template="prefs_workflow_localpolicies_form.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\ndiff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex 54cef6b..93fc147 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -36,7 +36,7 @@\n \n         <form\n           tal:condition="python:not config and context.isPrincipiaFolderish"\n-          action="placeful_workflow_configuration" method="POST">\n+          action="workflow-policies-controlpanel" method="POST">\n           <button type="submit" name="add_wp_for_type" class="btn btn-primary"\n             i18n:translate="description_add_workflow_policy_for_type">\n             Add a workflow policy\'s local configuration in the\n@@ -47,7 +47,7 @@\n \n         <form\n           tal:condition="python:not context.isPrincipiaFolderish and context is not container"\n-          action="placeful_workflow_configuration" method="POST">\n+          action="workflow-policies-controlpanel" method="POST">\n           <button type="submit" name="add_wp_local_config" class="btn btn-primary"\n             i18n:translate="description_add_workflow_policy">\n             Add Workflow policy\'s local configuration\n@@ -57,7 +57,7 @@\n         <form id="edit_form"\n           name="edit_form"\n           method="POST"\n-          action="${context/absolute_url}/@@placeful_workflow_configuration"\n+          action="${context/absolute_url}/@@workflow-policies-controlpanel"\n           tal:condition="config">\n \n           <tal:defines\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nindex b606a66..57ec83c 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n@@ -32,7 +32,7 @@\n                 <form action=""\n                       name=""\n                       method="post"\n-                      tal:attributes="action string:${context/absolute_url}/@@prefs_workflow_localpolicies_form"\n+                      tal:attributes="action string:${context/absolute_url}/@@workflow-policies-controlpanel"\n                       tal:define="wfp python:context.portal_placeful_workflow;">\n \n                     <fieldset class="mb-3">\n@@ -48,8 +48,8 @@\n \n                             <label for="policy_id"\n                                    tal:attributes="for wfpid">\n-                                <a href="prefs_workflow_policy_mapping"\n-                                   tal:attributes="href python:\'prefs_workflow_policy_mapping?wfpid=\'+wfpid"\n+                                <a href="prefs-workflow-policy-mapping"\n+                                   tal:attributes="href python:\'prefs-workflow-policy-mapping?wfpid=\'+wfpid"\n                                    tal:content="python:wfp.getTitle() or wfp.getId()"\n                                    i18n:translate="">\n                                     Title of the policy mapping\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nindex f45c4fb..3bd6657 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n@@ -32,7 +32,7 @@\n \n           <a href=""\n             class="link-parent"\n-            tal:attributes="href string:$portal_url/prefs_workflow_localpolicies_form"\n+            tal:attributes="href string:$portal_url/workflow-policies-controlpanel"\n             i18n:translate="label_up_to_placeful_workflow">\n             Up to Placeful Workflow\n           </a>\n@@ -40,8 +40,8 @@\n         </header>\n \n         <div id="content-core">\n-          <form name="prefs_workflow_policy_mapping_set"\n-                action="${context/absolute_url}/@@prefs_workflow_policy_mapping"\n+          <form name="prefs-workflow-policy-mapping_set"\n+                action="${context/absolute_url}/@@prefs-workflow-policy-mapping"\n                 method="post">\n \n               <fieldset>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/views.py b/Products/CMFPlacefulWorkflow/browser/views.py\nindex 4e81fce..b60462d 100644\n--- a/Products/CMFPlacefulWorkflow/browser/views.py\n+++ b/Products/CMFPlacefulWorkflow/browser/views.py\n@@ -26,7 +26,7 @@ def __call__(self):\n             context.plone_utils.addPortalMessage(\n                 _("Workflow policy configuration added.")\n             )\n-            return request.response.redirect("placeful_workflow_configuration")\n+            return request.response.redirect("workflow-policies-controlpanel")\n \n         # This script is used for both the save and cancel button\n         cancel = False\n@@ -56,7 +56,7 @@ def __call__(self):\n                 message = _("Changed policies.")\n \n         context.plone_utils.addPortalMessage(message)\n-        return request.response.redirect("placeful_workflow_configuration")\n+        return request.response.redirect("workflow-policies-controlpanel")\n \n \n class WorkflowPoliciesForm(BrowserView):\n@@ -82,7 +82,7 @@ def __call__(self):\n                         ]\n                     )\n             plone_utils.addPortalMessage(_("Deleted Local Workflow Policy."), "info")\n-            return request.response.redirect("@@prefs_workflow_localpolicies_form")\n+            return request.response.redirect("@@workflow-policies-controlpanel")\n \n         elif add:\n             if policy_id:\n@@ -91,12 +91,12 @@ def __call__(self):\n                 )\n                 plone_utils.addPortalMessage(_("Local Workflow Policy added."), "info")\n                 return request.response.redirect(\n-                    "@@prefs_workflow_policy_mapping?wfpid=" + policy_id\n+                    "@@prefs-workflow-policy-mapping?wfpid=" + policy_id\n                 )\n \n             else:\n                 plone_utils.addPortalMessage(_("The policy Id is required."), "error")\n-                return request.response.redirect("@@prefs_workflow_localpolicies_form")\n+                return request.response.redirect("@@workflow-policies-controlpanel")\n \n         return self.index()\n \n@@ -119,7 +119,7 @@ def __call__(self):\n             portal_url = getToolByName(context, "portal_url")()\n             plone_utils.addPortalMessage(_("No Policy selected."), "error")\n             return request.response.redirect(\n-                portal_url + "/@@prefs_workflow_localpolicies_form"\n+                portal_url + "/@@workflow-policies-controlpanel"\n             )\n \n         if not request.get("submit", None):\n@@ -136,7 +136,7 @@ def __call__(self):\n         else:\n             plone_utils.addPortalMessage(_("Title is required."), "error")\n             return request.response.redirect(\n-                "@@prefs_workflow_policy_mapping?wfpid=%s" % wfpid\n+                "@@prefs-workflow-policy-mapping?wfpid=%s" % wfpid\n             )\n \n         policy.setDescription(description)\n@@ -157,5 +157,5 @@ def __call__(self):\n \n         plone_utils.addPortalMessage(_("Changes to criteria saved."))\n         return request.response.redirect(\n-            "@@prefs_workflow_policy_mapping?wfpid=%s" % wfpid\n+            "@@prefs-workflow-policy-mapping?wfpid=%s" % wfpid\n         )\ndiff --git a/Products/CMFPlacefulWorkflow/global_symbols.py b/Products/CMFPlacefulWorkflow/global_symbols.py\nindex a34aea9..a5e0a56 100644\n--- a/Products/CMFPlacefulWorkflow/global_symbols.py\n+++ b/Products/CMFPlacefulWorkflow/global_symbols.py\n@@ -28,7 +28,7 @@\n     "id": "placefulworkflow",\n     "appId": "Placeful Workflow",\n     "name": "Placeful Workflow",\n-    "action": "string:$portal_url/prefs_workflow_localpolicies_form",\n+    "action": "string:$portal_url/workflow-policies-controlpanel",\n     "category": "Products",\n     "permission": (ManageWorkflowPolicies,),\n     "imageUrl": "placefulworkflow_icon.png",\ndiff --git a/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml b/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\nindex ce4a083..3d2a763 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\n@@ -8,7 +8,7 @@\n   title="Workflow Policies" action_id="placefulworkflow"\n   appId="CMFPlacefulWorkflow" category="Products" condition_expr=""\n   icon_expr="string:toolbar-action/workflow"\n-  url_expr="string:$portal_url/prefs_workflow_localpolicies_form" visible="True"\n+  url_expr="string:$portal_url/workflow-policies-controlpanel" visible="True"\n   i18n:attributes="title">\n   <permission>Manage portal</permission>\n  </configlet>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T22:39:52+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/af25e24e395741a761ce353a5f399e5167532f17

Update Test

Files changed:
M Products/CMFPlacefulWorkflow/tests/policy_form.txt
M Products/CMFPlacefulWorkflow/tests/test_configlet.py

b'diff --git a/Products/CMFPlacefulWorkflow/tests/policy_form.txt b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\nindex b423f57..7d73cce 100644\n--- a/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n+++ b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n@@ -39,15 +39,15 @@ Open the policy form for the front-page and for the folder.\n     >>> browser.open(portal.absolute_url())\n     >>> browser.getLink(id=\'workflow-transition-policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/front-page/placeful_workflow_configuration\'\n+    \'http://nohost/plone/front-page/workflow-policies-controlpanel\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n     ...\n \n-    >>> browser.open(portal.absolute_url()+\'/placeful_workflow_configuration\')\n+    >>> browser.open(portal.absolute_url()+\'/workflow-policies-controlpanel\')\n     >>> browser.url\n-    \'http://nohost/plone/placeful_workflow_configuration\'\n+    \'http://nohost/plone/workflow-policies-controlpanel\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n@@ -60,7 +60,7 @@ The policy form also works for pages that aren\'t the default page.\n     >>> browser.open(page.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/f1/doc1/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/doc1/workflow-policies-controlpanel\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n@@ -81,7 +81,7 @@ Now we will add a local policy on the user folder. Old Plone Publication for the\n     >>> browser.open(folder.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/f1/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/workflow-policies-controlpanel\'\n     >>> browser.getControl(name="add_wp_for_type").click()\n     >>> \'Update catalog role mappings\' in browser.contents\n     True\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_configlet.py b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\nindex f58111f..ae081f4 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n@@ -62,14 +62,7 @@ def createDummyPolicy(self):\n \n     def setLocalChainForPortalType(self, pt, chain):\n         gp = self.ppw.getWorkflowPolicyById("dummy_policy")\n-        gp.setChainForPortalTypes(\n-            [\n-                pt,\n-            ],\n-            [\n-                chain,\n-            ],\n-        )\n+        gp.setChainForPortalTypes([pt], [chain])\n \n     def test_local_mapping_select_acquisition_chain(self):\n         """Test setting a local mapping to the special value \'acquisition\'"""\n@@ -80,20 +73,18 @@ def test_local_mapping_select_acquisition_chain(self):\n \n         # Check that we get no errors when we do not pass the policy id\n         portal_url = self.portal.absolute_url()\n-        central_form = f"{portal_url}/@@prefs_workflow_localpolicies_form"\n-        browser.open(f"{portal_url}/@@prefs_workflow_policy_mapping")\n+        central_form = f"{portal_url}/@@workflow-policies-controlpanel"\n+        browser.open(f"{portal_url}/@@prefs-workflow-policy-mapping")\n         self.assertEqual(browser.url, central_form)\n \n         # Try a wrong id.\n         browser.open(\n-            f"{portal_url}/@@prefs_workflow_policy_mapping?" "wfpid=no_such_policy"\n+            f"{portal_url}/@@prefs-workflow-policy-mapping?wfpid=no_such_policy"\n         )\n         self.assertEqual(browser.url, central_form)\n \n         # Now with a proper policy id.\n-        browser.open(\n-            f"{portal_url}/@@prefs_workflow_policy_mapping?" "wfpid=dummy_policy"\n-        )\n+        browser.open(f"{portal_url}/@@prefs-workflow-policy-mapping?wfpid=dummy_policy")\n         self.assertEqual(\n             browser.getControl(name="wf.Document:record").value,\n             [\n@@ -108,7 +99,7 @@ def test_local_mapping_select_acquisition_chain(self):\n \n         self.assertEqual(\n             browser.url,\n-            f"{portal_url}/@@prefs_workflow_policy_mapping?" "wfpid=dummy_policy",\n+            f"{portal_url}/@@prefs-workflow-policy-mapping?wfpid=dummy_policy",\n         )\n         self.assertEqual(\n             browser.getControl(name="wf.Document:record").value,\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T22:40:10+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/651f753cfd4bfa7cccefb7d4929cd6fa4f68bd22

Add Upgradestep

Files changed:
M Products/CMFPlacefulWorkflow/profiles.zcml

b'diff --git a/Products/CMFPlacefulWorkflow/profiles.zcml b/Products/CMFPlacefulWorkflow/profiles.zcml\nindex 3e42861..88d2585 100644\n--- a/Products/CMFPlacefulWorkflow/profiles.zcml\n+++ b/Products/CMFPlacefulWorkflow/profiles.zcml\n@@ -44,4 +44,15 @@\n       />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+    source="1000"\n+    destination="1001"\n+    profile="Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow">\n+    <genericsetup:upgradeDepends\n+      title="Update controlpanel logo"\n+      import_profile="Products.CMFPlacefulWorkflow:base"\n+      import_steps="controlpanel"\n+      />\n+  </genericsetup:upgradeSteps>\n+\n </configure>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T22:40:40+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/28a4698bd724431e4e8d8dafdd499b62e6e7f6fb

increment version in metadata.xml

Files changed:
M Products/CMFPlacefulWorkflow/profiles/base/metadata.xml

b'diff --git a/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml b/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml\nindex 8590785..5e97e46 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml\n@@ -1,3 +1,3 @@\n <metadata>\n-  <version>1000</version>\n+  <version>1001</version>\n </metadata>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-16T22:40:53+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/1aeb1d6606ba52336fda65c419b888823a5cb5e3

Update message

Files changed:
M news/41.bugfix

b'diff --git a/news/41.bugfix b/news/41.bugfix\nindex a453c42..d0046e4 100644\n--- a/news/41.bugfix\n+++ b/news/41.bugfix\n@@ -1,2 +1,3 @@\n Update Markup in Page Templates, made it ready for Plone 6 with Bootstrap 5\n+Rename Browserviews, make the names it more consistent\n [1letter]\n\\ No newline at end of file\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T07:31:02+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/4258425cc25678722a85e39888fca9291ed2a057

Rename Title of Upgrade Step

Files changed:
M Products/CMFPlacefulWorkflow/profiles.zcml

b'diff --git a/Products/CMFPlacefulWorkflow/profiles.zcml b/Products/CMFPlacefulWorkflow/profiles.zcml\nindex 88d2585..175b3ea 100644\n--- a/Products/CMFPlacefulWorkflow/profiles.zcml\n+++ b/Products/CMFPlacefulWorkflow/profiles.zcml\n@@ -49,7 +49,7 @@\n     destination="1001"\n     profile="Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow">\n     <genericsetup:upgradeDepends\n-      title="Update controlpanel logo"\n+      title="Update controlpanel url expression"\n       import_profile="Products.CMFPlacefulWorkflow:base"\n       import_steps="controlpanel"\n       />\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T07:31:46+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/a5cf8964efa4a078685228720bab6872f11ae0dc

increase version to 1001

- in default/metadata.xml

Files changed:
M Products/CMFPlacefulWorkflow/profiles/default/metadata.xml

b'diff --git a/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml b/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml\nindex 89b8a8c..488320d 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n-  <version>1000</version>\n+  <version>1001</version>\n   <dependencies>\n     <dependency>profile-Products.CMFPlacefulWorkflow:base</dependency>\n   </dependencies>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T08:33:37+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/8e91a20dc52a222c16e2b73dabc82d861c89c64c

Housekeeping

- add newline to towncrier message

Files changed:
M news/41.bugfix

b'diff --git a/news/41.bugfix b/news/41.bugfix\nindex d0046e4..8221db2 100644\n--- a/news/41.bugfix\n+++ b/news/41.bugfix\n@@ -1,3 +1,3 @@\n Update Markup in Page Templates, made it ready for Plone 6 with Bootstrap 5\n Rename Browserviews, make the names it more consistent\n-[1letter]\n\\ No newline at end of file\n+[1letter]\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T12:23:43+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/1ddc93b4bcf74e8336514ba38487cdf1392c2943

Adjust Names of Browserviews

- rename Names of Browserviews
- rename templates files
- adjust links in templates
- adjust links in configlet definition

Files changed:
A Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt
A Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt
M Products/CMFPlacefulWorkflow/browser/configure.zcml
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
M Products/CMFPlacefulWorkflow/browser/views.py
M Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml
D Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
D Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt

b'diff --git a/Products/CMFPlacefulWorkflow/browser/configure.zcml b/Products/CMFPlacefulWorkflow/browser/configure.zcml\nindex 3bc2cb0..85e7bd9 100644\n--- a/Products/CMFPlacefulWorkflow/browser/configure.zcml\n+++ b/Products/CMFPlacefulWorkflow/browser/configure.zcml\n@@ -3,27 +3,30 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n \n+    <!-- Policy Config View on Context -->\n     <browser:page\n         for="*"\n-        name="workflow-policies-controlpanel"\n+        name="placeful-workflow-configuration"\n         class=".views.PlacefulWorkflowConfiguration"\n         template="placeful_workflow_configuration.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n         />\n-\n+    \n+    <!-- Mapping Config View CT to to Workflows -->\n     <browser:page\n         for="*"\n-        name="prefs-workflow-policy-mapping"\n+        name="placeful-workflow-policy-mapping"\n         class=".views.WorkflowPolicyMapping"\n-        template="prefs_workflow_policy_mapping.pt"\n+        template="placeful_workflow_policy_mapping.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n         />\n-\n+    \n+    <!-- Controlpanel View -->\n     <browser:page\n         for="*"\n-        name="prefs-workflow-localpolicies-form"\n+        name="workflow-policies-controlpanel"\n         class=".views.WorkflowPoliciesForm"\n-        template="prefs_workflow_localpolicies_form.pt"\n+        template="workflow_policies_controlpanel.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n         />\n \ndiff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex 93fc147..1a2eb0d 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -36,7 +36,7 @@\n \n         <form\n           tal:condition="python:not config and context.isPrincipiaFolderish"\n-          action="workflow-policies-controlpanel" method="POST">\n+          action="@@placeful-workflow-configuration" method="POST">\n           <button type="submit" name="add_wp_for_type" class="btn btn-primary"\n             i18n:translate="description_add_workflow_policy_for_type">\n             Add a workflow policy\'s local configuration in the\n@@ -47,7 +47,7 @@\n \n         <form\n           tal:condition="python:not context.isPrincipiaFolderish and context is not container"\n-          action="workflow-policies-controlpanel" method="POST">\n+          action="@@placeful-workflow-configuration" method="POST">\n           <button type="submit" name="add_wp_local_config" class="btn btn-primary"\n             i18n:translate="description_add_workflow_policy">\n             Add Workflow policy\'s local configuration\n@@ -57,7 +57,7 @@\n         <form id="edit_form"\n           name="edit_form"\n           method="POST"\n-          action="${context/absolute_url}/@@workflow-policies-controlpanel"\n+          action="${context/absolute_url}/@@placeful-workflow-configuration"\n           tal:condition="config">\n \n           <tal:defines\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\nsimilarity index 98%\nrename from Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nrename to Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\nindex 3bd6657..bf30650 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\n@@ -32,7 +32,7 @@\n \n           <a href=""\n             class="link-parent"\n-            tal:attributes="href string:$portal_url/workflow-policies-controlpanel"\n+            tal:attributes="href string:$portal_url/@@placeful-workflow-configuration"\n             i18n:translate="label_up_to_placeful_workflow">\n             Up to Placeful Workflow\n           </a>\n@@ -41,7 +41,7 @@\n \n         <div id="content-core">\n           <form name="prefs-workflow-policy-mapping_set"\n-                action="${context/absolute_url}/@@prefs-workflow-policy-mapping"\n+                action="${context/absolute_url}/@@placeful-workflow-policy-mapping"\n                 method="post">\n \n               <fieldset>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/views.py b/Products/CMFPlacefulWorkflow/browser/views.py\nindex b60462d..a015390 100644\n--- a/Products/CMFPlacefulWorkflow/browser/views.py\n+++ b/Products/CMFPlacefulWorkflow/browser/views.py\n@@ -26,7 +26,7 @@ def __call__(self):\n             context.plone_utils.addPortalMessage(\n                 _("Workflow policy configuration added.")\n             )\n-            return request.response.redirect("workflow-policies-controlpanel")\n+            return request.response.redirect("@@placeful-workflow-configuration")\n \n         # This script is used for both the save and cancel button\n         cancel = False\n@@ -56,7 +56,7 @@ def __call__(self):\n                 message = _("Changed policies.")\n \n         context.plone_utils.addPortalMessage(message)\n-        return request.response.redirect("workflow-policies-controlpanel")\n+        return request.response.redirect("@@placeful-workflow-configuration")\n \n \n class WorkflowPoliciesForm(BrowserView):\n@@ -82,7 +82,7 @@ def __call__(self):\n                         ]\n                     )\n             plone_utils.addPortalMessage(_("Deleted Local Workflow Policy."), "info")\n-            return request.response.redirect("@@workflow-policies-controlpanel")\n+            return request.response.redirect("@@placeful-workflow-configuration")\n \n         elif add:\n             if policy_id:\n@@ -91,12 +91,12 @@ def __call__(self):\n                 )\n                 plone_utils.addPortalMessage(_("Local Workflow Policy added."), "info")\n                 return request.response.redirect(\n-                    "@@prefs-workflow-policy-mapping?wfpid=" + policy_id\n+                    "@@placeful-workflow-policy-mapping?wfpid=" + policy_id\n                 )\n \n             else:\n                 plone_utils.addPortalMessage(_("The policy Id is required."), "error")\n-                return request.response.redirect("@@workflow-policies-controlpanel")\n+                return request.response.redirect("@@placeful-workflow-configuration")\n \n         return self.index()\n \n@@ -119,7 +119,7 @@ def __call__(self):\n             portal_url = getToolByName(context, "portal_url")()\n             plone_utils.addPortalMessage(_("No Policy selected."), "error")\n             return request.response.redirect(\n-                portal_url + "/@@workflow-policies-controlpanel"\n+                portal_url + "/@@placeful-workflow-configuration"\n             )\n \n         if not request.get("submit", None):\n@@ -136,7 +136,7 @@ def __call__(self):\n         else:\n             plone_utils.addPortalMessage(_("Title is required."), "error")\n             return request.response.redirect(\n-                "@@prefs-workflow-policy-mapping?wfpid=%s" % wfpid\n+                "@@placeful-workflow-policy-mapping?wfpid=%s" % wfpid\n             )\n \n         policy.setDescription(description)\n@@ -157,5 +157,5 @@ def __call__(self):\n \n         plone_utils.addPortalMessage(_("Changes to criteria saved."))\n         return request.response.redirect(\n-            "@@prefs-workflow-policy-mapping?wfpid=%s" % wfpid\n+            "@@placeful-workflow-policy-mapping?wfpid=%s" % wfpid\n         )\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\nsimilarity index 97%\nrename from Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nrename to Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\nindex 57ec83c..be0cba6 100644\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\n@@ -32,7 +32,7 @@\n                 <form action=""\n                       name=""\n                       method="post"\n-                      tal:attributes="action string:${context/absolute_url}/@@workflow-policies-controlpanel"\n+                      tal:attributes="action string:${context/absolute_url}/@@placeful-workflow-configuration"\n                       tal:define="wfp python:context.portal_placeful_workflow;">\n \n                     <fieldset class="mb-3">\n@@ -48,8 +48,8 @@\n \n                             <label for="policy_id"\n                                    tal:attributes="for wfpid">\n-                                <a href="prefs-workflow-policy-mapping"\n-                                   tal:attributes="href python:\'prefs-workflow-policy-mapping?wfpid=\'+wfpid"\n+                                <a href="@@placeful-workflow-policy-mapping"\n+                                   tal:attributes="href python:\'@@placeful-workflow-policy-mapping?wfpid=\'+wfpid"\n                                    tal:content="python:wfp.getTitle() or wfp.getId()"\n                                    i18n:translate="">\n                                     Title of the policy mapping\ndiff --git a/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml b/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\nindex 3d2a763..9abd318 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\n@@ -8,7 +8,7 @@\n   title="Workflow Policies" action_id="placefulworkflow"\n   appId="CMFPlacefulWorkflow" category="Products" condition_expr=""\n   icon_expr="string:toolbar-action/workflow"\n-  url_expr="string:$portal_url/workflow-policies-controlpanel" visible="True"\n+  url_expr="string:$portal_url/@@workflow-policies-controlpanel" visible="True"\n   i18n:attributes="title">\n   <permission>Manage portal</permission>\n  </configlet>\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T12:23:57+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/f84abc0899b182df6cf5a9b6efa46ac89f7868fd

Update Tests

Files changed:
M Products/CMFPlacefulWorkflow/tests/policy_form.txt
M Products/CMFPlacefulWorkflow/tests/test_configlet.py

b'diff --git a/Products/CMFPlacefulWorkflow/tests/policy_form.txt b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\nindex 7d73cce..c95e25f 100644\n--- a/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n+++ b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n@@ -39,15 +39,15 @@ Open the policy form for the front-page and for the folder.\n     >>> browser.open(portal.absolute_url())\n     >>> browser.getLink(id=\'workflow-transition-policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/front-page/workflow-policies-controlpanel\'\n+    \'http://nohost/plone/front-page/@@placeful-workflow-configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n     ...\n \n-    >>> browser.open(portal.absolute_url()+\'/workflow-policies-controlpanel\')\n+    >>> browser.open(portal.absolute_url()+\'/@@placeful-workflow-configuration\')\n     >>> browser.url\n-    \'http://nohost/plone/workflow-policies-controlpanel\'\n+    \'http://nohost/plone/@@placeful-workflow-configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n@@ -60,7 +60,7 @@ The policy form also works for pages that aren\'t the default page.\n     >>> browser.open(page.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/f1/doc1/workflow-policies-controlpanel\'\n+    \'http://nohost/plone/f1/doc1/@@placeful-workflow-configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n@@ -81,7 +81,7 @@ Now we will add a local policy on the user folder. Old Plone Publication for the\n     >>> browser.open(folder.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/f1/workflow-policies-controlpanel\'\n+    \'http://nohost/plone/f1/@@placeful-workflow-configuration\'\n     >>> browser.getControl(name="add_wp_for_type").click()\n     >>> \'Update catalog role mappings\' in browser.contents\n     True\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_configlet.py b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\nindex ae081f4..9273475 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n@@ -73,18 +73,18 @@ def test_local_mapping_select_acquisition_chain(self):\n \n         # Check that we get no errors when we do not pass the policy id\n         portal_url = self.portal.absolute_url()\n-        central_form = f"{portal_url}/@@workflow-policies-controlpanel"\n-        browser.open(f"{portal_url}/@@prefs-workflow-policy-mapping")\n+        central_form = f"{portal_url}/@@placeful-workflow-configuration"\n+        browser.open(f"{portal_url}/@@placeful-workflow-policy-mapping")\n         self.assertEqual(browser.url, central_form)\n \n         # Try a wrong id.\n         browser.open(\n-            f"{portal_url}/@@prefs-workflow-policy-mapping?wfpid=no_such_policy"\n+            f"{portal_url}/@@placeful-workflow-policy-mapping?wfpid=no_such_policy"\n         )\n         self.assertEqual(browser.url, central_form)\n \n         # Now with a proper policy id.\n-        browser.open(f"{portal_url}/@@prefs-workflow-policy-mapping?wfpid=dummy_policy")\n+        browser.open(f"{portal_url}/@@placeful-workflow-policy-mapping?wfpid=dummy_policy")\n         self.assertEqual(\n             browser.getControl(name="wf.Document:record").value,\n             [\n@@ -99,7 +99,7 @@ def test_local_mapping_select_acquisition_chain(self):\n \n         self.assertEqual(\n             browser.url,\n-            f"{portal_url}/@@prefs-workflow-policy-mapping?wfpid=dummy_policy",\n+            f"{portal_url}/@@placeful-workflow-policy-mapping?wfpid=dummy_policy",\n         )\n         self.assertEqual(\n             browser.getControl(name="wf.Document:record").value,\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T12:35:25+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/f6824054acb7c4a2bd3818e2540a4d8ffb07757c

Update wrong Linktargets

Files changed:
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt
M Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt

b'diff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\nindex bf30650..21854ea 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\n@@ -32,7 +32,7 @@\n \n           <a href=""\n             class="link-parent"\n-            tal:attributes="href string:$portal_url/@@placeful-workflow-configuration"\n+            tal:attributes="href string:$portal_url/@@workflow-policies-controlpanel"\n             i18n:translate="label_up_to_placeful_workflow">\n             Up to Placeful Workflow\n           </a>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt b/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\nindex be0cba6..e57bc03 100644\n--- a/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\n@@ -32,7 +32,7 @@\n                 <form action=""\n                       name=""\n                       method="post"\n-                      tal:attributes="action string:${context/absolute_url}/@@placeful-workflow-configuration"\n+                      tal:attributes="action string:${context/absolute_url}/@@workflow-policies-controlpanel"\n                       tal:define="wfp python:context.portal_placeful_workflow;">\n \n                     <fieldset class="mb-3">\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2022-06-17T13:53:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/ddf15bbc8bca1bdc14df0c268432142cfc26d966

Merge pull request #42 from plone/1letter/bs5

1letter/bs5

Files changed:
A Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt
A Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt
A base.cfg
A buildout.cfg
A constraints.txt
A news/41.bugfix
A requirements.txt
A test_plone60.cfg
M .gitignore
M Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py
M Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py
M Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py
M Products/CMFPlacefulWorkflow/__init__.py
M Products/CMFPlacefulWorkflow/adapter.py
M Products/CMFPlacefulWorkflow/browser/configure.zcml
M Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
M Products/CMFPlacefulWorkflow/browser/views.py
M Products/CMFPlacefulWorkflow/exportimport/__init__.py
M Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py
M Products/CMFPlacefulWorkflow/global_symbols.py
M Products/CMFPlacefulWorkflow/interfaces.py
M Products/CMFPlacefulWorkflow/permissions.py
M Products/CMFPlacefulWorkflow/profiles.zcml
M Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml
M Products/CMFPlacefulWorkflow/profiles/base/metadata.xml
M Products/CMFPlacefulWorkflow/profiles/default/metadata.xml
M Products/CMFPlacefulWorkflow/setuphandlers.py
M Products/CMFPlacefulWorkflow/testing.py
M Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py
M Products/CMFPlacefulWorkflow/tests/__init__.py
M Products/CMFPlacefulWorkflow/tests/policy_form.txt
M Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py
M Products/CMFPlacefulWorkflow/tests/test_configlet.py
M Products/CMFPlacefulWorkflow/tests/test_doctests.py
M Products/CMFPlacefulWorkflow/upgrades.py
M Products/__init__.py
M setup.cfg
M setup.py
D Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
D Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt

b'diff --git a/.gitignore b/.gitignore\nindex f76ed74..b20286d 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -17,6 +17,10 @@ develop-eggs\n .installed.cfg\n lib\n lib64\n+venv\n+local.cfg\n+src-mrd\n+.vscode\n \n # Installer logs\n pip-log.txt\ndiff --git a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\nindex c66ca70..760d18d 100644\n--- a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n+++ b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n@@ -20,9 +20,9 @@\n """\n \n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_base\n-from AccessControl.class_init import InitializeClass\n from os.path import join as path_join\n from Persistence import PersistentMapping\n from Products.CMFCore.utils import getToolByName\n@@ -37,15 +37,15 @@\n import six\n \n \n-DEFAULT_CHAIN = \'(Default)\'\n-_MARKER = \'_MARKER\'\n+DEFAULT_CHAIN = "(Default)"\n+_MARKER = "_MARKER"\n \n \n @implementer(IWorkflowPolicyDefinition)\n class DefaultWorkflowPolicyDefinition(SimpleItemWithProperties):\n \n-    meta_type = \'WorkflowPolicy\'\n-    id = \'default_workflow_policy\'\n+    meta_type = "WorkflowPolicy"\n+    id = "default_workflow_policy"\n     _isAWorkflowPolicy = 1\n \n     _chains_by_type = None  # PersistentMapping\n@@ -53,64 +53,59 @@ class DefaultWorkflowPolicyDefinition(SimpleItemWithProperties):\n \n     security = ClassSecurityInfo()\n \n-    manage_options = (\n-        {\'label\': \'Workflows\', \'action\': \'manage_main\'},\n-    )\n+    manage_options = ({"label": "Workflows", "action": "manage_main"},)\n     #\n     #   ZMI methods\n     #\n \n-    security.declareProtected(ManageWorkflowPolicies, \'_manage_workflows\')\n-    _manage_workflows = PageTemplateFile(path_join(\'www\', \'define_local_workflow_policy\'),\n-                                         globals(),\n-                                         __name__=\'manage_main\')\n+    security.declareProtected(ManageWorkflowPolicies, "_manage_workflows")\n+    _manage_workflows = PageTemplateFile(\n+        path_join("www", "define_local_workflow_policy"),\n+        globals(),\n+        __name__="manage_main",\n+    )\n \n     def __init__(self, id):\n         self.id = id\n-        self.title = \'\'\n-        self.description = \'\'\n+        self.title = ""\n+        self.description = ""\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getId\')\n+    security.declareProtected(ManageWorkflowPolicies, "getId")\n \n     def getId(self):\n-        """ Return the id\n-        """\n+        """Return the id"""\n         return self.id\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getTitle\')\n+    security.declareProtected(ManageWorkflowPolicies, "getTitle")\n \n     def getTitle(self):\n-        """ Return the title\n-        """\n-        title = getattr(self, \'title\', \'\')\n+        """Return the title"""\n+        title = getattr(self, "title", "")\n         return title\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getDescription\')\n+    security.declareProtected(ManageWorkflowPolicies, "getDescription")\n \n     def getDescription(self):\n-        """ Return the description\n-        """\n-        description = getattr(self, \'description\', \'\')\n+        """Return the description"""\n+        description = getattr(self, "description", "")\n         return description\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setTitle\')\n+    security.declareProtected(ManageWorkflowPolicies, "setTitle")\n \n     def setTitle(self, title):\n-        """ Set the title\n-        """\n+        """Set the title"""\n         self.title = title\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setDescription\')\n+    security.declareProtected(ManageWorkflowPolicies, "setDescription")\n \n     def setDescription(self, description):\n-        """ Set the description\n-        """\n+        """Set the description"""\n         self.description = description\n \n-    security.declareProtected(ManageWorkflowPolicies, \'manage_main\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_main")\n \n     def manage_main(self, REQUEST, manage_tabs_message=None):\n-        """ Show a management screen for changing type to workflow connections\n+        """Show a management screen for changing type to workflow connections\n \n         Display \'None\' if there\'s no chain for a type.\n         """\n@@ -124,28 +119,32 @@ def manage_main(self, REQUEST, manage_tabs_message=None):\n                 title = None\n \n             if cbt is not None and id in cbt:\n-                chain = \', \'.join(cbt[id])\n+                chain = ", ".join(cbt[id])\n             else:\n-                chain = \'None\'\n-\n-            types_info.append({\n-                \'id\': id,\n-                \'title\': title,\n-                \'chain\': chain,\n-                # \'cbt\': repr(cbt.get(id)),  # for debug purpose\n-            })\n+                chain = "None"\n+\n+            types_info.append(\n+                {\n+                    "id": id,\n+                    "title": title,\n+                    "chain": chain,\n+                    # \'cbt\': repr(cbt.get(id)),  # for debug purpose\n+                }\n+            )\n         return self._manage_workflows(\n             REQUEST,\n-            default_chain=\', \'.join(self._default_chain or ()),\n+            default_chain=", ".join(self._default_chain or ()),\n             types_info=types_info,\n-            management_view=\'Workflows\',\n-            manage_tabs_message=manage_tabs_message)\n+            management_view="Workflows",\n+            manage_tabs_message=manage_tabs_message,\n+        )\n \n-    security.declareProtected(ManageWorkflowPolicies, \'manage_changeWorkflows\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_changeWorkflows")\n \n     def manage_changeWorkflows(\n-            self, title, description, default_chain, props=None, REQUEST=None):\n-        """ Changes which workflows apply to objects of which type\n+        self, title, description, default_chain, props=None, REQUEST=None\n+    ):\n+        """Changes which workflows apply to objects of which type\n \n         A chain equal to \'None\' is empty we remove the entry.\n         """\n@@ -161,10 +160,10 @@ def manage_changeWorkflows(\n         # Set up the chains by type.\n         for t in ti:\n             id = t.getId()\n-            field_name = \'chain_%s\' % id\n+            field_name = "chain_%s" % id\n             chain = props.get(field_name, DEFAULT_CHAIN).strip()\n \n-            if chain == \'None\':\n+            if chain == "None":\n                 if cbt.get(id, _MARKER) is not _MARKER:\n                     self.delChain(id)\n                 continue\n@@ -174,19 +173,20 @@ def manage_changeWorkflows(\n         # Set up the default chain.\n         self.setDefaultChain(default_chain)\n         if REQUEST is not None:\n-            return self.manage_main(REQUEST, manage_tabs_message=\'Changed.\')\n+            return self.manage_main(REQUEST, manage_tabs_message="Changed.")\n+\n     manage_changeWorkflows = postonly(manage_changeWorkflows)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setChainForPortalTypes\')\n+    security.declareProtected(ManageWorkflowPolicies, "setChainForPortalTypes")\n \n     def setChainForPortalTypes(self, pt_names, chain, REQUEST=None):\n-        """ Set a chain for portal types.\n-        """\n+        """Set a chain for portal types."""\n         for portal_type in pt_names:\n             self.setChain(portal_type, chain)\n+\n     setChainForPortalTypes = postonly(setChainForPortalTypes)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getChainFor\')\n+    security.declareProtected(ManageWorkflowPolicies, "getChainFor")\n \n     def getChainFor(self, ob, managescreen=False):\n         """Returns the chain that applies to the object.\n@@ -202,7 +202,7 @@ def getChainFor(self, ob, managescreen=False):\n         cbt = self._chains_by_type\n         if isinstance(ob, six.string_types):\n             pt = ob\n-        elif hasattr(aq_base(ob), \'_getPortalTypeName\'):\n+        elif hasattr(aq_base(ob), "_getPortalTypeName"):\n             pt = ob._getPortalTypeName()\n         else:\n             pt = None\n@@ -216,9 +216,9 @@ def getChainFor(self, ob, managescreen=False):\n \n         # Backwards compatibility: before chain was a string, not a list\n         if chain is not _MARKER and isinstance(chain, six.string_types):\n-            chain = map(lambda x: x.strip(), chain.split(\',\'))\n+            chain = map(lambda x: x.strip(), chain.split(","))\n \n-        Log.debug(\'Chain founded in policy %s\', chain)\n+        Log.debug("Chain founded in policy %s", chain)\n         if chain is _MARKER or chain is None:\n             return None\n         elif len(chain) == 1 and chain[0] == DEFAULT_CHAIN:\n@@ -233,56 +233,59 @@ def getChainFor(self, ob, managescreen=False):\n \n         return chain\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setDefaultChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "setDefaultChain")\n \n     def setDefaultChain(self, default_chain, REQUEST=None):\n-        """ Sets the default chain for this tool. """\n-        wftool = getToolByName(self, \'portal_workflow\')\n+        """Sets the default chain for this tool."""\n+        wftool = getToolByName(self, "portal_workflow")\n \n         if isinstance(default_chain, six.string_types):\n-            default_chain = map(lambda x: x.strip(), default_chain.split(\',\'))\n+            default_chain = map(lambda x: x.strip(), default_chain.split(","))\n         ids = []\n         for wf_id in default_chain:\n             if wf_id:\n                 if not wftool.getWorkflowById(wf_id):\n-                    raise ValueError("\'%s\' is not a workflow ID.\\nchain: %s" % (\n-                        wf_id, repr(default_chain)))\n+                    raise ValueError(\n+                        "\'%s\' is not a workflow ID.\\nchain: %s"\n+                        % (wf_id, repr(default_chain))\n+                    )\n                 ids.append(wf_id)\n \n         self._default_chain = tuple(ids)\n+\n     setDefaultChain = postonly(setDefaultChain)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getDefaultChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "getDefaultChain")\n \n     def getDefaultChain(self, ob):\n-        """ Returns the default chain."""\n+        """Returns the default chain."""\n         if self._default_chain is None:\n-            wf_tool = getToolByName(self, \'portal_workflow\')\n+            wf_tool = getToolByName(self, "portal_workflow")\n             return wf_tool.getDefaultChainFor(ob)\n         else:\n             return self._default_chain\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "setChain")\n \n     def setChain(self, portal_type, chain, REQUEST=None):\n         """Set the chain for a portal type.\n \n-           @type chain: tuple of strings or None\n-           @param chain: A tuple of workflow ids to be set for the portal type.\n-                         A few special values exsist:\n-                           - C{None}: Acquire chain from a policy above,\n-                                      ultimatly from the portal workflow settings.\n-                           - C{()} (empty tuple): No workflow for this type.\n-                           - C{(\'default\',)}: Use the configured default workflow.\n+        @type chain: tuple of strings or None\n+        @param chain: A tuple of workflow ids to be set for the portal type.\n+                      A few special values exsist:\n+                        - C{None}: Acquire chain from a policy above,\n+                                   ultimatly from the portal workflow settings.\n+                        - C{()} (empty tuple): No workflow for this type.\n+                        - C{(\'default\',)}: Use the configured default workflow.\n         """\n         # Verify input data\n         if portal_type not in [pt.id for pt in self._listTypeInfo()]:\n             raise ValueError("\'%s\' is not a valid portal type." % portal_type)\n \n         if isinstance(chain, six.string_types):\n-            chain = [i.strip() for i in chain.split(\',\')]\n+            chain = [i.strip() for i in chain.split(",")]\n \n-        wftool = getToolByName(self, \'portal_workflow\')\n+        wftool = getToolByName(self, "portal_workflow")\n         cbt = self._chains_by_type\n         if cbt is None:\n             self._chains_by_type = cbt = PersistentMapping()\n@@ -295,36 +298,37 @@ def setChain(self, portal_type, chain, REQUEST=None):\n             cbt[portal_type] = chain\n         else:\n             for wf_id in chain:\n-                if wf_id != \'\' and not wftool.getWorkflowById(wf_id):\n-                    raise ValueError("\'%s\' is not a workflow ID.\\nchain: %s" % (\n-                        wf_id, repr(chain)))\n+                if wf_id != "" and not wftool.getWorkflowById(wf_id):\n+                    raise ValueError(\n+                        "\'%s\' is not a workflow ID.\\nchain: %s" % (wf_id, repr(chain))\n+                    )\n             cbt[portal_type] = tuple(chain)\n+\n     setChain = postonly(setChain)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'delChain\')\n+    security.declareProtected(ManageWorkflowPolicies, "delChain")\n \n     def delChain(self, portal_type, REQUEST=None):\n         """Delete the chain for a portal type."""\n         if portal_type in self._chains_by_type:\n             del self._chains_by_type[portal_type]\n+\n     delChain = postonly(delChain)\n \n     #\n     #   Helper methods\n     #\n-    security.declarePrivate(\'_listTypeInfo\')\n+    security.declarePrivate("_listTypeInfo")\n \n     def _listTypeInfo(self):\n-        """ List the portal types which are available.\n-        """\n-        pt = getToolByName(self, \'portal_types\', None)\n+        """List the portal types which are available."""\n+        pt = getToolByName(self, "portal_types", None)\n         if pt is None:\n             return ()\n         else:\n             return pt.listTypeInfo()\n \n+\n InitializeClass(DefaultWorkflowPolicyDefinition)\n \n-addWorkflowPolicyFactory(\n-    DefaultWorkflowPolicyDefinition,\n-    title=\'Simple Policy\')\n+addWorkflowPolicyFactory(DefaultWorkflowPolicyDefinition, title="Simple Policy")\ndiff --git a/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py b/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py\nindex 3973d26..c48caf7 100644\n--- a/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py\n+++ b/Products/CMFPlacefulWorkflow/PlacefulWorkflowTool.py\n@@ -21,29 +21,30 @@\n \n from AccessControl import ClassSecurityInfo\n from AccessControl import Unauthorized\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from OFS.Folder import Folder\n from OFS.ObjectManager import IFAwareObjectManager\n+from os.path import join as path_join\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.permissions import View\n-from Products.CMFCore.utils import ImmutableId\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFCore.utils import ImmutableId\n from Products.CMFCore.utils import registerToolInterface\n+from Products.CMFPlacefulWorkflow.interfaces import IPlacefulWorkflowTool\n from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from os.path import join as path_join\n from zope.interface import implementer\n-from Products.CMFPlacefulWorkflow.interfaces import IPlacefulWorkflowTool\n+\n \n WorkflowPolicyConfig_id = ".wf_policy_config"\n _MARKER = object()\n \n \n-def safeEditProperty(obj, key, value, data_type=\'string\'):\n-    """ An add or edit function, surprisingly useful :) """\n+def safeEditProperty(obj, key, value, data_type="string"):\n+    """An add or edit function, surprisingly useful :)"""\n     if obj.hasProperty(key):\n         obj._updateProperty(key, value)\n     else:\n@@ -54,12 +55,12 @@ def addPlacefulWorkflowTool(self, REQUEST={}):\n     """\n     Factory method for the Placeful Workflow Tool\n     """\n-    id = \'portal_placeful_workflow\'\n+    id = "portal_placeful_workflow"\n     pwt = PlacefulWorkflowTool()\n     self._setObject(id, pwt, set_owner=0)\n     getattr(self, id)._post_init()\n     if REQUEST:\n-        return REQUEST.RESPONSE.redirect(self.absolute_url() + \'/manage_main\')\n+        return REQUEST.RESPONSE.redirect(self.absolute_url() + "/manage_main")\n \n \n @implementer(IPlacefulWorkflowTool)\n@@ -68,8 +69,8 @@ class PlacefulWorkflowTool(ImmutableId, Folder, IFAwareObjectManager):\n     PlacefulWorkflow Tool\n     """\n \n-    id = \'portal_placeful_workflow\'\n-    meta_type = \'Placeful Workflow Tool\'\n+    id = "portal_placeful_workflow"\n+    meta_type = "Placeful Workflow Tool"\n \n     _actions = []\n \n@@ -79,63 +80,57 @@ class PlacefulWorkflowTool(ImmutableId, Folder, IFAwareObjectManager):\n \n     def __init__(self):\n         # Properties to be edited by site manager\n-        safeEditProperty(self, \'max_chain_length\', 1, data_type=\'int\')\n+        safeEditProperty(self, "max_chain_length", 1, data_type="int")\n \n     _manage_addWorkflowPolicyForm = PageTemplateFile(\n-        path_join(\'www\', \'add_workflow_policy\'), globals())\n+        path_join("www", "add_workflow_policy"), globals()\n+    )\n \n-    security.declareProtected(\n-        ManageWorkflowPolicies,\n-        \'manage_addWorkflowPolicyForm\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_addWorkflowPolicyForm")\n \n     def manage_addWorkflowPolicyForm(self, REQUEST):\n-        """ Form for adding workflow policies.\n-        """\n+        """Form for adding workflow policies."""\n         wfpt = []\n         for key in _workflow_policy_factories.keys():\n             wfpt.append(key)\n         wfpt.sort()\n-        return self._manage_addWorkflowPolicyForm(\n-            REQUEST, workflow_policy_types=wfpt)\n-\n-    security.declareProtected(\n-        ManageWorkflowPolicies,\n-        \'manage_addWorkflowPolicy\')\n-\n-    def manage_addWorkflowPolicy(self, id,\n-                                 workflow_policy_type=\'default_workflow_policy (Simple Policy)\',\n-                                 duplicate_id=\'empty\',\n-                                 RESPONSE=None,\n-                                 REQUEST=None):\n-        """ Adds a workflow policies from the registered types.\n-        """\n-        if id in (\'empty\', \'portal_workflow\'):\n-            raise ValueError(\n-                "\'%s\' is reserved. Please choose another id." %\n-                id)\n+        return self._manage_addWorkflowPolicyForm(REQUEST, workflow_policy_types=wfpt)\n+\n+    security.declareProtected(ManageWorkflowPolicies, "manage_addWorkflowPolicy")\n+\n+    def manage_addWorkflowPolicy(\n+        self,\n+        id,\n+        workflow_policy_type="default_workflow_policy (Simple Policy)",\n+        duplicate_id="empty",\n+        RESPONSE=None,\n+        REQUEST=None,\n+    ):\n+        """Adds a workflow policies from the registered types."""\n+        if id in ("empty", "portal_workflow"):\n+            raise ValueError("\'%s\' is reserved. Please choose another id." % id)\n \n         factory = _workflow_policy_factories[workflow_policy_type]\n         ob = factory(id)\n         self._setObject(id, ob)\n \n-        if duplicate_id and duplicate_id != \'empty\':\n-            types_tool = getToolByName(self, \'portal_types\')\n+        if duplicate_id and duplicate_id != "empty":\n+            types_tool = getToolByName(self, "portal_types")\n             new_wp = self.getWorkflowPolicyById(id)\n \n-            if duplicate_id == \'portal_workflow\':\n-                wf_tool = getToolByName(self, \'portal_workflow\')\n+            if duplicate_id == "portal_workflow":\n+                wf_tool = getToolByName(self, "portal_workflow")\n \n                 new_wp.setDefaultChain(wf_tool._default_chain)\n \n                 for ptype in types_tool.objectIds():\n-                    chain = wf_tool.getChainForPortalType(\n-                        ptype, managescreen=True)\n+                    chain = wf_tool.getChainForPortalType(ptype, managescreen=True)\n                     if chain:\n                         new_wp.setChain(ptype, chain)\n \n             else:\n                 orig_wp = self.getWorkflowPolicyById(duplicate_id)\n-                new_wp.setDefaultChain(orig_wp.getDefaultChain(\'Document\'))\n+                new_wp.setDefaultChain(orig_wp.getDefaultChain("Document"))\n \n                 for ptype in types_tool.objectIds():\n                     chain = orig_wp.getChainFor(ptype, managescreen=True)\n@@ -143,91 +138,97 @@ def manage_addWorkflowPolicy(self, id,\n                         new_wp.setChain(ptype, chain)\n \n         if RESPONSE is not None:\n-            RESPONSE.redirect(self.absolute_url() +\n-                              \'/manage_main?management_view=Contents\')\n+            RESPONSE.redirect(\n+                self.absolute_url() + "/manage_main?management_view=Contents"\n+            )\n+\n     manage_addWorkflowPolicy = postonly(manage_addWorkflowPolicy)\n \n     def all_meta_types(self):\n         return (\n-            {\'name\': \'WorkflowPolicy\',\n-             \'action\': \'manage_addWorkflowPolicyForm\',\n-             \'permission\': ManageWorkflowPolicies}, )\n+            {\n+                "name": "WorkflowPolicy",\n+                "action": "manage_addWorkflowPolicyForm",\n+                "permission": ManageWorkflowPolicies,\n+            },\n+        )\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getWorkflowPolicyById\')\n+    security.declareProtected(ManageWorkflowPolicies, "getWorkflowPolicyById")\n \n     def getWorkflowPolicyById(self, wfp_id):\n-        """ Retrieve a given workflow policy.\n-        """\n+        """Retrieve a given workflow policy."""\n         if wfp_id is None:\n             return None\n         policy = getattr(self.aq_explicit, wfp_id, _MARKER)\n         if policy is not _MARKER:\n-            if getattr(policy, \'_isAWorkflowPolicy\', 0):\n+            if getattr(policy, "_isAWorkflowPolicy", 0):\n                 return policy\n         return None\n \n-    security.declarePublic(\'isValidPolicyName\')\n+    security.declarePublic("isValidPolicyName")\n \n     def isValidPolicyName(self, policy_id):\n-        """ Return True if a policy exist\n-        """\n+        """Return True if a policy exist"""\n         return self.getWorkflowPolicyById(policy_id) is not None\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getWorkflowPolicies\')\n+    security.declareProtected(ManageWorkflowPolicies, "getWorkflowPolicies")\n \n     def getWorkflowPolicies(self):\n-        """ Return the list of workflow policies.\n-        """\n+        """Return the list of workflow policies."""\n         wfps = []\n         for obj_name, obj in self.objectItems():\n-            if getattr(obj, \'_isAWorkflowPolicy\', 0):\n+            if getattr(obj, "_isAWorkflowPolicy", 0):\n                 wfps.append(obj)\n         return tuple(wfps)\n \n-    security.declarePublic(\'getWorkflowPolicyIds\')\n+    security.declarePublic("getWorkflowPolicyIds")\n \n     def getWorkflowPolicyIds(self):\n-        """ Return the list of workflow policy ids.\n-        """\n+        """Return the list of workflow policy ids."""\n         wfp_ids = []\n \n         for obj_id, obj in self.objectItems():\n-            if getattr(obj, \'_isAWorkflowPolicy\', 0):\n+            if getattr(obj, "_isAWorkflowPolicy", 0):\n                 wfp_ids.append(obj_id)\n \n         return tuple(wfp_ids)\n \n-    security.declarePublic(\'getWorkflowPolicyInfos\')\n+    security.declarePublic("getWorkflowPolicyInfos")\n \n     def getWorkflowPolicyInfos(self):\n-        """ Return the list of workflow policy ids.\n-        """\n+        """Return the list of workflow policy ids."""\n         wfp_ids = []\n         for obj_id, obj in self.objectItems():\n-            if getattr(obj, \'_isAWorkflowPolicy\', 0):\n-                wfp_ids.append({\'id\': obj_id, \'title\': obj.title_or_id(),\n-                                \'description\': obj.description})\n+            if getattr(obj, "_isAWorkflowPolicy", 0):\n+                wfp_ids.append(\n+                    {\n+                        "id": obj_id,\n+                        "title": obj.title_or_id(),\n+                        "description": obj.description,\n+                    }\n+                )\n \n         return tuple(wfp_ids)\n \n-    security.declareProtected(View, \'getWorkflowPolicyConfig\')\n+    security.declareProtected(View, "getWorkflowPolicyConfig")\n \n     def getWorkflowPolicyConfig(self, ob):\n-        """ Return a local workflow configuration if it exist\n-        """\n+        """Return a local workflow configuration if it exist"""\n         if self.isSiteRoot(ob):\n             # Site root use portal_workflow tool as local policy\n             return None\n         if not _checkPermission(ManageWorkflowPolicies, ob):\n-            raise Unauthorized("You need %s permission on %s" % (\n-                ManageWorkflowPolicies, \'/\'.join(ob.getPhysicalPath())))\n+            raise Unauthorized(\n+                "You need %s permission on %s"\n+                % (ManageWorkflowPolicies, "/".join(ob.getPhysicalPath()))\n+            )\n \n         return getattr(ob.aq_explicit, WorkflowPolicyConfig_id, None)\n \n-    security.declareProtected(View, \'isSiteRoot\')\n+    security.declareProtected(View, "isSiteRoot")\n \n     def isSiteRoot(self, ob):\n-        """ Returns a boolean value indicating if the object is an ISiteRoot\n+        """Returns a boolean value indicating if the object is an ISiteRoot\n         or the default page of an ISiteRoot.\n         """\n         siteroot = ISiteRoot.providedBy(ob)\n@@ -235,8 +236,7 @@ def isSiteRoot(self, ob):\n             return True\n         parent = aq_parent(ob)\n         if ISiteRoot.providedBy(parent):\n-            if (getattr(ob, \'isPrincipiaFolderish\', False) and\n-                    ob.isPrincipiaFolderish):\n+            if getattr(ob, "isPrincipiaFolderish", False) and ob.isPrincipiaFolderish:\n                 # We are looking at a folder in the root\n                 return False\n             # We are at a non-folderish item in the root\n@@ -248,22 +248,20 @@ def _post_init(self):\n         _post_init(self) => called from manage_add method, acquired within ZODB (__init__ is not)\n         """\n         pass\n+\n     #\n     #   portal_workflow_policy implementation.\n     #\n \n     def getMaxChainLength(self):\n         """Return the max workflow chain length"""\n-        max_chain_length = self.getProperty(\'max_chain_length\')\n+        max_chain_length = self.getProperty("max_chain_length")\n         return max_chain_length\n \n     def setMaxChainLength(self, max_chain_length):\n         """Set the max workflow chain length"""\n-        safeEditProperty(\n-            self,\n-            \'max_chain_length\',\n-            max_chain_length,\n-            data_type=\'int\')\n+        safeEditProperty(self, "max_chain_length", max_chain_length, data_type="int")\n+\n \n _workflow_policy_factories = {}\n \n@@ -271,12 +269,12 @@ def setMaxChainLength(self, max_chain_length):\n def _makeWorkflowPolicyFactoryKey(factory, id=None, title=None):\n     # The factory should take one argument, id.\n     if id is None:\n-        id = getattr(factory, \'id\', \'\') or getattr(factory, \'meta_type\', \'\')\n+        id = getattr(factory, "id", "") or getattr(factory, "meta_type", "")\n     if title is None:\n-        title = getattr(factory, \'title\', \'\')\n+        title = getattr(factory, "title", "")\n     key = id\n     if title:\n-        key = key + \' (%s)\' % title\n+        key = key + " (%s)" % title\n     return key\n \n \n@@ -286,12 +284,13 @@ def addWorkflowPolicyFactory(factory, id=None, title=None):\n \n \n def _removeWorkflowPolicyFactory(factory, id=None, title=None):\n-    """ Make teardown in unitcase cleaner. """\n+    """Make teardown in unitcase cleaner."""\n     key = _makeWorkflowPolicyFactoryKey(factory, id, title)\n     try:\n         del _workflow_policy_factories[key]\n     except KeyError:\n         pass\n \n+\n InitializeClass(PlacefulWorkflowTool)\n-registerToolInterface(\'portal_placeful_workflow\', IPlacefulWorkflowTool)\n+registerToolInterface("portal_placeful_workflow", IPlacefulWorkflowTool)\ndiff --git a/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py b/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py\nindex dba854d..d0f70a3 100644\n--- a/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py\n+++ b/Products/CMFPlacefulWorkflow/WorkflowPolicyConfig.py\n@@ -20,100 +20,109 @@\n """\n \n from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl.class_init import InitializeClass\n from OFS.SimpleItem import SimpleItem\n from os.path import join as path_join\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlacefulWorkflow.global_symbols import Log\n from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n-from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import WorkflowPolicyConfig_id  # noqa: E501\n+from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import (  # noqa: E501\n+    WorkflowPolicyConfig_id,\n+)\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n \n import six\n \n \n manage_addWorkflowPolicyConfigForm = PageTemplateFile(\n-    path_join(\'www\', \'add_workflow_policy_config_form\'), globals())\n+    path_join("www", "add_workflow_policy_config_form"), globals()\n+)\n \n \n def manage_addWorkflowPolicyConfig(self, REQUEST=None):\n-    \' add a Workflow Policy Configuratio into the system \'\n-    workflow_policy_in = \'\'\n-    workflow_policy_below = \'\'\n+    "add a Workflow Policy Configuratio into the system"\n+    workflow_policy_in = ""\n+    workflow_policy_below = ""\n     if REQUEST:\n-        workflow_policy_in = REQUEST.get(\'workflow_policy_in\', \'\')\n-        workflow_policy_below = REQUEST.get(\'workflow_policy_below\', \'\')\n+        workflow_policy_in = REQUEST.get("workflow_policy_in", "")\n+        workflow_policy_below = REQUEST.get("workflow_policy_below", "")\n \n     # create new workflow policy config\n     i = WorkflowPolicyConfig(workflow_policy_in, workflow_policy_below)\n     self._setObject(WorkflowPolicyConfig_id, i)\n \n     if REQUEST is not None:\n-        REQUEST[\'RESPONSE\'].redirect(self.absolute_url() + \'/manage_main\')\n+        REQUEST["RESPONSE"].redirect(self.absolute_url() + "/manage_main")\n \n \n class WorkflowPolicyConfig(SimpleItem):\n     """Workflow policy configuration"""\n-    meta_type = \'Workflow Policy Configuration\'\n+\n+    meta_type = "Workflow Policy Configuration"\n     index_html = None\n     security = ClassSecurityInfo()\n \n-    manage_main = PageTemplateFile(path_join(\'www\', \'manage_workflow_policy_config\'),\n-                                   globals(),\n-                                   __name__=\'manage_main\')\n+    manage_main = PageTemplateFile(\n+        path_join("www", "manage_workflow_policy_config"),\n+        globals(),\n+        __name__="manage_main",\n+    )\n \n-    manage_options = ((\n-        {\'icon\': \'\', \'label\': \'Edit\', \'action\': \'manage_main\', },\n+    manage_options = (\n+        {\n+            "icon": "",\n+            "label": "Edit",\n+            "action": "manage_main",\n+        },\n     ) + SimpleItem.manage_options\n-    )\n \n-    def __init__(self, workflow_policy_in=\'\', workflow_policy_below=\'\'):\n-        """Initialize a new MailHost instance """\n+    def __init__(self, workflow_policy_in="", workflow_policy_below=""):\n+        """Initialize a new MailHost instance"""\n         self.id = WorkflowPolicyConfig_id\n         self.title = "Workflow policy configuration"\n         self.setPolicyIn(workflow_policy_in)\n         self.setPolicyBelow(workflow_policy_below)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'manage_makeChanges\')\n+    security.declareProtected(ManageWorkflowPolicies, "manage_makeChanges")\n \n     def manage_makeChanges(self, workflow_policy_in, workflow_policy_below):\n-        """ Store the policies """\n+        """Store the policies"""\n         self.setPolicyIn(workflow_policy_in)\n         self.setPolicyBelow(workflow_policy_below)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyInId\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyInId")\n \n     def getPolicyInId(self):\n         return self.workflow_policy_in\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyBelowId\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyBelowId")\n \n     def getPolicyBelowId(self):\n         return self.workflow_policy_below\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyIn\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyIn")\n \n     def getPolicyIn(self):\n-        pwtool = getToolByName(self, \'portal_placeful_workflow\')\n+        pwtool = getToolByName(self, "portal_placeful_workflow")\n         return pwtool.getWorkflowPolicyById(self.getPolicyInId())\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPolicyBelow\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPolicyBelow")\n \n     def getPolicyBelow(self):\n-        pwtool = getToolByName(self, \'portal_placeful_workflow\')\n+        pwtool = getToolByName(self, "portal_placeful_workflow")\n         return pwtool.getWorkflowPolicyById(self.getPolicyBelowId())\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setPolicyIn\')\n+    security.declareProtected(ManageWorkflowPolicies, "setPolicyIn")\n \n     def setPolicyIn(self, policy, update_security=False):\n         if not isinstance(policy, six.string_types):\n             raise ValueError("Policy must be a six.string_types")\n         self.workflow_policy_in = policy\n         if update_security:\n-            wtool = getToolByName(self, \'portal_workflow\')\n+            wtool = getToolByName(self, "portal_workflow")\n             # wtool.updateRoleMappings(context)    # passing context is not possible :(\n             #\n             # Since WorkflowTool.updateRoleMappings()  from the line above supports\n@@ -123,28 +132,28 @@ def setPolicyIn(self, policy, update_security=False):\n             wfs = {}\n             for id in wtool.objectIds():\n                 wf = wtool.getWorkflowById(id)\n-                if hasattr(aq_base(wf), \'updateRoleMappingsFor\'):\n+                if hasattr(aq_base(wf), "updateRoleMappingsFor"):\n                     wfs[id] = wf\n             context = aq_parent(aq_inner(self))\n             wtool._recursiveUpdateRoleMappings(context, wfs)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'setPolicyBelow\')\n+    security.declareProtected(ManageWorkflowPolicies, "setPolicyBelow")\n \n     def setPolicyBelow(self, policy, update_security=False):\n         if not isinstance(policy, six.string_types):\n             raise ValueError("Policy must be a string")\n         self.workflow_policy_below = policy\n         if update_security:\n-            wtool = getToolByName(self, \'portal_workflow\')\n+            wtool = getToolByName(self, "portal_workflow")\n             wfs = {}\n             for id in wtool.objectIds():\n                 wf = wtool.getWorkflowById(id)\n-                if hasattr(aq_base(wf), \'updateRoleMappingsFor\'):\n+                if hasattr(aq_base(wf), "updateRoleMappingsFor"):\n                     wfs[id] = wf\n             context = aq_parent(aq_inner(self))\n             wtool._recursiveUpdateRoleMappings(context, wfs)\n \n-    security.declareProtected(ManageWorkflowPolicies, \'getPlacefulChainFor\')\n+    security.declareProtected(ManageWorkflowPolicies, "getPlacefulChainFor")\n \n     def getPlacefulChainFor(self, portal_type, start_here=False):\n         """Get the chain for the given portal_type.\n@@ -158,15 +167,14 @@ def getPlacefulChainFor(self, portal_type, start_here=False):\n         In other case we test the \'below\' policy first and, if there\'s no chain\n         found, the \'in\' policy.\n         """\n-        workflow_tool = getToolByName(self, \'portal_placeful_workflow\')\n-        Log.debug(\'below policy id %s\', self.getPolicyBelowId())\n-        Log.debug(\'in policy id %s\', self.getPolicyInId())\n+        workflow_tool = getToolByName(self, "portal_placeful_workflow")\n+        Log.debug("below policy id %s", self.getPolicyBelowId())\n+        Log.debug("in policy id %s", self.getPolicyInId())\n \n         chain = None\n         policy = None\n         if not start_here:\n-            policy = workflow_tool.getWorkflowPolicyById(\n-                self.getPolicyBelowId())\n+            policy = workflow_tool.getWorkflowPolicyById(self.getPolicyBelowId())\n             if policy is not None:\n                 chain = policy.getChainFor(portal_type)\n \ndiff --git a/Products/CMFPlacefulWorkflow/__init__.py b/Products/CMFPlacefulWorkflow/__init__.py\nindex 4af4254..cf48f75 100644\n--- a/Products/CMFPlacefulWorkflow/__init__.py\n+++ b/Products/CMFPlacefulWorkflow/__init__.py\n@@ -26,34 +26,41 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-tools = (PlacefulWorkflowTool.PlacefulWorkflowTool, )\n+tools = (PlacefulWorkflowTool.PlacefulWorkflowTool,)\n \n \n # Initialization method\n def initialize(context):\n     utils.registerIcon(\n         DefaultWorkflowPolicy.DefaultWorkflowPolicyDefinition,\n-        \'images/workflow_policy.gif\',\n-        globals())\n+        "images/workflow_policy.gif",\n+        globals(),\n+    )\n \n     context.registerClass(\n         PlacefulWorkflowTool.PlacefulWorkflowTool,\n         meta_type="Placeful Workflow Tool",\n-        constructors=(PlacefulWorkflowTool.addPlacefulWorkflowTool, ),\n-        icon=\'tool.gif\')\n+        constructors=(PlacefulWorkflowTool.addPlacefulWorkflowTool,),\n+        icon="tool.gif",\n+    )\n \n     context.registerClass(\n         WorkflowPolicyConfig.WorkflowPolicyConfig,\n-        permission=\'Add Workflow Policy\',\n-        constructors=(WorkflowPolicyConfig.manage_addWorkflowPolicyConfigForm,\n-                      WorkflowPolicyConfig.manage_addWorkflowPolicyConfig),\n-        icon=\'www/WorkflowPolicyConfig_icon.gif\',\n+        permission="Add Workflow Policy",\n+        constructors=(\n+            WorkflowPolicyConfig.manage_addWorkflowPolicyConfigForm,\n+            WorkflowPolicyConfig.manage_addWorkflowPolicyConfig,\n+        ),\n+        icon="www/WorkflowPolicyConfig_icon.gif",\n     )\n \n-    utils.ToolInit(\'CMF Placeful Workflow Tool\', tools=tools, icon=\'tool.gif\'\n-                   ).initialize(context)\n+    utils.ToolInit(\n+        "CMF Placeful Workflow Tool", tools=tools, icon="tool.gif"\n+    ).initialize(context)\n+\n \n-ModuleSecurityInfo(\'Products.CMFPlacefulWorkflow\').declarePublic(\n-    \'CMFPlacefulWorkflowMessageFactory\')\n+ModuleSecurityInfo("Products.CMFPlacefulWorkflow").declarePublic(\n+    "CMFPlacefulWorkflowMessageFactory"\n+)\n \n-CMFPlacefulWorkflowMessageFactory = MessageFactory(\'cmfplacefulworkflow\')\n+CMFPlacefulWorkflowMessageFactory = MessageFactory("cmfplacefulworkflow")\ndiff --git a/Products/CMFPlacefulWorkflow/adapter.py b/Products/CMFPlacefulWorkflow/adapter.py\nindex d9abdf7..97f7b48 100644\n--- a/Products/CMFPlacefulWorkflow/adapter.py\n+++ b/Products/CMFPlacefulWorkflow/adapter.py\n@@ -50,7 +50,7 @@ def PlacefulWorkflowChain(ob, tool):\n         # portal_workflow\n         return ToolWorkflowChain(ob, tool)\n \n-    elif hasattr(aq_base(ob), \'getPortalTypeName\'):\n+    elif hasattr(aq_base(ob), "getPortalTypeName"):\n         portal_type = ob.getPortalTypeName()\n     else:\n         portal_type = None\n@@ -67,12 +67,13 @@ def PlacefulWorkflowChain(ob, tool):\n     # start_here is used to check \'In policy\': We check it only in the\n     # first folder\n     start_here = True\n-    portal = aq_base(getToolByName(tool, \'portal_url\').getPortalObject())\n+    portal = aq_base(getToolByName(tool, "portal_url").getPortalObject())\n     while chain is None and current_ob is not None:\n         if base_hasattr(current_ob, WorkflowPolicyConfig_id):\n             wfpolicyconfig = getattr(current_ob, WorkflowPolicyConfig_id)\n-            chain = wfpolicyconfig.getPlacefulChainFor(portal_type,\n-                                                       start_here=start_here)\n+            chain = wfpolicyconfig.getPlacefulChainFor(\n+                portal_type, start_here=start_here\n+            )\n             if chain is not None:\n                 return chain\n \ndiff --git a/Products/CMFPlacefulWorkflow/browser/configure.zcml b/Products/CMFPlacefulWorkflow/browser/configure.zcml\nindex 28ba777..85e7bd9 100644\n--- a/Products/CMFPlacefulWorkflow/browser/configure.zcml\n+++ b/Products/CMFPlacefulWorkflow/browser/configure.zcml\n@@ -3,27 +3,30 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n \n+    <!-- Policy Config View on Context -->\n     <browser:page\n         for="*"\n-        name="placeful_workflow_configuration"\n+        name="placeful-workflow-configuration"\n         class=".views.PlacefulWorkflowConfiguration"\n         template="placeful_workflow_configuration.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n         />\n-\n+    \n+    <!-- Mapping Config View CT to to Workflows -->\n     <browser:page\n         for="*"\n-        name="prefs_workflow_policy_mapping"\n+        name="placeful-workflow-policy-mapping"\n         class=".views.WorkflowPolicyMapping"\n-        template="prefs_workflow_policy_mapping.pt"\n+        template="placeful_workflow_policy_mapping.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n         />\n-\n+    \n+    <!-- Controlpanel View -->\n     <browser:page\n         for="*"\n-        name="prefs_workflow_localpolicies_form"\n+        name="workflow-policies-controlpanel"\n         class=".views.WorkflowPoliciesForm"\n-        template="prefs_workflow_localpolicies_form.pt"\n+        template="workflow_policies_controlpanel.pt"\n         permission="CMFPlacefulWorkflow.ManageWorkflowPolicies"\n         />\n \ndiff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex ca12bb4..1a2eb0d 100644\n--- a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -1,212 +1,205 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en"\n       lang="en"\n       metal:use-macro="context/main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n-    <div metal:fill-slot="main"\n+    <metal:main metal:fill-slot="main"\n          tal:define="wf_list context/portal_workflow/objectIds;\n                      pwtool context/portal_placeful_workflow;\n                      config python: pwtool.getWorkflowPolicyConfig(context);\n                      siteroot python: pwtool.isSiteRoot(context);">\n-\n+      <header>\n         <h1 i18n:translate="heading_workflow_policies">\n-            Workflow policies\' local configuration management\n+          Workflow policies\' local configuration management\n         </h1>\n \n-        <p i18n:translate="description_workflow_policies">\n-            Set your workflow policies\' local configuration for this folder and below.\n+        <p class="lead" i18n:translate="description_workflow_policies">\n+          Set your workflow policies\' local configuration for this folder and below.\n         </p>\n+      </header>\n \n+      <div id="content-core">\n         <tal:site tal:condition="siteroot">\n \n-          <p i18n:translate="">\n-              You are viewing the root of your site. Local workflow\n-              configuration is only available in subfolders of your site.\n-          </p>\n+        <div class="alert alert-warning mb-5" i18n:translate="">\n+          You are viewing the root of your site. Local workflow\n+          configuration is only available in subfolders of your site.\n+        </div>\n \n         </tal:site>\n \n         <tal:nosite tal:condition="not:siteroot">\n \n-          <p tal:condition="python:not config and context.isPrincipiaFolderish">\n-            <form action="placeful_workflow_configuration" method="POST">\n-                <button type="submit" name="add_wp_for_type" i18n:translate="description_add_workflow_policy_for_type">\n-                  Add a workflow policy\'s local configuration in the\n-                  <span tal:replace="python:context.translate(context.portal_type)"\n-                        i18n:name="portal_type">\n-                      portal type\n-                  </span>\n-                </button>\n-            </form>\n-          </p>\n-\n-          <p tal:condition="python:not context.isPrincipiaFolderish and context is not container">\n-              <form action="placeful_workflow_configuration" method="POST">\n-                <button type="submit" name="add_wp_local_config" i18n:translate="description_add_workflow_policy">\n-                  Add Workflow policy\'s local configuration\n-                </button>\n-              </form>\n-          </p>\n-\n-          <form id="edit_form"\n-                name="edit_form"\n-                method="POST"\n-                action="${context/absolute_url}/@@placeful_workflow_configuration"\n-                tal:condition="config">\n-\n-              <fieldset tal:define="policies pwtool/getWorkflowPolicyInfos;\n-                                    policy_in_id config/getPolicyInId;\n-                                    policy_below_id config/getPolicyBelowId;">\n-\n-                  <legend i18n:translate="legend_publishing_details">\n-                      Workflow policies\n-                  </legend>\n-\n-                  <strong i18n:translate="label_in_this_folder">For this Folder</strong>\n-                  <div class="formHelp"\n-                       i18n:translate="description_in_this_folder">\n-                      Modify the workflows of this folder and below. If you don\'t want\n-                      to modify the workflow of this Folder use \'Below this Folder\' section.\n-                  </div>\n-\n-                  <div class="field">\n-\n-                      <tal:policy tal:repeat="policy policies">\n-\n-                          <input type="radio" class="noborder" name="policy_in"\n-                                 value="policy" id="cb_policy"\n-                                 tal:attributes="id python: \'cb_policy_\' + policy[\'id\'];\n-                                                 value policy/id;\n-                                                 checked python: policy[\'id\'] == policy_in_id" />\n-\n-                          <label for="cb_policy"\n-                                 tal:attributes="for python: \'cb_\' + policy[\'id\']"\n-                                 tal:content="policy/title"\n-                                 i18n:domain="cmfplacefulworkflow"\n-                                 i18n:translate="">\n-                              Policy Label\n-                          </label>\n-                          <br />\n-                          <span class="formHelp"\n-                                tal:content="policy/description">\n-                              Workflow policy description\n-                          </span>\n-                          <br />\n-                      </tal:policy>\n-\n-                      <input type="radio" class="noborder" name="policy_in"\n-                             id="cb_default_policy" title="" checked="checked"\n-                             tal:attributes="value python:\'\';\n-                                             checked not:config/getPolicyIn" />\n-\n-                      <label for="cb_default_policy"\n-                             i18n:translate="label_default_policy">\n-                          Default Policy\n-                      </label>\n-                      <br />\n-                      <span class="formHelp"\n-                            i18n:translate="help_default_workflow_policy">\n-                          The default workflow policy.\n-                      </span>\n-                      <br />\n-                  </div>\n-\n-                  <hr/>\n-\n-                  <strong i18n:translate="label_below_this_folder">Below this Folder</strong>\n-                  <div class="formHelp"\n-                       i18n:translate="description_below_this_folder">\n-                      Modify the workflows only below this Folder. If you want to\n-                      modify the workflow of this Folder use \'For this Folder\' section.\n-                  </div>\n-\n-                  <div class="field">\n-\n-                      <tal:policy tal:repeat="policy policies">\n-\n-                          <input type="radio" class="noborder" name="policy_below"\n-                                 value="policy" id="cb_policy"\n-                                 tal:attributes="id python: \'cb_policy_\' + policy[\'id\'];\n-                                                 value policy/id;\n-                                                 checked python: policy[\'id\'] == policy_below_id" />\n-\n-                          <label for="cb_policy"\n-                                 tal:attributes="for python: \'cb_\' + policy[\'id\']"\n-                                 tal:content="policy/title"\n-                                 i18n:domain="cmfplacefulworkflow"\n-                                 i18n:translate="">\n-                              Policy Label\n-                          </label>\n-                          <br />\n-                          <span class="formHelp"\n-                                tal:content="policy/description">\n-                              Workflow policy description\n-                          </span>\n-                          <br />\n-\n-                      </tal:policy>\n-\n-                      <input type="radio"\n-                             class="noborder"\n-                             name="policy_below"\n-                             id="cb_default_policy"\n-                             title=""\n-                             checked="1"\n-                             tal:attributes="value python:\'\';\n-                                             checked not: config/getPolicyBelow" />\n-\n-                      <label for="cb_default_policy"\n-                             i18n:translate="label_default_policy">\n-                          Default Policy\n-                      </label>\n-                      <br />\n-                      <span class="formHelp"\n-                            i18n:translate="help_default_workflow_policy">\n-                          The default workflow policy.\n-                      </span>\n-                      <br />\n-\n-                  </div>\n-\n-                  <strong i18n:translate="label_update_security">Update security</strong>\n-                  <div class="formHelp"\n-                       i18n:translate="description_update_security">\n-                      Update catalog security (update role mappings). Note that updating catalog\n-                      security might be a very long operation if there are a lot of brains to be\n-                      re-indexed. This operation can be done afterwards as a separate upgrade step.\n-                  </div>\n-\n-                  <div class="field">\n-\n-                    <input type="checkbox" checked="checked" class="noborder"\n-                           name="update_security" value="update_security" id="cb_update_security" />\n-\n-                    <label for="cb_update_security"\n-                           i18n:domain="cmfplacefulworkflow"\n-                           i18n:translate="">\n-                        Update catalog role mappings\n-                    </label>\n-\n-                  </div>\n-                  <br />\n-\n-                  <div class="formControls" i18n:domain="plone">\n-\n-                      <input class="context"\n-                             type="submit"\n-                             name="submit"\n-                             value="Save"\n-                             i18n:attributes="value label_save;" />\n-                      <input class="standalone"\n-                             type="submit"\n-                             name="submit"\n-                             value="Cancel"\n-                             i18n:attributes="value label_cancel;" />\n-                  </div>\n-              </fieldset>\n-          </form>\n+        <form\n+          tal:condition="python:not config and context.isPrincipiaFolderish"\n+          action="@@placeful-workflow-configuration" method="POST">\n+          <button type="submit" name="add_wp_for_type" class="btn btn-primary"\n+            i18n:translate="description_add_workflow_policy_for_type">\n+            Add a workflow policy\'s local configuration in the\n+            <span tal:replace="python:context.translate(context.portal_type)"\n+              i18n:name="portal_type">portal type</span>\n+          </button>\n+        </form>\n+\n+        <form\n+          tal:condition="python:not context.isPrincipiaFolderish and context is not container"\n+          action="@@placeful-workflow-configuration" method="POST">\n+          <button type="submit" name="add_wp_local_config" class="btn btn-primary"\n+            i18n:translate="description_add_workflow_policy">\n+            Add Workflow policy\'s local configuration\n+          </button>\n+        </form>\n+\n+        <form id="edit_form"\n+          name="edit_form"\n+          method="POST"\n+          action="${context/absolute_url}/@@placeful-workflow-configuration"\n+          tal:condition="config">\n+\n+          <tal:defines\n+            tal:define="\n+              policies pwtool/getWorkflowPolicyInfos;\n+              policy_in_id config/getPolicyInId;\n+              policy_below_id config/getPolicyBelowId;">\n+\n+          <h3 i18n:translate="legend_publishing_details">Workflow policies</h3>\n+\n+          <strong i18n:translate="label_in_this_folder">For this Folder</strong>\n+\n+          <div class="mb-3 form-text"\n+            i18n:translate="description_in_this_folder">\n+            Modify the workflows of this folder and below. If you don\'t want\n+            to modify the workflow of this Folder use \'Below this Folder\' section.\n+          </div>\n+\n+          <div class="mb-3 form-check" tal:repeat="policy policies">\n+\n+            <input type="radio" class="form-check-input" name="policy_in"\n+              value="policy" id="cb_policy"\n+              tal:attributes="\n+                id python: \'cb_policy_\' + policy[\'id\'];\n+                value policy/id;\n+                checked python: policy[\'id\'] == policy_in_id" />\n+\n+            <label class="form-check-label" for="cb_policy"\n+              tal:attributes="for python: \'cb_policy_\' + policy[\'id\']"\n+              tal:content="policy/title"\n+              i18n:domain="cmfplacefulworkflow"\n+              i18n:translate="">Policy Label</label>\n+\n+            <div class="form-text" tal:condition="policy/description"\n+              tal:content="policy/description">Workflow policy description</div>\n+\n+          </div>\n+\n+          <div class="mb-3 form-check">\n+\n+            <input type="radio" class="form-check-input" name="policy_in"\n+              id="cb_default_policy" title="" checked="checked"\n+              tal:attributes="value python:\'\'; checked not:config/getPolicyIn" />\n+\n+            <label for="cb_default_policy" class="form-check-label" i18n:translate="label_default_policy">Default Policy</label>\n+\n+            <div class="form-text"\n+              i18n:translate="help_default_workflow_policy">\n+              The default workflow policy.\n+            </div>\n+\n+          </div>\n+\n+          <strong i18n:translate="label_below_this_folder">Below this Folder</strong>\n+\n+          <div class="mb-3 form-text"\n+            i18n:translate="description_below_this_folder">\n+            Modify the workflows only below this Folder. If you want to\n+            modify the workflow of this Folder use \'For this Folder\' section.\n+          </div>\n+\n+          <div class="mb-3 form-check" tal:repeat="policy policies">\n+\n+            <input type="radio" class="form-check-input" name="policy_below"\n+              value="policy" id="cb_policy"\n+              tal:attributes="\n+                id python: \'cb_policy_below_\' + policy[\'id\'];\n+                value policy/id;\n+                checked python: policy[\'id\'] == policy_below_id" />\n+\n+            <label for="cb_policy" class="form-check-label"\n+              tal:attributes="for python: \'cb_policy_below_\' + policy[\'id\']"\n+              tal:content="policy/title"\n+              i18n:domain="cmfplacefulworkflow"\n+              i18n:translate="">Policy Label</label>\n+\n+            <div class="form-text" tal:content="policy/description">\n+              Workflow policy description\n+            </div>\n+\n+          </div>\n+\n+          <div class="mb-3 form-check">\n+\n+            <input type="radio"\n+              class="form-check-input"\n+              name="policy_below"\n+              id="cb_default_policy_below"\n+              title=""\n+              checked="1"\n+              tal:attributes="value python:\'\';\n+                checked not: config/getPolicyBelow" />\n+\n+            <label for="cb_default_policy_below" class="form-check-label"\n+              i18n:translate="label_default_policy">Default Policy</label>\n+\n+            <div class="form-text" i18n:translate="help_default_workflow_policy">\n+              The default workflow policy.\n+            </div>\n+\n+          </div>\n+\n+          <strong i18n:translate="label_update_security">Update security</strong>\n+\n+          <div class="mb-3 form-text"\n+            i18n:translate="description_update_security">\n+            Update catalog security (update role mappings). Note that updating catalog\n+            security might be a very long operation if there are a lot of brains to be\n+            re-indexed. This operation can be done afterwards as a separate upgrade step.\n+          </div>\n+\n+          <div class="mb-3 form-check">\n+\n+            <input type="checkbox" checked="checked" class="form-check-input"\n+              name="update_security" value="update_security" id="cb_update_security" />\n+\n+            <label for="cb_update_security" class="form-check-label"\n+              i18n:domain="cmfplacefulworkflow"\n+              i18n:translate="">Update catalog role mappings</label>\n+\n+          </div>\n+\n+          <div class="mb-3" i18n:domain="plone">\n+\n+            <input class="btn btn-primary"\n+              type="submit"\n+              name="submit"\n+              value="Save"\n+              i18n:attributes="value label_save;" />\n+\n+            <input class="btn btn-secondary"\n+              type="submit"\n+              name="submit"\n+              value="Cancel"\n+              i18n:attributes="value label_cancel;" />\n+          </div>\n+\n+        </tal:defines>\n+        </form>\n \n         </tal:nosite>\n+      </div>\n \n-    </div>\n+    </metal:main>\n </html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\nnew file mode 100644\nindex 0000000..21854ea\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_policy_mapping.pt\n@@ -0,0 +1,193 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en"\n+      lang="en"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n+      i18n:domain="cmfplacefulworkflow">\n+\n+\n+    <metal:main metal:fill-slot="prefs_configlet_main"\n+         tal:define="allowedContentTypes allowedSortedContentTypes|context/allowedContentTypes;\n+                     wfpid python:request.get(\'wfpid\');\n+                     wf_policy python:context.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n+                     wtool context/portal_workflow;\n+                     wf_list python: [{\'id\': obj.getId(), \'title\': obj.title_or_id()} for obj in wtool.objectValues()];">\n+\n+        <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n+\n+        <header>\n+\n+          <h1>\n+            <span tal:replace="wfpid" tal:condition="python:not wf_policy.getTitle()" />\n+            <span tal:condition="python:wf_policy.getTitle()">\n+                <span tal:replace="python:wf_policy.getTitle()" />\n+            </span>\n+          </h1>\n+\n+          <p i18n:translate="description_workflow_custom_mapping">\n+              Custom workflow policy which maps content types to workflows.\n+          </p>\n+\n+          <a href=""\n+            class="link-parent"\n+            tal:attributes="href string:$portal_url/@@workflow-policies-controlpanel"\n+            i18n:translate="label_up_to_placeful_workflow">\n+            Up to Placeful Workflow\n+          </a>\n+\n+        </header>\n+\n+        <div id="content-core">\n+          <form name="prefs-workflow-policy-mapping_set"\n+                action="${context/absolute_url}/@@placeful-workflow-policy-mapping"\n+                method="post">\n+\n+              <fieldset>\n+\n+                  <legend i18n:translate="legend_workflow_policy_details">\n+                      Workflow Policy Details\n+                  </legend>\n+\n+                  <div class="mb-3">\n+\n+                      <label class="form-label"\n+                        for="title"\n+                        i18n:domain="plone">\n+                        <span tal:omit-tag="" i18n:translate="label_title">Title</span>\n+                        <span class="fieldRequired"\n+                          title="Required"\n+                          i18n:domain="plone"\n+                          i18n:attributes="title title_required;"\n+                          i18n:translate="label_required">\n+                          (Required)\n+                        </span>\n+                      </label>\n+\n+                      <input type="text"\n+                              id="title"\n+                              name="title"\n+                              value=""\n+                              class="form-control"\n+                              tal:attributes="value python:request.get(\'title\',wf_policy.getTitle())" />\n+                  </div>\n+\n+                  <div class="mb-3">\n+\n+                      <label for="description"\n+                            class="form-label"\n+                            i18n:domain="plone"\n+                            i18n:translate="label_description">\n+                          Description\n+                      </label>\n+\n+                      <textarea cols="80"\n+                                rows="2"\n+                                class="form-control"\n+                                id="description"\n+                                name="description"\n+                                tal:content="python:request.get(\'description\',wf_policy.getDescription())">\n+                          Workflow Policy Description.\n+                      </textarea>\n+\n+                      <div class="form-text"\n+                            i18n:translate="help_workflow_policy_description">\n+                          A brief description of the workflow policy.\n+                      </div>\n+\n+                  </div>\n+\n+                  <div class="mb-3">\n+\n+                      <label for="default_workflow_id"\n+                            class="form-label"\n+                            i18n:translate="label_default_workflow">\n+                          Default Workflow\n+                      </label>\n+\n+                      <select id="select_workflow"\n+                              class="form-select"\n+                              name="default_workflow_id">\n+\n+                          <option tal:repeat="wf wf_list"\n+                                  tal:attributes="value wf/id;\n+                                                  selected python:\'selected\' if (wf[\'id\'],)==wf_policy.getDefaultChain(context) else None"\n+                                  tal:content="wf/title"\n+                                  i18n:domain="plone"\n+                                  i18n:translate="">\n+                              example_workflow\n+                          </option>\n+                      </select>\n+\n+                      <div class="form-text"\n+                            i18n:translate="help_default_workflow_for_types">\n+                          Default workflow for content types.\n+                      </div>\n+                  </div>\n+\n+                  <div class="mb-3"\n+                    summary="Workflow to content type mapping."\n+                    i18n:attributes="summary summary_workflow_type_mapping;">\n+\n+                      <label for="workflow_id" class="form-label"\n+                        summary="Workflow to content type mapping."\n+                        i18n:attributes="summary summary_workflow_type_mapping;"\n+                        i18n:translate="label_workflow_by_type">\n+                          Workflows by type\n+                      </label>\n+\n+                      <tal:ctype tal:repeat="ctype allowedContentTypes">\n+                        <div class="input-group mb-3"\n+                          tal:define="ctype_title ctype/Title;\n+                          ctype_id ctype/getId;\n+\n+                          chain python:wf_policy.getChainFor(ctype_id, managescreen=True) or (\'backward compatibility\',);">\n+                          <label class="input-group-text"\n+                            for="select_workflow"\n+                            tal:content="ctype_title"\n+                            tal:attributes="for python: \'select_workflow_\' + ctype_id"\n+                            i18n:translate="">Title</label>\n+                          <select id="select_workflow" name="workflow_id" class="form-select"\n+                            tal:attributes="name string:wf.${ctype_id}:record;id python: \'select_workflow_\' + ctype_id" >\n+                            <option value="acquisition"\n+                              tal:attributes="selected python:\'selected\' if chain is None else None;"\n+                              i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n+                            <option value=""\n+                              tal:attributes="selected python:\'selected\' if chain == () else None;"\n+                              i18n:translate="label_mapping_no_workflow">No workflow</option>\n+\n+                            <option value="(Default)"\n+                              tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n+                              i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n+                            <option tal:repeat="wf wf_list"\n+                              tal:attributes="value wf/id;\n+                                selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n+                              tal:content="wf/title"\n+                              i18n:domain="plone"\n+                              i18n:translate="">workflow_id</option>\n+                          </select>\n+                        </div>\n+                      </tal:ctype>\n+\n+                      <div class="form-text" i18n:translate="help_workflow_assign_all_types">\n+                        You can assign a workflow for all content types.\n+                      </div>\n+\n+                      <input type="hidden" value="" name="wfpid" tal:attributes="value wfpid" />\n+\n+                  </div>\n+                  <div class="formControls">\n+                      <input class="btn btn-primary"\n+                              type="submit"\n+                              name="submit"\n+                              value="Save"\n+                              i18n:domain="plone"\n+                              i18n:attributes="value label_save;" />\n+                  </div>\n+              </fieldset>\n+          </form>\n+        </div>\n+    </metal:main>\n+\n+</html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\ndeleted file mode 100644\nindex 46c3a75..0000000\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n+++ /dev/null\n@@ -1,158 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      lang="en"\n-      metal:use-macro="context/prefs_main_template/macros/master"\n-      i18n:domain="cmfplacefulworkflow">\n-\n-    <metal:block fill-slot="top_slot"/>\n-\n-    <div metal:fill-slot="prefs_configlet_content"\n-         tal:define="errors python:request.get(\'errors\', {});"\n-         class="configlet">\n-\n-        <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n-\n-        <div id="content">\n-\n-            <h5 class="hiddenStructure">Views</h5>\n-\n-            <div class="documentContent" id="region-content">\n-\n-                <a name="documentContent"></a>\n-\n-                <h1 i18n:translate="heading_placeful_workflow">\n-                    Workflow Policies\n-                </h1>\n-\n-                <a id="setup-link" class="link-parent"\n-                   tal:attributes="href string:$portal_url/@@overview-controlpanel"\n-                   i18n:domain="plone"\n-                   i18n:translate="label_up_to_plone_setup">\n-                    Up to Plone Setup\n-                </a>\n-\n-                <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n-                  Portal status message\n-                </div>\n-\n-                <h3 i18n:translate="title_workflow_policy_setup">\n-                    Workflow Policies Setup\n-                </h3>\n-\n-                <p i18n:translate="description_workflow_policy_setup">\n-                    Here you can create and configure your workflow policies.\n-                    A policy modifies workflows for any items in or below\n-                    a specific folder. To apply a policy you have to add a\n-                    local workflow policy configuration to the desired\n-                    folder using the \'policy\' item in the \'state\' drop-down\n-                    menu.\n-                </p>\n-\n-                <form action=""\n-                      name=""\n-                      method="post"\n-                      tal:attributes="action string:${context/absolute_url}/@@prefs_workflow_localpolicies_form"\n-                      tal:define="wfp python:context.portal_placeful_workflow;">\n-\n-                    <fieldset>\n-                        <legend i18n:translate="legend_workflow_policies">Existing Workflow Policies</legend>\n-\n-                        <div tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n-                             class="field">\n-\n-                            <tal:wfp tal:define="wfp python:wfp.getWorkflowPolicyById(wfpid)">\n-\n-                            <input type="checkbox" class="noborder" id="policy_id" name="policy_ids:list"\n-                                   tal:attributes="id wfpid; value wfpid" />\n-\n-                            <label for="policy_id"\n-                                   tal:attributes="for wfpid">\n-                                <a href="prefs_workflow_policy_mapping"\n-                                   tal:attributes="href python:\'prefs_workflow_policy_mapping?wfpid=\'+wfpid"\n-                                   tal:content="python:wfp.getTitle() or wfp.getId()"\n-                                   i18n:translate="">\n-                                    Title of the policy mapping\n-                                </a>\n-                            </label>\n-\n-                            <div class="formHelp"\n-                                 tal:content="python:wfp.getDescription()">\n-                                Description of the policy mapping\n-                            </div>\n-\n-                            </tal:wfp>\n-\n-                        </div>\n-\n-                        <div class="formControls"\n-                             tal:condition="python:wfp.getWorkflowPolicyIds()">\n-                            <input class="context" type="submit" name="delete" value="Remove selected"\n-                                   i18n:attributes="value label_remove_selected;"\n-                                   />\n-                        </div>\n-                    </fieldset>\n-\n-                    <fieldset>\n-                        <legend i18n:translate="legend_add_workflow_policy">Add a workflow policy</legend>\n-                        <div class="field"\n-                             tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                            <label i18n:translate="label_new_policy_id">New policy Id</label>\n-                            <span class="fieldRequired" title="Required"\n-                                  i18n:domain="plone"\n-                                  i18n:attributes="title title_required;"\n-                                  i18n:translate="label_required">(Required)</span>\n-\n-                            <div class="formHelp" id=""\n-                                 i18n:translate="description_new_policy_id">\n-                                Enter an id for the new workflow policy\n-                            </div>\n-\n-                            <div tal:content="error">Validation error output</div>\n-\n-                            <input name="policy_id" value="" size="30" />\n-                        </div>\n-                        <div class="field"\n-                             tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:\'field error\' if error else \'field\'">\n-\n-                            <label i18n:translate="label_duplicate_policy_id">Duplicate another policy</label>\n-                            <span class="fieldRequired" title="Required"\n-                                  i18n:domain="plone"\n-                                  i18n:attributes="title title_required;"\n-                                  i18n:translate="label_required">(Required)</span>\n-                            <div class="formHelp" id=""\n-                                 i18n:translate="description_duplicate_policy_id">\n-                                Choose a policy to copy when creating the new policy.\n-                                You also can choose to start with an empty policy.\n-                            </div>\n-\n-                            <div tal:content="error">Validation error output</div>\n-                            <select name="policy_duplicate_id">\n-                                <option value="empty"\n-                                        i18n:translate="label_no_policy_duplicated">\n-                                    No policy duplicated\n-                                </option>\n-                                <option value="portal_workflow"\n-                                        i18n:translate="label_duplicate_portal_workflow">Global workflow</option>\n-                                <option tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n-                                        tal:attributes="value wfpid"\n-                                        tal:content="python:wfp.getWorkflowPolicyById(wfpid).getTitle()">WF policy id</option>\n-                            </select>\n-                        </div>\n-\n-                        <div class="formControls">\n-                            <input type="submit" class="context" name="add" value="Add"\n-                                   i18n:attributes="value label_add;"\n-                                   />\n-                        </div>\n-\n-                        <input type="hidden" name="form_submitted" value="1" tal:attributes="value template/id" />\n-                    </fieldset>\n-                </form>\n-\n-            </div>\n-        </div>\n-\n-    </div>\n-</html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\ndeleted file mode 100644\nindex f9cce67..0000000\n--- a/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n+++ /dev/null\n@@ -1,195 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      lang="en"\n-      metal:use-macro="context/prefs_main_template/macros/master"\n-      i18n:domain="cmfplacefulworkflow">\n-\n-    <metal:block fill-slot="top_slot"/>\n-\n-    <div metal:fill-slot="prefs_configlet_content"\n-         tal:define="allowedContentTypes allowedSortedContentTypes|context/allowedContentTypes;\n-                     wfpid python:request.get(\'wfpid\');\n-                     wf_policy python:context.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n-                     wtool context/portal_workflow;\n-                     wf_list python: [{\'id\': obj.getId(), \'title\': obj.title_or_id()} for obj in wtool.objectValues()];"\n-         class="configlet">\n-\n-        <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n-\n-        <div id="content">\n-\n-            <h5 class="hiddenStructure">Views</h5>\n-\n-            <div class="documentContent" id="region-content">\n-\n-                <a name="documentContent"></a>\n-\n-                <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n-                  Portal status message\n-                </div>\n-\n-                <h1>\n-                    <span tal:content="wfpid" />\n-                    <span tal:condition="python:wf_policy.getTitle()">\n-                        (<span tal:content="python:wf_policy.getTitle()" />)\n-                    </span>\n-                </h1>\n-\n-                <a href=""\n-                   class="link-parent"\n-                   tal:attributes="href string:$portal_url/prefs_workflow_localpolicies_form"\n-                   i18n:translate="label_up_to_placeful_workflow">\n-                    Up to Placeful Workflow\n-                </a>\n-\n-                <p i18n:translate="description_workflow_custom_mapping">\n-                    Custom workflow policy which maps content types to workflows.\n-                </p>\n-                <form name="prefs_workflow_policy_mapping_set"\n-                      action="${context/absolute_url}/@@prefs_workflow_policy_mapping"\n-                      method="post">\n-\n-                    <fieldset>\n-\n-                        <legend i18n:translate="legend_workflow_policy_details">\n-                            Workflow Policy Details\n-                        </legend>\n-\n-                        <div class="field">\n-\n-                            <label for="title"\n-                                   i18n:domain="plone"\n-                                   i18n:translate="label_title">\n-                                Title\n-                            </label>\n-\n-                            <span class="fieldRequired"\n-                                  title="Required"\n-                                  i18n:domain="plone"\n-                                  i18n:attributes="title title_required;"\n-                                  i18n:translate="label_required">\n-                                (Required)\n-                            </span>\n-                            <br />\n-\n-                            <input type="text"\n-                                   id="title"\n-                                   name="title"\n-                                   value=""\n-                                   size="40"\n-                                   tal:attributes="value python:request.get(\'title\',wf_policy.getTitle())" />\n-                        </div>\n-\n-                        <div class="field">\n-\n-                            <label for="description"\n-                                   i18n:domain="plone"\n-                                   i18n:translate="label_description">\n-                                Description\n-                            </label>\n-\n-                            <div class="formHelp"\n-                                 i18n:translate="help_workflow_policy_description">\n-                                A brief description of the workflow policy.\n-                            </div>\n-\n-                            <textarea cols="80"\n-                                      rows="2"\n-                                      id="description"\n-                                      name="description"\n-                                      tal:content="python:request.get(\'description\',wf_policy.getDescription())">\n-                                Workflow Policy Description.\n-                            </textarea>\n-\n-                        </div>\n-\n-                        <div class="field">\n-\n-                            <label for="default_workflow_id"\n-                                   i18n:translate="label_default_workflow">\n-                                Default Workflow\n-                            </label>\n-\n-                            <div class="formHelp"\n-                                 i18n:translate="help_default_workflow_for_types">\n-                                Default workflow for content types.\n-                            </div>\n-\n-                            <select id="select_workflow"\n-                                    name="default_workflow_id">\n-\n-                                <option tal:repeat="wf wf_list"\n-                                        tal:attributes="value wf/id;\n-                                                        selected python:\'selected\' if (wf[\'id\'],)==wf_policy.getDefaultChain(context) else None"\n-                                        tal:content="wf/title"\n-                                        i18n:domain="plone"\n-                                        i18n:translate="">\n-                                    example_workflow\n-                                </option>\n-                            </select>\n-                        </div>\n-\n-                        <div class="field">\n-\n-                            <label for="workflow_id"\n-                                   i18n:translate="label_workflow_by_type">\n-                                Workflows by type\n-                            </label>\n-\n-                            <div class="formHelp" i18n:translate="help_workflow_assign_all_types">\n-                                You can assign a workflow for all content types.\n-                            </div>\n-\n-                            <table class="field"\n-                                   summary="Workflow to content type mapping."\n-                                   i18n:attributes="summary summary_workflow_type_mapping;">\n-                                <tal:ctype tal:repeat="ctype allowedContentTypes">\n-                                    <tr tal:define="ctype_title ctype/Title;\n-                                                    ctype_id ctype/getId;\n-                                                    chain python:wf_policy.getChainFor(ctype_id, managescreen=True) or (\'backward compatibility\',);\n-                                                    ">\n-                                        <td valign="top"\n-                                            tal:content="ctype_title"\n-                                            i18n:translate="">\n-                                            Title\n-                                        </td>\n-                                        <td valign="top">\n-                                            <select id="select_workflow" name="workflow_id"\n-                                                    tal:attributes="name string:wf.${ctype_id}:record;" >\n-                                                <option value="acquisition"\n-                                                        tal:attributes="selected python:\'selected\' if chain is None else None;"\n-                                                        i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n-                                                <option value=""\n-                                                        tal:attributes="selected python:\'selected\' if chain == () else None;"\n-                                                        i18n:translate="label_mapping_no_workflow">No workflow</option>\n-\n-                                                <option value="(Default)"\n-                                                        tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n-                                                        i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n-                                                <option tal:repeat="wf wf_list"\n-                                                        tal:attributes="value wf/id;\n-                                                                        selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n-                                                        tal:content="wf/title"\n-                                                        i18n:domain="plone"\n-                                                        i18n:translate="">workflow_id</option>\n-                                            </select>\n-                                        </td>\n-                                    </tr>\n-                                </tal:ctype>\n-                            </table>\n-                            <input type="hidden" value="" name="wfpid" tal:attributes="value wfpid" />\n-                        </div>\n-                        <div class="formControls">\n-                            <input class="context"\n-                                   type="submit"\n-                                   name="submit"\n-                                   value="Save"\n-                                   i18n:domain="plone"\n-                                   i18n:attributes="value label_save;" />\n-                        </div>\n-                    </fieldset>\n-                </form>\n-            </div>\n-        </div>\n-    </div>\n-\n-</html>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/views.py b/Products/CMFPlacefulWorkflow/browser/views.py\nindex 4899c43..a015390 100644\n--- a/Products/CMFPlacefulWorkflow/browser/views.py\n+++ b/Products/CMFPlacefulWorkflow/browser/views.py\n@@ -5,144 +5,157 @@\n \n \n class PlacefulWorkflowConfiguration(BrowserView):\n-    """Manage placeful wf for a item or container\n-    """\n+    """Manage placeful wf for a item or container"""\n \n     def __call__(self):\n         context = self.context\n         request = self.request\n \n-        policy_in = request.form.get(\'policy_in\', None)\n-        policy_below = request.form.get(\'policy_below\', None)\n+        policy_in = request.form.get("policy_in", None)\n+        policy_below = request.form.get("policy_below", None)\n \n         # Form submission will either have update_security as a key\n         # meaning user wants to do it OR no key at all. If this script\n         # is called directly, we use the parameter\n-        update_security = request.form.get(\'update_security\', None)\n+        update_security = request.form.get("update_security", None)\n \n-        if \'add_wp_for_type\' in request.form:\n-            context.manage_addProduct[\'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig(request)\n-            context.plone_utils.addPortalMessage(_(u\'Workflow policy configuration added.\'))\n-            return request.response.redirect(\'placeful_workflow_configuration\')\n+        if "add_wp_for_type" in request.form:\n+            context.manage_addProduct[\n+                "CMFPlacefulWorkflow"\n+            ].manage_addWorkflowPolicyConfig(request)\n+            context.plone_utils.addPortalMessage(\n+                _("Workflow policy configuration added.")\n+            )\n+            return request.response.redirect("@@placeful-workflow-configuration")\n \n         # This script is used for both the save and cancel button\n         cancel = False\n-        submit = request.form.get(\'submit\', None)\n+        submit = request.form.get("submit", None)\n         if not submit:\n             return self.index()\n \n-        if submit is not None and submit == \'Cancel\':\n+        if submit is not None and submit == "Cancel":\n             cancel = True\n-            message = _(u\'Configuration changes cancelled.\')\n-\n+            message = _("Configuration changes cancelled.")\n \n         if not cancel:\n-            tool = getToolByName(context, \'portal_placeful_workflow\')\n+            tool = getToolByName(context, "portal_placeful_workflow")\n             config = tool.getWorkflowPolicyConfig(context)\n             if not config:\n-                message = _(u\'No config in this folder.\')\n+                message = _("No config in this folder.")\n             else:\n-                if not tool.isValidPolicyName(policy_in) and not policy_in == \'\':\n+                if not tool.isValidPolicyName(policy_in) and not policy_in == "":\n                     raise AttributeError("%s is not a valid policy id" % policy_in)\n \n-                if not tool.isValidPolicyName(policy_below) and not policy_below == \'\':\n+                if not tool.isValidPolicyName(policy_below) and not policy_below == "":\n                     raise AttributeError("%s is not a valid policy id" % policy_below)\n \n                 config.setPolicyIn(policy_in, update_security)\n                 config.setPolicyBelow(policy_below, update_security)\n \n-                message = _(\'Changed policies.\')\n+                message = _("Changed policies.")\n \n         context.plone_utils.addPortalMessage(message)\n-        return request.response.redirect(\'placeful_workflow_configuration\')\n+        return request.response.redirect("@@placeful-workflow-configuration")\n \n \n class WorkflowPoliciesForm(BrowserView):\n-\n     def __call__(self):\n         context = self.context\n         request = self.request\n \n-        policy_ids = request.get(\'policy_ids\', [])\n-        policy_id = request.get(\'policy_id\', None)\n-        delete = request.get(\'delete\', None)\n-        add = request.get(\'add\', None)\n-        policy_duplicate_id = request.get(\'policy_duplicate_id\', \'empty\')\n+        policy_ids = request.get("policy_ids", [])\n+        policy_id = request.get("policy_id", None)\n+        delete = request.get("delete", None)\n+        add = request.get("add", None)\n+        policy_duplicate_id = request.get("policy_duplicate_id", "empty")\n \n-        pwtool = getToolByName(context, \'portal_placeful_workflow\')\n-        plone_utils = getToolByName(context, \'plone_utils\')\n+        pwtool = getToolByName(context, "portal_placeful_workflow")\n+        plone_utils = getToolByName(context, "plone_utils")\n \n         if delete and policy_ids:\n             for policy_id in policy_ids:\n                 if policy_id in pwtool.objectIds():\n-                    pwtool.manage_delObjects([policy_id, ])\n-            plone_utils.addPortalMessage(_(u\'Deleted Local Workflow Policy.\'), \'info\')\n-            return request.response.redirect(\'@@prefs_workflow_localpolicies_form\')\n+                    pwtool.manage_delObjects(\n+                        [\n+                            policy_id,\n+                        ]\n+                    )\n+            plone_utils.addPortalMessage(_("Deleted Local Workflow Policy."), "info")\n+            return request.response.redirect("@@placeful-workflow-configuration")\n \n         elif add:\n             if policy_id:\n-                pwtool.manage_addWorkflowPolicy(id=policy_id, duplicate_id=policy_duplicate_id)\n-                plone_utils.addPortalMessage(_(u\'Local Workflow Policy added.\'), \'info\')\n-                return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=\' + policy_id)\n+                pwtool.manage_addWorkflowPolicy(\n+                    id=policy_id, duplicate_id=policy_duplicate_id\n+                )\n+                plone_utils.addPortalMessage(_("Local Workflow Policy added."), "info")\n+                return request.response.redirect(\n+                    "@@placeful-workflow-policy-mapping?wfpid=" + policy_id\n+                )\n \n             else:\n-                plone_utils.addPortalMessage(_(u\'The policy Id is required.\'), \'error\')\n-                return request.response.redirect(\'@@prefs_workflow_localpolicies_form\')\n+                plone_utils.addPortalMessage(_("The policy Id is required."), "error")\n+                return request.response.redirect("@@placeful-workflow-configuration")\n \n         return self.index()\n \n+\n class WorkflowPolicyMapping(BrowserView):\n-    """\n-    """\n+    """ """\n \n     def __call__(self):\n         # First check that we have a policy id and that it exists.\n         # If we don\'t, return to the overview form.\n         request = self.request\n         context = self.context\n-        plone_utils = getToolByName(context, \'plone_utils\')\n-        wfpid = request.get(\'wfpid\', None)\n+        plone_utils = getToolByName(context, "plone_utils")\n+        wfpid = request.get("wfpid", None)\n         policy = None\n         if wfpid:\n-            tool = getToolByName(context, \'portal_placeful_workflow\')\n+            tool = getToolByName(context, "portal_placeful_workflow")\n             policy = tool.getWorkflowPolicyById(wfpid)\n         if policy is None:\n-            portal_url = getToolByName(context, \'portal_url\')()\n-            plone_utils.addPortalMessage(_(u\'No Policy selected.\'), \'error\')\n-            return request.response.redirect(portal_url + \'/@@prefs_workflow_localpolicies_form\')\n+            portal_url = getToolByName(context, "portal_url")()\n+            plone_utils.addPortalMessage(_("No Policy selected."), "error")\n+            return request.response.redirect(\n+                portal_url + "/@@placeful-workflow-configuration"\n+            )\n \n-        if not request.get(\'submit\', None):\n+        if not request.get("submit", None):\n             return self.index()\n \n-        title = request.get(\'title\', None)\n-        description = request.get(\'description\', None)\n-        default_workflow_id = request.get(\'default_workflow_id\', None)\n-        wf = request.get(\'wf\', None)\n+        title = request.get("title", None)\n+        description = request.get("description", None)\n+        default_workflow_id = request.get("default_workflow_id", None)\n+        wf = request.get("wf", None)\n \n         if title:\n             plone_utils.addPortalMessage(title)\n             policy.setTitle(title)\n         else:\n-            plone_utils.addPortalMessage(_(u\'Title is required.\'), \'error\')\n-            return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n+            plone_utils.addPortalMessage(_("Title is required."), "error")\n+            return request.response.redirect(\n+                "@@placeful-workflow-policy-mapping?wfpid=%s" % wfpid\n+            )\n \n         policy.setDescription(description)\n-        policy.setDefaultChain(\n-            default_chain=(default_workflow_id, ),\n-            REQUEST=request)\n+        policy.setDefaultChain(default_chain=(default_workflow_id,), REQUEST=request)\n \n         # for filtering special option values\n-        CHAIN_MAP = {\'acquisition\': None, \'\': ()}\n+        CHAIN_MAP = {"acquisition": None, "": ()}\n \n         for pt, wflow in list(wf.items()):\n             if wflow in CHAIN_MAP:\n                 chain = CHAIN_MAP[wflow]\n             else:\n-                chain = (wflow, )\n+                chain = (wflow,)\n             policy.setChain(portal_type=pt, chain=chain, REQUEST=request)\n \n-        wf_tool = getToolByName(context, \'portal_workflow\')\n+        wf_tool = getToolByName(context, "portal_workflow")\n         wf_tool.updateRoleMappings()\n \n-        plone_utils.addPortalMessage(_(u\'Changes to criteria saved.\'))\n-        return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n+        plone_utils.addPortalMessage(_("Changes to criteria saved."))\n+        return request.response.redirect(\n+            "@@placeful-workflow-policy-mapping?wfpid=%s" % wfpid\n+        )\ndiff --git a/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt b/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\nnew file mode 100644\nindex 0000000..e57bc03\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/browser/workflow_policies_controlpanel.pt\n@@ -0,0 +1,147 @@\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xml:lang="en"\n+      lang="en"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n+      i18n:domain="cmfplacefulworkflow">\n+\n+    <metal:main metal:fill-slot="prefs_configlet_main"\n+         tal:define="errors python:request.get(\'errors\', {});">\n+\n+        <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n+\n+\n+        <header>\n+            <h1 i18n:translate="title_workflow_policy_setup">\n+                Workflow Policies Setup\n+            </h1>\n+            <p i18n:translate="description_workflow_policy_setup">\n+                Here you can create and configure your workflow policies.\n+                A policy modifies workflows for any items in or below\n+                a specific folder. To apply a policy you have to add a\n+                local workflow policy configuration to the desired\n+                folder using the \'policy\' item in the \'state\' drop-down\n+                menu.\n+            </p>\n+        </header>\n+\n+        <div id="content">\n+\n+                <form action=""\n+                      name=""\n+                      method="post"\n+                      tal:attributes="action string:${context/absolute_url}/@@workflow-policies-controlpanel"\n+                      tal:define="wfp python:context.portal_placeful_workflow;">\n+\n+                    <fieldset class="mb-3">\n+                        <legend i18n:translate="legend_workflow_policies">Existing Workflow Policies</legend>\n+\n+                        <div tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n+                             class="form-check">\n+\n+                            <tal:wfp tal:define="wfp python:wfp.getWorkflowPolicyById(wfpid)">\n+\n+                            <input type="checkbox" class="form-check-input" id="policy_id" name="policy_ids:list"\n+                                   tal:attributes="id wfpid; value wfpid" />\n+\n+                            <label for="policy_id"\n+                                   tal:attributes="for wfpid">\n+                                <a href="@@placeful-workflow-policy-mapping"\n+                                   tal:attributes="href python:\'@@placeful-workflow-policy-mapping?wfpid=\'+wfpid"\n+                                   tal:content="python:wfp.getTitle() or wfp.getId()"\n+                                   i18n:translate="">\n+                                    Title of the policy mapping\n+                                </a>\n+                            </label>\n+\n+                            <div class="form-text"\n+                                 tal:content="python:wfp.getDescription()">\n+                                Description of the policy mapping\n+                            </div>\n+\n+                            </tal:wfp>\n+\n+                        </div>\n+\n+                        <div class="formControls"\n+                             tal:condition="python:wfp.getWorkflowPolicyIds()">\n+                            <input class="btn btn-danger" type="submit" name="delete" value="Remove selected"\n+                                   i18n:attributes="value label_remove_selected;"\n+                                   />\n+                        </div>\n+                    </fieldset>\n+\n+                    <fieldset class="mb-3">\n+                        <legend i18n:translate="legend_add_workflow_policy">Add a workflow policy</legend>\n+                        <div class="mb-3"\n+                             tal:define="error errors/policy_id | nothing;"\n+                             tal:attributes="class python:\'field error mb-3\' if error else \'mb-3\'">\n+\n+                            <label class="form-label">\n+                              <span tal:omit-tag="" i18n:translate="label_new_policy_id">New policy Id</span>\n+                              <span class="fieldRequired" title="Required"\n+                                    i18n:domain="plone"\n+                                    i18n:attributes="title title_required;"\n+                                    i18n:translate="label_required">(Required)</span>\n+                            </label>\n+\n+                            <input name="policy_id" class="form-control" value="" size="30" />\n+\n+                            <div class="form-text" id=""\n+                                 i18n:translate="description_new_policy_id">\n+                                Enter an id for the new workflow policy\n+                            </div>\n+\n+                            <div tal:content="error">Validation error output</div>\n+\n+                        </div>\n+                        <div class="mb-3"\n+                             tal:define="error errors/policy_id | nothing;"\n+                             tal:attributes="class python:\'field error mb-3\' if error else \'field mb-3\'">\n+\n+                            <label class="form-label">\n+                              <span tal:omit-tag="" i18n:translate="label_duplicate_policy_id">Duplicate another policy</span>\n+                              <span class="fieldRequired" title="Required"\n+                                i18n:domain="plone"\n+                                i18n:attributes="title title_required;"\n+                                i18n:translate="label_required">(Required)</span>\n+                            </label>\n+\n+                            <select name="policy_duplicate_id" class="form-select">\n+                              <option value="empty"\n+                                      i18n:translate="label_no_policy_duplicated">\n+                                  No policy duplicated\n+                              </option>\n+                              <option value="portal_workflow"\n+                                      i18n:translate="label_duplicate_portal_workflow">Global workflow</option>\n+                              <option tal:repeat="wfpid python:wfp.getWorkflowPolicyIds()"\n+                                      tal:attributes="value wfpid"\n+                                      tal:content="python:wfp.getWorkflowPolicyById(wfpid).getTitle()">WF policy id</option>\n+                            </select>\n+\n+                            <div class="form-text" id=""\n+                                 i18n:translate="description_duplicate_policy_id">\n+                                Choose a policy to copy when creating the new policy.\n+                                You also can choose to start with an empty policy.\n+                            </div>\n+\n+                            <div tal:content="error">Validation error output</div>\n+\n+                        </div>\n+\n+                        <div class="formControls">\n+                            <input type="submit" class="btn btn-primary" name="add" value="Add"\n+                                   i18n:attributes="value label_add;"\n+                                   />\n+                        </div>\n+\n+                        <input type="hidden" name="form_submitted" value="1" tal:attributes="value template/id" />\n+                    </fieldset>\n+                </form>\n+\n+        </div>\n+\n+    </metal:main>\n+</html>\ndiff --git a/Products/CMFPlacefulWorkflow/exportimport/__init__.py b/Products/CMFPlacefulWorkflow/exportimport/__init__.py\nindex 10dd001..23f1026 100644\n--- a/Products/CMFPlacefulWorkflow/exportimport/__init__.py\n+++ b/Products/CMFPlacefulWorkflow/exportimport/__init__.py\n@@ -16,5 +16,9 @@\n # along with this program; see the file COPYING. If not, write to the\n # Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n \n-from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import exportWorkflowPolicies  # noqa: E501,F401\n-from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import importWorkflowPolicies  # noqa: E501,F401\n+from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import (  # noqa: E501,F401\n+    exportWorkflowPolicies,\n+)\n+from Products.CMFPlacefulWorkflow.exportimport.workflow_policies import (  # noqa: E501,F401\n+    importWorkflowPolicies,\n+)\ndiff --git a/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py b/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py\nindex 5f8e9d7..c66c21a 100644\n--- a/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py\n+++ b/Products/CMFPlacefulWorkflow/exportimport/workflow_policies.py\n@@ -24,24 +24,24 @@\n from Products.CMFPlacefulWorkflow.DefaultWorkflowPolicy import DEFAULT_CHAIN\n from Products.CMFPlacefulWorkflow.global_symbols import Log\n from Products.GenericSetup.OFSP.exportimport import FolderXMLAdapter\n-from Products.GenericSetup.utils import XMLAdapterBase\n from Products.GenericSetup.utils import exportObjects\n from Products.GenericSetup.utils import importObjects\n+from Products.GenericSetup.utils import XMLAdapterBase\n+\n \n _marker = []\n \n \n class PlacefulWorkflowXMLAdapter(FolderXMLAdapter):\n \n-    _LOGGER_ID = \'placeful_workflow\'\n+    _LOGGER_ID = "placeful_workflow"\n \n-    body = property(XMLAdapterBase._exportBody,\n-                    XMLAdapterBase._importBody)\n+    body = property(XMLAdapterBase._exportBody, XMLAdapterBase._importBody)\n \n \n class WorkflowPoliciesXMLAdapter(WorkflowToolXMLAdapter):\n \n-    _LOGGER_ID = \'placeful_workflow\'\n+    _LOGGER_ID = "placeful_workflow"\n \n     @property\n     def name(self):\n@@ -50,44 +50,43 @@ def name(self):\n \n     def _extractChains(self):\n         fragment = self._doc.createDocumentFragment()\n-        node = self._doc.createElement(\'bindings\')\n-        child = self._doc.createElement(\'default\')\n+        node = self._doc.createElement("bindings")\n+        child = self._doc.createElement("default")\n         for workflow_id in self.context._default_chain or ():\n-            sub = self._doc.createElement(\'bound-workflow\')\n-            sub.setAttribute(\'workflow_id\', workflow_id)\n+            sub = self._doc.createElement("bound-workflow")\n+            sub.setAttribute("workflow_id", workflow_id)\n             child.appendChild(sub)\n         node.appendChild(child)\n         if self.context._chains_by_type:\n-            typestool = getToolByName(self.context, \'portal_types\')\n-            typeinfos = sorted(typestool.listTypeInfo(),\n-                               key=lambda type: type.getId())\n+            typestool = getToolByName(self.context, "portal_types")\n+            typeinfos = sorted(typestool.listTypeInfo(), key=lambda type: type.getId())\n             for ti in typeinfos:\n                 type_id = ti.getId()\n                 chain = self.context._chains_by_type.get(type_id, _marker)\n-                child = self._doc.createElement(\'type\')\n+                child = self._doc.createElement("type")\n                 if chain is _marker:\n                     # If no chain is defined chain is acquired\n                     continue\n \n-                if chain == (DEFAULT_CHAIN, ):\n+                if chain == (DEFAULT_CHAIN,):\n                     # If the type is using the default chain there\'s no chain\n                     # to wait after the attribute\n-                    child.setAttribute(\'type_id\', type_id)\n-                    child.setAttribute(\'default_chain\', "true")\n+                    child.setAttribute("type_id", type_id)\n+                    child.setAttribute("default_chain", "true")\n                     node.appendChild(child)\n                     continue\n \n-                child.setAttribute(\'type_id\', type_id)\n+                child.setAttribute("type_id", type_id)\n                 for workflow_id in chain:\n-                    sub = self._doc.createElement(\'bound-workflow\')\n-                    sub.setAttribute(\'workflow_id\', workflow_id)\n+                    sub = self._doc.createElement("bound-workflow")\n+                    sub.setAttribute("workflow_id", workflow_id)\n                     child.appendChild(sub)\n                 node.appendChild(child)\n         fragment.appendChild(node)\n         return fragment\n \n     def _initChains(self, node):\n-        """ Import policies from XML\n+        """Import policies from XML\n \n         Types specified are in two cases:\n \n@@ -101,33 +100,35 @@ def _initChains(self, node):\n         """\n         seen = set()\n         for child in node.childNodes:\n-            if child.nodeName != \'bindings\':\n+            if child.nodeName != "bindings":\n                 continue\n             for sub in child.childNodes:\n-                if sub.nodeName == \'default\':\n+                if sub.nodeName == "default":\n                     self.context.setDefaultChain(self._getChain(sub))\n-                if sub.nodeName == \'type\':\n-                    type_id = str(sub.getAttribute(\'type_id\'))\n+                if sub.nodeName == "type":\n+                    type_id = str(sub.getAttribute("type_id"))\n                     assert type_id not in seen, (\n-                        \'Type %s listed more than once\' % type_id)\n+                        "Type %s listed more than once" % type_id\n+                    )\n                     seen.add(type_id)\n \n-                    default = sub.getAttribute(\'default_chain\')\n+                    default = sub.getAttribute("default_chain")\n                     chain = self._getChain(sub)\n                     Log.debug(default, chain)\n                     assert not (default and chain), (\n-                        \'Type %s is marked to use default but also \'\n-                        \'included a chain: %s\' % (type_id, chain))\n+                        "Type %s is marked to use default but also "\n+                        "included a chain: %s" % (type_id, chain)\n+                    )\n                     if default:\n                         # omit from the policy to acquire\n                         try:\n-                            self.context.setChain(type_id, (DEFAULT_CHAIN, ))\n-                        except:\n-                            if type_id == \'Collection\':\n+                            self.context.setChain(type_id, (DEFAULT_CHAIN,))\n+                        except Exception:\n+                            if type_id == "Collection":\n                                 # this is really just a plone.app.upgrade?\n                                 # test fix but it should be fine if we retry\n                                 # with Topic instead of Collection\n-                                self.context.setChain(\'Topic\', chain)\n+                                self.context.setChain("Topic", chain)\n                             else:\n                                 raise\n \n@@ -135,36 +136,33 @@ def _initChains(self, node):\n                         try:\n                             self.context.setChain(type_id, chain)\n                         except ValueError:\n-                            if type_id == \'Collection\':\n-                                self.context.setChain(\'Topic\', chain)\n+                            if type_id == "Collection":\n+                                self.context.setChain("Topic", chain)\n                             else:\n                                 raise\n \n     def _getChain(self, node):\n-        result = super(WorkflowPoliciesXMLAdapter,\n-                       self)._getChain(node)\n-        if result == \'\':\n+        result = super(WorkflowPoliciesXMLAdapter, self)._getChain(node)\n+        if result == "":\n             return []\n-        return result.split(\',\')\n+        return result.split(",")\n \n \n def importWorkflowPolicies(context):\n-    """Import workflow policies from the XML file.\n-    """\n+    """Import workflow policies from the XML file."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_placeful_workflow\', None)\n+    tool = getToolByName(site, "portal_placeful_workflow", None)\n     if tool is not None:\n-        importObjects(tool, \'\', context)\n+        importObjects(tool, "", context)\n \n \n def exportWorkflowPolicies(context):\n-    """Export workflow policies as an XML file.\n-    """\n+    """Export workflow policies as an XML file."""\n     site = context.getSite()\n-    tool = getToolByName(site, \'portal_placeful_workflow\', None)\n+    tool = getToolByName(site, "portal_placeful_workflow", None)\n     if tool is None:\n-        logger = context.getLogger(\'workflow_policies\')\n-        logger.info(\'Nothing to export.\')\n+        logger = context.getLogger("workflow_policies")\n+        logger.info("Nothing to export.")\n         return\n \n-    exportObjects(tool, \'\', context)\n+    exportObjects(tool, "", context)\ndiff --git a/Products/CMFPlacefulWorkflow/global_symbols.py b/Products/CMFPlacefulWorkflow/global_symbols.py\nindex b734650..a5e0a56 100644\n--- a/Products/CMFPlacefulWorkflow/global_symbols.py\n+++ b/Products/CMFPlacefulWorkflow/global_symbols.py\n@@ -19,16 +19,17 @@\n CMFPlacefulWorkflow product\n """\n \n-from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n from logging import getLogger\n+from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies\n+\n \n-Log = getLogger(\'CMFPlacefulWorkflow\')\n+Log = getLogger("CMFPlacefulWorkflow")\n placeful_prefs_configlet = {\n-    \'id\': \'placefulworkflow\',\n-    \'appId\': "Placeful Workflow",\n-    \'name\': \'Placeful Workflow\',\n-    \'action\': \'string:$portal_url/prefs_workflow_localpolicies_form\',\n-    \'category\': \'Products\',\n-    \'permission\': (ManageWorkflowPolicies, ),\n-    \'imageUrl\': \'placefulworkflow_icon.png\',\n+    "id": "placefulworkflow",\n+    "appId": "Placeful Workflow",\n+    "name": "Placeful Workflow",\n+    "action": "string:$portal_url/workflow-policies-controlpanel",\n+    "category": "Products",\n+    "permission": (ManageWorkflowPolicies,),\n+    "imageUrl": "placefulworkflow_icon.png",\n }\ndiff --git a/Products/CMFPlacefulWorkflow/interfaces.py b/Products/CMFPlacefulWorkflow/interfaces.py\nindex fc1f5f1..5a5bab7 100644\n--- a/Products/CMFPlacefulWorkflow/interfaces.py\n+++ b/Products/CMFPlacefulWorkflow/interfaces.py\n@@ -24,9 +24,9 @@\n \n \n class IPlacefulWorkflowTool(Interface):\n-    \'\'\'\n-    \'\'\'\n-    id = Attribute(\'id\', \'Must be set to "portal_workflow_policy"\')\n+    """ """\n+\n+    id = Attribute("id", \'Must be set to "portal_workflow_policy"\')\n \n     # security.declarePublic(\'getMaxChainLength\')\n     def getMaxChainLength(self):\n@@ -43,6 +43,6 @@ class IPlacefulMarker(Interface):\n \n \n class IWorkflowPolicyDefinition(Interface):\n-    \'\'\'\n-    \'\'\'\n+    """ """\n+\n     pass\ndiff --git a/Products/CMFPlacefulWorkflow/permissions.py b/Products/CMFPlacefulWorkflow/permissions.py\nindex e078073..9ee65a7 100644\n--- a/Products/CMFPlacefulWorkflow/permissions.py\n+++ b/Products/CMFPlacefulWorkflow/permissions.py\n@@ -5,5 +5,5 @@\n from AccessControl.Permission import addPermission\n \n \n-ManageWorkflowPolicies = \'CMFPlacefulWorkflow: Manage workflow policies\'\n-addPermission(ManageWorkflowPolicies, (\'Manager\', \'Site Administrator\'))\n+ManageWorkflowPolicies = "CMFPlacefulWorkflow: Manage workflow policies"\n+addPermission(ManageWorkflowPolicies, ("Manager", "Site Administrator"))\ndiff --git a/Products/CMFPlacefulWorkflow/profiles.zcml b/Products/CMFPlacefulWorkflow/profiles.zcml\nindex 3e42861..175b3ea 100644\n--- a/Products/CMFPlacefulWorkflow/profiles.zcml\n+++ b/Products/CMFPlacefulWorkflow/profiles.zcml\n@@ -44,4 +44,15 @@\n       />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+    source="1000"\n+    destination="1001"\n+    profile="Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow">\n+    <genericsetup:upgradeDepends\n+      title="Update controlpanel url expression"\n+      import_profile="Products.CMFPlacefulWorkflow:base"\n+      import_steps="controlpanel"\n+      />\n+  </genericsetup:upgradeSteps>\n+\n </configure>\ndiff --git a/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml b/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\nindex ce4a083..9abd318 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/base/controlpanel.xml\n@@ -8,7 +8,7 @@\n   title="Workflow Policies" action_id="placefulworkflow"\n   appId="CMFPlacefulWorkflow" category="Products" condition_expr=""\n   icon_expr="string:toolbar-action/workflow"\n-  url_expr="string:$portal_url/prefs_workflow_localpolicies_form" visible="True"\n+  url_expr="string:$portal_url/@@workflow-policies-controlpanel" visible="True"\n   i18n:attributes="title">\n   <permission>Manage portal</permission>\n  </configlet>\ndiff --git a/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml b/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml\nindex 8590785..5e97e46 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/base/metadata.xml\n@@ -1,3 +1,3 @@\n <metadata>\n-  <version>1000</version>\n+  <version>1001</version>\n </metadata>\ndiff --git a/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml b/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml\nindex 89b8a8c..488320d 100644\n--- a/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml\n+++ b/Products/CMFPlacefulWorkflow/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n-  <version>1000</version>\n+  <version>1001</version>\n   <dependencies>\n     <dependency>profile-Products.CMFPlacefulWorkflow:base</dependency>\n   </dependencies>\ndiff --git a/Products/CMFPlacefulWorkflow/setuphandlers.py b/Products/CMFPlacefulWorkflow/setuphandlers.py\nindex ace0261..3279380 100644\n--- a/Products/CMFPlacefulWorkflow/setuphandlers.py\n+++ b/Products/CMFPlacefulWorkflow/setuphandlers.py\n@@ -16,8 +16,7 @@\n # Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n \n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow.global_symbols import \\\n-    placeful_prefs_configlet\n+from Products.CMFPlacefulWorkflow.global_symbols import placeful_prefs_configlet\n from Products.CMFPlacefulWorkflow.interfaces import IPlacefulMarker\n from Products.CMFPlacefulWorkflow.interfaces import IPlacefulWorkflowTool\n from zope.component import getSiteManager\n@@ -27,7 +26,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'Products.CMFPlacefulWorkflow\')\n+logger = logging.getLogger("Products.CMFPlacefulWorkflow")\n \n \n def installMarker(context):\n@@ -35,39 +34,36 @@ def installMarker(context):\n     Apply a marker interface to the workflow tool to indicate that the\n     product is installed.\n     """\n-    wf = getToolByName(context, \'portal_workflow\', None)\n+    wf = getToolByName(context, "portal_workflow", None)\n     if wf is not None:\n         alsoProvides(wf, IPlacefulMarker)\n-        logger.info(\'Added placeful marker to portal_workflow.\')\n+        logger.info("Added placeful marker to portal_workflow.")\n \n \n def uninstall(context):\n     # Note: this function is registered as a pre_handler instead of a\n     # post_handler, because otherwise toolset.xml has already been applied,\n     # which removes the portal_placeful_workflow tool.\n-    portal = getToolByName(context, \'portal_url\').getPortalObject()\n-    tool = getattr(portal, \'portal_placeful_workflow\', None)\n+    portal = getToolByName(context, "portal_url").getPortalObject()\n+    tool = getattr(portal, "portal_placeful_workflow", None)\n     if tool is not None:\n-        getSiteManager(portal).unregisterUtility(\n-            tool,\n-            IPlacefulWorkflowTool)\n-        logger.info(\'Unregistered portal_placeful_workflow\')\n+        getSiteManager(portal).unregisterUtility(tool, IPlacefulWorkflowTool)\n+        logger.info("Unregistered portal_placeful_workflow")\n     # uninstall configlets\n     try:\n-        cptool = getToolByName(portal, \'portal_controlpanel\')\n-        cptool.unregisterConfiglet(placeful_prefs_configlet[\'id\'])\n-        logger.info(\'Removing CMFPlacefulWorkflow Configlet\')\n-    except:\n-        logger.info(\'Failed to remove CMFPlacefulWorkflow Configlet\')\n+        cptool = getToolByName(portal, "portal_controlpanel")\n+        cptool.unregisterConfiglet(placeful_prefs_configlet["id"])\n+        logger.info("Removing CMFPlacefulWorkflow Configlet")\n+    except AttributeError:\n+        logger.info("Failed to remove CMFPlacefulWorkflow Configlet")\n \n-    wf_tool = getToolByName(portal, \'portal_workflow\')\n+    wf_tool = getToolByName(portal, "portal_workflow")\n     if IPlacefulMarker.providedBy(wf_tool):\n         noLongerProvides(wf_tool, IPlacefulMarker)\n-        logger.info(\'Removed placeful marker from portal_workflow.\')\n+        logger.info("Removed placeful marker from portal_workflow.")\n     # Mark our base profile as uninstalled, because:\n     # 1. It is good practice.\n     # 2. Otherwise when the user installs CMFPlacefulWorkflow again,\n     #    portal_setup will not apply our base profile.\n-    portal_setup = getToolByName(portal, \'portal_setup\')\n-    portal_setup.unsetLastVersionForProfile(\n-        \'Products.CMFPlacefulWorkflow:base\')\n+    portal_setup = getToolByName(portal, "portal_setup")\n+    portal_setup.unsetLastVersionForProfile("Products.CMFPlacefulWorkflow:base")\ndiff --git a/Products/CMFPlacefulWorkflow/testing.py b/Products/CMFPlacefulWorkflow/testing.py\nindex 25eac77..f9788c3 100644\n--- a/Products/CMFPlacefulWorkflow/testing.py\n+++ b/Products/CMFPlacefulWorkflow/testing.py\n@@ -25,18 +25,21 @@ def setUpZope(self, app, configurationContext):\n         # layer.\n         self.loadZCML(package=Products.CMFPlacefulWorkflow)\n         profile_registry.registerProfile(\n-            name=\'exportimport\', title=\'Test Placeful Workflow Profile\',\n-            description=(\n-                "Tests the placeful workflow policy handler."),\n-            path=\'profiles/exportimport\',\n-            product=\'Products.CMFPlacefulWorkflow.tests\',\n-            profile_type=EXTENSION, for_=ISiteRoot)\n-        z2.installProduct(app, \'Products.CMFPlacefulWorkflow\')\n+            name="exportimport",\n+            title="Test Placeful Workflow Profile",\n+            description=("Tests the placeful workflow policy handler."),\n+            path="profiles/exportimport",\n+            product="Products.CMFPlacefulWorkflow.tests",\n+            profile_type=EXTENSION,\n+            for_=ISiteRoot,\n+        )\n+        z2.installProduct(app, "Products.CMFPlacefulWorkflow")\n \n     def setUpPloneSite(self, portal):\n         portal.acl_users.userFolderAddUser(\n-            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n-        applyProfile(portal, \'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\')\n+            SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ["Manager"], []\n+        )\n+        applyProfile(portal, "Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow")\n \n \n PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE = ProductsCmfplacefulworkflowLayer()\n@@ -44,13 +47,13 @@ def setUpPloneSite(self, portal):\n \n PRODUCTS_CMFPLACEFULWORKFLOW_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n-    name=\'ProductsCmfplacefulworkflowLayer:IntegrationTesting\',\n+    name="ProductsCmfplacefulworkflowLayer:IntegrationTesting",\n )\n \n \n PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n-    name=\'ProductsCmfplacefulworkflowLayer:FunctionalTesting\',\n+    name="ProductsCmfplacefulworkflowLayer:FunctionalTesting",\n )\n \n \n@@ -60,5 +63,5 @@ def setUpPloneSite(self, portal):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         z2.ZSERVER_FIXTURE,\n     ),\n-    name=\'ProductsCmfplacefulworkflowLayer:AcceptanceTesting\',\n+    name="ProductsCmfplacefulworkflowLayer:AcceptanceTesting",\n )\ndiff --git a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\nindex 8c0d52d..ae521bc 100644\n--- a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n+++ b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n@@ -18,16 +18,17 @@\n """\n CMFPlacefulWorkflow TestCase module\n """\n-from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n+from Products.CMFPlacefulWorkflow.testing import (\n+    PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING,\n+)\n \n import unittest\n \n \n class CMFPlacefulWorkflowTestCase(unittest.TestCase):\n \n-\n     layer = PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n \n     def getPermissionsOfRole(self, role):\n         perms = self.portal.permissionsOfRole(role)\n-        return [p[\'name\'] for p in perms if p[\'selected\']]\n+        return [p["name"] for p in perms if p["selected"]]\ndiff --git a/Products/CMFPlacefulWorkflow/tests/__init__.py b/Products/CMFPlacefulWorkflow/tests/__init__.py\nindex bae9eea..72a4e41 100644\n--- a/Products/CMFPlacefulWorkflow/tests/__init__.py\n+++ b/Products/CMFPlacefulWorkflow/tests/__init__.py\n@@ -23,4 +23,4 @@\n __version__ = "$Revision: 36863 $"\n # $Source: /cvsroot/ingeniweb/CMFPlacefulWorkflow/tests/__init__.py,v $\n # $Id: __init__.py 36863 2007-02-05 21:30:44Z encolpe $\n-__docformat__ = \'restructuredtext\'\n+__docformat__ = "restructuredtext"\ndiff --git a/Products/CMFPlacefulWorkflow/tests/policy_form.txt b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\nindex b423f57..c95e25f 100644\n--- a/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n+++ b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n@@ -39,15 +39,15 @@ Open the policy form for the front-page and for the folder.\n     >>> browser.open(portal.absolute_url())\n     >>> browser.getLink(id=\'workflow-transition-policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/front-page/placeful_workflow_configuration\'\n+    \'http://nohost/plone/front-page/@@placeful-workflow-configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n     ...\n \n-    >>> browser.open(portal.absolute_url()+\'/placeful_workflow_configuration\')\n+    >>> browser.open(portal.absolute_url()+\'/@@placeful-workflow-configuration\')\n     >>> browser.url\n-    \'http://nohost/plone/placeful_workflow_configuration\'\n+    \'http://nohost/plone/@@placeful-workflow-configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n@@ -60,7 +60,7 @@ The policy form also works for pages that aren\'t the default page.\n     >>> browser.open(page.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/f1/doc1/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/doc1/@@placeful-workflow-configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n@@ -81,7 +81,7 @@ Now we will add a local policy on the user folder. Old Plone Publication for the\n     >>> browser.open(folder.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/f1/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/@@placeful-workflow-configuration\'\n     >>> browser.getControl(name="add_wp_for_type").click()\n     >>> \'Update catalog role mappings\' in browser.contents\n     True\ndiff --git a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\nindex f0f969f..9dd1db0 100644\n--- a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n+++ b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n@@ -19,64 +19,74 @@\n CMFPlacefulWorkflow Unittest\n """\n \n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlacefulWorkflow.interfaces import IPlacefulMarker\n-from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import WorkflowPolicyConfig_id  # noqa: E501\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n+from Products.CMFPlacefulWorkflow.PlacefulWorkflowTool import (  # noqa: E501\n+    WorkflowPolicyConfig_id,\n+)\n+from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import (  # noqa: E501\n+    CMFPlacefulWorkflowTestCase,\n+)\n from Products.CMFPlone.utils import get_installer\n-from zExceptions import Forbidden\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import logout\n-from plone.app.testing import login\n+\n \n _edit_permissions = []\n _all_permissions = _edit_permissions\n \n \n class TestPlacefulWorkflow(CMFPlacefulWorkflowTestCase):\n-    """ Testing all add-on and modified method for workflow stuff """\n+    """Testing all add-on and modified method for workflow stuff"""\n \n-    def createMember(self, id, pw, email, roles=(\'Member\', )):\n+    def createMember(self, id, pw, email, roles=("Member",)):\n         pr = self.portal.portal_registration\n         member = pr.addMember(\n-            id, pw, roles, properties={\n-                \'username\': id, \'email\': email})\n+            id, pw, roles, properties={"username": id, "email": email}\n+        )\n         return member\n \n-    def setupSecurityContext(self, ):\n+    def setupSecurityContext(\n+        self,\n+    ):\n         # Create a few members\n-        self.user1 = self.createMember(\'user1\', \'abcd4\', \'abc@domain.tld\')\n-        self.user2 = self.createMember(\'user2\', \'abcd4\', \'abc@domain.tld\')\n-        self.user3 = self.createMember(\'user3\', \'abcd4\', \'abc@domain.tld\')\n+        self.user1 = self.createMember("user1", "abcd4", "abc@domain.tld")\n+        self.user2 = self.createMember("user2", "abcd4", "abc@domain.tld")\n+        self.user3 = self.createMember("user3", "abcd4", "abc@domain.tld")\n \n-        self.folder = self.portal.portal_membership.getHomeFolder(\'user1\')\n+        self.folder = self.portal.portal_membership.getHomeFolder("user1")\n         self.qi = get_installer(self.portal)\n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n-\n-    def setUp(self, ):\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n-        self.workflow = getToolByName(self.portal, \'portal_workflow\')\n-        self.membershipTool = getToolByName(self.portal, \'portal_membership\')\n-        self.memberdataTool = getToolByName(self.portal, \'portal_memberdata\')\n+        self.qi.install_product("CMFPlacefulWorkflow")\n+\n+    def setUp(\n+        self,\n+    ):\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+        self.workflow = getToolByName(self.portal, "portal_workflow")\n+        self.membershipTool = getToolByName(self.portal, "portal_membership")\n+        self.memberdataTool = getToolByName(self.portal, "portal_memberdata")\n \n         self.portal_placeful_workflow = getToolByName(\n-            self.portal, \'portal_placeful_workflow\')\n+            self.portal, "portal_placeful_workflow"\n+        )\n \n         self.setupSecurityContext()\n \n         # login(self.portal, \'user1\')\n         # self.createPolicy()\n \n-    def createArticle(self, ):\n+    def createArticle(\n+        self,\n+    ):\n         """\n         Create new policy\n         """\n         # Content creation\n-        self.contentId = \'myPolicy\'\n+        self.contentId = "myPolicy"\n         # XXX\n \n     def test_marker_applied_and_unapplied(self):\n@@ -85,30 +95,32 @@ def test_marker_applied_and_unapplied(self):\n         the install, and removed by the uninstall.\n         """\n         self.assertTrue(IPlacefulMarker.providedBy(self.workflow))\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n         self.assertFalse(IPlacefulMarker.providedBy(self.workflow))\n \n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n+        self.qi.install_product("CMFPlacefulWorkflow")\n         self.assertTrue(IPlacefulMarker.providedBy(self.workflow))\n \n     def test_reinstall(self):\n         """\n         Test if upgrade is going the good way\n         """\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n-        self.assertTrue(\'portal_placeful_workflow\' in self.portal.objectIds())\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n+        self.qi.install_product("CMFPlacefulWorkflow")\n+        self.assertTrue("portal_placeful_workflow" in self.portal.objectIds())\n \n     def test_activation_reactivation(self):\n         """Test multiple installs and uninstalls."""\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n-        self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n-        self.qi.install_product(\'CMFPlacefulWorkflow\')\n-        self.assertTrue(\'portal_placeful_workflow\' in self.portal)\n-        self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n-        self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n-\n-    def test_01_addWorkflowPolicyConfig(self, ):\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n+        self.assertFalse("portal_placeful_workflow" in self.portal)\n+        self.qi.install_product("CMFPlacefulWorkflow")\n+        self.assertTrue("portal_placeful_workflow" in self.portal)\n+        self.qi.uninstall_product("CMFPlacefulWorkflow")\n+        self.assertFalse("portal_placeful_workflow" in self.portal)\n+\n+    def test_01_addWorkflowPolicyConfig(\n+        self,\n+    ):\n         """\n         Add workflow policy config\n         """\n@@ -116,48 +128,61 @@ def test_01_addWorkflowPolicyConfig(self, ):\n         self.assertFalse(WorkflowPolicyConfig_id in self.portal.objectIds())\n         # Add a policy config\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         # Make sure the policy config is there\n         self.assertTrue(WorkflowPolicyConfig_id in self.portal.objectIds())\n \n-    def test_02_checkWorkflowPolicyConfig(self, ):\n+    def test_02_checkWorkflowPolicyConfig(\n+        self,\n+    ):\n         """\n         Add workflow policy config\n         """\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         pc = getattr(self.portal, WorkflowPolicyConfig_id)\n         self.assertEqual(pc.getPolicyBelow(), None)\n         self.assertEqual(pc.getPolicyIn(), None)\n \n-    def test_03_addWorkflowPolicy(self, ):\n+    def test_03_addWorkflowPolicy(\n+        self,\n+    ):\n         """\n         Add workflow policy\n         """\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        gsp = getattr(pwt, \'foo_bar_policy\', None)\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        gsp = getattr(pwt, "foo_bar_policy", None)\n         self.assertTrue(gsp is not None)\n \n-    def test_04_addWorkflowPolicyAndConfigForIt(self, ):\n+    def test_04_addWorkflowPolicyAndConfigForIt(\n+        self,\n+    ):\n         """\n         Add workflow policy\n         """\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         pc = getattr(self.portal, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n-        self.assertEqual(pc.getPolicyInId(), \'foo_bar_policy\')\n-        self.assertEqual(pc.getPolicyBelowId(), \'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n+        self.assertEqual(pc.getPolicyInId(), "foo_bar_policy")\n+        self.assertEqual(pc.getPolicyBelowId(), "foo_bar_policy")\n \n         logout()\n \n-    def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n+    def test_04_addWorkflowPolicyAndDuplicateConfiguration(\n+        self,\n+    ):\n         """Add a workflow policy and duplicate another one\n \n         Use a python script that can duplicate another policy or portal_workflow configuration\n@@ -167,15 +192,14 @@ def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n         ptypes = self.portal.portal_types.objectIds()\n \n         # Part One: duplicate portal_workflow\n-        pw_tool.manage_addWorkflowPolicy(id=\'foo_bar_policy\',\n-                                         duplicate_id=\'portal_workflow\',\n-                                         )\n+        pw_tool.manage_addWorkflowPolicy(\n+            id="foo_bar_policy",\n+            duplicate_id="portal_workflow",\n+        )\n \n-        policy = pw_tool.getWorkflowPolicyById(\'foo_bar_policy\')\n+        policy = pw_tool.getWorkflowPolicyById("foo_bar_policy")\n \n-        self.assertEqual(\n-            policy.getDefaultChain(\'XXX\'),\n-            wf_tool._default_chain)\n+        self.assertEqual(policy.getDefaultChain("XXX"), wf_tool._default_chain)\n         for ptype in ptypes:\n             chain = policy.getChainFor(ptype)\n             if chain is None:\n@@ -185,307 +209,342 @@ def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n             self.assertEqual(chain, wf_tool.getChainFor(ptype))\n \n         # Part Two: duplicate another policy\n-        policy.setDefaultChain([\'plone_workflow\', \'folder_workflow\'])\n-        policy.setChainForPortalTypes([\'Document\', \'Folder\'], [\n-                                      \'plone_workflow\', \'folder_workflow\'])\n-        pw_tool.manage_addWorkflowPolicy(id=\'foo_bar_policy2\',\n-                                         duplicate_id=\'foo_bar_policy\',\n-                                         )\n+        policy.setDefaultChain(["plone_workflow", "folder_workflow"])\n+        policy.setChainForPortalTypes(\n+            ["Document", "Folder"], ["plone_workflow", "folder_workflow"]\n+        )\n+        pw_tool.manage_addWorkflowPolicy(\n+            id="foo_bar_policy2",\n+            duplicate_id="foo_bar_policy",\n+        )\n \n-        policy2 = pw_tool.getWorkflowPolicyById(\'foo_bar_policy2\')\n+        policy2 = pw_tool.getWorkflowPolicyById("foo_bar_policy2")\n \n-        self.assertEqual(policy.getDefaultChain(\n-            \'XXX\'), (\'plone_workflow\', \'folder_workflow\'))\n+        self.assertEqual(\n+            policy.getDefaultChain("XXX"), ("plone_workflow", "folder_workflow")\n+        )\n         for ptype in ptypes:\n-            if ptype not in (\'Document\', \'Folder\'):\n-                self.assertEqual(\n-                    policy2.getChainFor(ptype),\n-                    policy.getChainFor(ptype))\n+            if ptype not in ("Document", "Folder"):\n+                self.assertEqual(policy2.getChainFor(ptype), policy.getChainFor(ptype))\n             else:\n-                self.assertEqual(policy2.getChainFor(\n-                    ptype), (\'plone_workflow\', \'folder_workflow\'))\n+                self.assertEqual(\n+                    policy2.getChainFor(ptype), ("plone_workflow", "folder_workflow")\n+                )\n \n         logout()\n \n-    def test_05_editWorkflowPolicy(self, ):\n-        """Edit workflow policy\n-        """\n+    def test_05_editWorkflowPolicy(\n+        self,\n+    ):\n+        """Edit workflow policy"""\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        gsp = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp.setChainForPortalTypes([\'Document\', \'Folder\'],\n-                                   [\'plone_workflow\', \'folder_workflow\'])\n-        self.assertEqual(gsp.getChainFor(\'Document\'),\n-                             (\'plone_workflow\', \'folder_workflow\', ))\n-        self.assertEqual(gsp.getChainFor(\'Folder\'),\n-                             (\'plone_workflow\', \'folder_workflow\', ))\n-\n-    def test_06_getWorkflowPolicyIds(self, ):\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        gsp = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp.setChainForPortalTypes(\n+            ["Document", "Folder"], ["plone_workflow", "folder_workflow"]\n+        )\n+        self.assertEqual(\n+            gsp.getChainFor("Document"),\n+            (\n+                "plone_workflow",\n+                "folder_workflow",\n+            ),\n+        )\n+        self.assertEqual(\n+            gsp.getChainFor("Folder"),\n+            (\n+                "plone_workflow",\n+                "folder_workflow",\n+            ),\n+        )\n+\n+    def test_06_getWorkflowPolicyIds(\n+        self,\n+    ):\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy_2\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy_2", "default_workflow_policy (Simple Policy)"\n+        )\n         wp_ids = sorted(pwt.getWorkflowPolicyIds())\n         # There are 4 base policies\n-        self.assertEqual(tuple(wp_ids), (\'foo_bar_policy\', \'foo_bar_policy_2\',\n-                                             \'intranet\', \'old-plone\', \'one-state\',\n-                                             \'simple-publication\'))\n-\n-    def test_07_getChainFor(self, ):\n+        self.assertEqual(\n+            tuple(wp_ids),\n+            (\n+                "foo_bar_policy",\n+                "foo_bar_policy_2",\n+                "intranet",\n+                "old-plone",\n+                "one-state",\n+                "simple-publication",\n+            ),\n+        )\n+\n+    def test_07_getChainFor(\n+        self,\n+    ):\n         # Let\'s see what the chain is before\n         pw = self.portal.portal_workflow\n-        self.assertEqual(\n-            pw.getChainFor(\'Document\'), (\'simple_publication_workflow\', ))\n+        self.assertEqual(pw.getChainFor("Document"), ("simple_publication_workflow",))\n \n-        self.portal.invokeFactory(\n-            \'Document\',\n-            id=\'doc_before\',\n-            text=\'foo bar baz\')\n+        self.portal.invokeFactory("Document", id="doc_before", text="foo bar baz")\n \n         # The chain should be different now\n         # Workflow tool should look for policy definition and return\n         # the chain of the correct policy\n-        self.assertEqual(pw.getChainFor(self.portal.doc_before),\n-                             (\'simple_publication_workflow\', ))\n+        self.assertEqual(\n+            pw.getChainFor(self.portal.doc_before), ("simple_publication_workflow",)\n+        )\n \n         # Let\'s define another policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n+        gsp = pwt.getWorkflowPolicyById("foo_bar_policy")\n \n-        gsp.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Try getting the new chain directly\n-        self.assertEqual(gsp.getChainFor(\n-            \'Document\'), (\'folder_workflow\', ))\n+        self.assertEqual(gsp.getChainFor("Document"), ("folder_workflow",))\n \n         # Add a config at the root that will use the new policy\n         self.portal.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n-        self.assertTrue(\'.wf_policy_config\' in self.portal.objectIds())\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n+        self.assertTrue(".wf_policy_config" in self.portal.objectIds())\n \n         # Let\'s set the policy to the config\n         pc = getattr(self.portal, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         self.assertEqual(\n-            pc.getPlacefulChainFor(\n-                \'Document\', start_here=1), (\'folder_workflow\', ))\n+            pc.getPlacefulChainFor("Document", start_here=1), ("folder_workflow",)\n+        )\n \n-        self.portal.invokeFactory(\'Document\', id=\'doc\', text=\'foo bar baz\')\n+        self.portal.invokeFactory("Document", id="doc", text="foo bar baz")\n \n         # The chain should be different now\n         # Workflow tool should look for policy definition and return\n         # the chain of the correct policy\n-        self.assertEqual(\n-            pw.getChainFor(\n-                self.portal.doc), (\'folder_workflow\', ))\n+        self.assertEqual(pw.getChainFor(self.portal.doc), ("folder_workflow",))\n         # The chain for the first document should have changed now\n-        self.assertEqual(\n-            pw.getChainFor(\n-                self.portal.doc_before), (\'folder_workflow\', ))\n+        self.assertEqual(pw.getChainFor(self.portal.doc_before), ("folder_workflow",))\n \n-    def test_08_getChainFor(self, ):\n+    def test_08_getChainFor(\n+        self,\n+    ):\n         # Let\'s see what the chain is before\n         pwt = self.portal_placeful_workflow\n         self.assertEqual(pwt.getMaxChainLength(), 1)\n         pwt.setMaxChainLength(2)\n         self.assertEqual(pwt.getMaxChainLength(), 2)\n \n-    def test_09_wft_getChainFor(self, ):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\', text=\'foo\')\n+    def test_09_wft_getChainFor(\n+        self,\n+    ):\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document", text="foo")\n \n         # Check default\n         wft = self.portal.portal_workflow\n-        chain = wft.getChainFor(\'Document\')\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        chain = wft.getChainFor("Document")\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # Check global chain\n-        wft.setChainForPortalTypes((\'Document\', ), (\'wf\', ))\n-        chain = wft.getChainFor(\'Document\')\n-        self.assertEqual(tuple(chain), (\'wf\', ))\n+        wft.setChainForPortalTypes(("Document",), ("wf",))\n+        chain = wft.getChainFor("Document")\n+        self.assertEqual(tuple(chain), ("wf",))\n \n         # Check global chain, using object\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'wf\', ))\n+        self.assertEqual(tuple(chain), ("wf",))\n \n         # Remove global chain\n-        wft.setChainForPortalTypes((\'Document\', ), ())\n+        wft.setChainForPortalTypes(("Document",), ())\n         chain = wft.getChainFor(self.portal.folder.document)\n         self.assertEqual(tuple(chain), ())\n \n     def test_10_wft_getChainFor_placeful(self):\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder.folder2.invokeFactory(\'Document\', id=\'document2\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.folder.invokeFactory("Folder", id="folder2")\n+        self.portal.folder.folder2.invokeFactory("Document", id="document2")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # Create a different policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy2\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy2", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp2 = pwt.getWorkflowPolicyById(\'foo_bar_policy2\')\n-        gsp2.setChainForPortalTypes([\'Document\'], [\'plone_workflow\'])\n+        gsp2 = pwt.getWorkflowPolicyById("foo_bar_policy2")\n+        gsp2.setChainForPortalTypes(["Document"], ["plone_workflow"])\n \n         # Add a different config in the second folder\n         self.portal.folder.folder2.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n         pc = getattr(self.portal.folder.folder2, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy2\')\n-        pc.setPolicyBelow(\'foo_bar_policy2\')\n+        pc.setPolicyIn("foo_bar_policy2")\n+        pc.setPolicyBelow("foo_bar_policy2")\n \n         # Check inheritance order\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), ("plone_workflow",))\n \n         # Check empty chain\n-        gsp2.setChain(\'Document\', ())\n+        gsp2.setChain("Document", ())\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n         self.assertEqual(tuple(chain), ())\n \n         # Check default\n-        wft.setDefaultChain(\'folder_workflow\')\n-        gsp2.setChainForPortalTypes((\'Document\', ), (\'(Default)\', ))\n+        wft.setDefaultChain("folder_workflow")\n+        gsp2.setChainForPortalTypes(("Document",), ("(Default)",))\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n     def test_11_In_and_Below(self):\n         """In and below"""\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder.folder2.invokeFactory(\'Document\', id=\'document2\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder3\')\n-        self.portal.folder.folder3.invokeFactory(\'Document\', id=\'document3\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.folder.invokeFactory("Folder", id="folder2")\n+        self.portal.folder.folder2.invokeFactory("Document", id="document2")\n+        self.portal.folder.invokeFactory("Folder", id="folder3")\n+        self.portal.folder.folder3.invokeFactory("Document", id="document3")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'plone_workflow\'])\n-        gsp1.setChainForPortalTypes([\'Folder\'], [\'plone_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["plone_workflow"])\n+        gsp1.setChainForPortalTypes(["Folder"], ["plone_workflow"])\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy2\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy2", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp2 = pwt.getWorkflowPolicyById(\'foo_bar_policy2\')\n-        gsp2.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n-        gsp2.setChainForPortalTypes([\'Folder\'], [\'folder_workflow\'])\n+        gsp2 = pwt.getWorkflowPolicyById("foo_bar_policy2")\n+        gsp2.setChainForPortalTypes(["Document"], ["folder_workflow"])\n+        gsp2.setChainForPortalTypes(["Folder"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n \n         # In folder 1, we want to have plone_workflow\n         # We set PolicyIn to the first policy in folder 1\n-        pc.setPolicyIn(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n \n         # In folder 2, we want to have folder_workflow\n         # We set PolicyBelow to the second policy in folder 2\n-        pc.setPolicyBelow(\'foo_bar_policy2\')\n+        pc.setPolicyBelow("foo_bar_policy2")\n \n         # A document in folder 2 should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # Folder 2 should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # A document in folder 1 should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n         # Folder 1 should have plone_workflow\n         chain = wft.getChainFor(self.portal.folder)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), ("plone_workflow",))\n \n     def test_11_copy_paste(self):\n-        """ Test security after a copy/paste\n-        """\n+        """Test security after a copy/paste"""\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n+        self.portal.invokeFactory("Document", id="document")\n+        self.portal.invokeFactory("Folder", id="folder")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n \n         # In folder, we want to have folder_workflow\n         # We set PolicyIn to the first policy in folder\n-        pc.setPolicyIn(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n \n-        cb = self.portal.manage_copyObjects([\'document\'])\n+        cb = self.portal.manage_copyObjects(["document"])\n         self.portal.folder.manage_pasteObjects(cb_copy_data=cb)\n \n         # A document in plone root should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.document)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # Folder should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.folder)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # A document in folder should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), ("folder_workflow",))\n \n     def test_11_getWorkflowPolicyById_edge_cases(self):\n         pwt = self.portal_placeful_workflow\n-        self.assertEqual(pwt.getWorkflowPolicyById(\'dummy\'), None)\n+        self.assertEqual(pwt.getWorkflowPolicyById("dummy"), None)\n \n     def test_12_getWorkflowPolicyById_edge_cases(self):\n         pwt = self.portal_placeful_workflow\n@@ -497,27 +556,29 @@ def test_13_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n     def test_14_getWorkflowPolicyConfig(self):\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder.folder2.invokeFactory(\'Document\', id=\'document2\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.folder.invokeFactory("Folder", id="folder2")\n+        self.portal.folder.folder2.invokeFactory("Document", id="document2")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         # You should only be able to get a config in the folder itself\n         config = pwt.getWorkflowPolicyConfig(self.portal.folder)\n@@ -536,92 +597,98 @@ def test_14_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n         # Not in a document in a folder below\n-        config = pwt.getWorkflowPolicyConfig(\n-            self.portal.folder.folder2.document2)\n+        config = pwt.getWorkflowPolicyConfig(self.portal.folder.folder2.document2)\n         self.assertEqual(config, None)\n \n     def test_15_wft_getChainFor_placeful_with_strange_wrapper(self):\n         wft = self.portal.portal_workflow\n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n-        self.portal.invokeFactory(\'Folder\', id=\'folder2\')\n-        self.portal.folder2.invokeFactory(\'Document\', id=\'document2\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n+        self.portal.invokeFactory("Folder", id="folder2")\n+        self.portal.folder2.invokeFactory("Document", id="document2")\n \n         # Create a policy\n         pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n+        pwt.manage_addWorkflowPolicy(\n+            "foo_bar_policy", "default_workflow_policy (Simple Policy)"\n+        )\n \n         # And redefine the chain for Document\n-        gsp1 = pwt.getWorkflowPolicyById(\'foo_bar_policy\')\n-        gsp1.setChainForPortalTypes([\'Document\'], [\'folder_workflow\'])\n+        gsp1 = pwt.getWorkflowPolicyById("foo_bar_policy")\n+        gsp1.setChainForPortalTypes(["Document"], ["folder_workflow"])\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         pc = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        pc.setPolicyIn(\'foo_bar_policy\')\n-        pc.setPolicyBelow(\'foo_bar_policy\')\n+        pc.setPolicyIn("foo_bar_policy")\n+        pc.setPolicyBelow("foo_bar_policy")\n \n         chain = wft.getChainFor(self.portal.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # What if we acquired the doc from the wrong place\n         wrapped_doc = self.portal.folder2.document2.__of__(self.portal.folder)\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n         # What if we acquired the container from the wrong place\n         wrapped_doc = self.portal.folder2.__of__(self.portal.folder).document2\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n+        self.assertEqual(tuple(chain), ("simple_publication_workflow",))\n \n     def test_16_getWorklists(self):\n-        """Verify if worklists are always accessible with a policy\n-        """\n+        """Verify if worklists are always accessible with a policy"""\n         wf_tool = self.portal.portal_workflow\n         placeful_tool = self.portal_placeful_workflow\n \n-        self.portal.invokeFactory(\'Folder\', id=\'folder\')\n-        self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.folder.invokeFactory("Document", id="document")\n \n         # Create a policy\n-        placeful_tool.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                               \'default_workflow_policy (Simple Policy)\',\n-                                               \'portal_workflow\', )\n+        placeful_tool.manage_addWorkflowPolicy(\n+            "foo_bar_policy",\n+            "default_workflow_policy (Simple Policy)",\n+            "portal_workflow",\n+        )\n         # And redefine the chain for Document in portal_workflow\n-        wf_tool.setChainForPortalTypes([\'Document\'], ())\n+        wf_tool.setChainForPortalTypes(["Document"], ())\n \n         # Add a config to the folder using the policy\n         self.portal.folder.manage_addProduct[\n-            \'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n+            "CMFPlacefulWorkflow"\n+        ].manage_addWorkflowPolicyConfig()\n \n         # Set the policy for the config\n         config = getattr(self.portal.folder, WorkflowPolicyConfig_id)\n-        config.setPolicyBelow(\'foo_bar_policy\')\n+        config.setPolicyBelow("foo_bar_policy")\n \n         # we make the document pending\n         document = self.portal.folder.document\n-        wf_tool.doActionFor(document, \'submit\', comment="unittest transition")\n+        wf_tool.doActionFor(document, "submit", comment="unittest transition")\n \n         keys = list(wf_tool.getWorklists().keys())\n-        if \'comment_review_workflow\' in keys:\n+        if "comment_review_workflow" in keys:\n             # This test needs to work on both 4.0 and 4.1\n-            keys.remove(\'comment_review_workflow\')\n+            keys.remove("comment_review_workflow")\n \n         self.assertEqual(\n             sorted(tuple(keys)),\n-            sorted((\n-                \'comment_one_state_workflow\',\n-                \'folder_workflow\',\n-                \'intranet_folder_workflow\',\n-                \'intranet_workflow\',\n-                \'one_state_workflow\',\n-                \'plone_workflow\',\n-                \'simple_publication_workflow\',\n-            )))\n-        self.assertEqual(tuple(wf_tool.getWorklistsResults()), (document, ))\n+            sorted(\n+                (\n+                    "comment_one_state_workflow",\n+                    "folder_workflow",\n+                    "intranet_folder_workflow",\n+                    "intranet_workflow",\n+                    "one_state_workflow",\n+                    "plone_workflow",\n+                    "simple_publication_workflow",\n+                )\n+            ),\n+        )\n+        self.assertEqual(tuple(wf_tool.getWorklistsResults()), (document,))\n \n         logout()\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_configlet.py b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\nindex db48eb2..9273475 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n@@ -20,78 +20,90 @@\n """\n \n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n+from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import (  # noqa: E501\n+    CMFPlacefulWorkflowTestCase,\n+)\n from transaction import commit\n \n \n class TestConfiglet(CMFPlacefulWorkflowTestCase):\n-\n     def setUp(self):\n         """Init some shortcuts member variables."""\n-        self.portal = self.layer[\'portal\']\n-        self.app = self.layer[\'app\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.ppw = getToolByName(self.portal, \'portal_placeful_workflow\')\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.ppw = getToolByName(self.portal, "portal_placeful_workflow")\n \n         self.createDummyPolicy()\n \n     def getBrowser(self, logged_in=False):\n-        """ instantiate and return a testbrowser for convenience """\n+        """instantiate and return a testbrowser for convenience"""\n         browser = Browser(self.app)\n         if logged_in:\n             # Add an authorization header using the given or default\n             # credentials """\n-            browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD))\n+            browser.addHeader(\n+                "Authorization", "Basic %s:%s" % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+            )\n         return browser\n \n     def createDummyPolicy(self):\n-        """Create a workflow policy named \'dummy_policy\' for us to work with.\n-        """\n+        """Create a workflow policy named \'dummy_policy\' for us to work with."""\n         # Create a policy\n         self.ppw.manage_addWorkflowPolicy(\n-            \'dummy_policy\', \'default_workflow_policy (Simple Policy)\')\n-        self.ppw.dummy_policy.title = \'Dummy Policy\'\n+            "dummy_policy", "default_workflow_policy (Simple Policy)"\n+        )\n+        self.ppw.dummy_policy.title = "Dummy Policy"\n \n     def setLocalChainForPortalType(self, pt, chain):\n-        gp = self.ppw.getWorkflowPolicyById(\'dummy_policy\')\n-        gp.setChainForPortalTypes([pt, ], [chain, ])\n+        gp = self.ppw.getWorkflowPolicyById("dummy_policy")\n+        gp.setChainForPortalTypes([pt], [chain])\n \n     def test_local_mapping_select_acquisition_chain(self):\n-        """Test setting a local mapping to the special value \'acquisition\'\n-        """\n-        self.setLocalChainForPortalType(\'Document\', \'folder_workflow\')\n+        """Test setting a local mapping to the special value \'acquisition\'"""\n+        self.setLocalChainForPortalType("Document", "folder_workflow")\n         commit()\n         browser = self.getBrowser(logged_in=True)\n         browser.handleErrors = False\n \n         # Check that we get no errors when we do not pass the policy id\n         portal_url = self.portal.absolute_url()\n-        central_form = f\'{portal_url}/@@prefs_workflow_localpolicies_form\'\n-        browser.open(f\'{portal_url}/@@prefs_workflow_policy_mapping\')\n+        central_form = f"{portal_url}/@@placeful-workflow-configuration"\n+        browser.open(f"{portal_url}/@@placeful-workflow-policy-mapping")\n         self.assertEqual(browser.url, central_form)\n \n         # Try a wrong id.\n-        browser.open(f\'{portal_url}/@@prefs_workflow_policy_mapping?\'\n-                     \'wfpid=no_such_policy\')\n+        browser.open(\n+            f"{portal_url}/@@placeful-workflow-policy-mapping?wfpid=no_such_policy"\n+        )\n         self.assertEqual(browser.url, central_form)\n \n         # Now with a proper policy id.\n-        browser.open(f\'{portal_url}/@@prefs_workflow_policy_mapping?\'\n-                     \'wfpid=dummy_policy\')\n-        self.assertEqual(browser.getControl(name=\'wf.Document:record\').value,\n-                         [\'folder_workflow\', ])\n-\n-        browser.getControl(name=\'wf.Document:record\').value = [\'acquisition\', ]\n-        browser.getControl(name=\'submit\').click()\n-\n-        self.assertEqual(browser.url, f\'{portal_url}/@@prefs_workflow_policy_mapping?\'\n-                        \'wfpid=dummy_policy\')\n-        self.assertEqual(browser.getControl(name=\'wf.Document:record\').value,\n-                         [\'acquisition\', ])\n+        browser.open(f"{portal_url}/@@placeful-workflow-policy-mapping?wfpid=dummy_policy")\n+        self.assertEqual(\n+            browser.getControl(name="wf.Document:record").value,\n+            [\n+                "folder_workflow",\n+            ],\n+        )\n+\n+        browser.getControl(name="wf.Document:record").value = [\n+            "acquisition",\n+        ]\n+        browser.getControl(name="submit").click()\n+\n+        self.assertEqual(\n+            browser.url,\n+            f"{portal_url}/@@placeful-workflow-policy-mapping?wfpid=dummy_policy",\n+        )\n+        self.assertEqual(\n+            browser.getControl(name="wf.Document:record").value,\n+            [\n+                "acquisition",\n+            ],\n+        )\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_doctests.py b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\nindex c4caf6b..98589f9 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n@@ -20,21 +20,29 @@\n """\n \n from plone.testing import layered\n-from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n+from Products.CMFPlacefulWorkflow.testing import (\n+    PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING,\n+)\n+\n import doctest\n import unittest\n \n \n-OPTIONFLAGS = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE |\n-               doctest.REPORT_UDIFF |\n-               doctest.REPORT_ONLY_FIRST_FAILURE)\n+OPTIONFLAGS = (\n+    doctest.ELLIPSIS\n+    | doctest.NORMALIZE_WHITESPACE\n+    | doctest.REPORT_UDIFF\n+    | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    for testfile in [\'exportimport.txt\', \'policy_form.txt\']:\n-        suite.addTest(layered(doctest.DocFileSuite(testfile,\n-                                                   optionflags=OPTIONFLAGS),\n-                              layer=PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING))\n+    for testfile in ["exportimport.txt", "policy_form.txt"]:\n+        suite.addTest(\n+            layered(\n+                doctest.DocFileSuite(testfile, optionflags=OPTIONFLAGS),\n+                layer=PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING,\n+            )\n+        )\n     return suite\ndiff --git a/Products/CMFPlacefulWorkflow/upgrades.py b/Products/CMFPlacefulWorkflow/upgrades.py\nindex a406498..2f74be4 100644\n--- a/Products/CMFPlacefulWorkflow/upgrades.py\n+++ b/Products/CMFPlacefulWorkflow/upgrades.py\n@@ -1,4 +1,4 @@\n-PROFILE_ID = \'profile-Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\'\n+PROFILE_ID = "profile-Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow"\n \n \n def apply_full_profile(context):\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/base.cfg b/base.cfg\nnew file mode 100644\nindex 0000000..f327c31\n--- /dev/null\n+++ b/base.cfg\n@@ -0,0 +1,111 @@\n+[buildout]\n+show-picked-versions = true\n+extensions =\n+    mr.developer\n+\n+parts =\n+    instance\n+    test\n+    code-analysis\n+    coverage\n+    test-coverage\n+    createcoverage\n+    releaser\n+    i18ndude\n+    omelette\n+    robot\n+    plone-helper-scripts\n+    vscode\n+\n+develop = .\n+\n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    Products.CMFPlacefulWorkflow [test]\n+\n+[vscode]\n+recipe = collective.recipe.vscode\n+eggs = ${instance:eggs}\n+autocomplete-use-omelette = True\n+\n+[code-analysis]\n+recipe = plone.recipe.codeanalysis\n+pre-commit-hook = True\n+directory = ${buildout:directory}/Products\n+return-status-codes = False\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${instance:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ[\'TZ\'] = \'UTC\'\n+defaults = [\'-s\', \'Products.CMFPlacefulWorkflow\', \'--auto-color\', \'--auto-progress\']\n+\n+\n+[coverage]\n+recipe = zc.recipe.egg\n+eggs = coverage\n+\n+\n+[test-coverage]\n+recipe = collective.recipe.template\n+input = inline:\n+    #!/bin/bash\n+    export TZ=UTC\n+    ${buildout:directory}/bin/coverage run bin/test $*\n+    ${buildout:directory}/bin/coverage html\n+    ${buildout:directory}/bin/coverage report -m --fail-under=90\n+    # Fail (exit status 1) if coverage returns exit status 2 (this happens\n+    # when test coverage is below 100%.\n+output = ${buildout:directory}/bin/test-coverage\n+mode = 755\n+\n+\n+[createcoverage]\n+recipe = zc.recipe.egg\n+eggs = createcoverage\n+\n+\n+[robot]\n+recipe = zc.recipe.egg\n+eggs =\n+    ${test:eggs}\n+    plone.app.robotframework[debug,reload]\n+\n+\n+[releaser]\n+recipe = zc.recipe.egg\n+eggs = zest.releaser\n+\n+\n+[i18ndude]\n+recipe = zc.recipe.egg\n+eggs = i18ndude\n+\n+[plone-helper-scripts]\n+recipe = zc.recipe.egg\n+eggs =\n+   Products.CMFPlone\n+   ${instance:eggs}\n+interpreter = zopepy\n+scripts =\n+   zopepy\n+   plone-compile-resources\n+\n+[versions]\n+# Don\'t use a released version of Products.CMFPlacefulWorkflow\n+Products.CMFPlacefulWorkflow =\n\\ No newline at end of file\ndiff --git a/buildout.cfg b/buildout.cfg\nnew file mode 100644\nindex 0000000..d7db038\n--- /dev/null\n+++ b/buildout.cfg\n@@ -0,0 +1,5 @@\n+[buildout]\n+\n+# use this extend one of the buildout configuration:\n+extends =\n+    test_plone60.cfg\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 0000000..7d6e997\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1,11 @@\n+-c https://dist.plone.org/release/6.0.0a4/requirements.txt\n+\n+# requirements coredev buildout with es6 includes\n+# setuptools == 59.8.0\n+# zc.buildout == 3.0.0rc2\n+# pip == 22.0.4\n+# wheel == 0.37.1\n+\n+isort>=5\n+black==22.3.0\n+flake8>=4.0.1\n\\ No newline at end of file\ndiff --git a/news/41.bugfix b/news/41.bugfix\nnew file mode 100644\nindex 0000000..8221db2\n--- /dev/null\n+++ b/news/41.bugfix\n@@ -0,0 +1,3 @@\n+Update Markup in Page Templates, made it ready for Plone 6 with Bootstrap 5\n+Rename Browserviews, make the names it more consistent\n+[1letter]\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..3ee890e\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,4 @@\n+-c constraints.txt\n+setuptools\n+zc.buildout\n+tox\ndiff --git a/setup.cfg b/setup.cfg\nindex a6c51c7..046ff96 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -7,3 +7,25 @@ create-wheel = yes\n # When Python 2-3 compatible:\n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+profile = black\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\n+\n+[flake8]\n+# black compatible flake8 rules:\n+ignore =\n+    W503,\n+    C812,\n+    E501\n+    T001\n+    C813\n+# E203, E266\n+exclude = bootstrap.py,docs,*.egg.,omelette\n+max-line-length = 88\n+max-complexity = 18\n+select = B,C,E,F,W,T4,B9\n+\n+builtins = unicode,basestring\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex fa62bce..e190e11 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,10 +1,12 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.0.0a3.dev0\'\n+\n+version = "3.0.0a3.dev0"\n \n \n setup(\n-    name=\'Products.CMFPlacefulWorkflow\',\n+    name="Products.CMFPlacefulWorkflow",\n     version=version,\n     description="Workflow policies for Plone",\n     # Note: long_description is in setup.cfg\n@@ -20,29 +22,26 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'CMF Plone Zope2 workflow\',\n-    author=\'Encolpe DEGOUTE\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.CMFPlacefulWorkflow\',\n-    license=\'GPL\',\n+    keywords="CMF Plone Zope2 workflow",\n+    author="Encolpe DEGOUTE",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/Products.CMFPlacefulWorkflow",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n-        test=[\n-            \'plone.app.testing\',\n-            \'zope.testing\',\n-        ],\n+        test=["plone.app.testing", "zope.testing", "plone.app.robotframework"],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'zope.i18nmessageid\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFPlone\',\n-        \'Products.GenericSetup >= 2.0\',\n+        "setuptools",\n+        "six",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.i18nmessageid",\n+        "Products.CMFCore",\n+        "Products.CMFPlone",\n+        "Products.GenericSetup >= 2.0",\n     ],\n )\ndiff --git a/test_plone60.cfg b/test_plone60.cfg\nnew file mode 100644\nindex 0000000..b9a970d\n--- /dev/null\n+++ b/test_plone60.cfg\n@@ -0,0 +1,14 @@\n+[buildout]\n+\n+extends =\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\n+update-versions-file = test_plone60.cfg\n+\n+[versions]\n+createcoverage = 1.5\n+watchdog = 2.1.6\n+# Added by buildout at 2022-06-14 08:45:11.861188\n+plone.recipe.codeanalysis = 3.0.1\n'

