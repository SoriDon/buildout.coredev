Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2016-02-28T23:18:25+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.resourceeditor/commit/d5ae60f236b9ce6d7a02f7c5e5d55e708f29fb2a

Cleanup code

Files changed:
M CHANGES.rst
M plone/resourceeditor/__init__.py
M plone/resourceeditor/browser.py
M plone/resourceeditor/testing.py
M plone/resourceeditor/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a2bda9c..2f3c977 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Cleanup code according to Plone style guide.
+  [gforcada]
 
 
 2.0.4 (2015-10-28)
diff --git a/plone/resourceeditor/__init__.py b/plone/resourceeditor/__init__.py
index 4161bf1..a4e0266 100644
--- a/plone/resourceeditor/__init__.py
+++ b/plone/resourceeditor/__init__.py
@@ -1,5 +1,7 @@
-import os.path
+# -*- coding: utf-8 -*-
 import mimetypes
+import os.path
+
 
 # Borrowed from zope.contenttype.
 # This allows us to register mimetypes that
@@ -16,4 +18,4 @@ def add_files(filenames):
 
 
 here = os.path.dirname(os.path.abspath(__file__))
-add_files([os.path.join(here, "mime.types")])
+add_files([os.path.join(here, 'mime.types')])
diff --git a/plone/resourceeditor/browser.py b/plone/resourceeditor/browser.py
index 936088d..5d84f17 100644
--- a/plone/resourceeditor/browser.py
+++ b/plone/resourceeditor/browser.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from DateTime import DateTime
-from OFS.Image import File, Image
+from OFS.Image import File
+from OFS.Image import Image
 from plone.resource.file import FilesystemFile
 from plone.resource.interfaces import IResourceDirectory
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.decode import processInputs
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from time import localtime, strftime
+from time import localtime
+from time import strftime
 from urlparse import urlparse
 from zExceptions import NotFound
 from zope.cachedescriptors import property as zproperty
@@ -16,18 +18,20 @@
 from zope.i18n import translate
 from zope.i18nmessageid import MessageFactory
 from zope.publisher.browser import BrowserView
+
 import json
 import os.path
 import posixpath
 import re
 import urllib
 
-_ = MessageFactory(u"plone")
+
+_ = MessageFactory(u'plone')
 
 
 def authorize(context, request):
     authenticator = queryMultiAdapter((context, request),
-                                      name=u"authenticator")
+                                      name=u'authenticator')
     if authenticator is not None and not authenticator.verify():
         raise Unauthorized
 
@@ -141,9 +145,9 @@ def getInfo(self, obj, path='/'):
         else:
             size_specifier = u'mb'
             size = size / 1024
-        properties['size'] = '%i%s' % (
+        properties['size'] = '{0}{1}'.format(
             size,
-            translate(_(u'filemanager_%s' % size_specifier,
+            translate(_(u'filemanager_{0}'.format(size_specifier),
                         default=size_specifier), context=self.request)
         )
 
@@ -210,18 +214,18 @@ def addFolder(self, path, name):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_foldername',
-                                  default=u"Invalid folder name."),
+                                  default=u'Invalid folder name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_folder_exists',
-                                  default=u"Folder already exists."),
+                                  default=u'Folder already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -231,7 +235,7 @@ def addFolder(self, path, name):
                     error = translate(
                         _(
                             u'filemanager_invalid_foldername',
-                            default=u"Invalid folder name."
+                            default=u'Invalid folder name.'
                         ),
                         context=self.request
                     )
@@ -255,24 +259,24 @@ def addFile(self, path, name):
         code = 0
 
         parentPath = self.normalizePath(path)
-        newPath = "%s/%s" % (parentPath, name,)
+        newPath = '{0}/{1}'.format(parentPath, name,)
 
         try:
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_filename',
-                                  default=u"Invalid file name."),
+                                  default=u'Invalid file name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -280,10 +284,10 @@ def addFile(self, path, name):
 
         self.request.response.setHeader('Content-Type', 'application/json')
         return json.dumps({
-            "parent": self.normalizeReturnPath(parentPath),
-            "name": name,
-            "error": error,
-            "code": code,
+            'parent': self.normalizeReturnPath(parentPath),
+            'name': name,
+            'error': error,
+            'code': code,
         })
 
     def delete(self, path):
@@ -302,7 +306,7 @@ def delete(self, path):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -310,7 +314,7 @@ def delete(self, path):
                 del parent[name]
             except KeyError:
                 error = translate(_(u'filemanager_error_file_not_found',
-                                  default=u"File not found."),
+                                  default=u'File not found.'),
                                   context=self.request)
                 code = 1
 
@@ -339,7 +343,7 @@ def renameFile(self, path, newName):
             parent = self.getObject(oldPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -348,7 +352,7 @@ def renameFile(self, path, newName):
                     error = translate(
                         _(
                             u'filemanager_error_file_exists',
-                            default=u"File already exists."
+                            default=u'File already exists.'
                         ),
                         context=self.request)
                     code = 1
@@ -357,10 +361,10 @@ def renameFile(self, path, newName):
 
         self.request.response.setHeader('Content-Type', 'application/json')
         return json.dumps({
-            "oldParent": self.normalizeReturnPath(oldPath),
-            "oldName": oldName,
-            "newParent": self.normalizeReturnPath(newPath),
-            "newName": newName,
+            'oldParent': self.normalizeReturnPath(oldPath),
+            'oldName': oldName,
+            'newParent': self.normalizeReturnPath(newPath),
+            'newName': newName,
             'error': error,
             'code': code,
         })
@@ -391,32 +395,32 @@ def getDirectory(folder, relpath=''):
 
             return json.dumps(getDirectory(self.context))
 
-        if action == "getFile":
-            path = self.request.get("path", '')
+        if action == 'getFile':
+            path = self.request.get('path', '')
             return self.getFile(path)
 
-        if action == "saveFile":
-            path = self.request.get("path", '')
-            data = self.request.get("data", '')
+        if action == 'saveFile':
+            path = self.request.get('path', '')
+            data = self.request.get('data', '')
             return self.saveFile(path, data)
 
-        if action == "addFolder":
-            path = self.request.get("path", '')
-            name = self.request.get("name", '')
+        if action == 'addFolder':
+            path = self.request.get('path', '')
+            name = self.request.get('name', '')
             return self.addFolder(path, name)
 
-        if action == "addFile":
-            path = self.request.get("path", '')
-            name = self.request.get("filename", '')
+        if action == 'addFile':
+            path = self.request.get('path', '')
+            name = self.request.get('filename', '')
             return self.addFile(path, name)
 
-        if action == "renameFile":
-            path = self.request.get("path", '')
-            name = self.request.get("filename", '')
+        if action == 'renameFile':
+            path = self.request.get('path', '')
+            name = self.request.get('filename', '')
             return self.renameFile(path, name)
 
-        if action == "delete":
-            path = self.request.get("path", '')
+        if action == 'delete':
+            path = self.request.get('path', '')
             return self.delete(path)
 
 
@@ -425,7 +429,7 @@ class FileManager(BrowserView):
     """
 
     previewTemplate = ViewPageTemplateFile('preview.pt')
-    staticFiles = "++resource++plone.resourceeditor/filemanager"
+    staticFiles = '++resource++plone.resourceeditor/filemanager'
     imageExtensions = ['png', 'gif', 'jpg', 'jpeg']
     knownExtensions = ['css', 'html', 'htm', 'txt', 'xml', 'js', 'cfg']
     capabilities = ['download', 'rename', 'delete']
@@ -447,7 +451,7 @@ def pattern_options(self):
         site = getSite()
         viewName = '@@plone.resourceeditor.filemanager-actions'
         return json.dumps({
-            'actionUrl': '%s/++%s++%s/%s' % (
+            'actionUrl': '{0}/++{1}++{2}/{3}'.format(
                 site.absolute_url(),
                 self.context.__parent__.__parent__.__name__,
                 self.context.__name__,
@@ -520,7 +524,7 @@ def __call__(self):
                 )
             if textareaWrap:
                 self.request.response.setHeader('Content-Type', 'text/html')
-                return "<textarea>%s</textarea>" % json.dumps(response)
+                return '<textarea>{0}</textarea>'.format(json.dumps(response))
             else:
                 self.request.response.setHeader('Content-Type',
                                                 'application/json')
@@ -547,26 +551,30 @@ def resourceType(self):
 
     @zproperty.Lazy
     def baseUrl(self):
-        return "%s/++%s++%s" % (self.portalUrl, self.resourceType,
-                                self.resourceDirectory.__name__)
+        return '{0}/++{1}++{2}'.format(
+            self.portalUrl,
+            self.resourceType,
+            self.resourceDirectory.__name__
+        )
 
     @zproperty.Lazy
     def fileConnector(self):
-        return "%s/@@%s" % (self.baseUrl, self.__name__,)
+        return '{0}/@@{1}'.format(self.baseUrl, self.__name__,)
 
     @zproperty.Lazy
     def filemanagerConfiguration(self):
         return """\
 var FILE_ROOT = '/';
-var IMAGES_EXT = %s;
-var CAPABILITIES = %s;
-var FILE_CONNECTOR = '%s';
-var BASE_URL = '%s';
-""" % (
+var IMAGES_EXT = {0};
+var CAPABILITIES = {1};
+var FILE_CONNECTOR = '{2}';
+var BASE_URL = '{3}';
+""".format(
             repr(self.imageExtensions),
             repr(self.capabilities),
             self.fileConnector,
-            self.baseUrl,)
+            self.baseUrl,
+        )
 
     def normalizePath(self, path):
         if path.startswith('/'):
@@ -614,10 +622,10 @@ def getFolder(self, path, getSizes=False):
         for name in folder.listDirectory():
             if IResourceDirectory.providedBy(folder[name]):
                 folders.append(self.getInfo(
-                    path="%s/%s/" % (path, name), getSize=getSizes))
+                    path='{0}/{1}/'.format(path, name), getSize=getSizes))
             else:
                 files.append(self.getInfo(
-                    path="%s/%s" % (path, name), getSize=getSizes))
+                    path='{0}/{1}'.format(path, name), getSize=getSizes))
         return folders + files
 
     def getInfo(self, path, getSize=False):
@@ -649,33 +657,44 @@ def getInfo(self, path, getSize=False):
             else:
                 size_specifier = u'mb'
                 size = size / 1024
-            properties['size'] = '%i%s' % (
+            properties['size'] = '{0}{1}'.format(
                 size,
-                translate(_(u'filemanager_%s' % size_specifier,
-                            default=size_specifier), context=self.request))
+                translate(_(u'filemanager_{0}'.format(size_specifier),
+                            default=size_specifier), context=self.request)
+            )
 
         fileType = 'txt'
 
         siteUrl = self.portalUrl
         resourceName = self.resourceDirectory.__name__
 
-        preview = "%s/%s/images/fileicons/default.png" % (siteUrl,
-                                                          self.staticFiles)
+        preview = '{0}/{1}/images/fileicons/default.png'.format(
+            siteUrl,
+            self.staticFiles
+        )
 
         if IResourceDirectory.providedBy(obj):
-            preview = "%s/%s/images/fileicons/_Open.png" % (siteUrl,
-                                                            self.staticFiles)
+            preview = '{0}/{1}/images/fileicons/_Open.png'.format(
+                siteUrl,
+                self.staticFiles
+            )
             fileType = 'dir'
             path = path + '/'
         else:
             fileType = self.getExtension(path, obj)
             if fileType in self.imageExtensions:
-                preview = '%s/++%s++%s/%s' % (siteUrl, self.resourceType,
-                                              resourceName, path)
+                preview = '{0}/++{1}++{2}/{3}'.format(
+                    siteUrl,
+                    self.resourceType,
+                    resourceName,
+                    path
+                )
             elif fileType in self.extensionsWithIcons:
-                preview = "%s/%s/images/fileicons/%s.png" % (siteUrl,
-                                                             self.staticFiles,
-                                                             fileType)
+                preview = '{0}/{1}/images/fileicons/{2}.png'.format(
+                    siteUrl,
+                    self.staticFiles,
+                    fileType
+                )
 
         if isinstance(obj, Image):
             properties['height'] = obj.height
@@ -708,18 +727,18 @@ def addFolder(self, path, name):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_foldername',
-                                  default=u"Invalid folder name."),
+                                  default=u'Invalid folder name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_folder_exists',
-                                  default=u"Folder already exists."),
+                                  default=u'Folder already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -729,7 +748,7 @@ def addFolder(self, path, name):
                     error = translate(
                         _(
                             u'filemanager_invalid_foldername',
-                            default=u"Invalid folder name."
+                            default=u'Invalid folder name.'
                         ),
                         context=self.request
                     )
@@ -770,19 +789,19 @@ def add(self, path, newfile, replacepath=None):
             newPath = replacepath
             parentPath = '/'.join(replacepath.split('/')[:-1])
         else:
-            newPath = "%s/%s" % (parentPath, name,)
+            newPath = '{0}/{1}'.format(parentPath, name,)
 
         try:
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if name in parent and not replacepath:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -790,16 +809,16 @@ def add(self, path, newfile, replacepath=None):
                     self.resourceDirectory.writeFile(newPath, newfile)
                 except ValueError:
                     error = translate(_(u'filemanager_error_file_invalid',
-                                      default=u"Could not read file."),
+                                      default=u'Could not read file.'),
                                       context=self.request)
                     code = 1
 
         return {
-            "parent": self.normalizeReturnPath(parentPath),
-            "path": self.normalizeReturnPath(path),
-            "name": name,
-            "error": error,
-            "code": code,
+            'parent': self.normalizeReturnPath(parentPath),
+            'path': self.normalizeReturnPath(path),
+            'name': name,
+            'error': error,
+            'code': code,
         }
 
     def addNew(self, path, name):
@@ -813,34 +832,34 @@ def addNew(self, path, name):
         code = 0
 
         parentPath = self.normalizePath(path)
-        newPath = "%s/%s" % (parentPath, name,)
+        newPath = '{0}/{1}'.format(parentPath, name,)
 
         try:
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_filename',
-                                  default=u"Invalid file name."),
+                                  default=u'Invalid file name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
                 self.resourceDirectory.writeFile(newPath, '')
 
         return {
-            "parent": self.normalizeReturnPath(parentPath),
-            "name": name,
-            "error": error,
-            "code": code,
+            'parent': self.normalizeReturnPath(parentPath),
+            'name': name,
+            'error': error,
+            'code': code,
         }
 
     def rename(self, path, newName):
@@ -861,7 +880,7 @@ def rename(self, path, newName):
             parent = self.getObject(oldPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -869,17 +888,17 @@ def rename(self, path, newName):
                 if newName in parent:
                     error = translate(
                         _(u'filemanager_error_file_exists',
-                          default=u"File already exists."),
+                          default=u'File already exists.'),
                         context=self.request)
                     code = 1
                 else:
                     parent.rename(oldName, newName)
 
         return {
-            "oldParent": self.normalizeReturnPath(oldPath),
-            "oldName": oldName,
-            "newParent": self.normalizeReturnPath(newPath),
-            "newName": newName,
+            'oldParent': self.normalizeReturnPath(oldPath),
+            'oldName': oldName,
+            'newParent': self.normalizeReturnPath(newPath),
+            'newName': newName,
             'error': error,
             'code': code,
         }
@@ -900,7 +919,7 @@ def delete(self, path):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -908,7 +927,7 @@ def delete(self, path):
                 del parent[name]
             except KeyError:
                 error = translate(_(u'filemanager_error_file_not_found',
-                                  default=u"File not found."),
+                                  default=u'File not found.'),
                                   context=self.request)
                 code = 1
 
@@ -939,18 +958,18 @@ def move(self, path, directory):
             target = self.getObject(newParentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if filename not in parent:
                 error = translate(_(u'filemanager_error_file_not_found',
-                                  default=u"File not found."),
+                                  default=u'File not found.'),
                                   context=self.request)
                 code = 1
             elif filename in target:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -958,7 +977,7 @@ def move(self, path, directory):
                 del parent[filename]
                 target[filename] = obj
 
-        newCanonicalPath = "%s/%s" % (newParentPath, filename)
+        newCanonicalPath = '{0}/{1}'.format(newParentPath, filename)
 
         return {
             'code': code,
@@ -980,8 +999,10 @@ def download(self, path):
 
         self.request.response.setHeader('Content-Type',
                                         'application/octet-stream')
-        self.request.response.setHeader('Content-Disposition',
-                                        'attachment; filename="%s"' % name)
+        self.request.response.setHeader(
+            'Content-Disposition',
+            'attachment; filename="{0}"'.format(name)
+        )
 
         # TODO: Use streams here if we can
         return parent.readFile(name)
@@ -1046,7 +1067,7 @@ def filetree(self):
         def getFolder(root, relpath=''):
             result = []
             for name in root.listDirectory():
-                path = '%s/%s' % (relpath, name)
+                path = '{0}/{1}'.format(relpath, name)
                 if IResourceDirectory.providedBy(root[name]):
                     item = {
                         'title': name,
@@ -1063,6 +1084,6 @@ def getFolder(root, relpath=''):
             'title': '/',
             'key': '/',
             'isFolder': True,
-            "expand": True,
+            'expand': True,
             'children': getFolder(self.context)
         }])
diff --git a/plone/resourceeditor/testing.py b/plone/resourceeditor/testing.py
index 33788c2..b00a6bd 100644
--- a/plone/resourceeditor/testing.py
+++ b/plone/resourceeditor/testing.py
@@ -24,6 +24,6 @@ def setUpPloneSite(self, portal):
 
 PLONE_RESOURCE_EDITOR_FIXTURE = PloneResourceEditor()
 PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(PLONE_RESOURCE_EDITOR_FIXTURE,),
-    name="plone.resourceeditor:Integration"
+    bases=(PLONE_RESOURCE_EDITOR_FIXTURE, ),
+    name='plone.resourceeditor:Integration',
 )
diff --git a/plone/resourceeditor/tests.py b/plone/resourceeditor/tests.py
index 881046f..7824bb4 100644
--- a/plone/resourceeditor/tests.py
+++ b/plone/resourceeditor/tests.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.resourceeditor.testing import PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING
+from plone.resourceeditor.testing import PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING  # noqa
+
 import unittest2 as unittest
 
 
@@ -21,7 +22,7 @@ def test_getinfo(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
 
-        r.writeFile("test.txt", "A text file")
+        r.writeFile('test.txt', 'A text file')
 
         view = FileManager(r, self.layer['request'])
         info = view.getInfo('/test.txt')
@@ -37,9 +38,9 @@ def test_getfolder(self):
         r = self._make_directory()
 
         r.makeDirectory('alpha')
-        r['alpha'].writeFile('beta.txt', "Beta")
+        r['alpha'].writeFile('beta.txt', 'Beta')
         r['alpha'].makeDirectory('delta')
-        r['alpha']['delta'].writeFile('gamma.css', "body {}")
+        r['alpha']['delta'].writeFile('gamma.css', 'body {}')
 
         view = FileManager(r, self.layer['request'])
         info = view.getFolder('/alpha')
@@ -127,10 +128,10 @@ def test_add(self):
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/", d)
+        info = view.add('/', d)
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -142,14 +143,14 @@ def test_add_subfolder(self):
         from plone.resourceeditor.browser import FileManager
         from StringIO import StringIO
         r = self._make_directory()
-        r.makeDirectory("alpha")
+        r.makeDirectory('alpha')
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/alpha", d)
+        info = view.add('/alpha', d)
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -161,32 +162,32 @@ def test_add_exists(self):
         from plone.resourceeditor.browser import FileManager
         from StringIO import StringIO
         r = self._make_directory()
-        r.writeFile("test.txt", "boo")
+        r.writeFile('test.txt', 'boo')
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/", d)
+        info = view.add('/', d)
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
 
-        self.assertEqual(r.readFile("test.txt"), "boo")
+        self.assertEqual(r.readFile('test.txt'), 'boo')
 
     def test_add_replace(self):
         from plone.resourceeditor.browser import FileManager
         from StringIO import StringIO
         r = self._make_directory()
-        r.writeFile("test.txt", "boo")
+        r.writeFile('test.txt', 'boo')
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/", d, "/test.txt")
+        info = view.add('/', d, '/test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -194,7 +195,7 @@ def test_add_replace(self):
         self.assertEqual(info['path'], '/')
         self.assertEqual(info['parent'], '/')
 
-        self.assertEqual(r.readFile("test.txt"), "foo")
+        self.assertEqual(r.readFile('test.txt'), 'foo')
 
     def test_addnew(self):
         from plone.resourceeditor.browser import FileManager
@@ -202,28 +203,28 @@ def test_addnew(self):
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.addNew("/", "test.txt")
+        info = view.addNew('/', 'test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
         self.assertEqual(info['name'], 'test.txt')
         self.assertEqual(info['parent'], '/')
 
-        self.assertEqual(r.readFile("test.txt"), "")
+        self.assertEqual(r.readFile('test.txt'), '')
 
     def test_addnew_exists(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.addNew("/", "test.txt")
+        info = view.addNew('/', 'test.txt')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
 
-        self.assertEqual(r.readFile("test.txt"), "foo")
+        self.assertEqual(r.readFile('test.txt'), 'foo')
 
     def test_addnew_invalidname(self):
         from plone.resourceeditor.browser import FileManager
@@ -232,18 +233,18 @@ def test_addnew_invalidname(self):
         view = FileManager(r, self.layer['request'])
 
         for char in '\\/:*?"<>':
-            info = view.addNew("/", "foo" + char)
+            info = view.addNew('/', 'foo' + char)
             self.assertEqual(info['code'], 1)
             self.assertNotEqual(info['error'], '')
 
     def test_rename(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.rename("/test.txt", "foo.txt")
+        info = view.rename('/test.txt', 'foo.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -252,17 +253,17 @@ def test_rename(self):
         self.assertEqual(info['oldParent'], '/')
         self.assertEqual(info['newParent'], '/')
 
-        self.assertEqual(r.readFile("foo.txt"), "foo")
+        self.assertEqual(r.readFile('foo.txt'), 'foo')
 
     def test_rename_subfolder(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.makeDirectory("alpha")
-        r['alpha'].writeFile("test.txt", "foo")
+        r.makeDirectory('alpha')
+        r['alpha'].writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.rename("/alpha/test.txt", "foo.txt")
+        info = view.rename('/alpha/test.txt', 'foo.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -271,17 +272,17 @@ def test_rename_subfolder(self):
         self.assertEqual(info['oldParent'], '/alpha')
         self.assertEqual(info['newParent'], '/alpha')
 
-        self.assertEqual(r['alpha'].readFile("foo.txt"), "foo")
+        self.assertEqual(r['alpha'].readFile('foo.txt'), 'foo')
 
     def test_rename_exists(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
-        r.writeFile("foo.txt", "bar")
+        r.writeFile('test.txt', 'foo')
+        r.writeFile('foo.txt', 'bar')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.rename("/test.txt", "foo.txt")
+        info = view.rename('/test.txt', 'foo.txt')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
@@ -290,16 +291,16 @@ def test_rename_exists(self):
         self.assertEqual(info['oldParent'], '/')
         self.assertEqual(info['newParent'], '/')
 
-        self.assertEqual(r.readFile("foo.txt"), "bar")
+        self.assertEqual(r.readFile('foo.txt'), 'bar')
 
     def test_delete(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.delete("/test.txt")
+        info = view.delete('/test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -311,11 +312,11 @@ def test_delete_subfolder(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
         r.makeDirectory('alpha')
-        r['alpha'].writeFile("test.txt", "foo")
+        r['alpha'].writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.delete("/alpha/test.txt")
+        info = view.delete('/alpha/test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -329,7 +330,7 @@ def test_delete_notfound(self):
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.delete("/test.txt")
+        info = view.delete('/test.txt')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
@@ -338,46 +339,46 @@ def test_delete_notfound(self):
     def test_move(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.makeDirectory("alpha")
-        r.writeFile("test.txt", "foo")
+        r.makeDirectory('alpha')
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.move("/test.txt", "/alpha")
+        info = view.move('/test.txt', '/alpha')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
         self.assertEqual(info['newPath'], '/alpha/test.txt')
 
         self.assertFalse('test.txt' in r)
-        self.assertEqual("foo", r['alpha'].readFile('test.txt'))
+        self.assertEqual('foo', r['alpha'].readFile('test.txt'))
 
     def test_move_exists(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.makeDirectory("alpha")
-        r['alpha'].writeFile("test.txt", "bar")
-        r.writeFile("test.txt", "foo")
+        r.makeDirectory('alpha')
+        r['alpha'].writeFile('test.txt', 'bar')
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.move("/test.txt", "/alpha")
+        info = view.move('/test.txt', '/alpha')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
         self.assertEqual(info['newPath'], '/alpha/test.txt')
 
         self.assertTrue('test.txt' in r)
-        self.assertEqual("bar", r['alpha'].readFile('test.txt'))
+        self.assertEqual('bar', r['alpha'].readFile('test.txt'))
 
     def test_move_invalid_parent(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.move("/test.txt", "/alpha")
+        info = view.move('/test.txt', '/alpha')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
@@ -388,7 +389,7 @@ def test_move_invalid_parent(self):
     def test_download(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
-        self.assertEqual("foo", view.download("/test.txt"))
+        self.assertEqual('foo', view.download('/test.txt'))


Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2016-03-01T00:16:24+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.resourceeditor/commit/594a3928d9e28b84d0c190a413a11c11a762db42

Remove trailing spaces

Files changed:
M plone/resourceeditor/resources/filemanager.min.js

diff --git a/plone/resourceeditor/resources/filemanager.min.js b/plone/resourceeditor/resources/filemanager.min.js
index 7396110..f8a2c38 100644
--- a/plone/resourceeditor/resources/filemanager.min.js
+++ b/plone/resourceeditor/resources/filemanager.min.js
@@ -11553,7 +11553,7 @@ if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
 define('mockup-registry',[
   'jquery'
 ], function($, undefined) {
-  
+
 
   var Registry = {
 
@@ -11715,7 +11715,7 @@ define('mockup-patterns-base',[
   'jquery',
   'mockup-registry'
 ], function($, Registry) {
-  
+
 
   // Base Pattern
   var Base = function($el, options) {
@@ -18381,7 +18381,7 @@ define('js/ui/views/base',[
   'underscore',
   'backbone'
 ], function(_, Backbone) {
-  
+
 
   var BaseView = Backbone.View.extend({
     isUIView: true,
@@ -18475,7 +18475,7 @@ define('js/ui/views/base',[
 define('mockup-utils',[
   'jquery'
 ], function($) {
-  
+
 
   var QueryHelper = function(options) {
     /* if pattern argument provided, it can implement the interface of:
@@ -19182,7 +19182,7 @@ limitations under the License.
 
     /*
     Create tree from data.
-    
+
     Structure of data is:
     [
         {
@@ -19215,7 +19215,7 @@ limitations under the License.
 
     /*
     Add child.
-    
+
     tree.addChild(
         new Node('child1')
     );
@@ -19229,7 +19229,7 @@ limitations under the License.
 
     /*
     Add child at position. Index starts at 0.
-    
+
     tree.addChildAtPosition(
         new Node('abc'),
         1
@@ -19250,7 +19250,7 @@ limitations under the License.
 
     /*
     Remove child. This also removes the children of the node.
-    
+
     tree.removeChild(tree.children[0]);
      */
 
@@ -19267,7 +19267,7 @@ limitations under the License.
 
     /*
     Get child index.
-    
+
     var index = getChildIndex(node);
      */
 
@@ -19278,7 +19278,7 @@ limitations under the License.
 
     /*
     Does the tree have children?
-    
+
     if (tree.hasChildren()) {
         //
     }
@@ -19295,15 +19295,15 @@ limitations under the License.
 
     /*
     Iterate over all the nodes in the tree.
-    
+
     Calls callback with (node, level).
-    
+
     The callback must return true to continue the iteration on current node.
-    
+
     tree.iterate(
         function(node, level) {
            console.log(node.name);
-    
+
            // stop iteration after level 2
            return (level <= 2);
         }
@@ -19335,9 +19335,9 @@ limitations under the License.
 
     /*
     Move node relative to another node.
-    
+
     Argument position: Position.BEFORE, Position.AFTER or Position.Inside
-    
+
     // move node1 after node2
     tree.moveNode(node1, node2, Position.AFTER);
      */
@@ -19727,13 +19727,13 @@ limitations under the License.
 
   /*
   Copyright 2013 Marco Braak
-  
+
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
-  
+
       http://www.apache.org/licenses/LICENSE-2.0
-  
+
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -21798,7 +21798,7 @@ define('mockup-patterns-tree',[
   'mockup-utils',
   'jqtree'
 ], function($, _, Base, utils) {
-  
+
 
   var Tree = Base.extend({
     name: 'tree',
@@ -21938,7 +21938,7 @@ define('mockup-patterns-texteditor',[
   'ace-theme-monokai',
   'ace-mode-text'
 ], function($, Base, utils) {
-  
+
 
   var AcePattern = Base.extend({
     name: 'ace',
@@ -22036,7 +22036,7 @@ define('mockup-patterns-texteditor',[
   java, location, Components, FileUtils */
 
 define('text',['module'], function (module) {
-    
+
 
     var text, fs, Cc, Ci, xpcIsWindows,
         progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
@@ -22446,7 +22446,7 @@ define('js/ui/views/container',[
   'backbone',
   'js/ui/views/base'
 ], function($, _, Backbone, BaseView) {
-  
+
 
   var Container = BaseView.extend({
     id: '',
@@ -22558,7 +22558,7 @@ define('js/ui/views/toolbar',[
   'backbone',
   'js/ui/views/container'
 ], function(_, Backbone, ContainerView) {
-  
+
 
   var Toolbar = ContainerView.extend({
     tagName: 'div',
@@ -22582,7 +22582,7 @@ define("bootstrap-tooltip", ["jquery"], function() {
 
 
 +function ($) {
-  
+
 
   // TOOLTIP PUBLIC CLASS DEFINITION
   // ===============================
@@ -23008,7 +23008,7 @@ define('js/ui/views/button',[
   'js/ui/views/base',
   'bootstrap-tooltip'
 ], function($, Backbone, _, BaseView) {
-  
+
 
   var ButtonView = BaseView.extend({
     tagName: 'a',
@@ -23109,7 +23109,7 @@ define('js/ui/views/buttongroup',[
   'backbone',
   'js/ui/views/container'
 ], function(_, Backbone, ContainerView) {
-  
+
 
   var ButtonGroup = ContainerView.extend({
     tagName: 'div',
@@ -23166,7 +23166,7 @@ define('mockup-patterns-backdrop',[
   'jquery',
   'mockup-patterns-base'
 ], function($, Base) {
-  
+
 
   var Backdrop = Base.extend({
     name: 'backdrop',
@@ -23268,7 +23268,7 @@ define('js/ui/views/popover',[
   'mockup-patterns-backdrop',
   'text!js/ui/templates/popover.xml',
 ], function($, _, Backbone, ContainerView, Backdrop, PopoverTemplate) {
-  
+
 
   var PopoverView = ContainerView.extend({
     tagName: 'div',
@@ -23500,7 +23500,7 @@ define('js/patterns/filemanager/views/basepopover',[
   'backbone',
   'js/ui/views/popover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var FileManagerPopover = PopoverView.extend({
     className: 'popover',
@@ -23566,7 +23566,7 @@ define('js/patterns/filemanager/views/addnew',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var AddNewView = PopoverView.extend({
     className: 'popover addnew',
@@ -23640,7 +23640,7 @@ define('js/patterns/filemanager/views/newfolder',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var AddNewView = PopoverView.extend({
     className: 'popover addfolder',
@@ -23714,7 +23714,7 @@ define('js/patterns/filemanager/views/delete',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var DeleteView = PopoverView.extend({
     className: 'popover delete',
@@ -23780,7 +23780,7 @@ define('js/patterns/filemanager/views/customize',[
   'backbone',
   'js/patterns/filemanager/views/basepopover',
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var CustomizeView = PopoverView.extend({
     className: 'popover customize',
@@ -23879,7 +23879,7 @@ define('js/patterns/filemanager/views/rename',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var RenameView = PopoverView.extend({
     className: 'popover addnew',
@@ -23973,7 +23973,7 @@ the specific language governing permissions and limitations under the Apache Lic
 })(jQuery);
 
 (function ($, undefined) {
-    
+
     /*global document, window, jQuery, console */
 
     if (window.Select2 !== undefined) {
@@ -27193,12 +27193,12 @@ define("select2", function(){});
 (function(root) {
 define("jquery.event.drag", ["jquery"], function() {
   return (function() {
-/*! 
+/*!
  * jquery.event.drag - v 2.2
  * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
  * Open Source MIT License - http://threedubmedia.com/code/license
  */
-// Created: 2008-06-04 
+// Created: 2008-06-04
 // Updated: 2012-05-21
 // REQUIRES: jquery 1.7.x
 
@@ -27211,7 +27211,7 @@ $.fn.drag = function( str, arg, opts ){
 	// figure out the event handler...
 	fn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;
 	// fix the event type
-	if ( type.indexOf("drag") !== 0 ) 
+	if ( type.indexOf("drag") !== 0 )
 		type = "drag"+ type;
 	// were options passed
 	opts = ( str == fn ? arg : opts ) || {};
@@ -27220,11 +27220,11 @@ $.fn.drag = function( str, arg, opts ){
 };
 
 // local refs (increase compression)
-var $event = $.event, 
+var $event = $.event,
 $special = $event.special,
-// configure the drag special event 
+// configure the drag special event
 drag = $special.drag = {
-	
+
 	// these are the default settings
 	defaults: {
 		which: 1, // mouse button pressed to start drag sequence
@@ -27235,38 +27235,38 @@ drag = $special.drag = {
 		drop: true, // false to suppress drop events, true or selector to allow
 		click: false // false to suppress click events after dragend (no proxy)
 	},
-	
+
 	// the key name for stored drag data
 	datakey: "dragdata",
-	
+
 	// prevent bubbling for better performance
 	noBubble: true,
-	
+
 	// count bound related events
-	add: function( obj ){ 
+	add: function( obj ){
 		// read the interaction data
 		var data = $.data( this, drag.datakey ),
-		// read any passed options 
+		// read any passed options
 		opts = obj.data || {};
 		// count another realted event
 		data.related += 1;
 		// extend data options bound with this event
-		// don't iterate "opts" in case it is a node 
+		// don't iterate "opts" in case it is a node
 		$.each( drag.defaults, function( key, def ){
 			if ( opts[ key ] !== undefined )
 				data[ key ] = opts[ key ];
 		});
 	},
-	
+
 	// forget unbound related events
 	remove: function(){
 		$.data( this, drag.datakey ).related -= 1;
 	},
-	
+
 	// configure interaction, capture settings
 	setup: function(){
 		// check for related events
-		if ( $.data( this, drag.datakey ) ) 
+		if ( $.data( this, drag.datakey ) )
 			return;
 		// initialize the drag data with copied defaults
 		var data = $.extend({ related:0 }, drag.defaults );
@@ -27275,42 +27275,42 @@ drag = $special.drag = {
 		// bind the mousedown event, which starts drag interactions
 		$event.add( this, "touchstart mousedown", drag.init, data );
 		// prevent image dragging in IE...
-		if ( this.attachEvent ) 
-			this.attachEvent("ondragstart", drag.dontstart ); 
+		if ( this.attachEvent )
+			this.attachEvent("ondragstart", drag.dontstart );
 	},
-	
+
 	// destroy configured interaction
 	teardown: function(){
 		var data = $.data( this, drag.datakey ) || {};
 		// check for related events
-		if ( data.related ) 
+		if ( data.related )
 			return;
 		// remove the stored data
 		$.removeData( this, drag.datakey );
 		// remove the mousedown event
 		$event.remove( this, "touchstart mousedown", drag.init );
 		// enable text selection
-		drag.textselect( true ); 
+		drag.textselect( true );
 		// un-prevent image dragging in IE...
-		if ( this.detachEvent ) 
-			this.detachEvent("ondragstart", drag.dontstart ); 
+		if ( this.detachEvent )
+			this.detachEvent("ondragstart", drag.dontstart );
 	},
-		
+
 	// initialize the interaction
-	init: function( event ){ 
+	init: function( event ){
 		// sorry, only one touch at a time
-		if ( drag.touched ) 
+		if ( drag.touched )
 			return;
 		// the drag/drop interaction data
 		var dd = event.data, results;
 		// check the which directive
-		if ( event.which != 0 && dd.which > 0 && event.which != dd.which ) 
-			return; 
+		if ( event.which != 0 && dd.which > 0 && event.which != dd.which )
+			return;
 		// check for suppressed selector
-		if ( $( event.target ).is( dd.not ) ) 
+		if ( $( event.target ).is( dd.not ) )
 			return;
 		// check for handle selector
-		if ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length ) 
+		if ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length )
 			return;
 
 		drag.touched = event.type == 'touchstart' ? this : null;
@@ -27321,7 +27321,7 @@ drag = $special.drag = {
 		dd.pageX = event.pageX;
 		dd.pageY = event.pageY;
 		dd.dragging = null;
-		// handle draginit event... 
+		// handle draginit event...
 		results = drag.hijack( event, "draginit", dd );
 		// early cancel
 		if ( !dd.propagates )
@@ -27338,43 +27338,43 @@ drag = $special.drag = {
 		// remember how many interactions are propagating
 		dd.propagates = dd.interactions.length;
 		// locate and init the drop targets
-		if ( dd.drop !== false && $special.drop ) 
+		if ( dd.drop !== false && $special.drop )
 			$special.drop.handler( event, dd );
 		// disable text selection
-		drag.textselect( false ); 
+		drag.textselect( false );
 		// bind additional events...
 		if ( drag.touched )
 			$event.add( drag.touched, "touchmove touchend", drag.handler, dd );
-		else 
+		else
 			$event.add( document, "mousemove mouseup", drag.handler, dd );
 		// helps prevent text selection or scrolling
 		if ( !drag.touched || dd.live )
 			return false;
-	},	
-	
+	},
+
 	// returns an interaction object
 	interaction: function( elem, dd ){
 		var offset = $( elem )[ dd.relative ? "position" : "offset" ]() || { top:0, left:0 };
 		return {
-			drag: elem, 
-			callback: new drag.callback(), 
+			drag: elem,
+			callback: new drag.callback(),
 			droppable: [],
 			offset: offset
 		};
 	},
-	
+
 	// handle drag-releatd DOM events
-	handler: function( event ){ 
+	handler: function( event ){
 		// read the data before hijacking anything
-		var dd = event.data;	
+		var dd = event.data;
 		// handle various events
 		switch ( event.type ){
 			// mousemove, check distance, start dragging
-			case !dd.dragging && 'touchmove': 
+			case !dd.dragging && 'touchmove':
 				event.preventDefault();
 			case !dd.dragging && 'mousemove':
 				//  drag tolerance, x� + y� = distance�
-				if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) ) 
+				if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) )
 					break; // distance tolerance not reached
 				event.target = dd.target; // force target from "mousedown" event (fix distance issue)
 				drag.hijack( event, "dragstart", dd ); // trigger "dragstart"
@@ -27385,42 +27385,42 @@ drag = $special.drag = {
 				event.preventDefault();
 			case 'mousemove':
 				if ( dd.dragging ){
-					// trigger "drag"		
+					// trigger "drag"
 					drag.hijack( event, "drag", dd );
 					if ( dd.propagates ){
 						// manage drop events
 						if ( dd.drop !== false && $special.drop )
-							$special.drop.handler( event, dd ); // "dropstart", "dropend"							
-						break; // "drag" not rejected, stop		
+							$special.drop.handler( event, dd ); // "dropstart", "dropend"
+						break; // "drag" not rejected, stop
 					}
 					event.type = "mouseup"; // helps "drop" handler behave
 				}
 			// mouseup, stop dragging
-			case 'touchend': 
-			case 'mouseup': 
+			case 'touchend':
+			case 'mouseup':
 			default:
 				if ( drag.touched )
 					$event.remove( drag.touched, "touchmove touchend", drag.handler ); // remove touch events
-				else 
-					$event.remove( document, "mousemove mouseup", drag.handler ); // remove page events	
+				else
+					$event.remove( document, "mousemove mouseup", drag.handler ); // remove page events
 				if ( dd.dragging ){
 					if ( dd.drop !== false && $special.drop )
 						$special.drop.handler( event, dd ); // "drop"
-					drag.hijack( event, "dragend", dd ); // trigger "dragend"	
+					drag.hijack( event, "dragend", dd ); // trigger "dragend"
 				}
 				drag.textselect( true ); // enable text selection
 				// if suppressing click events...
 				if ( dd.click === false && dd.dragging )
 					$.data( dd.mousedown, "suppress.click", new Date().getTime() + 5 );
-				dd.dragging = drag.touched = false; // deactivate element	
+				dd.dragging = drag.touched = false; // deactivate element
 				break;
 		}
 	},
-		
+
 	// re-use event object for custom events
 	hijack: function( event, type, dd, x, elem ){
 		// not configured
-		if ( !dd ) 
+		if ( !dd )
 			return;
 		// remember the original event and type
 		var orig = { event:event.originalEvent, type:event.type },
@@ -27450,7 +27450,7 @@ drag = $special.drag = {
 				callback.target = subject;
 				// force propagtion of the custom event
 				event.isPropagationStopped = function(){ return false; };
-				// handle the event	
+				// handle the event
 				result = subject ? $event.dispatch.call( subject, event, callback ) : null;
 				// stop the drag interaction for this element
 				if ( result === false ){
@@ -27465,25 +27465,25 @@ drag = $special.drag = {
 				// assign any dropinit elements
 				else if ( type == "dropinit" )
 					ia.droppable.push( drag.element( result ) || subject );
-				// accept a returned proxy element 
+				// accept a returned proxy element
 				if ( type == "dragstart" )
 					ia.proxy = $( drag.element( result ) || ia.drag )[0];
-				// remember this result	
+				// remember this result
 				ia.results.push( result );
 				// forget the event result, for recycling
 				delete event.result;
 				// break on cancelled handler
 				if ( type !== "dropinit" )
 					return result;
-			});	
-			// flatten the results	
-			dd.results[ i ] = drag.flatten( ia.results );	
+			});
+			// flatten the results
+			dd.results[ i ] = drag.flatten( ia.results );
 			// accept a set of valid drop targets
 			if ( type == "dropinit" )
 				ia.droppable = drag.flatten( ia.droppable );
 			// locate drop targets
 			if ( type == "dragstart" && !ia.cancelled )
-				callback.update(); 
+				callback.update();
 		}
 		while ( ++i < len )
 		// restore the original event & type
@@ -27492,9 +27492,9 @@ drag = $special.drag = {
 		// return all handler results
 		return drag.flatten( dd.results );
 	},
-		
+
 	// extend the callback object with drag/drop properties...
-	properties: function( event, dd, ia ){		
+	properties: function( event, dd, ia ){
 		var obj = ia.callback;
 		// elements
 		obj.drag = ia.drag;
@@ -27509,44 +27509,44 @@ drag = $special.drag = {
 		obj.originalX = ia.offset.left;
 		obj.originalY = ia.offset.top;
 		// adjusted element position
-		obj.offsetX = obj.originalX + obj.deltaX; 
+		obj.offsetX = obj.originalX + obj.deltaX;
 		obj.offsetY = obj.originalY + obj.deltaY;
 		// assign the drop targets information
 		obj.drop = drag.flatten( ( ia.drop || [] ).slice() );
 		obj.available = drag.flatten( ( ia.droppable || [] ).slice() );
-		return obj;	
+		return obj;
 	},
-	
+
 	// determine is the argument is an element or jquery instance
 	element: function( arg ){
 		if ( arg && ( arg.jquery || arg.nodeType == 1 ) )
 			return arg;
 	},
-	
+
 	// flatten nested jquery objects and arrays into a single dimension array
 	flatten: function( arr ){
 		return $.map( arr, function( member ){
-			return member && member.jquery ? $.makeArray( member ) : 
+			return member && member.jquery ? $.makeArray( member ) :
 				member && member.length ? drag.flatten( member ) : member;
 		});
 	},
-	
+
 	// toggles text selection attributes ON (true) or OFF (false)
-	textselect: function( bool ){ 
+	textselect: function( bool ){
 		$( document )[ bool ? "unbind" : "bind" ]("selectstart", drag.dontstart )
 			.css("MozUserSelect", bool ? "" : "none" );
 		// .attr("unselectable", bool ? "off" : "on" )
-		document.unselectable = bool ? "off" : "on"; 
+		document.unselectable = bool ? "off" : "on";
 	},
-	
+
 	// suppress "selectstart" and "ondragstart" events
-	dontstart: function(){ 
-		return false; 
+	dontstart: function(){
+		return false;
 	},
-	
+
 	// a callback instance contructor
 	callback: function(){}
-	
+
 };
 
 // callback methods
@@ -27570,9 +27570,9 @@ $event.dispatch = function( event ){
 };
 
 // event fix hooks for touch events...
-var touchHooks = 
-$event.fixHooks.touchstart = 
-$event.fixHooks.touchmove = 
+var touchHooks =
+$event.fixHooks.touchstart =
+$event.fixHooks.touchmove =
 $event.fixHooks.touchend =
 $event.fixHooks.touchcancel = {
 	props: "clientX clientY pageX pageY screenX screenY".split( " " ),
@@ -27580,9 +27580,9 @@ $event.fixHooks.touchcancel = {
 		if ( orig ){
 			var touched = ( orig.touches && orig.touches[0] )
 				|| ( orig.changedTouches && orig.changedTouches[0] )
-				|| null; 
+				|| null;
 			// iOS webkit: touchstart, touchmove, touchend
-			if ( touched ) 
+			if ( touched )
 				$.each( touchHooks.props, function( i, prop ){
 					event[ prop ] = touched[ prop ];
 				});
@@ -27603,12 +27603,12 @@ $special.draginit = $special.dragstart = $special.dragend = drag;
 (function(root) {
 define("jquery.event.drop", ["jquery"], function() {
   return (function() {
-/*! 
+/*!
  * jquery.event.drop - v 2.2
  * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
  * Open Source MIT License - http://threedubmedia.com/code/license
  */
-// Created: 2008-06-04 
+// Created: 2008-06-04
 // Updated: 2012-05-21
 // REQUIRES: jquery 1.7.x, event.drag 2.2
 
@@ -27623,7 +27623,7 @@ $.fn.drop = function( str, arg, opts ){
 	// figure out the event handler...
 	fn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;
 	// fix the event type
-	if ( type.indexOf("drop") !== 0 ) 
+	if ( type.indexOf("drop") !== 0 )
 		type = "drop"+ type;
 	// were options passed
 	opts = ( str == fn ? arg : opts ) || {};
@@ -27633,19 +27633,19 @@ $.fn.drop = function( str, arg, opts ){
 
 // DROP MANAGEMENT UTILITY
 // returns filtered drop target elements, caches their positions
-$.drop = function( opts ){ 
+$.drop = function( opts ){
 	opts = opts || {};
 	// safely set new options...
-	drop.multi = opts.multi === true ? Infinity : 
+	drop.multi = opts.multi === true ? Infinity :
 		opts.multi === false ? 1 : !isNaN( opts.multi ) ? opts.multi : drop.multi;
 	drop.delay = opts.delay || drop.delay;
-	drop.tolerance = $.isFunction( opts.tolerance ) ? opts.tolerance : 
+	drop.tolerance = $.isFunction( opts.tolerance ) ? opts.tolerance :
 		opts.tolerance === null ? null : drop.tolerance;
 	drop.mode = opts.mode || drop.mode || 'intersect';
 };
 
 // local refs (increase compression)
-var $event = $.event, 
+var $event = $.event,
 $special = $event.special,
 // configure the drop special event
 drop = $.event.special.drop = {
@@ -27654,36 +27654,36 @@ drop = $.event.special.drop = {
 	multi: 1, // allow multiple drop winners per dragged element
 	delay: 20, // async timeout delay
 	mode: 'overlap', // drop tolerance mode
-		
+
 	// internal cache
-	targets: [], 
-	
+	targets: [],
+
 	// the key name for stored drop data
 	datakey: "dropdata",
-		
+
 	// prevent bubbling for better performance
 	noBubble: true,
-	
+
 	// count bound related events
-	add: function( obj ){ 
+	add: function( obj ){
 		// read the interaction data
 		var data = $.data( this, drop.datakey );
 		// count another realted event
 		data.related += 1;
 	},
-	
+
 	// forget unbound related events
 	remove: function(){
 		$.data( this, drop.datakey ).related -= 1;
 	},
-	
+
 	// configure the interactions
 	setup: function(){
 		// check for related events
-		if ( $.data( this, drop.datakey ) ) 
+		if ( $.data( this, drop.datakey ) )
 			return;
 		// initialize the drop element data
-		var data = { 
+		var data = {
 			related: 0,
 			active: [],
 			anyactive: 0,
@@ -27695,29 +27695,29 @@ drop = $.event.special.drop = {
 		// store the drop target in internal cache
 		drop.targets.push( this );
 	},
-	
-	// destroy the configure interaction	
-	teardown: function(){ 
+
+	// destroy the configure interaction
+	teardown: function(){
 		var data = $.data( this, drop.datakey ) || {};
 		// check for related events
-		if ( data.related ) 
+		if ( data.related )
 			return;
 		// remove the stored data
 		$.removeData( this, drop.datakey );
 		// reference the targeted element
 		var element = this;
 		// remove from the internal cache
-		drop.targets = $.grep( drop.targets, function( target ){ 
-			return ( target !== element ); 
+		drop.targets = $.grep( drop.targets, function( target ){
+			return ( target !== element );
 		});
 	},
-	
+
 	// shared event handler
-	handler: function( event, dd ){ 
+	handler: function( event, dd ){
 		// local vars
 		var results, $targets;
 		// make sure the right data is available
-		if ( !dd ) 
+		if ( !dd )
 			return;
 		// handle various events
 		switch ( event.type ){
@@ -27738,7 +27738,7 @@ drop = $.event.special.drop = {
 				// set available target elements
 				dd.droppable = $targets;
 				// activate drop targets for the initial element being dragged
-				$special.drag.hijack( event, "dropinit", dd ); 
+				$special.drag.hijack( event, "dropinit", dd );
 				break;
 			// drag, from $.event.special.drag
 			case 'mousemove': // TOLERATE >>
@@ -27746,35 +27746,35 @@ drop = $.event.special.drop = {
 				drop.event = event; // store the mousemove event
 				if ( !drop.timer )
 					// monitor drop targets
-					drop.tolerate( dd ); 
+					drop.tolerate( dd );
 				break;
 			// dragend, from $.event.special.drag
 			case 'mouseup': // DROP >> DROPEND >>
 			case 'touchend': // DROP >> DROPEND >>
-				drop.timer = clearTimeout( drop.timer ); // delete timer	
+				drop.timer = clearTimeout( drop.timer ); // delete timer
 				if ( dd.propagates ){
-					$special.drag.hijack( event, "drop", dd ); 
-					$special.drag.hijack( event, "dropend", dd ); 
+					$special.drag.hijack( event, "drop", dd );
+					$special.drag.hijack( event, "dropend", dd );
 				}
 				break;
-				
+
 		}
 	},
-		
+
 	// returns the location positions of an element
-	locate: function( elem, index ){ 
+	locate: function( elem, index ){
 		var data = $.data( elem, drop.datakey ),
-		$elem = $( elem ), 
-		posi = $elem.offset() || {}, 
-		height = $elem.outerHeight(), 
+		$elem = $( elem ),
+		posi = $elem.offset() || {},
+		height = $elem.outerHeight(),
 		width = $elem.outerWidth(),
-		location = { 
-			elem: elem, 
-			width: width, 
+		location = {
+			elem: elem,
+			width: width,
 			height: height,
-			top: posi.top, 
-			left: posi.left, 
-			right: posi.left + width, 
+			top: posi.top,
+			left: posi.left,
+			right: posi.left + width,
 			bottom: posi.top + height
 		};
 		// drag elements might not have dropdata
@@ -27785,43 +27785,43 @@ drop = $.event.special.drop = {
 		}
 		return location;
 	},
-	
+
 	// test the location positions of an element against another OR an X,Y coord
 	contains: function( target, test ){ // target { location } contains test [x,y] or { location }
 		return ( ( test[0] || test.left ) >= target.left && ( test[0] || test.right ) <= target.right
-			&& ( test[1] || test.top ) >= target.top && ( test[1] || test.bottom ) <= target.bottom ); 
+			&& ( test[1] || test.top ) >= target.top && ( test[1] || test.bottom ) <= target.bottom );
 	},
-	
+
 	// stored tolerance modes
-	modes: { // fn scope: "$.event.special.drop" object 
+	modes: { // fn scope: "$.event.special.drop" object
 		// target with mouse wins, else target with most overlap wins
 		'intersect': function( event, proxy, target ){
 			return this.contains( target, [ event.pageX, event.pageY ] ) ? // check cursor
 				1e9 : this.modes.overlap.apply( this, arguments ); // check overlap
 		},
-		// target with most overlap wins	
+		// target with most overlap wins
 		'overlap': function( event, proxy, target ){
 			// calculate the area of overlap...
 			return Math.max( 0, Math.min( target.bottom, proxy.bottom ) - Math.max( target.top, proxy.top ) )
 				* Math.max( 0, Math.min( target.right, proxy.right ) - Math.max( target.left, proxy.left ) );
 		},
-		// proxy is completely contained within target bounds	
+		// proxy is completely contained within target bounds
 		'fit': function( event, proxy, target ){
 			return this.contains( target, proxy ) ? 1 : 0;
 		},
-		// center of the proxy is contained within target bounds	
+		// center of the proxy is contained within target bounds
 		'middle': function( event, proxy, target ){
 			return this.contains( target, [ proxy.left + proxy.width * .5, proxy.top + proxy.height * .5 ] ) ? 1 : 0;
 		}
-	},	
-	
+	},
+
 	// sort drop target cache by by winner (dsc), then index (asc)
 	sort: function( a, b ){
 		return ( b.winner - a.winner ) || ( a.index - b.index );
 	},
-		
+
 	// async, recursive tolerance execution
-	tolerate: function( dd ){		
+	tolerate: function( dd ){
 		// declare local refs
 		var i, drp, drg, data, arr, len, elem,
 		// interaction iteration variables
@@ -27834,30 +27834,30 @@ drop = $.event.special.drop = {
 		do if ( ia = dd.interactions[x] ){
 			// check valid interaction
 			if ( !ia )
-				return; 
+				return;
 			// initialize or clear the drop data
 			ia.drop = [];
 			// holds the drop elements
-			arr = []; 
+			arr = [];
 			len = ia.droppable.length;
 			// determine the proxy location, if needed
 			if ( tolerance )
-				drg = drop.locate( ia.proxy ); 
+				drg = drop.locate( ia.proxy );
 			// reset the loop
 			i = 0;
 			// loop each stored drop target
-			do if ( elem = ia.droppable[i] ){ 
+			do if ( elem = ia.droppable[i] ){
 				data = $.data( elem, drop.datakey );
 				drp = data.location;
 				if ( !drp ) continue;
 				// find a winner: tolerance function is defined, call it
-				data.winner = tolerance ? tolerance.call( drop, drop.event, drg, drp ) 
+				data.winner = tolerance ? tolerance.call( drop, drop.event, drg, drp )
 					// mouse position is always the fallback
-					: drop.contains( drp, xy ) ? 1 : 0; 
-				arr.push( data );	
-			} while ( ++i < len ); // loop 
+					: drop.contains( drp, xy ) ? 1 : 0;
+				arr.push( data );
+			} while ( ++i < len ); // loop
 			// sort the drop targets
-			arr.sort( drop.sort );			
+			arr.sort( drop.sort );
 			// reset the loop
 			i = 0;
 			// loop through all of the targets again
@@ -27867,7 +27867,7 @@ drop = $.event.special.drop = {
 					// new winner... dropstart
 					if ( !data.active[x] && !data.anyactive ){
 						// check to make sure that this is not prevented
-						if ( $special.drag.hijack( drop.event, "dropstart", dd, x, data.elem )[0] !== false ){ 	
+						if ( $special.drag.hijack( drop.event, "dropstart", dd, x, data.elem )[0] !== false ){
 							data.active[x] = 1;
 							data.anyactive += 1;
 						}
@@ -27879,32 +27879,32 @@ drop = $.event.special.drop = {
 					if ( data.winner )
 						ia.drop.push( data.elem );
 				}
-				// losers... 
+				// losers...
 				else if ( data.active[x] && data.anyactive == 1 ){
 					// former winner... dropend
-					$special.drag.hijack( drop.event, "dropend", dd, x, data.elem ); 
+					$special.drag.hijack( drop.event, "dropend", dd, x, data.elem );
 					data.active[x] = 0;
 					data.anyactive -= 1;
 				}
-			} while ( ++i < len ); // loop 		
+			} while ( ++i < len ); // loop
 		} while ( ++x < end ) // loop
 		// check if the mouse is still moving or is idle
-		if ( drop.last && xy[0] == drop.last.pageX && xy[1] == drop.last.pageY ) 
+		if ( drop.last && xy[0] == drop.last.pageX && xy[1] == drop.last.pageY )
 			delete drop.timer; // idle, don't recurse
 		else  // recurse
-			drop.timer = setTimeout(function(){ 
-				drop.tolerate( dd ); 
+			drop.timer = setTimeout(function(){
+				drop.tolerate( dd );
 			}, drop.delay );
 		// remember event, to compare idleness
-		drop.last = drop.event; 
+		drop.last = drop.event;
 	}
-	
+
 };
 
 // share the same special event configuration with related events...
 $special.dropinit = $special.dropstart = $special.dropend = drop;
 
-})(jQuery); // confine scope	
+})(jQuery); // confine scope
 ;
 return $.drop;
   }).apply(root, arguments);
@@ -27995,7 +27995,7 @@ define('mockup-patterns-select2',[
   'jquery.event.drag',
   'jquery.event.drop'
 ], function($, Base) {
-  
+
 
   var Select2 = Base.extend({
     name: 'select2',
@@ -28308,7 +28308,7 @@ define('mockup-patterns-relateditems',[
   'mockup-utils',
   'mockup-patterns-tree'
 ], function($, _, Base, Select2, utils, Tree) {
-  
+
 
   var RelatedItems = Base.extend({
     name: 'relateditems',
@@ -28846,19 +28846,19 @@ Emitter.prototype.hasListeners = function(event){
 /*
 #
 # More info at [www.dropzonejs.com](http://www.dropzonejs.com)
-# 
-# Copyright (c) 2012, Matias Meno  
-# 
+#
+# Copyright (c) 2012, Matias Meno
+#
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
-# 
+#
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
-# 
+#
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
@@ -28887,9 +28887,9 @@ Emitter.prototype.hasListeners = function(event){
 
     /*
     This is a list of all available events you can register on a dropzone object.
-    
+
     You can register an event handler like this:
-    
+
         dropzone.on("dragEnter", function() { });
     */
 
@@ -30277,7 +30277,7 @@ Emitter.prototype.hasListeners = function(event){
   Dropzone.SUCCESS = "success";
 
   /*
-  
+
   Bugfix for iOS 6 and 7
   Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
   based on the work of https://github.com/stomita/ios-imagefile-megapixel
@@ -30465,7 +30465,7 @@ define('mockup-patterns-upload',[
   'text!js/patterns/upload/templates/preview.xml',
 ], function($, _, Base, RelatedItems, Dropzone,
             UploadTemplate, PreviewTemplate) {
-  
+
 
   /* we do not want this plugin to auto discover */
   Dropzone.autoDiscover = false;
@@ -30867,7 +30867,7 @@ define('js/patterns/filemanager/views/upload',[
   'js/patterns/filemanager/views/basepopover',
   'mockup-patterns-upload'
 ], function($, _, Backbone, PopoverView, Upload) {
-  
+
 
   var UploadView = PopoverView.extend({
     className: 'popover upload',
@@ -30946,7 +30946,7 @@ define('js/patterns/filemanager/views/app',[
 ], function($, _, Backbone, BaseView, Tree, TextEditor, AppTemplate, Toolbar,
             ButtonView, ButtonGroup, AddNewView, NewFolderView, DeleteView,
             CustomizeView, RenameView, UploadView, utils) {
-  
+
 
   var AppView = BaseView.extend({
     tagName: 'div',
@@ -31278,7 +31278,7 @@ define('mockup-patterns-filemanager',[
   'js/patterns/filemanager/views/app',
   'text!js/ui/templates/popover.xml'
 ], function($, Base, AppView) {
-  
+
 
   var FileManager = Base.extend({
     name: 'filemanager',
@@ -31363,7 +31363,7 @@ define('mockup-bundles-filemanager',[
   'mockup-patterns-base',
   'mockup-patterns-filemanager'
 ], function($, Registry, Base) {
-  
+
 
   // initialize only if we are in top frame
   if (window.parent === window) {


Repository: plone.resourceeditor


Branch: refs/heads/master
Date: 2016-03-01T14:13:08+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.resourceeditor/commit/39678c00e5971e194ef3db4290cbd9467ef40b28

Merge pull request #16 from plone/cleanup

Cleanup code

Files changed:
M CHANGES.rst
M plone/resourceeditor/__init__.py
M plone/resourceeditor/browser.py
M plone/resourceeditor/resources/filemanager.min.js
M plone/resourceeditor/testing.py
M plone/resourceeditor/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a2bda9c..2f3c977 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Cleanup code according to Plone style guide.
+  [gforcada]
 
 
 2.0.4 (2015-10-28)
diff --git a/plone/resourceeditor/__init__.py b/plone/resourceeditor/__init__.py
index 4161bf1..a4e0266 100644
--- a/plone/resourceeditor/__init__.py
+++ b/plone/resourceeditor/__init__.py
@@ -1,5 +1,7 @@
-import os.path
+# -*- coding: utf-8 -*-
 import mimetypes
+import os.path
+
 
 # Borrowed from zope.contenttype.
 # This allows us to register mimetypes that
@@ -16,4 +18,4 @@ def add_files(filenames):
 
 
 here = os.path.dirname(os.path.abspath(__file__))
-add_files([os.path.join(here, "mime.types")])
+add_files([os.path.join(here, 'mime.types')])
diff --git a/plone/resourceeditor/browser.py b/plone/resourceeditor/browser.py
index 936088d..5d84f17 100644
--- a/plone/resourceeditor/browser.py
+++ b/plone/resourceeditor/browser.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from DateTime import DateTime
-from OFS.Image import File, Image
+from OFS.Image import File
+from OFS.Image import Image
 from plone.resource.file import FilesystemFile
 from plone.resource.interfaces import IResourceDirectory
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.decode import processInputs
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from time import localtime, strftime
+from time import localtime
+from time import strftime
 from urlparse import urlparse
 from zExceptions import NotFound
 from zope.cachedescriptors import property as zproperty
@@ -16,18 +18,20 @@
 from zope.i18n import translate
 from zope.i18nmessageid import MessageFactory
 from zope.publisher.browser import BrowserView
+
 import json
 import os.path
 import posixpath
 import re
 import urllib
 
-_ = MessageFactory(u"plone")
+
+_ = MessageFactory(u'plone')
 
 
 def authorize(context, request):
     authenticator = queryMultiAdapter((context, request),
-                                      name=u"authenticator")
+                                      name=u'authenticator')
     if authenticator is not None and not authenticator.verify():
         raise Unauthorized
 
@@ -141,9 +145,9 @@ def getInfo(self, obj, path='/'):
         else:
             size_specifier = u'mb'
             size = size / 1024
-        properties['size'] = '%i%s' % (
+        properties['size'] = '{0}{1}'.format(
             size,
-            translate(_(u'filemanager_%s' % size_specifier,
+            translate(_(u'filemanager_{0}'.format(size_specifier),
                         default=size_specifier), context=self.request)
         )
 
@@ -210,18 +214,18 @@ def addFolder(self, path, name):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_foldername',
-                                  default=u"Invalid folder name."),
+                                  default=u'Invalid folder name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_folder_exists',
-                                  default=u"Folder already exists."),
+                                  default=u'Folder already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -231,7 +235,7 @@ def addFolder(self, path, name):
                     error = translate(
                         _(
                             u'filemanager_invalid_foldername',
-                            default=u"Invalid folder name."
+                            default=u'Invalid folder name.'
                         ),
                         context=self.request
                     )
@@ -255,24 +259,24 @@ def addFile(self, path, name):
         code = 0
 
         parentPath = self.normalizePath(path)
-        newPath = "%s/%s" % (parentPath, name,)
+        newPath = '{0}/{1}'.format(parentPath, name,)
 
         try:
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_filename',
-                                  default=u"Invalid file name."),
+                                  default=u'Invalid file name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -280,10 +284,10 @@ def addFile(self, path, name):
 
         self.request.response.setHeader('Content-Type', 'application/json')
         return json.dumps({
-            "parent": self.normalizeReturnPath(parentPath),
-            "name": name,
-            "error": error,
-            "code": code,
+            'parent': self.normalizeReturnPath(parentPath),
+            'name': name,
+            'error': error,
+            'code': code,
         })
 
     def delete(self, path):
@@ -302,7 +306,7 @@ def delete(self, path):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -310,7 +314,7 @@ def delete(self, path):
                 del parent[name]
             except KeyError:
                 error = translate(_(u'filemanager_error_file_not_found',
-                                  default=u"File not found."),
+                                  default=u'File not found.'),
                                   context=self.request)
                 code = 1
 
@@ -339,7 +343,7 @@ def renameFile(self, path, newName):
             parent = self.getObject(oldPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -348,7 +352,7 @@ def renameFile(self, path, newName):
                     error = translate(
                         _(
                             u'filemanager_error_file_exists',
-                            default=u"File already exists."
+                            default=u'File already exists.'
                         ),
                         context=self.request)
                     code = 1
@@ -357,10 +361,10 @@ def renameFile(self, path, newName):
 
         self.request.response.setHeader('Content-Type', 'application/json')
         return json.dumps({
-            "oldParent": self.normalizeReturnPath(oldPath),
-            "oldName": oldName,
-            "newParent": self.normalizeReturnPath(newPath),
-            "newName": newName,
+            'oldParent': self.normalizeReturnPath(oldPath),
+            'oldName': oldName,
+            'newParent': self.normalizeReturnPath(newPath),
+            'newName': newName,
             'error': error,
             'code': code,
         })
@@ -391,32 +395,32 @@ def getDirectory(folder, relpath=''):
 
             return json.dumps(getDirectory(self.context))
 
-        if action == "getFile":
-            path = self.request.get("path", '')
+        if action == 'getFile':
+            path = self.request.get('path', '')
             return self.getFile(path)
 
-        if action == "saveFile":
-            path = self.request.get("path", '')
-            data = self.request.get("data", '')
+        if action == 'saveFile':
+            path = self.request.get('path', '')
+            data = self.request.get('data', '')
             return self.saveFile(path, data)
 
-        if action == "addFolder":
-            path = self.request.get("path", '')
-            name = self.request.get("name", '')
+        if action == 'addFolder':
+            path = self.request.get('path', '')
+            name = self.request.get('name', '')
             return self.addFolder(path, name)
 
-        if action == "addFile":
-            path = self.request.get("path", '')
-            name = self.request.get("filename", '')
+        if action == 'addFile':
+            path = self.request.get('path', '')
+            name = self.request.get('filename', '')
             return self.addFile(path, name)
 
-        if action == "renameFile":
-            path = self.request.get("path", '')
-            name = self.request.get("filename", '')
+        if action == 'renameFile':
+            path = self.request.get('path', '')
+            name = self.request.get('filename', '')
             return self.renameFile(path, name)
 
-        if action == "delete":
-            path = self.request.get("path", '')
+        if action == 'delete':
+            path = self.request.get('path', '')
             return self.delete(path)
 
 
@@ -425,7 +429,7 @@ class FileManager(BrowserView):
     """
 
     previewTemplate = ViewPageTemplateFile('preview.pt')
-    staticFiles = "++resource++plone.resourceeditor/filemanager"
+    staticFiles = '++resource++plone.resourceeditor/filemanager'
     imageExtensions = ['png', 'gif', 'jpg', 'jpeg']
     knownExtensions = ['css', 'html', 'htm', 'txt', 'xml', 'js', 'cfg']
     capabilities = ['download', 'rename', 'delete']
@@ -447,7 +451,7 @@ def pattern_options(self):
         site = getSite()
         viewName = '@@plone.resourceeditor.filemanager-actions'
         return json.dumps({
-            'actionUrl': '%s/++%s++%s/%s' % (
+            'actionUrl': '{0}/++{1}++{2}/{3}'.format(
                 site.absolute_url(),
                 self.context.__parent__.__parent__.__name__,
                 self.context.__name__,
@@ -520,7 +524,7 @@ def __call__(self):
                 )
             if textareaWrap:
                 self.request.response.setHeader('Content-Type', 'text/html')
-                return "<textarea>%s</textarea>" % json.dumps(response)
+                return '<textarea>{0}</textarea>'.format(json.dumps(response))
             else:
                 self.request.response.setHeader('Content-Type',
                                                 'application/json')
@@ -547,26 +551,30 @@ def resourceType(self):
 
     @zproperty.Lazy
     def baseUrl(self):
-        return "%s/++%s++%s" % (self.portalUrl, self.resourceType,
-                                self.resourceDirectory.__name__)
+        return '{0}/++{1}++{2}'.format(
+            self.portalUrl,
+            self.resourceType,
+            self.resourceDirectory.__name__
+        )
 
     @zproperty.Lazy
     def fileConnector(self):
-        return "%s/@@%s" % (self.baseUrl, self.__name__,)
+        return '{0}/@@{1}'.format(self.baseUrl, self.__name__,)
 
     @zproperty.Lazy
     def filemanagerConfiguration(self):
         return """\
 var FILE_ROOT = '/';
-var IMAGES_EXT = %s;
-var CAPABILITIES = %s;
-var FILE_CONNECTOR = '%s';
-var BASE_URL = '%s';
-""" % (
+var IMAGES_EXT = {0};
+var CAPABILITIES = {1};
+var FILE_CONNECTOR = '{2}';
+var BASE_URL = '{3}';
+""".format(
             repr(self.imageExtensions),
             repr(self.capabilities),
             self.fileConnector,
-            self.baseUrl,)
+            self.baseUrl,
+        )
 
     def normalizePath(self, path):
         if path.startswith('/'):
@@ -614,10 +622,10 @@ def getFolder(self, path, getSizes=False):
         for name in folder.listDirectory():
             if IResourceDirectory.providedBy(folder[name]):
                 folders.append(self.getInfo(
-                    path="%s/%s/" % (path, name), getSize=getSizes))
+                    path='{0}/{1}/'.format(path, name), getSize=getSizes))
             else:
                 files.append(self.getInfo(
-                    path="%s/%s" % (path, name), getSize=getSizes))
+                    path='{0}/{1}'.format(path, name), getSize=getSizes))
         return folders + files
 
     def getInfo(self, path, getSize=False):
@@ -649,33 +657,44 @@ def getInfo(self, path, getSize=False):
             else:
                 size_specifier = u'mb'
                 size = size / 1024
-            properties['size'] = '%i%s' % (
+            properties['size'] = '{0}{1}'.format(
                 size,
-                translate(_(u'filemanager_%s' % size_specifier,
-                            default=size_specifier), context=self.request))
+                translate(_(u'filemanager_{0}'.format(size_specifier),
+                            default=size_specifier), context=self.request)
+            )
 
         fileType = 'txt'
 
         siteUrl = self.portalUrl
         resourceName = self.resourceDirectory.__name__
 
-        preview = "%s/%s/images/fileicons/default.png" % (siteUrl,
-                                                          self.staticFiles)
+        preview = '{0}/{1}/images/fileicons/default.png'.format(
+            siteUrl,
+            self.staticFiles
+        )
 
         if IResourceDirectory.providedBy(obj):
-            preview = "%s/%s/images/fileicons/_Open.png" % (siteUrl,
-                                                            self.staticFiles)
+            preview = '{0}/{1}/images/fileicons/_Open.png'.format(
+                siteUrl,
+                self.staticFiles
+            )
             fileType = 'dir'
             path = path + '/'
         else:
             fileType = self.getExtension(path, obj)
             if fileType in self.imageExtensions:
-                preview = '%s/++%s++%s/%s' % (siteUrl, self.resourceType,
-                                              resourceName, path)
+                preview = '{0}/++{1}++{2}/{3}'.format(
+                    siteUrl,
+                    self.resourceType,
+                    resourceName,
+                    path
+                )
             elif fileType in self.extensionsWithIcons:
-                preview = "%s/%s/images/fileicons/%s.png" % (siteUrl,
-                                                             self.staticFiles,
-                                                             fileType)
+                preview = '{0}/{1}/images/fileicons/{2}.png'.format(
+                    siteUrl,
+                    self.staticFiles,
+                    fileType
+                )
 
         if isinstance(obj, Image):
             properties['height'] = obj.height
@@ -708,18 +727,18 @@ def addFolder(self, path, name):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_foldername',
-                                  default=u"Invalid folder name."),
+                                  default=u'Invalid folder name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_folder_exists',
-                                  default=u"Folder already exists."),
+                                  default=u'Folder already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -729,7 +748,7 @@ def addFolder(self, path, name):
                     error = translate(
                         _(
                             u'filemanager_invalid_foldername',
-                            default=u"Invalid folder name."
+                            default=u'Invalid folder name.'
                         ),
                         context=self.request
                     )
@@ -770,19 +789,19 @@ def add(self, path, newfile, replacepath=None):
             newPath = replacepath
             parentPath = '/'.join(replacepath.split('/')[:-1])
         else:
-            newPath = "%s/%s" % (parentPath, name,)
+            newPath = '{0}/{1}'.format(parentPath, name,)
 
         try:
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if name in parent and not replacepath:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -790,16 +809,16 @@ def add(self, path, newfile, replacepath=None):
                     self.resourceDirectory.writeFile(newPath, newfile)
                 except ValueError:
                     error = translate(_(u'filemanager_error_file_invalid',
-                                      default=u"Could not read file."),
+                                      default=u'Could not read file.'),
                                       context=self.request)
                     code = 1
 
         return {
-            "parent": self.normalizeReturnPath(parentPath),
-            "path": self.normalizeReturnPath(path),
-            "name": name,
-            "error": error,
-            "code": code,
+            'parent': self.normalizeReturnPath(parentPath),
+            'path': self.normalizeReturnPath(path),
+            'name': name,
+            'error': error,
+            'code': code,
         }
 
     def addNew(self, path, name):
@@ -813,34 +832,34 @@ def addNew(self, path, name):
         code = 0
 
         parentPath = self.normalizePath(path)
-        newPath = "%s/%s" % (parentPath, name,)
+        newPath = '{0}/{1}'.format(parentPath, name,)
 
         try:
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if not validateFilename(name):
                 error = translate(_(u'filemanager_invalid_filename',
-                                  default=u"Invalid file name."),
+                                  default=u'Invalid file name.'),
                                   context=self.request)
                 code = 1
             elif name in parent:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
                 self.resourceDirectory.writeFile(newPath, '')
 
         return {
-            "parent": self.normalizeReturnPath(parentPath),
-            "name": name,
-            "error": error,
-            "code": code,
+            'parent': self.normalizeReturnPath(parentPath),
+            'name': name,
+            'error': error,
+            'code': code,
         }
 
     def rename(self, path, newName):
@@ -861,7 +880,7 @@ def rename(self, path, newName):
             parent = self.getObject(oldPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -869,17 +888,17 @@ def rename(self, path, newName):
                 if newName in parent:
                     error = translate(
                         _(u'filemanager_error_file_exists',
-                          default=u"File already exists."),
+                          default=u'File already exists.'),
                         context=self.request)
                     code = 1
                 else:
                     parent.rename(oldName, newName)
 
         return {
-            "oldParent": self.normalizeReturnPath(oldPath),
-            "oldName": oldName,
-            "newParent": self.normalizeReturnPath(newPath),
-            "newName": newName,
+            'oldParent': self.normalizeReturnPath(oldPath),
+            'oldName': oldName,
+            'newParent': self.normalizeReturnPath(newPath),
+            'newName': newName,
             'error': error,
             'code': code,
         }
@@ -900,7 +919,7 @@ def delete(self, path):
             parent = self.getObject(parentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
@@ -908,7 +927,7 @@ def delete(self, path):
                 del parent[name]
             except KeyError:
                 error = translate(_(u'filemanager_error_file_not_found',
-                                  default=u"File not found."),
+                                  default=u'File not found.'),
                                   context=self.request)
                 code = 1
 
@@ -939,18 +958,18 @@ def move(self, path, directory):
             target = self.getObject(newParentPath)
         except KeyError:
             error = translate(_(u'filemanager_invalid_parent',
-                              default=u"Parent folder not found."),
+                              default=u'Parent folder not found.'),
                               context=self.request)
             code = 1
         else:
             if filename not in parent:
                 error = translate(_(u'filemanager_error_file_not_found',
-                                  default=u"File not found."),
+                                  default=u'File not found.'),
                                   context=self.request)
                 code = 1
             elif filename in target:
                 error = translate(_(u'filemanager_error_file_exists',
-                                  default=u"File already exists."),
+                                  default=u'File already exists.'),
                                   context=self.request)
                 code = 1
             else:
@@ -958,7 +977,7 @@ def move(self, path, directory):
                 del parent[filename]
                 target[filename] = obj
 
-        newCanonicalPath = "%s/%s" % (newParentPath, filename)
+        newCanonicalPath = '{0}/{1}'.format(newParentPath, filename)
 
         return {
             'code': code,
@@ -980,8 +999,10 @@ def download(self, path):
 
         self.request.response.setHeader('Content-Type',
                                         'application/octet-stream')
-        self.request.response.setHeader('Content-Disposition',
-                                        'attachment; filename="%s"' % name)
+        self.request.response.setHeader(
+            'Content-Disposition',
+            'attachment; filename="{0}"'.format(name)
+        )
 
         # TODO: Use streams here if we can
         return parent.readFile(name)
@@ -1046,7 +1067,7 @@ def filetree(self):
         def getFolder(root, relpath=''):
             result = []
             for name in root.listDirectory():
-                path = '%s/%s' % (relpath, name)
+                path = '{0}/{1}'.format(relpath, name)
                 if IResourceDirectory.providedBy(root[name]):
                     item = {
                         'title': name,
@@ -1063,6 +1084,6 @@ def getFolder(root, relpath=''):
             'title': '/',
             'key': '/',
             'isFolder': True,
-            "expand": True,
+            'expand': True,
             'children': getFolder(self.context)
         }])
diff --git a/plone/resourceeditor/resources/filemanager.min.js b/plone/resourceeditor/resources/filemanager.min.js
index 7396110..f8a2c38 100644
--- a/plone/resourceeditor/resources/filemanager.min.js
+++ b/plone/resourceeditor/resources/filemanager.min.js
@@ -11553,7 +11553,7 @@ if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
 define('mockup-registry',[
   'jquery'
 ], function($, undefined) {
-  
+
 
   var Registry = {
 
@@ -11715,7 +11715,7 @@ define('mockup-patterns-base',[
   'jquery',
   'mockup-registry'
 ], function($, Registry) {
-  
+
 
   // Base Pattern
   var Base = function($el, options) {
@@ -18381,7 +18381,7 @@ define('js/ui/views/base',[
   'underscore',
   'backbone'
 ], function(_, Backbone) {
-  
+
 
   var BaseView = Backbone.View.extend({
     isUIView: true,
@@ -18475,7 +18475,7 @@ define('js/ui/views/base',[
 define('mockup-utils',[
   'jquery'
 ], function($) {
-  
+
 
   var QueryHelper = function(options) {
     /* if pattern argument provided, it can implement the interface of:
@@ -19182,7 +19182,7 @@ limitations under the License.
 
     /*
     Create tree from data.
-    
+
     Structure of data is:
     [
         {
@@ -19215,7 +19215,7 @@ limitations under the License.
 
     /*
     Add child.
-    
+
     tree.addChild(
         new Node('child1')
     );
@@ -19229,7 +19229,7 @@ limitations under the License.
 
     /*
     Add child at position. Index starts at 0.
-    
+
     tree.addChildAtPosition(
         new Node('abc'),
         1
@@ -19250,7 +19250,7 @@ limitations under the License.
 
     /*
     Remove child. This also removes the children of the node.
-    
+
     tree.removeChild(tree.children[0]);
      */
 
@@ -19267,7 +19267,7 @@ limitations under the License.
 
     /*
     Get child index.
-    
+
     var index = getChildIndex(node);
      */
 
@@ -19278,7 +19278,7 @@ limitations under the License.
 
     /*
     Does the tree have children?
-    
+
     if (tree.hasChildren()) {
         //
     }
@@ -19295,15 +19295,15 @@ limitations under the License.
 
     /*
     Iterate over all the nodes in the tree.
-    
+
     Calls callback with (node, level).
-    
+
     The callback must return true to continue the iteration on current node.
-    
+
     tree.iterate(
         function(node, level) {
            console.log(node.name);
-    
+
            // stop iteration after level 2
            return (level <= 2);
         }
@@ -19335,9 +19335,9 @@ limitations under the License.
 
     /*
     Move node relative to another node.
-    
+
     Argument position: Position.BEFORE, Position.AFTER or Position.Inside
-    
+
     // move node1 after node2
     tree.moveNode(node1, node2, Position.AFTER);
      */
@@ -19727,13 +19727,13 @@ limitations under the License.
 
   /*
   Copyright 2013 Marco Braak
-  
+
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
-  
+
       http://www.apache.org/licenses/LICENSE-2.0
-  
+
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -21798,7 +21798,7 @@ define('mockup-patterns-tree',[
   'mockup-utils',
   'jqtree'
 ], function($, _, Base, utils) {
-  
+
 
   var Tree = Base.extend({
     name: 'tree',
@@ -21938,7 +21938,7 @@ define('mockup-patterns-texteditor',[
   'ace-theme-monokai',
   'ace-mode-text'
 ], function($, Base, utils) {
-  
+
 
   var AcePattern = Base.extend({
     name: 'ace',
@@ -22036,7 +22036,7 @@ define('mockup-patterns-texteditor',[
   java, location, Components, FileUtils */
 
 define('text',['module'], function (module) {
-    
+
 
     var text, fs, Cc, Ci, xpcIsWindows,
         progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
@@ -22446,7 +22446,7 @@ define('js/ui/views/container',[
   'backbone',
   'js/ui/views/base'
 ], function($, _, Backbone, BaseView) {
-  
+
 
   var Container = BaseView.extend({
     id: '',
@@ -22558,7 +22558,7 @@ define('js/ui/views/toolbar',[
   'backbone',
   'js/ui/views/container'
 ], function(_, Backbone, ContainerView) {
-  
+
 
   var Toolbar = ContainerView.extend({
     tagName: 'div',
@@ -22582,7 +22582,7 @@ define("bootstrap-tooltip", ["jquery"], function() {
 
 
 +function ($) {
-  
+
 
   // TOOLTIP PUBLIC CLASS DEFINITION
   // ===============================
@@ -23008,7 +23008,7 @@ define('js/ui/views/button',[
   'js/ui/views/base',
   'bootstrap-tooltip'
 ], function($, Backbone, _, BaseView) {
-  
+
 
   var ButtonView = BaseView.extend({
     tagName: 'a',
@@ -23109,7 +23109,7 @@ define('js/ui/views/buttongroup',[
   'backbone',
   'js/ui/views/container'
 ], function(_, Backbone, ContainerView) {
-  
+
 
   var ButtonGroup = ContainerView.extend({
     tagName: 'div',
@@ -23166,7 +23166,7 @@ define('mockup-patterns-backdrop',[
   'jquery',
   'mockup-patterns-base'
 ], function($, Base) {
-  
+
 
   var Backdrop = Base.extend({
     name: 'backdrop',
@@ -23268,7 +23268,7 @@ define('js/ui/views/popover',[
   'mockup-patterns-backdrop',
   'text!js/ui/templates/popover.xml',
 ], function($, _, Backbone, ContainerView, Backdrop, PopoverTemplate) {
-  
+
 
   var PopoverView = ContainerView.extend({
     tagName: 'div',
@@ -23500,7 +23500,7 @@ define('js/patterns/filemanager/views/basepopover',[
   'backbone',
   'js/ui/views/popover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var FileManagerPopover = PopoverView.extend({
     className: 'popover',
@@ -23566,7 +23566,7 @@ define('js/patterns/filemanager/views/addnew',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var AddNewView = PopoverView.extend({
     className: 'popover addnew',
@@ -23640,7 +23640,7 @@ define('js/patterns/filemanager/views/newfolder',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var AddNewView = PopoverView.extend({
     className: 'popover addfolder',
@@ -23714,7 +23714,7 @@ define('js/patterns/filemanager/views/delete',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var DeleteView = PopoverView.extend({
     className: 'popover delete',
@@ -23780,7 +23780,7 @@ define('js/patterns/filemanager/views/customize',[
   'backbone',
   'js/patterns/filemanager/views/basepopover',
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var CustomizeView = PopoverView.extend({
     className: 'popover customize',
@@ -23879,7 +23879,7 @@ define('js/patterns/filemanager/views/rename',[
   'backbone',
   'js/patterns/filemanager/views/basepopover'
 ], function($, _, Backbone, PopoverView) {
-  
+
 
   var RenameView = PopoverView.extend({
     className: 'popover addnew',
@@ -23973,7 +23973,7 @@ the specific language governing permissions and limitations under the Apache Lic
 })(jQuery);
 
 (function ($, undefined) {
-    
+
     /*global document, window, jQuery, console */
 
     if (window.Select2 !== undefined) {
@@ -27193,12 +27193,12 @@ define("select2", function(){});
 (function(root) {
 define("jquery.event.drag", ["jquery"], function() {
   return (function() {
-/*! 
+/*!
  * jquery.event.drag - v 2.2
  * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
  * Open Source MIT License - http://threedubmedia.com/code/license
  */
-// Created: 2008-06-04 
+// Created: 2008-06-04
 // Updated: 2012-05-21
 // REQUIRES: jquery 1.7.x
 
@@ -27211,7 +27211,7 @@ $.fn.drag = function( str, arg, opts ){
 	// figure out the event handler...
 	fn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;
 	// fix the event type
-	if ( type.indexOf("drag") !== 0 ) 
+	if ( type.indexOf("drag") !== 0 )
 		type = "drag"+ type;
 	// were options passed
 	opts = ( str == fn ? arg : opts ) || {};
@@ -27220,11 +27220,11 @@ $.fn.drag = function( str, arg, opts ){
 };
 
 // local refs (increase compression)
-var $event = $.event, 
+var $event = $.event,
 $special = $event.special,
-// configure the drag special event 
+// configure the drag special event
 drag = $special.drag = {
-	
+
 	// these are the default settings
 	defaults: {
 		which: 1, // mouse button pressed to start drag sequence
@@ -27235,38 +27235,38 @@ drag = $special.drag = {
 		drop: true, // false to suppress drop events, true or selector to allow
 		click: false // false to suppress click events after dragend (no proxy)
 	},
-	
+
 	// the key name for stored drag data
 	datakey: "dragdata",
-	
+
 	// prevent bubbling for better performance
 	noBubble: true,
-	
+
 	// count bound related events
-	add: function( obj ){ 
+	add: function( obj ){
 		// read the interaction data
 		var data = $.data( this, drag.datakey ),
-		// read any passed options 
+		// read any passed options
 		opts = obj.data || {};
 		// count another realted event
 		data.related += 1;
 		// extend data options bound with this event
-		// don't iterate "opts" in case it is a node 
+		// don't iterate "opts" in case it is a node
 		$.each( drag.defaults, function( key, def ){
 			if ( opts[ key ] !== undefined )
 				data[ key ] = opts[ key ];
 		});
 	},
-	
+
 	// forget unbound related events
 	remove: function(){
 		$.data( this, drag.datakey ).related -= 1;
 	},
-	
+
 	// configure interaction, capture settings
 	setup: function(){
 		// check for related events
-		if ( $.data( this, drag.datakey ) ) 
+		if ( $.data( this, drag.datakey ) )
 			return;
 		// initialize the drag data with copied defaults
 		var data = $.extend({ related:0 }, drag.defaults );
@@ -27275,42 +27275,42 @@ drag = $special.drag = {
 		// bind the mousedown event, which starts drag interactions
 		$event.add( this, "touchstart mousedown", drag.init, data );
 		// prevent image dragging in IE...
-		if ( this.attachEvent ) 
-			this.attachEvent("ondragstart", drag.dontstart ); 
+		if ( this.attachEvent )
+			this.attachEvent("ondragstart", drag.dontstart );
 	},
-	
+
 	// destroy configured interaction
 	teardown: function(){
 		var data = $.data( this, drag.datakey ) || {};
 		// check for related events
-		if ( data.related ) 
+		if ( data.related )
 			return;
 		// remove the stored data
 		$.removeData( this, drag.datakey );
 		// remove the mousedown event
 		$event.remove( this, "touchstart mousedown", drag.init );
 		// enable text selection
-		drag.textselect( true ); 
+		drag.textselect( true );
 		// un-prevent image dragging in IE...
-		if ( this.detachEvent ) 
-			this.detachEvent("ondragstart", drag.dontstart ); 
+		if ( this.detachEvent )
+			this.detachEvent("ondragstart", drag.dontstart );
 	},
-		
+
 	// initialize the interaction
-	init: function( event ){ 
+	init: function( event ){
 		// sorry, only one touch at a time
-		if ( drag.touched ) 
+		if ( drag.touched )
 			return;
 		// the drag/drop interaction data
 		var dd = event.data, results;
 		// check the which directive
-		if ( event.which != 0 && dd.which > 0 && event.which != dd.which ) 
-			return; 
+		if ( event.which != 0 && dd.which > 0 && event.which != dd.which )
+			return;
 		// check for suppressed selector
-		if ( $( event.target ).is( dd.not ) ) 
+		if ( $( event.target ).is( dd.not ) )
 			return;
 		// check for handle selector
-		if ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length ) 
+		if ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length )
 			return;
 
 		drag.touched = event.type == 'touchstart' ? this : null;
@@ -27321,7 +27321,7 @@ drag = $special.drag = {
 		dd.pageX = event.pageX;
 		dd.pageY = event.pageY;
 		dd.dragging = null;
-		// handle draginit event... 
+		// handle draginit event...
 		results = drag.hijack( event, "draginit", dd );
 		// early cancel
 		if ( !dd.propagates )
@@ -27338,43 +27338,43 @@ drag = $special.drag = {
 		// remember how many interactions are propagating
 		dd.propagates = dd.interactions.length;
 		// locate and init the drop targets
-		if ( dd.drop !== false && $special.drop ) 
+		if ( dd.drop !== false && $special.drop )
 			$special.drop.handler( event, dd );
 		// disable text selection
-		drag.textselect( false ); 
+		drag.textselect( false );
 		// bind additional events...
 		if ( drag.touched )
 			$event.add( drag.touched, "touchmove touchend", drag.handler, dd );
-		else 
+		else
 			$event.add( document, "mousemove mouseup", drag.handler, dd );
 		// helps prevent text selection or scrolling
 		if ( !drag.touched || dd.live )
 			return false;
-	},	
-	
+	},
+
 	// returns an interaction object
 	interaction: function( elem, dd ){
 		var offset = $( elem )[ dd.relative ? "position" : "offset" ]() || { top:0, left:0 };
 		return {
-			drag: elem, 
-			callback: new drag.callback(), 
+			drag: elem,
+			callback: new drag.callback(),
 			droppable: [],
 			offset: offset
 		};
 	},
-	
+
 	// handle drag-releatd DOM events
-	handler: function( event ){ 
+	handler: function( event ){
 		// read the data before hijacking anything
-		var dd = event.data;	
+		var dd = event.data;
 		// handle various events
 		switch ( event.type ){
 			// mousemove, check distance, start dragging
-			case !dd.dragging && 'touchmove': 
+			case !dd.dragging && 'touchmove':
 				event.preventDefault();
 			case !dd.dragging && 'mousemove':
 				//  drag tolerance, x� + y� = distance�
-				if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) ) 
+				if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) )
 					break; // distance tolerance not reached
 				event.target = dd.target; // force target from "mousedown" event (fix distance issue)
 				drag.hijack( event, "dragstart", dd ); // trigger "dragstart"
@@ -27385,42 +27385,42 @@ drag = $special.drag = {
 				event.preventDefault();
 			case 'mousemove':
 				if ( dd.dragging ){
-					// trigger "drag"		
+					// trigger "drag"
 					drag.hijack( event, "drag", dd );
 					if ( dd.propagates ){
 						// manage drop events
 						if ( dd.drop !== false && $special.drop )
-							$special.drop.handler( event, dd ); // "dropstart", "dropend"							
-						break; // "drag" not rejected, stop		
+							$special.drop.handler( event, dd ); // "dropstart", "dropend"
+						break; // "drag" not rejected, stop
 					}
 					event.type = "mouseup"; // helps "drop" handler behave
 				}
 			// mouseup, stop dragging
-			case 'touchend': 
-			case 'mouseup': 
+			case 'touchend':
+			case 'mouseup':
 			default:
 				if ( drag.touched )
 					$event.remove( drag.touched, "touchmove touchend", drag.handler ); // remove touch events
-				else 
-					$event.remove( document, "mousemove mouseup", drag.handler ); // remove page events	
+				else
+					$event.remove( document, "mousemove mouseup", drag.handler ); // remove page events
 				if ( dd.dragging ){
 					if ( dd.drop !== false && $special.drop )
 						$special.drop.handler( event, dd ); // "drop"
-					drag.hijack( event, "dragend", dd ); // trigger "dragend"	
+					drag.hijack( event, "dragend", dd ); // trigger "dragend"
 				}
 				drag.textselect( true ); // enable text selection
 				// if suppressing click events...
 				if ( dd.click === false && dd.dragging )
 					$.data( dd.mousedown, "suppress.click", new Date().getTime() + 5 );
-				dd.dragging = drag.touched = false; // deactivate element	
+				dd.dragging = drag.touched = false; // deactivate element
 				break;
 		}
 	},
-		
+
 	// re-use event object for custom events
 	hijack: function( event, type, dd, x, elem ){
 		// not configured
-		if ( !dd ) 
+		if ( !dd )
 			return;
 		// remember the original event and type
 		var orig = { event:event.originalEvent, type:event.type },
@@ -27450,7 +27450,7 @@ drag = $special.drag = {
 				callback.target = subject;
 				// force propagtion of the custom event
 				event.isPropagationStopped = function(){ return false; };
-				// handle the event	
+				// handle the event
 				result = subject ? $event.dispatch.call( subject, event, callback ) : null;
 				// stop the drag interaction for this element
 				if ( result === false ){
@@ -27465,25 +27465,25 @@ drag = $special.drag = {
 				// assign any dropinit elements
 				else if ( type == "dropinit" )
 					ia.droppable.push( drag.element( result ) || subject );
-				// accept a returned proxy element 
+				// accept a returned proxy element
 				if ( type == "dragstart" )
 					ia.proxy = $( drag.element( result ) || ia.drag )[0];
-				// remember this result	
+				// remember this result
 				ia.results.push( result );
 				// forget the event result, for recycling
 				delete event.result;
 				// break on cancelled handler
 				if ( type !== "dropinit" )
 					return result;
-			});	
-			// flatten the results	
-			dd.results[ i ] = drag.flatten( ia.results );	
+			});
+			// flatten the results
+			dd.results[ i ] = drag.flatten( ia.results );
 			// accept a set of valid drop targets
 			if ( type == "dropinit" )
 				ia.droppable = drag.flatten( ia.droppable );
 			// locate drop targets
 			if ( type == "dragstart" && !ia.cancelled )
-				callback.update(); 
+				callback.update();
 		}
 		while ( ++i < len )
 		// restore the original event & type
@@ -27492,9 +27492,9 @@ drag = $special.drag = {
 		// return all handler results
 		return drag.flatten( dd.results );
 	},
-		
+
 	// extend the callback object with drag/drop properties...
-	properties: function( event, dd, ia ){		
+	properties: function( event, dd, ia ){
 		var obj = ia.callback;
 		// elements
 		obj.drag = ia.drag;
@@ -27509,44 +27509,44 @@ drag = $special.drag = {
 		obj.originalX = ia.offset.left;
 		obj.originalY = ia.offset.top;
 		// adjusted element position
-		obj.offsetX = obj.originalX + obj.deltaX; 
+		obj.offsetX = obj.originalX + obj.deltaX;
 		obj.offsetY = obj.originalY + obj.deltaY;
 		// assign the drop targets information
 		obj.drop = drag.flatten( ( ia.drop || [] ).slice() );
 		obj.available = drag.flatten( ( ia.droppable || [] ).slice() );
-		return obj;	
+		return obj;
 	},
-	
+
 	// determine is the argument is an element or jquery instance
 	element: function( arg ){
 		if ( arg && ( arg.jquery || arg.nodeType == 1 ) )
 			return arg;
 	},
-	
+
 	// flatten nested jquery objects and arrays into a single dimension array
 	flatten: function( arr ){
 		return $.map( arr, function( member ){
-			return member && member.jquery ? $.makeArray( member ) : 
+			return member && member.jquery ? $.makeArray( member ) :
 				member && member.length ? drag.flatten( member ) : member;
 		});
 	},
-	
+
 	// toggles text selection attributes ON (true) or OFF (false)
-	textselect: function( bool ){ 
+	textselect: function( bool ){
 		$( document )[ bool ? "unbind" : "bind" ]("selectstart", drag.dontstart )
 			.css("MozUserSelect", bool ? "" : "none" );
 		// .attr("unselectable", bool ? "off" : "on" )
-		document.unselectable = bool ? "off" : "on"; 
+		document.unselectable = bool ? "off" : "on";
 	},
-	
+
 	// suppress "selectstart" and "ondragstart" events
-	dontstart: function(){ 
-		return false; 
+	dontstart: function(){
+		return false;
 	},
-	
+
 	// a callback instance contructor
 	callback: function(){}
-	
+
 };
 
 // callback methods
@@ -27570,9 +27570,9 @@ $event.dispatch = function( event ){
 };
 
 // event fix hooks for touch events...
-var touchHooks = 
-$event.fixHooks.touchstart = 
-$event.fixHooks.touchmove = 
+var touchHooks =
+$event.fixHooks.touchstart =
+$event.fixHooks.touchmove =
 $event.fixHooks.touchend =
 $event.fixHooks.touchcancel = {
 	props: "clientX clientY pageX pageY screenX screenY".split( " " ),
@@ -27580,9 +27580,9 @@ $event.fixHooks.touchcancel = {
 		if ( orig ){
 			var touched = ( orig.touches && orig.touches[0] )
 				|| ( orig.changedTouches && orig.changedTouches[0] )
-				|| null; 
+				|| null;
 			// iOS webkit: touchstart, touchmove, touchend
-			if ( touched ) 
+			if ( touched )
 				$.each( touchHooks.props, function( i, prop ){
 					event[ prop ] = touched[ prop ];
 				});
@@ -27603,12 +27603,12 @@ $special.draginit = $special.dragstart = $special.dragend = drag;
 (function(root) {
 define("jquery.event.drop", ["jquery"], function() {
   return (function() {
-/*! 
+/*!
  * jquery.event.drop - v 2.2
  * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
  * Open Source MIT License - http://threedubmedia.com/code/license
  */
-// Created: 2008-06-04 
+// Created: 2008-06-04
 // Updated: 2012-05-21
 // REQUIRES: jquery 1.7.x, event.drag 2.2
 
@@ -27623,7 +27623,7 @@ $.fn.drop = function( str, arg, opts ){
 	// figure out the event handler...
 	fn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;
 	// fix the event type
-	if ( type.indexOf("drop") !== 0 ) 
+	if ( type.indexOf("drop") !== 0 )
 		type = "drop"+ type;
 	// were options passed
 	opts = ( str == fn ? arg : opts ) || {};
@@ -27633,19 +27633,19 @@ $.fn.drop = function( str, arg, opts ){
 
 // DROP MANAGEMENT UTILITY
 // returns filtered drop target elements, caches their positions
-$.drop = function( opts ){ 
+$.drop = function( opts ){
 	opts = opts || {};
 	// safely set new options...
-	drop.multi = opts.multi === true ? Infinity : 
+	drop.multi = opts.multi === true ? Infinity :
 		opts.multi === false ? 1 : !isNaN( opts.multi ) ? opts.multi : drop.multi;
 	drop.delay = opts.delay || drop.delay;
-	drop.tolerance = $.isFunction( opts.tolerance ) ? opts.tolerance : 
+	drop.tolerance = $.isFunction( opts.tolerance ) ? opts.tolerance :
 		opts.tolerance === null ? null : drop.tolerance;
 	drop.mode = opts.mode || drop.mode || 'intersect';
 };
 
 // local refs (increase compression)
-var $event = $.event, 
+var $event = $.event,
 $special = $event.special,
 // configure the drop special event
 drop = $.event.special.drop = {
@@ -27654,36 +27654,36 @@ drop = $.event.special.drop = {
 	multi: 1, // allow multiple drop winners per dragged element
 	delay: 20, // async timeout delay
 	mode: 'overlap', // drop tolerance mode
-		
+
 	// internal cache
-	targets: [], 
-	
+	targets: [],
+
 	// the key name for stored drop data
 	datakey: "dropdata",
-		
+
 	// prevent bubbling for better performance
 	noBubble: true,
-	
+
 	// count bound related events
-	add: function( obj ){ 
+	add: function( obj ){
 		// read the interaction data
 		var data = $.data( this, drop.datakey );
 		// count another realted event
 		data.related += 1;
 	},
-	
+
 	// forget unbound related events
 	remove: function(){
 		$.data( this, drop.datakey ).related -= 1;
 	},
-	
+
 	// configure the interactions
 	setup: function(){
 		// check for related events
-		if ( $.data( this, drop.datakey ) ) 
+		if ( $.data( this, drop.datakey ) )
 			return;
 		// initialize the drop element data
-		var data = { 
+		var data = {
 			related: 0,
 			active: [],
 			anyactive: 0,
@@ -27695,29 +27695,29 @@ drop = $.event.special.drop = {
 		// store the drop target in internal cache
 		drop.targets.push( this );
 	},
-	
-	// destroy the configure interaction	
-	teardown: function(){ 
+
+	// destroy the configure interaction
+	teardown: function(){
 		var data = $.data( this, drop.datakey ) || {};
 		// check for related events
-		if ( data.related ) 
+		if ( data.related )
 			return;
 		// remove the stored data
 		$.removeData( this, drop.datakey );
 		// reference the targeted element
 		var element = this;
 		// remove from the internal cache
-		drop.targets = $.grep( drop.targets, function( target ){ 
-			return ( target !== element ); 
+		drop.targets = $.grep( drop.targets, function( target ){
+			return ( target !== element );
 		});
 	},
-	
+
 	// shared event handler
-	handler: function( event, dd ){ 
+	handler: function( event, dd ){
 		// local vars
 		var results, $targets;
 		// make sure the right data is available
-		if ( !dd ) 
+		if ( !dd )
 			return;
 		// handle various events
 		switch ( event.type ){
@@ -27738,7 +27738,7 @@ drop = $.event.special.drop = {
 				// set available target elements
 				dd.droppable = $targets;
 				// activate drop targets for the initial element being dragged
-				$special.drag.hijack( event, "dropinit", dd ); 
+				$special.drag.hijack( event, "dropinit", dd );
 				break;
 			// drag, from $.event.special.drag
 			case 'mousemove': // TOLERATE >>
@@ -27746,35 +27746,35 @@ drop = $.event.special.drop = {
 				drop.event = event; // store the mousemove event
 				if ( !drop.timer )
 					// monitor drop targets
-					drop.tolerate( dd ); 
+					drop.tolerate( dd );
 				break;
 			// dragend, from $.event.special.drag
 			case 'mouseup': // DROP >> DROPEND >>
 			case 'touchend': // DROP >> DROPEND >>
-				drop.timer = clearTimeout( drop.timer ); // delete timer	
+				drop.timer = clearTimeout( drop.timer ); // delete timer
 				if ( dd.propagates ){
-					$special.drag.hijack( event, "drop", dd ); 
-					$special.drag.hijack( event, "dropend", dd ); 
+					$special.drag.hijack( event, "drop", dd );
+					$special.drag.hijack( event, "dropend", dd );
 				}
 				break;
-				
+
 		}
 	},
-		
+
 	// returns the location positions of an element
-	locate: function( elem, index ){ 
+	locate: function( elem, index ){
 		var data = $.data( elem, drop.datakey ),
-		$elem = $( elem ), 
-		posi = $elem.offset() || {}, 
-		height = $elem.outerHeight(), 
+		$elem = $( elem ),
+		posi = $elem.offset() || {},
+		height = $elem.outerHeight(),
 		width = $elem.outerWidth(),
-		location = { 
-			elem: elem, 
-			width: width, 
+		location = {
+			elem: elem,
+			width: width,
 			height: height,
-			top: posi.top, 
-			left: posi.left, 
-			right: posi.left + width, 
+			top: posi.top,
+			left: posi.left,
+			right: posi.left + width,
 			bottom: posi.top + height
 		};
 		// drag elements might not have dropdata
@@ -27785,43 +27785,43 @@ drop = $.event.special.drop = {
 		}
 		return location;
 	},
-	
+
 	// test the location positions of an element against another OR an X,Y coord
 	contains: function( target, test ){ // target { location } contains test [x,y] or { location }
 		return ( ( test[0] || test.left ) >= target.left && ( test[0] || test.right ) <= target.right
-			&& ( test[1] || test.top ) >= target.top && ( test[1] || test.bottom ) <= target.bottom ); 
+			&& ( test[1] || test.top ) >= target.top && ( test[1] || test.bottom ) <= target.bottom );
 	},
-	
+
 	// stored tolerance modes
-	modes: { // fn scope: "$.event.special.drop" object 
+	modes: { // fn scope: "$.event.special.drop" object
 		// target with mouse wins, else target with most overlap wins
 		'intersect': function( event, proxy, target ){
 			return this.contains( target, [ event.pageX, event.pageY ] ) ? // check cursor
 				1e9 : this.modes.overlap.apply( this, arguments ); // check overlap
 		},
-		// target with most overlap wins	
+		// target with most overlap wins
 		'overlap': function( event, proxy, target ){
 			// calculate the area of overlap...
 			return Math.max( 0, Math.min( target.bottom, proxy.bottom ) - Math.max( target.top, proxy.top ) )
 				* Math.max( 0, Math.min( target.right, proxy.right ) - Math.max( target.left, proxy.left ) );
 		},
-		// proxy is completely contained within target bounds	
+		// proxy is completely contained within target bounds
 		'fit': function( event, proxy, target ){
 			return this.contains( target, proxy ) ? 1 : 0;
 		},
-		// center of the proxy is contained within target bounds	
+		// center of the proxy is contained within target bounds
 		'middle': function( event, proxy, target ){
 			return this.contains( target, [ proxy.left + proxy.width * .5, proxy.top + proxy.height * .5 ] ) ? 1 : 0;
 		}
-	},	
-	
+	},
+
 	// sort drop target cache by by winner (dsc), then index (asc)
 	sort: function( a, b ){
 		return ( b.winner - a.winner ) || ( a.index - b.index );
 	},
-		
+
 	// async, recursive tolerance execution
-	tolerate: function( dd ){		
+	tolerate: function( dd ){
 		// declare local refs
 		var i, drp, drg, data, arr, len, elem,
 		// interaction iteration variables
@@ -27834,30 +27834,30 @@ drop = $.event.special.drop = {
 		do if ( ia = dd.interactions[x] ){
 			// check valid interaction
 			if ( !ia )
-				return; 
+				return;
 			// initialize or clear the drop data
 			ia.drop = [];
 			// holds the drop elements
-			arr = []; 
+			arr = [];
 			len = ia.droppable.length;
 			// determine the proxy location, if needed
 			if ( tolerance )
-				drg = drop.locate( ia.proxy ); 
+				drg = drop.locate( ia.proxy );
 			// reset the loop
 			i = 0;
 			// loop each stored drop target
-			do if ( elem = ia.droppable[i] ){ 
+			do if ( elem = ia.droppable[i] ){
 				data = $.data( elem, drop.datakey );
 				drp = data.location;
 				if ( !drp ) continue;
 				// find a winner: tolerance function is defined, call it
-				data.winner = tolerance ? tolerance.call( drop, drop.event, drg, drp ) 
+				data.winner = tolerance ? tolerance.call( drop, drop.event, drg, drp )
 					// mouse position is always the fallback
-					: drop.contains( drp, xy ) ? 1 : 0; 
-				arr.push( data );	
-			} while ( ++i < len ); // loop 
+					: drop.contains( drp, xy ) ? 1 : 0;
+				arr.push( data );
+			} while ( ++i < len ); // loop
 			// sort the drop targets
-			arr.sort( drop.sort );			
+			arr.sort( drop.sort );
 			// reset the loop
 			i = 0;
 			// loop through all of the targets again
@@ -27867,7 +27867,7 @@ drop = $.event.special.drop = {
 					// new winner... dropstart
 					if ( !data.active[x] && !data.anyactive ){
 						// check to make sure that this is not prevented
-						if ( $special.drag.hijack( drop.event, "dropstart", dd, x, data.elem )[0] !== false ){ 	
+						if ( $special.drag.hijack( drop.event, "dropstart", dd, x, data.elem )[0] !== false ){
 							data.active[x] = 1;
 							data.anyactive += 1;
 						}
@@ -27879,32 +27879,32 @@ drop = $.event.special.drop = {
 					if ( data.winner )
 						ia.drop.push( data.elem );
 				}
-				// losers... 
+				// losers...
 				else if ( data.active[x] && data.anyactive == 1 ){
 					// former winner... dropend
-					$special.drag.hijack( drop.event, "dropend", dd, x, data.elem ); 
+					$special.drag.hijack( drop.event, "dropend", dd, x, data.elem );
 					data.active[x] = 0;
 					data.anyactive -= 1;
 				}
-			} while ( ++i < len ); // loop 		
+			} while ( ++i < len ); // loop
 		} while ( ++x < end ) // loop
 		// check if the mouse is still moving or is idle
-		if ( drop.last && xy[0] == drop.last.pageX && xy[1] == drop.last.pageY ) 
+		if ( drop.last && xy[0] == drop.last.pageX && xy[1] == drop.last.pageY )
 			delete drop.timer; // idle, don't recurse
 		else  // recurse
-			drop.timer = setTimeout(function(){ 
-				drop.tolerate( dd ); 
+			drop.timer = setTimeout(function(){
+				drop.tolerate( dd );
 			}, drop.delay );
 		// remember event, to compare idleness
-		drop.last = drop.event; 
+		drop.last = drop.event;
 	}
-	
+
 };
 
 // share the same special event configuration with related events...
 $special.dropinit = $special.dropstart = $special.dropend = drop;
 
-})(jQuery); // confine scope	
+})(jQuery); // confine scope
 ;
 return $.drop;
   }).apply(root, arguments);
@@ -27995,7 +27995,7 @@ define('mockup-patterns-select2',[
   'jquery.event.drag',
   'jquery.event.drop'
 ], function($, Base) {
-  
+
 
   var Select2 = Base.extend({
     name: 'select2',
@@ -28308,7 +28308,7 @@ define('mockup-patterns-relateditems',[
   'mockup-utils',
   'mockup-patterns-tree'
 ], function($, _, Base, Select2, utils, Tree) {
-  
+
 
   var RelatedItems = Base.extend({
     name: 'relateditems',
@@ -28846,19 +28846,19 @@ Emitter.prototype.hasListeners = function(event){
 /*
 #
 # More info at [www.dropzonejs.com](http://www.dropzonejs.com)
-# 
-# Copyright (c) 2012, Matias Meno  
-# 
+#
+# Copyright (c) 2012, Matias Meno
+#
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
-# 
+#
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
-# 
+#
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
@@ -28887,9 +28887,9 @@ Emitter.prototype.hasListeners = function(event){
 
     /*
     This is a list of all available events you can register on a dropzone object.
-    
+
     You can register an event handler like this:
-    
+
         dropzone.on("dragEnter", function() { });
     */
 
@@ -30277,7 +30277,7 @@ Emitter.prototype.hasListeners = function(event){
   Dropzone.SUCCESS = "success";
 
   /*
-  
+
   Bugfix for iOS 6 and 7
   Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
   based on the work of https://github.com/stomita/ios-imagefile-megapixel
@@ -30465,7 +30465,7 @@ define('mockup-patterns-upload',[
   'text!js/patterns/upload/templates/preview.xml',
 ], function($, _, Base, RelatedItems, Dropzone,
             UploadTemplate, PreviewTemplate) {
-  
+
 
   /* we do not want this plugin to auto discover */
   Dropzone.autoDiscover = false;
@@ -30867,7 +30867,7 @@ define('js/patterns/filemanager/views/upload',[
   'js/patterns/filemanager/views/basepopover',
   'mockup-patterns-upload'
 ], function($, _, Backbone, PopoverView, Upload) {
-  
+
 
   var UploadView = PopoverView.extend({
     className: 'popover upload',
@@ -30946,7 +30946,7 @@ define('js/patterns/filemanager/views/app',[
 ], function($, _, Backbone, BaseView, Tree, TextEditor, AppTemplate, Toolbar,
             ButtonView, ButtonGroup, AddNewView, NewFolderView, DeleteView,
             CustomizeView, RenameView, UploadView, utils) {
-  
+
 
   var AppView = BaseView.extend({
     tagName: 'div',
@@ -31278,7 +31278,7 @@ define('mockup-patterns-filemanager',[
   'js/patterns/filemanager/views/app',
   'text!js/ui/templates/popover.xml'
 ], function($, Base, AppView) {
-  
+
 
   var FileManager = Base.extend({
     name: 'filemanager',
@@ -31363,7 +31363,7 @@ define('mockup-bundles-filemanager',[
   'mockup-patterns-base',
   'mockup-patterns-filemanager'
 ], function($, Registry, Base) {
-  
+
 
   // initialize only if we are in top frame
   if (window.parent === window) {
diff --git a/plone/resourceeditor/testing.py b/plone/resourceeditor/testing.py
index 33788c2..b00a6bd 100644
--- a/plone/resourceeditor/testing.py
+++ b/plone/resourceeditor/testing.py
@@ -24,6 +24,6 @@ def setUpPloneSite(self, portal):
 
 PLONE_RESOURCE_EDITOR_FIXTURE = PloneResourceEditor()
 PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(PLONE_RESOURCE_EDITOR_FIXTURE,),
-    name="plone.resourceeditor:Integration"
+    bases=(PLONE_RESOURCE_EDITOR_FIXTURE, ),
+    name='plone.resourceeditor:Integration',
 )
diff --git a/plone/resourceeditor/tests.py b/plone/resourceeditor/tests.py
index 881046f..7824bb4 100644
--- a/plone/resourceeditor/tests.py
+++ b/plone/resourceeditor/tests.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.resourceeditor.testing import PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING
+from plone.resourceeditor.testing import PLONE_RESOURCE_EDITOR_INTEGRATION_TESTING  # noqa
+
 import unittest2 as unittest
 
 
@@ -21,7 +22,7 @@ def test_getinfo(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
 
-        r.writeFile("test.txt", "A text file")
+        r.writeFile('test.txt', 'A text file')
 
         view = FileManager(r, self.layer['request'])
         info = view.getInfo('/test.txt')
@@ -37,9 +38,9 @@ def test_getfolder(self):
         r = self._make_directory()
 
         r.makeDirectory('alpha')
-        r['alpha'].writeFile('beta.txt', "Beta")
+        r['alpha'].writeFile('beta.txt', 'Beta')
         r['alpha'].makeDirectory('delta')
-        r['alpha']['delta'].writeFile('gamma.css', "body {}")
+        r['alpha']['delta'].writeFile('gamma.css', 'body {}')
 
         view = FileManager(r, self.layer['request'])
         info = view.getFolder('/alpha')
@@ -127,10 +128,10 @@ def test_add(self):
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/", d)
+        info = view.add('/', d)
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -142,14 +143,14 @@ def test_add_subfolder(self):
         from plone.resourceeditor.browser import FileManager
         from StringIO import StringIO
         r = self._make_directory()
-        r.makeDirectory("alpha")
+        r.makeDirectory('alpha')
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/alpha", d)
+        info = view.add('/alpha', d)
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -161,32 +162,32 @@ def test_add_exists(self):
         from plone.resourceeditor.browser import FileManager
         from StringIO import StringIO
         r = self._make_directory()
-        r.writeFile("test.txt", "boo")
+        r.writeFile('test.txt', 'boo')
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/", d)
+        info = view.add('/', d)
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
 
-        self.assertEqual(r.readFile("test.txt"), "boo")
+        self.assertEqual(r.readFile('test.txt'), 'boo')
 
     def test_add_replace(self):
         from plone.resourceeditor.browser import FileManager
         from StringIO import StringIO
         r = self._make_directory()
-        r.writeFile("test.txt", "boo")
+        r.writeFile('test.txt', 'boo')
 
         view = FileManager(r, self.layer['request'])
 
-        d = StringIO("foo")
-        d.filename = "test.txt"
+        d = StringIO('foo')
+        d.filename = 'test.txt'
 
-        info = view.add("/", d, "/test.txt")
+        info = view.add('/', d, '/test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -194,7 +195,7 @@ def test_add_replace(self):
         self.assertEqual(info['path'], '/')
         self.assertEqual(info['parent'], '/')
 
-        self.assertEqual(r.readFile("test.txt"), "foo")
+        self.assertEqual(r.readFile('test.txt'), 'foo')
 
     def test_addnew(self):
         from plone.resourceeditor.browser import FileManager
@@ -202,28 +203,28 @@ def test_addnew(self):
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.addNew("/", "test.txt")
+        info = view.addNew('/', 'test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
         self.assertEqual(info['name'], 'test.txt')
         self.assertEqual(info['parent'], '/')
 
-        self.assertEqual(r.readFile("test.txt"), "")
+        self.assertEqual(r.readFile('test.txt'), '')
 
     def test_addnew_exists(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.addNew("/", "test.txt")
+        info = view.addNew('/', 'test.txt')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
 
-        self.assertEqual(r.readFile("test.txt"), "foo")
+        self.assertEqual(r.readFile('test.txt'), 'foo')
 
     def test_addnew_invalidname(self):
         from plone.resourceeditor.browser import FileManager
@@ -232,18 +233,18 @@ def test_addnew_invalidname(self):
         view = FileManager(r, self.layer['request'])
 
         for char in '\\/:*?"<>':
-            info = view.addNew("/", "foo" + char)
+            info = view.addNew('/', 'foo' + char)
             self.assertEqual(info['code'], 1)
             self.assertNotEqual(info['error'], '')
 
     def test_rename(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.rename("/test.txt", "foo.txt")
+        info = view.rename('/test.txt', 'foo.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -252,17 +253,17 @@ def test_rename(self):
         self.assertEqual(info['oldParent'], '/')
         self.assertEqual(info['newParent'], '/')
 
-        self.assertEqual(r.readFile("foo.txt"), "foo")
+        self.assertEqual(r.readFile('foo.txt'), 'foo')
 
     def test_rename_subfolder(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.makeDirectory("alpha")
-        r['alpha'].writeFile("test.txt", "foo")
+        r.makeDirectory('alpha')
+        r['alpha'].writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.rename("/alpha/test.txt", "foo.txt")
+        info = view.rename('/alpha/test.txt', 'foo.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -271,17 +272,17 @@ def test_rename_subfolder(self):
         self.assertEqual(info['oldParent'], '/alpha')
         self.assertEqual(info['newParent'], '/alpha')
 
-        self.assertEqual(r['alpha'].readFile("foo.txt"), "foo")
+        self.assertEqual(r['alpha'].readFile('foo.txt'), 'foo')
 
     def test_rename_exists(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
-        r.writeFile("foo.txt", "bar")
+        r.writeFile('test.txt', 'foo')
+        r.writeFile('foo.txt', 'bar')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.rename("/test.txt", "foo.txt")
+        info = view.rename('/test.txt', 'foo.txt')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
@@ -290,16 +291,16 @@ def test_rename_exists(self):
         self.assertEqual(info['oldParent'], '/')
         self.assertEqual(info['newParent'], '/')
 
-        self.assertEqual(r.readFile("foo.txt"), "bar")
+        self.assertEqual(r.readFile('foo.txt'), 'bar')
 
     def test_delete(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.delete("/test.txt")
+        info = view.delete('/test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -311,11 +312,11 @@ def test_delete_subfolder(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
         r.makeDirectory('alpha')
-        r['alpha'].writeFile("test.txt", "foo")
+        r['alpha'].writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.delete("/alpha/test.txt")
+        info = view.delete('/alpha/test.txt')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
@@ -329,7 +330,7 @@ def test_delete_notfound(self):
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.delete("/test.txt")
+        info = view.delete('/test.txt')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
@@ -338,46 +339,46 @@ def test_delete_notfound(self):
     def test_move(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.makeDirectory("alpha")
-        r.writeFile("test.txt", "foo")
+        r.makeDirectory('alpha')
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.move("/test.txt", "/alpha")
+        info = view.move('/test.txt', '/alpha')
 
         self.assertEqual(info['code'], 0)
         self.assertEqual(info['error'], '')
         self.assertEqual(info['newPath'], '/alpha/test.txt')
 
         self.assertFalse('test.txt' in r)
-        self.assertEqual("foo", r['alpha'].readFile('test.txt'))
+        self.assertEqual('foo', r['alpha'].readFile('test.txt'))
 
     def test_move_exists(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.makeDirectory("alpha")
-        r['alpha'].writeFile("test.txt", "bar")
-        r.writeFile("test.txt", "foo")
+        r.makeDirectory('alpha')
+        r['alpha'].writeFile('test.txt', 'bar')
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.move("/test.txt", "/alpha")
+        info = view.move('/test.txt', '/alpha')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
         self.assertEqual(info['newPath'], '/alpha/test.txt')
 
         self.assertTrue('test.txt' in r)
-        self.assertEqual("bar", r['alpha'].readFile('test.txt'))
+        self.assertEqual('bar', r['alpha'].readFile('test.txt'))
 
     def test_move_invalid_parent(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
 
-        info = view.move("/test.txt", "/alpha")
+        info = view.move('/test.txt', '/alpha')
 
         self.assertEqual(info['code'], 1)
         self.assertNotEqual(info['error'], '')
@@ -388,7 +389,7 @@ def test_move_invalid_parent(self):
     def test_download(self):
         from plone.resourceeditor.browser import FileManager
         r = self._make_directory()
-        r.writeFile("test.txt", "foo")
+        r.writeFile('test.txt', 'foo')
 
         view = FileManager(r, self.layer['request'])
-        self.assertEqual("foo", view.download("/test.txt"))
+        self.assertEqual('foo', view.download('/test.txt'))


