Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T03:59:27-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/c007e29c3e49778575e53e2653188d95a8e2b2d9

Strip `.rst` extension from toctree entries

Files changed:
M docs/contribute/index.md
M docs/index.md

b'diff --git a/docs/contribute/index.md b/docs/contribute/index.md\nindex f99207a0..1147881c 100644\n--- a/docs/contribute/index.md\n+++ b/docs/contribute/index.md\n@@ -11,7 +11,7 @@ Setting up and using the local development environment.\n ```{toctree}\n :maxdepth: 2\n \n-develop.rst\n+develop\n ```\n \n ## Releasing a new version\n@@ -21,5 +21,5 @@ Description of our release process and guidelines.\n ```{toctree}\n :maxdepth: 2\n \n-release.rst\n+release\n ```\ndiff --git a/docs/index.md b/docs/index.md\nindex 81b80d11..2d1593dc 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -28,13 +28,13 @@ Backward-incompatible changes to the API will be restricted to major versions (1\n ```{toctree}\n :maxdepth: 2\n \n-about.rst\n-portal.rst\n-content.rst\n-user.rst\n-group.rst\n-env.rst\n-relation.rst\n+about\n+portal\n+content\n+user\n+group\n+env\n+relation\n ```\n \n ## Complete API and advanced usage\n@@ -42,14 +42,14 @@ relation.rst\n ```{toctree}\n :maxdepth: 1\n \n-api/index.rst\n-api/portal.rst\n-api/content.rst\n-api/user.rst\n-api/group.rst\n-api/env.rst\n-api/relation.rst\n-api/exceptions.rst\n+api/index\n+api/portal\n+api/content\n+api/user\n+api/group\n+api/env\n+api/relation\n+api/exceptions\n ```\n \n ## Contribute\n@@ -57,7 +57,7 @@ api/exceptions.rst\n ```{toctree}\n :maxdepth: 2\n \n-contribute/index.rst\n+contribute/index\n ```\n \n ## Indices and tables\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:04:57-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/1c2e08ac6999853fff675aad6613488ebc65964b

Demote all the API methods one level deeper and nested under "API methods and descriptions" to de-clutter the navigation, reduce scrolling.

Files changed:
M docs/api/index.md
M docs/index.md

b'diff --git a/docs/api/index.md b/docs/api/index.md\nindex a087fc82..62ae9065 100644\n--- a/docs/api/index.md\n+++ b/docs/api/index.md\n@@ -4,6 +4,20 @@\n \n # List of all API methods with descriptions\n \n+```{toctree}\n+:maxdepth: 1\n+:hidden: true\n+\n+portal\n+content\n+user\n+group\n+env\n+relation\n+exceptions\n+```\n+\n+\n ## api.portal\n \n ```{eval-rst}\ndiff --git a/docs/index.md b/docs/index.md\nindex 2d1593dc..4d769174 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -43,13 +43,6 @@ relation\n :maxdepth: 1\n \n api/index\n-api/portal\n-api/content\n-api/user\n-api/group\n-api/env\n-api/relation\n-api/exceptions\n ```\n \n ## Contribute\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:09:50-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/8bc6aa1ec23a1d4a16bfcb3dec3515bd5626ea11

Make page titles more concise and accurate

Files changed:
M docs/api/index.md
M docs/contribute/index.md
M docs/index.md

b'diff --git a/docs/api/index.md b/docs/api/index.md\nindex 62ae9065..3614b43a 100644\n--- a/docs/api/index.md\n+++ b/docs/api/index.md\n@@ -2,7 +2,7 @@\n .. currentmodule:: plone\n ```\n \n-# List of all API methods with descriptions\n+# API methods and descriptions\n \n ```{toctree}\n :maxdepth: 1\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\nindex 1147881c..b59f24e1 100644\n--- a/docs/contribute/index.md\n+++ b/docs/contribute/index.md\n@@ -1,4 +1,4 @@\n-# How to contribute to this package?\n+# Contributing to `plone.api`\n \n ## Conventions\n \ndiff --git a/docs/index.md b/docs/index.md\nindex 4d769174..da668387 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -1,4 +1,4 @@\n-# A Plone API\n+# `plone.api`\n \n > The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n >\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:11:09-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/f91b471e3668ff60985bba5901ab9733581ddc7f

Make API method names inline literals in headings and page titles

Files changed:
M docs/api/content.md
M docs/api/env.md
M docs/api/exceptions.md
M docs/api/group.md
M docs/api/index.md
M docs/api/portal.md
M docs/api/relation.md
M docs/api/user.md

b'diff --git a/docs/api/content.md b/docs/api/content.md\nindex 730e6b2e..6af55e2a 100644\n--- a/docs/api/content.md\n+++ b/docs/api/content.md\n@@ -1,6 +1,6 @@\n (plone-api-content)=\n \n-# plone.api.content\n+# `plone.api.content`\n \n ```{eval-rst}\n .. automodule:: plone.api.content\ndiff --git a/docs/api/env.md b/docs/api/env.md\nindex 334f8563..bdf3269f 100644\n--- a/docs/api/env.md\n+++ b/docs/api/env.md\n@@ -1,6 +1,6 @@\n (plone-api-env)=\n \n-# plone.api.env\n+# `plone.api.env`\n \n ```{eval-rst}\n .. automodule:: plone.api.env\ndiff --git a/docs/api/exceptions.md b/docs/api/exceptions.md\nindex 7c10736e..9c14a2d5 100644\n--- a/docs/api/exceptions.md\n+++ b/docs/api/exceptions.md\n@@ -1,6 +1,6 @@\n (plone-api-errors)=\n \n-# plone.api.exc\n+# `plone.api.exc`\n \n ```{eval-rst}\n .. automodule:: plone.api.exc\ndiff --git a/docs/api/group.md b/docs/api/group.md\nindex 3e59c6dd..dce12188 100644\n--- a/docs/api/group.md\n+++ b/docs/api/group.md\n@@ -1,6 +1,6 @@\n (plone-api-group)=\n \n-# plone.api.group\n+# `plone.api.group`\n \n ```{eval-rst}\n .. automodule:: plone.api.group\ndiff --git a/docs/api/index.md b/docs/api/index.md\nindex 3614b43a..1004dbc9 100644\n--- a/docs/api/index.md\n+++ b/docs/api/index.md\n@@ -18,7 +18,7 @@ exceptions\n ```\n \n \n-## api.portal\n+## `api.portal`\n \n ```{eval-rst}\n .. autosummary::\n@@ -33,7 +33,7 @@ exceptions\n \n ```\n \n-## api.content\n+## `api.content`\n \n ```{eval-rst}\n .. autosummary::\n@@ -51,7 +51,7 @@ exceptions\n \n ```\n \n-## api.user\n+## `api.user`\n \n ```{eval-rst}\n .. autosummary::\n@@ -69,7 +69,7 @@ exceptions\n \n ```\n \n-## api.group\n+## `api.group`\n \n ```{eval-rst}\n .. autosummary::\n@@ -86,7 +86,7 @@ exceptions\n \n ```\n \n-## api.env\n+## `api.env`\n \n ```{eval-rst}\n .. autosummary::\n@@ -98,7 +98,7 @@ exceptions\n \n ```\n \n-## api.relation\n+## `api.relation`\n \n ```{eval-rst}\n .. autosummary::\ndiff --git a/docs/api/portal.md b/docs/api/portal.md\nindex cf0c35da..15f9f35b 100644\n--- a/docs/api/portal.md\n+++ b/docs/api/portal.md\n@@ -1,6 +1,6 @@\n (plone-api-portal)=\n \n-# plone.api.portal\n+# `plone.api.portal`\n \n ```{eval-rst}\n .. automodule:: plone.api.portal\ndiff --git a/docs/api/relation.md b/docs/api/relation.md\nindex abce712a..ceb7ad05 100644\n--- a/docs/api/relation.md\n+++ b/docs/api/relation.md\n@@ -1,6 +1,6 @@\n (plone-api-relation)=\n \n-# plone.api.relation\n+# `plone.api.relation`\n \n ```{eval-rst}\n .. automodule:: plone.api.relation\ndiff --git a/docs/api/user.md b/docs/api/user.md\nindex ec14613a..2f4978af 100644\n--- a/docs/api/user.md\n+++ b/docs/api/user.md\n@@ -1,6 +1,6 @@\n (plone-api-user)=\n \n-# plone.api.user\n+# `plone.api.user`\n \n ```{eval-rst}\n .. automodule:: plone.api.user\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:16:49-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/fc6c612db40aecc3a706178979c9dc694f7b77ea

Use proper lexers (shell is generic, whereas bash is not)

Files changed:
M docs/content.md
M docs/contribute/develop.md
M docs/contribute/release.md

b"diff --git a/docs/content.md b/docs/content.md\nindex d5f04dce..f0f4077a 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -42,7 +42,7 @@ assert obj.id == 'my-content'\n There are several approaches to getting your content object.\n Consider the following portal structure:\n \n-```\n+```console\n plone (portal root)\n |-- blog\n |-- about\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 06cd474e..57f300a6 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -82,14 +82,14 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n \n Go to your projects folder and download the lastest `plone.api` code:\n \n-```bash\n+```shell\n [you@local ~]$ cd <your_work_folder>\n [you@local work]$ git clone https://github.com/plone/plone.api.git\n ```\n \n Now `cd` into the newly created directory and build your environment:\n \n-```bash\n+```shell\n [you@local work]$ cd plone.api\n [you@local plone.api]$ make\n ```\n@@ -105,7 +105,7 @@ Go make some tea while\n \n Other commands that you may want to run:\n \n-```bash\n+```shell\n [you@local plone.api]$ make tests  # run all tests and syntax validation\n [you@local plone.api]$ make docs   # re-generate documentation\n [you@local plone.api]$ make clean  # reset your env back to a fresh start\n@@ -129,7 +129,7 @@ So if you are not doing a very trivial fix, but rather adding new features/enhan\n This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n \n-```bash\n+```shell\n [you@local plone.api]$ git checkout master  # go to master branch\n [you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n # replace 17 with the issue number you are working on\n@@ -168,7 +168,7 @@ Before every commit you should:\n All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n \n-```bash\n+```shell\n $ make\n ```\n \ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 208c77c9..6f31ddd5 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -13,7 +13,7 @@ Releasing a new version of `plone.api` involves the following steps:\n To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n It's listed as a dependency in `setup.py` and should already be installed in your local bin:\n \n-```bash\n+```shell\n $ bin/mkrelease --help\n ```\n \n@@ -46,7 +46,7 @@ In the following example we are releasing version 0.1 of `plone.api`.\n The package has been prepared so that `setup.py` contains the version `0.1`,\n this change has been committed to git and all changes have been pushed upstream to GitHub:\n \n-```bash\n+```shell\n # Check that package description is rendered correctly\n $ bin/longtest\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:24:05-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/6b9a5abd85c047092d38cc72acd3342caefd71fe

Remove shell prompts to improve syntax highlighting and copy-pasting
Move commented paragraph out of a code block into a narrative paragraph
Split shell commands and console output into two separate code blocks with their appropriate lexers for improved syntax highlighting

Files changed:
M docs/contribute/develop.md
M docs/contribute/release.md

b"diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 57f300a6..ff5f7980 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -83,15 +83,15 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n Go to your projects folder and download the lastest `plone.api` code:\n \n ```shell\n-[you@local ~]$ cd <your_work_folder>\n-[you@local work]$ git clone https://github.com/plone/plone.api.git\n+cd <your_work_folder>\n+git clone https://github.com/plone/plone.api.git\n ```\n \n Now `cd` into the newly created directory and build your environment:\n \n ```shell\n-[you@local work]$ cd plone.api\n-[you@local plone.api]$ make\n+cd plone.api\n+make\n ```\n \n Go make some tea while\n@@ -106,10 +106,10 @@ Go make some tea while\n Other commands that you may want to run:\n \n ```shell\n-[you@local plone.api]$ make tests  # run all tests and syntax validation\n-[you@local plone.api]$ make docs   # re-generate documentation\n-[you@local plone.api]$ make clean  # reset your env back to a fresh start\n-[you@local plone.api]$ make        # re-build env, generate docs, run tests\n+make tests  # run all tests and syntax validation\n+make docs   # re-generate documentation\n+make clean  # reset your env back to a fresh start\n+make        # re-build env, generate docs, run tests\n ```\n \n Open `Makefile` in your favorite code editor to see all possible commands and what they do.\n@@ -130,19 +130,19 @@ This way your work is kept in an isolated place where you can receive feedback o\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n \n ```shell\n-[you@local plone.api]$ git checkout master  # go to master branch\n-[you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n+git checkout master  # go to master branch\n+git checkout -b issue_17  # create a feature branch\n # replace 17 with the issue number you are working on\n \n # change code here\n \n-[you@local plone.api]$ git add -p && git commit  # commit my changes\n-[you@local plone.api]$ git push origin issue_17  # push my branch to GitHub\n-# at this point others can see your changes but they don't get effected by\n-them; in other words, others can comment on your code without your code\n-changing their development environments\n+git add -p && git commit  # commit my changes\n+git push origin issue_17  # push my branch to GitHub\n ```\n \n+At this point, others can see your changes, but they don't get affected by them.\n+In other words, others can comment on your code without your code changing their development environments.\n+\n Read more about Git branching at <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches> and on our Git workflow at [Working with Git and GitHub](https://docs.plone.org/develop/coredev/docs/git.html).\n \n Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n@@ -169,7 +169,7 @@ All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n \n ```shell\n-$ make\n+make\n ```\n \n ```{note}\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 6f31ddd5..e5cd139f 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -14,7 +14,7 @@ To avoid human errors and to automate some of the tasks above we use `jarn.mkrel\n It's listed as a dependency in `setup.py` and should already be installed in your local bin:\n \n ```shell\n-$ bin/mkrelease --help\n+bin/mkrelease --help\n ```\n \n Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the `~/.pypirc` file, e.g.:\n@@ -48,10 +48,12 @@ this change has been committed to git and all changes have been pushed upstream\n \n ```shell\n # Check that package description is rendered correctly\n-$ bin/longtest\n+bin/longtest\n \n # Make a release and upload it to PyPI\n-$ bin/mkrelease -d pypi -pq ./\n+bin/mkrelease -d pypi -pq ./\n+```\n+```console\n Releasing plone.api 0.1\n Tagging plone.api 0.1\n To git@github.com:plone/plone.api.git\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:38:48-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/d535b17dddb8891744d7f92886056a7638ed437e

Clean up contributing's Documentation section to reflect current state of docs

Files changed:
M docs/contribute/develop.md

b'diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex ff5f7980..601b5ed1 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -184,22 +184,21 @@ On every push to GitHub, [Travis](https://travis-ci.org/plone/plone.api) runs al\n \n Travis is configured with the `.travis.yml` file located in the root of this package.\n \n-## Sphinx Documentation\n+## Documentation\n \n ```{note}\n Un-documented code is broken code.\n ```\n \n-For every feature you add to the codebase, you should also add documentation for it to `docs/`.\n+For every feature you add to the codebase, you should also add documentation of it to `docs/`.\n \n After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n \n-Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files, periodically.\n-So when you push changes to master on GitHub you should soon be able to see them published on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api).\n+Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n \n-Read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html) to brush up on your `MyST` skills.\n+For writing narrative documentation, read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html).\n \n-Example:\n+For docstrings in your code, use reStructuredText, as shown in the following examples.\n \n ```python\n def add(a, b):\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:40:17-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/a3f6ae8599b79fcf8307a3a41664bf1b781be342

Minor English grammar and MySt syntax fixes

Files changed:
M docs/about.md
M docs/content.md
M docs/contribute/develop.md

b'diff --git a/docs/about.md b/docs/about.md\nindex 2aa4b064..cfeaf3a2 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -21,11 +21,11 @@ All contributions to `plone.api` should keep these rules in mind.\n Two libraries are especially inspiring:\n \n [SQLAlchemy](https://www.sqlalchemy.org/)\n-: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well designed, is consistent, explicit, and easy to learn.\n+: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well-designed, is consistent, explicit, and easy to learn.\n \n [Requests](https://docs.python-requests.org/en/latest/)\n : If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n-At the very least, we should have the option of being able to write such clean code.\n+  At the very least, we should have the option of being able to write such clean code.\n \n The API provides grouped functional access to otherwise distributed logic in Plone.\n This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\ndiff --git a/docs/content.md b/docs/content.md\nindex f0f4077a..d5a505a9 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -203,7 +203,7 @@ document_obj = document_brain.getObject()\n \n A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which remains constant for the object even if the object is moved.\n \n-Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links.\n+Plone uses UUIDs for storing references between content and for linking by UUIDs, enabling persistent links.\n \n To get the UUID of any content object use {meth}`api.content.get_uuid`.\n The following code gets the UUID of the `contact` document.\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 601b5ed1..bd082a05 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -77,10 +77,11 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n ```{eval-rst}\n .. todo::\n \n-    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n+    Update this section as it seems out of date.\n+    There is no `Makefile`, so this description makes no sense anymore.\n ```\n \n-Go to your projects folder and download the lastest `plone.api` code:\n+Go to your project\'s folder, and download the latest `plone.api` code:\n \n ```shell\n cd <your_work_folder>\n@@ -100,8 +101,8 @@ Go make some tea while\n - bootstraps `zc.buildout`,\n - fetches all dependencies,\n - builds Plone,\n-- runs all tests and\n-- generates documentation so you can open it locally later on.\n+- runs all tests, and\n+- generates documentation so that you can open it locally later on.\n \n Other commands that you may want to run:\n \n@@ -204,7 +205,8 @@ For docstrings in your code, use reStructuredText, as shown in the following exa\n def add(a, b):\n     """Calculate the sum of the two parameters.\n \n-    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n+    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method`\n+    and :attr:`mod.path.MY_CONSTANT` for more details.\n \n     :param a: The first operand.\n     :type a: :class:`mod.path.A`\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:40:51-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/865eb1f903791e6fcdfa0e816cd96d0c2cc66ce3

Developers should use Python 3.9 (maybe 3.10?), but definitely not 2.7

Files changed:
M docs/contribute/develop.md

b"diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex bd082a05..434d068a 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -29,7 +29,7 @@ First let's look at 'system' libraries and applications that are normally instal\n - `GNU make` - The fundamental build-control tool.\n - `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n - `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 2.7` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n+- `Python 3.9` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n \n ### Python tools\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:44:44-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/cb5b4914baab2c33b091d4b0573a031d4ef15325

These are paragraphs, nothing special about them, just because they are the first two on the page

Files changed:
M docs/index.md

b'diff --git a/docs/index.md b/docs/index.md\nindex da668387..f55a05a0 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -1,9 +1,9 @@\n # `plone.api`\n \n-> The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n->\n-> It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-> Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n+\n+It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+Recipes try to assume the user does not have extensive knowledge about Plone internals.\n \n The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access.\n As the underlying code improves, some API methods may be deprecated and the documentation\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-08T04:53:59-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/73c395c82667e8dc311e56c5842b32d5879d01d8

Add change log entry

Files changed:
A news/476.bugfix

b'diff --git a/news/476.bugfix b/news/476.bugfix\nnew file mode 100644\nindex 00000000..6c31a4be\n--- /dev/null\n+++ b/news/476.bugfix\n@@ -0,0 +1 @@\n+Clean up docs from review of #469 [stevepiercy]\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-09T05:51:13-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/808ffe195621e27ccf2feff03f2f478e9096c5b9

Restore doctests and symlinks

Files changed:
A src/plone/api/tests/doctests/about.md
A src/plone/api/tests/doctests/content.md
A src/plone/api/tests/doctests/group.md
A src/plone/api/tests/doctests/portal.md
A src/plone/api/tests/doctests/user.md
M docs/about.md
M docs/content.md
M docs/group.md
M docs/portal.md
M docs/user.md
D src/plone/api/tests/doctests/about.rst
D src/plone/api/tests/doctests/content.rst
D src/plone/api/tests/doctests/env.rst
D src/plone/api/tests/doctests/group.rst
D src/plone/api/tests/doctests/portal.rst
D src/plone/api/tests/doctests/user.rst

b'diff --git a/docs/about.md b/docs/about.md\nindex cfeaf3a2..2fe67947 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -58,15 +58,17 @@ For example:\n {ref}`chapter-env`.\n In general, importing and using an API looks something like this:\n \n-% invisible-code-block: python\n-%\n-% from plone import api\n-% from plone.api.exc import InvalidParameterError\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = True\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone import api\n+    from plone.api.exc import InvalidParameterError\n+    try:\n+        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+    except InvalidParameterError:\n+        portal = api.portal.get()\n+        portal.portal_properties.site_properties.use_email_as_login = True\n+```\n \n ```python\n from plone import api\n@@ -76,11 +78,13 @@ catalog = api.portal.get_tool(name="portal_catalog")\n user = api.user.create(email=\'alice@plone.org\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n-% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n-% self.assertEqual(user.__class__.__name__, \'MemberData\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n+    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+    self.assertEqual(user.__class__.__name__, \'MemberData\')\n+```\n \n Always import the top-level package\n (`from plone import api`)\ndiff --git a/docs/content.md b/docs/content.md\nindex d5a505a9..aef81aa7 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -54,20 +54,22 @@ plone (portal root)\n     `-- sprint\n ```\n \n-% invisible-code-block: python\n-%\n-% portal = api.portal.get()\n-% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n-% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-% about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n-% events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n-%\n-% api.content.create(container=about, type=\'Document\', id=\'team\')\n-% api.content.create(container=about, type=\'Document\', id=\'contact\')\n-%\n-% api.content.create(container=events, type=\'Event\', id=\'training\')\n-% api.content.create(container=events, type=\'Event\', id=\'conference\')\n-% api.content.create(container=events, type=\'Event\', id=\'sprint\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    portal = api.portal.get()\n+    image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+    blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+    about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n+    events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n+\n+    api.content.create(container=about, type=\'Document\', id=\'team\')\n+    api.content.create(container=about, type=\'Document\', id=\'contact\')\n+\n+    api.content.create(container=events, type=\'Event\', id=\'training\')\n+    api.content.create(container=events, type=\'Event\', id=\'conference\')\n+    api.content.create(container=events, type=\'Event\', id=\'sprint\')\n+```\n \n The following operations will get objects from the stucture above, including using {meth}`api.content.get`.\n \n@@ -95,15 +97,17 @@ team = api.content.get(UID=uid)\n not_found = api.content.get(UID=\'notfound\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(portal)\n-% self.assertTrue(blog)\n-% self.assertTrue(about)\n-% self.assertTrue(conference)\n-% self.assertTrue(sprint)\n-% self.assertTrue(team)\n-% self.assertEquals(not_found, None)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(portal)\n+    self.assertTrue(blog)\n+    self.assertTrue(about)\n+    self.assertTrue(conference)\n+    self.assertTrue(sprint)\n+    self.assertTrue(team)\n+    self.assertEquals(not_found, None)\n+```\n \n (content-find-example)=\n \n@@ -118,9 +122,11 @@ from plone import api\n documents = api.content.find(portal_type=\'Document\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertGreater(len(documents), 0)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertGreater(len(documents), 0)\n+```\n \n Finding all Documents within a context:\n \n@@ -130,9 +136,11 @@ documents = api.content.find(\n     context=api.portal.get(), portal_type=\'Document\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertGreater(len(documents), 0)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertGreater(len(documents), 0)\n+```\n \n Limit search depth:\n \n@@ -141,9 +149,11 @@ from plone import api\n documents = api.content.find(depth=1, portal_type=\'Document\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertGreater(len(documents), 0)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertGreater(len(documents), 0)\n+```\n \n Limit search depth within a context:\n \n@@ -153,9 +163,11 @@ documents = api.content.find(\n     context=api.portal.get(), depth=1, portal_type=\'Document\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertGreater(len(documents), 0)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertGreater(len(documents), 0)\n+```\n \n Search by interface:\n \n@@ -165,9 +177,11 @@ from Products.CMFCore.interfaces import IContentish\n documents = api.content.find(object_provides=IContentish)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertGreater(len(documents), 0)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertGreater(len(documents), 0)\n+```\n \n Combining multiple arguments:\n \n@@ -182,9 +196,11 @@ documents = api.content.find(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertGreater(len(documents), 0)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertGreater(len(documents), 0)\n+```\n \n More information about how to use the catalog may be found in the\n [Plone Documentation](https://docs.plone.org/develop/plone/searching_and_indexing/index.html).\n@@ -216,9 +232,11 @@ contact = portal[\'about\'][\'contact\']\n uuid = api.content.get_uuid(obj=contact)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(isinstance(uuid, str))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(isinstance(uuid, str))\n+```\n \n (content-move-example)=\n \n@@ -235,10 +253,12 @@ contact = portal[\'about\'][\'contact\']\n api.content.move(source=contact, target=portal)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(portal[\'about\'].get(\'contact\'))\n-% self.assertTrue(portal[\'contact\'])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(portal[\'about\'].get(\'contact\'))\n+    self.assertTrue(portal[\'contact\'])\n+```\n \n Actually, `move` behaves like a filesystem move.\n If you pass it an `id` argument, the object will have that new ID in its new home.\n@@ -256,10 +276,12 @@ portal = api.portal.get()\n api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(portal.get(\'blog\'))\n-% self.assertTrue(portal[\'old-blog\'])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(portal.get(\'blog\'))\n+    self.assertTrue(portal[\'old-blog\'])\n+```\n \n (content-copy-example)=\n \n@@ -278,10 +300,12 @@ api.content.copy(source=training, target=portal)\n Note that the new object will have the same ID as the old object (unless otherwise stated).\n This is not a problem, since the new object is in a different container.\n \n-% invisible-code-block: python\n-%\n-% assert portal[\'events\'][\'training\'].id == \'training\'\n-% assert portal[\'training\'].id == \'training\'\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    assert portal[\'events\'][\'training\'].id == \'training\'\n+    assert portal[\'training\'].id == \'training\'\n+```\n \n You can also set `target` to source\'s container and set `safe_id=True`.\n This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n@@ -291,10 +315,12 @@ api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n new_training = portal[\'copy_of_training\']\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(portal[\'training\'])  # old object remains\n-% self.assertTrue(portal[\'copy_of_training\'])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(portal[\'training\'])  # old object remains\n+    self.assertTrue(portal[\'copy_of_training\'])\n+```\n \n (content-delete-example)=\n \n@@ -308,16 +334,20 @@ portal = api.portal.get()\n api.content.delete(obj=portal[\'copy_of_training\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(portal.get(\'copy_of_training\'))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(portal.get(\'copy_of_training\'))\n+```\n \n To delete multiple content objects, pass the objects to the {meth}`api.content.delete` method:\n \n-% invisible-code-block: python\n-%\n-% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+```\n \n ```python\n from plone import api\n@@ -326,21 +356,25 @@ data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n api.content.delete(objects=data)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(portal.get(\'copy_of_training\'))\n-% self.assertFalse(portal.events.get(\'copy_of_training\'))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(portal.get(\'copy_of_training\'))\n+    self.assertFalse(portal.events.get(\'copy_of_training\'))\n+```\n \n If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n \n-% invisible-code-block: python\n-%\n-% from plone.app.textfield import RichTextValue\n-% from zope.lifecycleevent import modified\n-% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n-% portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n-% modified(portal[\'about\'][\'team\'])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone.app.textfield import RichTextValue\n+    from zope.lifecycleevent import modified\n+    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+    portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n+    modified(portal[\'about\'][\'team\'])\n+```\n \n ```python\n from plone import api\n@@ -348,9 +382,11 @@ portal = api.portal.get()\n api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertNotIn(\'copy_of_training\', portal.keys())\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertNotIn(\'copy_of_training\', portal.keys())\n+```\n \n (content-manipulation-with-safe-id-option)=\n \n@@ -362,9 +398,11 @@ If another object with the same ID is already present in the target container th\n \n However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n \n-% invisible-code-block: python\n-%\n-% api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n+```\n \n ```python\n api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n@@ -383,9 +421,11 @@ portal = api.portal.get()\n state = api.content.get_state(obj=portal[\'about\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(state, \'private\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(state, \'private\')\n+```\n \n The optional `default` argument is returned if no workflow is defined for the object.\n \n@@ -395,9 +435,11 @@ portal = api.portal.get()\n state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(state, \'Unknown\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(state, \'Unknown\')\n+```\n \n (content-transition-example)=\n \n@@ -411,12 +453,14 @@ portal = api.portal.get()\n api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(\n-%     api.content.get_state(obj=portal[\'about\']),\n-%     \'published\'\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(\n+        api.content.get_state(obj=portal[\'about\']),\n+        \'published\'\n+    )\n+```\n \n If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.\n These arguments can be saved to your transition using custom workflow variables inside the ZMI using an expression such as "python:state_change.kwargs.get(\'comment\', \'\')"\n@@ -427,8 +471,6 @@ portal = api.portal.get()\n api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n ```\n \n-% invisible-code-block: python\n-\n (content-disable-roles-acquisition-example)=\n \n ## Disable local roles acquisition\n@@ -441,10 +483,12 @@ portal = api.portal.get()\n api.content.disable_roles_acquisition(obj=portal[\'about\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-% self.assertTrue(ac_flag)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+    self.assertTrue(ac_flag)\n+```\n \n (content-enable-roles-acquisition-example)=\n \n@@ -458,15 +502,17 @@ portal = api.portal.get()\n api.content.enable_roles_acquisition(obj=portal[\'about\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% # As __ac_local_roles_block__ is None by default, we have to set it,\n-% # before we can test the enabling method.\n-% portal[\'about\'].__ac_local_roles_block__ = 1\n-%\n-% api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-% self.assertFalse(ac_flag)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    # As __ac_local_roles_block__ is None by default, we have to set it,\n+    # before we can test the enabling method.\n+    portal[\'about\'].__ac_local_roles_block__ = 1\n+\n+    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+    self.assertFalse(ac_flag)\n+```\n \n (content-get-view-example)=\n \n@@ -484,9 +530,11 @@ view = api.content.get_view(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(view.__name__, u\'plone\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(view.__name__, u\'plone\')\n+```\n \n ## Further reading\n \ndiff --git a/docs/group.md b/docs/group.md\nindex 24a54458..92f53410 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -18,9 +18,11 @@ from plone import api\n group = api.group.create(groupname=\'staff\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(group.id, \'staff\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(group.id, \'staff\')\n+```\n \n When you create groups, `title`, `description`, `roles` and `groups` are optional.\n \n@@ -36,13 +38,15 @@ group = api.group.create(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(group.id, \'board_members\')\n-% self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n-% self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n-% self.assertTrue(\'Reader\' in group.getRoles())\n-% self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(group.id, \'board_members\')\n+    self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n+    self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n+    self.assertTrue(\'Reader\' in group.getRoles())\n+    self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n+```\n \n (group-get-example)=\n \n@@ -55,9 +59,11 @@ from plone import api\n group = api.group.get(groupname=\'staff\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(group.id, \'staff\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(group.id, \'staff\')\n+```\n \n (group-edit-example)=\n \n@@ -77,18 +83,20 @@ group_tool.editGroup(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% group = api.group.get(groupname=\'staff\')\n-%\n-% title = group.getProperty(\'title\')\n-% description = group.getProperty(\'description\')\n-% roles = group.getRoles()\n-%\n-% self.assertEqual(title, \'Staff\')\n-% self.assertEqual(description, \'Just a description\')\n-% self.assertTrue(\'Editor\' in roles)\n-% self.assertTrue(\'Reader\' in roles)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    group = api.group.get(groupname=\'staff\')\n+\n+    title = group.getProperty(\'title\')\n+    description = group.getProperty(\'description\')\n+    roles = group.getRoles()\n+\n+    self.assertEqual(title, \'Staff\')\n+    self.assertEqual(description, \'Just a description\')\n+    self.assertTrue(\'Editor\' in roles)\n+    self.assertTrue(\'Reader\' in roles)\n+```\n \n (group-get-all-groups-example)=\n \n@@ -101,9 +109,11 @@ from plone import api\n groups = api.group.get_groups()\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(groups[0].id, \'Administrators\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(groups[0].id, \'Administrators\')\n+```\n \n (group-get-users-groups-example)=\n \n@@ -112,11 +122,13 @@ groups = api.group.get_groups()\n Groups may be filtered by member. By passing the `username` parameter,\n {meth}`api.group.get_groups` will return only the groups the user belongs to.\n \n-% invisible-code-block: python\n-%\n-% api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-% api.group.add_user(username=\'jane\', groupname=\'staff\')\n-% api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+    api.group.add_user(username=\'jane\', groupname=\'staff\')\n+    api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n+```\n \n ```python\n from plone import api\n@@ -124,13 +136,15 @@ user = api.user.get(username=\'jane\')\n groups = api.group.get_groups(username=\'jane\')\n ```\n \n-% invisible-code-block: python\n-%\n-% group_list = [g.id for g in groups]\n-% self.assertCountEqual(\n-%     group_list,\n-%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    group_list = [g.id for g in groups]\n+    self.assertCountEqual(\n+        group_list,\n+        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+    )\n+```\n \n You can also pass the user directly to {meth}`api.group.get_groups`:\n \n@@ -138,13 +152,15 @@ You can also pass the user directly to {meth}`api.group.get_groups`:\n > user = api.user.get(username=\'jane\')\n > groups = api.group.get_groups(user=user)\n \n-% invisible-code-block: python\n-%\n-% group_list = [g.id for g in groups]\n-% self.assertCountEqual(\n-%     group_list,\n-%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    group_list = [g.id for g in groups]\n+    self.assertCountEqual(\n+        group_list,\n+        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+    )\n+```\n \n ## Get group members\n \n@@ -155,9 +171,11 @@ from plone import api\n members = api.user.get_users(groupname=\'staff\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(members[0].id, \'jane\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(members[0].id, \'jane\')\n+```\n \n (group-delete-example)=\n \n@@ -171,18 +189,22 @@ api.group.create(groupname=\'unwanted\')\n api.group.delete(groupname=\'unwanted\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+```\n \n ```python\n unwanted = api.group.create(groupname=\'unwanted\')\n api.group.delete(group=unwanted)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+```\n \n (group-add-user-example)=\n \n@@ -198,11 +220,13 @@ api.user.create(email=\'bob@plone.org\', username=\'bob\')\n api.group.add_user(groupname=\'staff\', username=\'bob\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(\n-%     \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(\n+        \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n+    )\n+```\n \n (group-remove-user-example)=\n \n@@ -216,9 +240,11 @@ from plone import api\n api.group.remove_user(groupname=\'staff\', username=\'bob\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n+```\n \n (group-get-roles-example)=\n \n@@ -232,10 +258,12 @@ from plone import api\n roles = api.group.get_roles(groupname=\'staff\')\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```\n \n If you pass in a content object, it will return the local roles of the group in that particular context.\n \n@@ -251,9 +279,11 @@ folder = api.content.create(\n roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```\n \n If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n \n@@ -265,10 +295,12 @@ roles = api.group.get_roles(\n     groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_OBJ_ROLES = [\'Contributor\']\n-% self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_OBJ_ROLES = [\'Contributor\']\n+    self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n+```\n \n (group-grant-roles-example)=\n \n@@ -285,11 +317,13 @@ api.group.grant_roles(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n-% roles = api.group.get_roles(groupname=\'staff\')\n-% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n+    roles = api.group.get_roles(groupname=\'staff\')\n+    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```\n \n If you pass in a content object, roles will be assigned in that particular context.\n \n@@ -302,13 +336,15 @@ api.group.grant_roles(\n     groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n-% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-% self.assertEqual(set([\'Contributor\']), set(roles))\n-% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n-% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n+    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+    self.assertEqual(set([\'Contributor\']), set(roles))\n+    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n+    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+```\n \n (group-revoke-roles-example)=\n \n@@ -322,19 +358,23 @@ api.group.revoke_roles(\n     groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-% roles = api.group.get_roles(groupname=\'staff\')\n-% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+    roles = api.group.get_roles(groupname=\'staff\')\n+    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```\n \n If you pass in a content object, it will revoke roles granted in that particular context.\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n-% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-% self.assertEqual([\'Contributor\'], roles)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n+    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+    self.assertEqual([\'Contributor\'], roles)\n+```\n \n ```python\n from plone import api\n@@ -342,11 +382,13 @@ api.group.revoke_roles(\n     groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_CONTEXT_ROLES = []\n-% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_CONTEXT_ROLES = []\n+    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+```\n \n ## Further reading\n \ndiff --git a/docs/portal.md b/docs/portal.md\nindex 33138c10..9b570cf1 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -18,10 +18,12 @@ from plone import api\n portal = api.portal.get()\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n-% self.assertEqual(portal.getId(), \'plone\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n+    self.assertEqual(portal.getId(), \'plone\')\n+```\n \n (portal-get-navigation-root-example)=\n \n@@ -34,33 +36,37 @@ You do this with {meth}`api.portal.get_navigation_root()`.\n \n Assuming there is a document `english_page` in a folder `en`, which is the navigation root:\n \n-% invisible-code-block: python\n-%\n-% from plone import api\n-% from plone.app.layout.navigation.interfaces import INavigationRoot\n-% from zope.interface import alsoProvides\n-%\n-% portal = api.portal.get()\n-% english_folder = api.content.create(\n-%     type=\'Folder\',\n-%     title=\'en\',\n-%     container=portal,\n-% )\n-% alsoProvides(english_folder, INavigationRoot)\n-% english_page = api.content.create(\n-%     type=\'Document\',\n-%     title=\'English Page\',\n-%     container=english_folder,\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone import api\n+    from plone.app.layout.navigation.interfaces import INavigationRoot\n+    from zope.interface import alsoProvides\n+\n+    portal = api.portal.get()\n+    english_folder = api.content.create(\n+        type=\'Folder\',\n+        title=\'en\',\n+        container=portal,\n+    )\n+    alsoProvides(english_folder, INavigationRoot)\n+    english_page = api.content.create(\n+        type=\'Document\',\n+        title=\'English Page\',\n+        container=english_folder,\n+    )\n+```\n \n ```python\n from plone import api\n nav_root = api.portal.get_navigation_root(english_page)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(nav_root.id, \'en\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(nav_root.id, \'en\')\n+```\n \n returns the folder `en`. If the folder `en` is not a navigation root it would return the portal.\n \n@@ -73,9 +79,11 @@ from plone import api\n url = api.portal.get().absolute_url()\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(url, \'http://nohost/plone\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(url, \'http://nohost/plone\')\n+```\n \n (portal-get-tool-example)=\n \n@@ -88,9 +96,11 @@ from plone import api\n catalog = api.portal.get_tool(name=\'portal_catalog\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+```\n \n (portal-get-localized-time-example)=\n \n@@ -105,10 +115,12 @@ today = DateTime()\n localized = api.portal.get_localized_time(datetime=today)\n ```\n \n-% invisible-code-block: python\n-%\n-% # assert that the result is in fact a datetime\n-% self.assertEqual(DateTime(localized).__class__, DateTime)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    # assert that the result is in fact a datetime\n+    self.assertEqual(DateTime(localized).__class__, DateTime)\n+```\n \n (portal-get-default-language-example)=\n \n@@ -121,10 +133,12 @@ from plone import api\n lang = api.portal.get_default_language()\n ```\n \n-% invisible-code-block: python\n-%\n-% # assert that the result is \'en\'\n-% self.assertEqual(lang, \'en\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    # assert that the result is \'en\'\n+    self.assertEqual(lang, \'en\')\n+```\n \n (portal-get-current-language-example)=\n \n@@ -137,10 +151,12 @@ from plone import api\n lang = api.portal.get_current_language()\n ```\n \n-% invisible-code-block: python\n-%\n-% # assert that the result is \'en\'\n-% self.assertEqual(lang, \'en\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    # assert that the result is \'en\'\n+    self.assertEqual(lang, \'en\')\n+```\n \n (portal-translate-example)=\n \n@@ -153,10 +169,12 @@ from plone import api\n msg = api.portal.translate(\'Edited\', lang=\'es\')\n ```\n \n-% invisible-code-block: python\n-%\n-% # assert that the translation is correct\n-% self.assertEqual(msg, u\'Editado\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    # assert that the translation is correct\n+    self.assertEqual(msg, u\'Editado\')\n+```\n \n (portal-send-email-example)=\n \n@@ -164,24 +182,26 @@ msg = api.portal.translate(\'Edited\', lang=\'es\')\n \n To send an e-mail use {meth}`api.portal.send_email`:\n \n-% invisible-code-block: python\n-%\n-% # Mock the mail host so we can test sending the email\n-% from plone import api\n-% from Products.CMFPlone.tests.utils import MockMailHost\n-% from Products.CMFPlone.utils import getToolByName\n-% from Products.MailHost.interfaces import IMailHost\n-% api.portal.PRINTINGMAILHOST_ENABLED = True\n-%\n-% mockmailhost = MockMailHost(\'MailHost\')\n-% if not hasattr(mockmailhost, \'smtp_host\'):\n-%     mockmailhost.smtp_host = \'localhost\'\n-% portal = api.portal.get()\n-% portal.MailHost = mockmailhost\n-% sm = portal.getSiteManager()\n-% sm.registerUtility(component=mockmailhost, provided=IMailHost)\n-% mailhost = getToolByName(portal, \'MailHost\')\n-% mailhost.reset()\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    # Mock the mail host so we can test sending the email\n+    from plone import api\n+    from Products.CMFPlone.tests.utils import MockMailHost\n+    from Products.CMFPlone.utils import getToolByName\n+    from Products.MailHost.interfaces import IMailHost\n+    api.portal.PRINTINGMAILHOST_ENABLED = True\n+\n+    mockmailhost = MockMailHost(\'MailHost\')\n+    if not hasattr(mockmailhost, \'smtp_host\'):\n+        mockmailhost.smtp_host = \'localhost\'\n+    portal = api.portal.get()\n+    portal.MailHost = mockmailhost\n+    sm = portal.getSiteManager()\n+    sm.registerUtility(component=mockmailhost, provided=IMailHost)\n+    mailhost = getToolByName(portal, \'MailHost\')\n+    mailhost.reset()\n+```\n \n ```python\n from plone import api\n@@ -193,21 +213,23 @@ api.portal.send_email(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(len(mailhost.messages), 1)\n-%\n-% try:\n-%     # Python 3\n-%     from email import message_from_bytes\n-% except ImportError:\n-%     # Python 2\n-%     from email import message_from_string as message_from_bytes\n-% msg = message_from_bytes(mailhost.messages[0])\n-% self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-% self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-% self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-% self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(len(mailhost.messages), 1)\n+\n+    try:\n+        # Python 3\n+        from email import message_from_bytes\n+    except ImportError:\n+        # Python 2\n+        from email import message_from_string as message_from_bytes\n+    msg = message_from_bytes(mailhost.messages[0])\n+    self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n+    self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n+    self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n+    self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+```\n \n If you need to add other fields not supported on send_email signature,\n Python\'s standard [email module](https://docs.python.org/2.7/library/email.message.html#email.message.Message) can also be used:\n@@ -236,21 +258,23 @@ api.portal.send_email(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(len(mailhost.messages), 2)\n-%\n-% msg = message_from_bytes(mailhost.messages[1])\n-% payloads = msg.get_payload()\n-% self.assertEqual(len(payloads), 2)\n-% self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n-% self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n-% self.assertIn(\n-%     \'attachment; filename="report.xml\',\n-%     payloads[1][\'Content-Disposition\']\n-% )\n-% api.portal.PRINTINGMAILHOST_ENABLED = False\n-% mailhost.reset()\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(len(mailhost.messages), 2)\n+\n+    msg = message_from_bytes(mailhost.messages[1])\n+    payloads = msg.get_payload()\n+    self.assertEqual(len(payloads), 2)\n+    self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n+    self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n+    self.assertIn(\n+        \'attachment; filename="report.xml\',\n+        payloads[1][\'Content-Disposition\']\n+    )\n+    api.portal.PRINTINGMAILHOST_ENABLED = False\n+    mailhost.reset()\n+```\n \n (portal-show-message-example)=\n \n@@ -263,13 +287,15 @@ from plone import api\n api.portal.show_message(message=\'Blueberries!\', request=request)\n ```\n \n-% invisible-code-block: python\n-%\n-% from Products.statusmessages.interfaces import IStatusMessage\n-% messages = IStatusMessage(request)\n-% show = messages.show()\n-% self.assertEqual(len(show), 1)\n-% self.assertTrue(\'Blueberries!\' in show[0].message)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from Products.statusmessages.interfaces import IStatusMessage\n+    messages = IStatusMessage(request)\n+    show = messages.show()\n+    self.assertEqual(len(show), 1)\n+    self.assertTrue(\'Blueberries!\' in show[0].message)\n+```\n \n (portal-get-registry-record-example)=\n \n@@ -278,50 +304,58 @@ api.portal.show_message(message=\'Blueberries!\', request=request)\n Plone comes with a package `plone.app.registry` that provides a common way to store configuration and settings.\n {meth}`api.portal.get_registry_record` provides an easy way to access these.\n \n-% invisible-code-block: python\n-%\n-% from plone.registry.interfaces import IRegistry\n-% from plone.registry.record import Record\n-% from plone.registry import field\n-% from zope.component import getUtility\n-% registry = getUtility(IRegistry)\n-% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-%         title=u"Foo"))\n-% registry[\'my.package.someoption\'] = True\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone.registry.interfaces import IRegistry\n+    from plone.registry.record import Record\n+    from plone.registry import field\n+    from zope.component import getUtility\n+    registry = getUtility(IRegistry)\n+    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+            title=u"Foo"))\n+    registry[\'my.package.someoption\'] = True\n+```\n \n ```python\n from plone import api\n api.portal.get_registry_record(\'my.package.someoption\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n+```\n \n One common pattern when using registry records is to define an interface with all the settings.\n {meth}`api.portal.get_registry_record` also allows you to use this pattern.\n \n-% invisible-code-block: python\n-%\n-% from plone.registry.interfaces import IRegistry\n-% from plone.api.tests.test_portal import IMyRegistrySettings\n-%\n-% registry = getUtility(IRegistry)\n-% registry.registerInterface(IMyRegistrySettings)\n-% records = registry.forInterface(IMyRegistrySettings)\n-% records.field_one = u\'my text\'\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone.registry.interfaces import IRegistry\n+    from plone.api.tests.test_portal import IMyRegistrySettings\n+\n+    registry = getUtility(IRegistry)\n+    registry.registerInterface(IMyRegistrySettings)\n+    records = registry.forInterface(IMyRegistrySettings)\n+    records.field_one = u\'my text\'\n+```\n \n ```python\n from plone import api\n api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(\n-%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-%     u\'my text\'\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(\n+        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+        u\'my text\'\n+    )\n+```\n \n It is possible to provide a default value\n that will be returned by {meth}`api.portal.get_registry_record`\n@@ -333,19 +367,21 @@ api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'b\n api.portal.get_registry_record(\'foo\', default=u\'baz\')\n ```\n \n-% invisible-code-block: python\n-% self.assertEqual(\n-%     api.portal.get_registry_record(\n-%         \'foo\',\n-%         interface=IMyRegistrySettings,\n-%         default=u\'bar\'\n-%     ),\n-%     u\'bar\',\n-% )\n-% self.assertEqual(\n-%     api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n-%     u\'baz\',\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+    self.assertEqual(\n+        api.portal.get_registry_record(\n+            \'foo\',\n+            interface=IMyRegistrySettings,\n+            default=u\'bar\'\n+        ),\n+        u\'bar\',\n+    )\n+    self.assertEqual(\n+        api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n+        u\'baz\',\n+    )\n+```\n \n (portal-set-registry-record-example)=\n \n@@ -353,48 +389,56 @@ api.portal.get_registry_record(\'foo\', default=u\'baz\')\n \n {meth}`api.portal.set_registry_record` provides an easy way to change `plone.app.registry` configuration and settings.\n \n-% invisible-code-block: python\n-%\n-% from plone.registry.interfaces import IRegistry\n-% from plone.registry.record import Record\n-% from plone.registry import field\n-% from zope.component import getUtility\n-% registry = getUtility(IRegistry)\n-% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-%         title=u"Foo"))\n-% registry[\'my.package.someoption\'] = True\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone.registry.interfaces import IRegistry\n+    from plone.registry.record import Record\n+    from plone.registry import field\n+    from zope.component import getUtility\n+    registry = getUtility(IRegistry)\n+    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+            title=u"Foo"))\n+    registry[\'my.package.someoption\'] = True\n+```\n \n ```python\n from plone import api\n api.portal.set_registry_record(\'my.package.someoption\', False)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(registry[\'my.package.someoption\'])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(registry[\'my.package.someoption\'])\n+```\n \n {meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n \n-% invisible-code-block: python\n-%\n-% from plone.registry.interfaces import IRegistry\n-% from plone.api.tests.test_portal import IMyRegistrySettings\n-%\n-% registry = getUtility(IRegistry)\n-% registry.registerInterface(IMyRegistrySettings)\n-% records = registry.forInterface(IMyRegistrySettings)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone.registry.interfaces import IRegistry\n+    from plone.api.tests.test_portal import IMyRegistrySettings\n+\n+    registry = getUtility(IRegistry)\n+    registry.registerInterface(IMyRegistrySettings)\n+    records = registry.forInterface(IMyRegistrySettings)\n+```\n \n ```python\n from plone import api\n api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(\n-%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-%     u\'new value\'\n-% )\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(\n+        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+        u\'new value\'\n+    )\n+```\n \n ## Further reading\n \ndiff --git a/docs/user.md b/docs/user.md\nindex 6cb60ff4..eec45811 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -14,44 +14,52 @@\n To create a new user, use {meth}`api.user.create`.\n If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n \n-% invisible-code-block: python\n-%\n-% from plone import api\n-% from plone.api.exc import InvalidParameterError\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = True\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    from plone import api\n+    from plone.api.exc import InvalidParameterError\n+    try:\n+        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+    except InvalidParameterError:\n+        portal = api.portal.get()\n+        portal.portal_properties.site_properties.use_email_as_login = True\n+```\n \n ```python\n from plone import api\n user = api.user.create(email=\'alice@plone.org\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(user.id, \'alice@plone.org\')\n-% self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(user.id, \'alice@plone.org\')\n+    self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n+```\n \n Otherwise, you also need to pass in the username of the new user.\n \n-% invisible-code-block: python\n-%\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = False\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    try:\n+        api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n+    except InvalidParameterError:\n+        portal = api.portal.get()\n+        portal.portal_properties.site_properties.use_email_as_login = False\n+```\n \n ```python\n user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(user.id, \'jane\')\n-% self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(user.id, \'jane\')\n+    self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n+```\n \n To set user properties when creating a new user, pass in a properties dict.\n \n@@ -67,10 +75,12 @@ user = api.user.create(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n-% self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n+    self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n+```\n \n Besides user properties you can also specify a password for the new user.\n Otherwise a random 8-character alphanumeric password will be generated.\n@@ -94,9 +104,11 @@ from plone import api\n user = api.user.get(username=\'bob\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(user.id, \'bob\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(user.id, \'bob\')\n+```\n \n ## User properties\n \n@@ -110,9 +122,11 @@ user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n location = user.getProperty(\'location\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(location, \'Neverland\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(location, \'Neverland\')\n+```\n \n (user-get-current-example)=\n \n@@ -125,9 +139,11 @@ from plone import api\n current = api.user.get_current()\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(current.id, \'test_user_1_\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(current.id, \'test_user_1_\')\n+```\n \n (user-is-anonymous-example)=\n \n@@ -143,9 +159,11 @@ if not api.user.is_anonymous():\n trigger = True\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(trigger)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(trigger)\n+```\n \n (user-get-all-users-example)=\n \n@@ -158,9 +176,11 @@ from plone import api\n users = api.user.get_users()\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n+```\n \n (user-get-groups-users-example)=\n \n@@ -168,19 +188,23 @@ users = api.user.get_users()\n \n If you set the `groupname` parameter, then {meth}`api.user.get_users` will return only users that are members of this group.\n \n-% invisible-code-block: python\n-%\n-% api.group.create(groupname=\'staff\')\n-% api.group.add_user(username=\'jane\', groupname=\'staff\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    api.group.create(groupname=\'staff\')\n+    api.group.add_user(username=\'jane\', groupname=\'staff\')\n+```\n \n ```python\n from plone import api\n users = api.user.get_users(groupname=\'staff\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(users[0].id, \'jane\')\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(users[0].id, \'jane\')\n+```\n \n (user-delete-example)=\n \n@@ -194,18 +218,22 @@ api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n api.user.delete(username=\'unwanted\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+```\n \n ```python\n unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n api.user.delete(user=unwanted)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+```\n \n (user-get-roles-example)=\n \n@@ -219,9 +247,11 @@ from plone import api\n roles = api.user.get_roles(username=\'jane\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+```\n \n If you pass in a content object, it will return local roles of the user in that particular context.\n \n@@ -232,9 +262,11 @@ blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'M\n roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+```\n \n (user-get-permissions-example)=\n \n@@ -249,18 +281,20 @@ mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n permissions = api.user.get_permissions(username=\'mike\')\n ```\n \n-% invisible-code-block: python\n-%\n-% PERMISSIONS = {\n-%     \'View\': True,\n-%     \'Manage portal\': False,\n-%     \'Modify portal content\': False,\n-%     \'Access contents information\': True,\n-% }\n-%\n-% for k, v in PERMISSIONS.items():\n-%     self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n-%     self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    PERMISSIONS = {\n+        \'View\': True,\n+        \'Manage portal\': False,\n+        \'Modify portal content\': False,\n+        \'Access contents information\': True,\n+    }\n+\n+    for k, v in PERMISSIONS.items():\n+        self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n+        self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n+```\n \n If you pass in a content object, it will return local permissions of the user in that particular context.\n \n@@ -271,18 +305,20 @@ folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', ti\n permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% PERMISSIONS = {\n-%     \'View\': False,\n-%     \'Manage portal\': False,\n-%     \'Modify portal content\': False,\n-%     \'Access contents information\': False,\n-% }\n-%\n-% for k, v in PERMISSIONS.items():\n-%     self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n-%     self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    PERMISSIONS = {\n+        \'View\': False,\n+        \'Manage portal\': False,\n+        \'Modify portal content\': False,\n+        \'Access contents information\': False,\n+    }\n+\n+    for k, v in PERMISSIONS.items():\n+        self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n+        self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n+```\n \n (user-has-permission-example)=\n \n@@ -297,9 +333,11 @@ adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n can_view = api.user.has_permission(\'View\', username=\'adam\')\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertTrue(can_view)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertTrue(can_view)\n+```\n \n If you pass in a content object, it will check the permission in that particular context.\n \n@@ -310,9 +348,11 @@ folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', tit\n can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n ```\n \n-% invisible-code-block: python\n-%\n-% self.assertFalse(can_view)\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    self.assertFalse(can_view)\n+```\n \n (user-grant-roles-example)=\n \n@@ -327,11 +367,13 @@ api.user.grant_roles(username=\'jane\',\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n-% roles = api.user.get_roles(username=\'jane\')\n-% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n+    roles = api.user.get_roles(username=\'jane\')\n+    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```\n \n If you pass a content object or folder,\n the roles are granted only on that context and not site-wide.\n@@ -346,13 +388,15 @@ api.user.grant_roles(username=\'jane\',\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n-% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n-% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n-% roles = api.user.get_roles(username=\'jane\')\n-% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n+    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n+    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+    roles = api.user.get_roles(username=\'jane\')\n+    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```\n \n (user-revoke-roles-example)=\n \n@@ -365,11 +409,13 @@ from plone import api\n api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n-% roles = api.user.get_roles(username=\'jane\')\n-% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n+    roles = api.user.get_roles(username=\'jane\')\n+    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```\n \n If you pass a context object the local roles for that context will be removed.\n \n@@ -393,11 +439,13 @@ api.user.revoke_roles(\n )\n ```\n \n-% invisible-code-block: python\n-%\n-% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n-% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n-% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+```{eval-rst}\n+.. invisible-code-block:: python\n+\n+    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n+    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n+    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+```\n \n ## Further reading\n \ndiff --git a/src/plone/api/tests/doctests/about.md b/src/plone/api/tests/doctests/about.md\nnew file mode 120000\nindex 00000000..c281d2be\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/about.md\n@@ -0,0 +1 @@\n+../../../../../docs/about.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/about.rst b/src/plone/api/tests/doctests/about.rst\ndeleted file mode 120000\nindex 8b310142..00000000\n--- a/src/plone/api/tests/doctests/about.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/about.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/content.md b/src/plone/api/tests/doctests/content.md\nnew file mode 120000\nindex 00000000..3834f680\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/content.md\n@@ -0,0 +1 @@\n+../../../../../docs/content.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/content.rst b/src/plone/api/tests/doctests/content.rst\ndeleted file mode 120000\nindex 6a91e4b9..00000000\n--- a/src/plone/api/tests/doctests/content.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/content.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/env.rst b/src/plone/api/tests/doctests/env.rst\ndeleted file mode 120000\nindex 20e2aafc..00000000\n--- a/src/plone/api/tests/doctests/env.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/env.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/group.md b/src/plone/api/tests/doctests/group.md\nnew file mode 120000\nindex 00000000..72c98eca\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/group.md\n@@ -0,0 +1 @@\n+../../../../../docs/group.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/group.rst b/src/plone/api/tests/doctests/group.rst\ndeleted file mode 120000\nindex 3f6065d4..00000000\n--- a/src/plone/api/tests/doctests/group.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/group.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/portal.md b/src/plone/api/tests/doctests/portal.md\nnew file mode 120000\nindex 00000000..44a98307\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/portal.md\n@@ -0,0 +1 @@\n+../../../../../docs/portal.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/portal.rst b/src/plone/api/tests/doctests/portal.rst\ndeleted file mode 120000\nindex 6a32aa04..00000000\n--- a/src/plone/api/tests/doctests/portal.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/portal.rst\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/user.md b/src/plone/api/tests/doctests/user.md\nnew file mode 120000\nindex 00000000..9dbad016\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/user.md\n@@ -0,0 +1 @@\n+../../../../../docs/user.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/user.rst b/src/plone/api/tests/doctests/user.rst\ndeleted file mode 120000\nindex 00dadfa3..00000000\n--- a/src/plone/api/tests/doctests/user.rst\n+++ /dev/null\n@@ -1 +0,0 @@\n-../../../../../docs/user.rst\n\\ No newline at end of file\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-09T05:53:17-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/b9c4fe7ee82b350da0c9b014dee228e995e7f5b9

Fix note syntax and grammar

Files changed:
M docs/contribute/develop.md

b"diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 434d068a..51dcb392 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -3,10 +3,12 @@\n This section is meant for contributors to the `plone.api` project.\n Its purpose is to guide them through the steps needed to start contributing.\n \n-% note ``` This HowTo is written for Linux and OS X users.\n-% If you're are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n-% Alternatively, you can browse Plone's documentation on how to get Plone development environment up and running on Windows.\n-% Plone does run on Windows but it's not completely trivial to set it up.\n+```{note}\n+This HowTo is written for Linux and OS X users.\n+If you are running Windows, we suggest either using VMWare or a similar virtualization tool to install Ubuntu Linux on a virtual machine, or installing Ubuntu Linux as a secondary operating system on your machine.\n+Alternatively, you can browse Plone's documentation on how to get Plone development environment up and running on Windows.\n+Plone does run on Windows, but it's not completely trivial to set it up.\n+```\n \n ## Locations of information and tools\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-10T03:05:19-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/78e912dfd00b1a5af9f11beaf71be2fb3f08a5ae

Allow docs to build in `documentation` and doctests to run in `plone.api`

Files changed:
M docs/about.md
M docs/conf.py
M docs/content.md
M docs/group.md
M docs/portal.md
M docs/user.md

b'diff --git a/docs/about.md b/docs/about.md\nindex 2fe67947..ba7fd151 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -59,7 +59,8 @@ For example:\n In general, importing and using an API looks something like this:\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone import api\n     from plone.api.exc import InvalidParameterError\n@@ -79,7 +80,8 @@ user = api.user.create(email=\'alice@plone.org\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n     self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\ndiff --git a/docs/conf.py b/docs/conf.py\nindex e0382f1b..f5aff07a 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -20,6 +20,7 @@\n     \'sphinx.ext.autodoc\',\n     \'sphinx.ext.viewcode\',\n     \'sphinx.ext.autosummary\',\n+    "sphinx.ext.ifconfig",\n     "myst_parser",\n     "sphinx.ext.todo",\n ]\n@@ -39,6 +40,10 @@\n ), ]\n \n \n+def setup(app):\n+    app.add_config_value("plone_api_doctests", "", True)\n+\n+\n class Mock:\n     def __init__(self, *args, **kwargs):\n         pass\ndiff --git a/docs/content.md b/docs/content.md\nindex aef81aa7..c855faff 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -55,7 +55,8 @@ plone (portal root)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     portal = api.portal.get()\n     image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n@@ -98,7 +99,8 @@ not_found = api.content.get(UID=\'notfound\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(portal)\n     self.assertTrue(blog)\n@@ -123,7 +125,8 @@ documents = api.content.find(portal_type=\'Document\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -137,7 +140,8 @@ documents = api.content.find(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -150,7 +154,8 @@ documents = api.content.find(depth=1, portal_type=\'Document\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -164,7 +169,8 @@ documents = api.content.find(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -178,7 +184,8 @@ documents = api.content.find(object_provides=IContentish)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -197,7 +204,8 @@ documents = api.content.find(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -233,7 +241,8 @@ uuid = api.content.get_uuid(obj=contact)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(isinstance(uuid, str))\n ```\n@@ -254,7 +263,8 @@ api.content.move(source=contact, target=portal)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(portal[\'about\'].get(\'contact\'))\n     self.assertTrue(portal[\'contact\'])\n@@ -277,7 +287,8 @@ api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(portal.get(\'blog\'))\n     self.assertTrue(portal[\'old-blog\'])\n@@ -301,7 +312,8 @@ Note that the new object will have the same ID as the old object (unless otherwi\n This is not a problem, since the new object is in a different container.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     assert portal[\'events\'][\'training\'].id == \'training\'\n     assert portal[\'training\'].id == \'training\'\n@@ -316,7 +328,8 @@ new_training = portal[\'copy_of_training\']\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(portal[\'training\'])  # old object remains\n     self.assertTrue(portal[\'copy_of_training\'])\n@@ -335,7 +348,8 @@ api.content.delete(obj=portal[\'copy_of_training\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(portal.get(\'copy_of_training\'))\n ```\n@@ -343,7 +357,8 @@ api.content.delete(obj=portal[\'copy_of_training\'])\n To delete multiple content objects, pass the objects to the {meth}`api.content.delete` method:\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n     api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n@@ -357,7 +372,8 @@ api.content.delete(objects=data)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(portal.get(\'copy_of_training\'))\n     self.assertFalse(portal.events.get(\'copy_of_training\'))\n@@ -366,7 +382,8 @@ api.content.delete(objects=data)\n If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone.app.textfield import RichTextValue\n     from zope.lifecycleevent import modified\n@@ -383,7 +400,8 @@ api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertNotIn(\'copy_of_training\', portal.keys())\n ```\n@@ -399,7 +417,8 @@ If another object with the same ID is already present in the target container th\n However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n ```\n@@ -422,7 +441,8 @@ state = api.content.get_state(obj=portal[\'about\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(state, \'private\')\n ```\n@@ -436,7 +456,8 @@ state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(state, \'Unknown\')\n ```\n@@ -454,7 +475,8 @@ api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(\n         api.content.get_state(obj=portal[\'about\']),\n@@ -484,7 +506,8 @@ api.content.disable_roles_acquisition(obj=portal[\'about\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n     self.assertTrue(ac_flag)\n@@ -503,7 +526,8 @@ api.content.enable_roles_acquisition(obj=portal[\'about\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     # As __ac_local_roles_block__ is None by default, we have to set it,\n     # before we can test the enabling method.\n@@ -531,7 +555,8 @@ view = api.content.get_view(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(view.__name__, u\'plone\')\n ```\ndiff --git a/docs/group.md b/docs/group.md\nindex 92f53410..0502f719 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -19,7 +19,8 @@ group = api.group.create(groupname=\'staff\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(group.id, \'staff\')\n ```\n@@ -39,7 +40,8 @@ group = api.group.create(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(group.id, \'board_members\')\n     self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n@@ -60,7 +62,8 @@ group = api.group.get(groupname=\'staff\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(group.id, \'staff\')\n ```\n@@ -84,7 +87,8 @@ group_tool.editGroup(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     group = api.group.get(groupname=\'staff\')\n \n@@ -110,7 +114,8 @@ groups = api.group.get_groups()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(groups[0].id, \'Administrators\')\n ```\n@@ -123,7 +128,8 @@ Groups may be filtered by member. By passing the `username` parameter,\n {meth}`api.group.get_groups` will return only the groups the user belongs to.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     api.user.create(email=\'jane@plone.org\', username=\'jane\')\n     api.group.add_user(username=\'jane\', groupname=\'staff\')\n@@ -137,7 +143,8 @@ groups = api.group.get_groups(username=\'jane\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n     self.assertCountEqual(\n@@ -153,7 +160,8 @@ You can also pass the user directly to {meth}`api.group.get_groups`:\n > groups = api.group.get_groups(user=user)\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n     self.assertCountEqual(\n@@ -172,7 +180,8 @@ members = api.user.get_users(groupname=\'staff\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(members[0].id, \'jane\')\n ```\n@@ -190,7 +199,8 @@ api.group.delete(groupname=\'unwanted\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n ```\n@@ -201,7 +211,8 @@ api.group.delete(group=unwanted)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n ```\n@@ -221,7 +232,8 @@ api.group.add_user(groupname=\'staff\', username=\'bob\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(\n         \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n@@ -241,7 +253,8 @@ api.group.remove_user(groupname=\'staff\', username=\'bob\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n ```\n@@ -259,7 +272,8 @@ roles = api.group.get_roles(groupname=\'staff\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n     self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n@@ -280,7 +294,8 @@ roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n ```\n@@ -296,7 +311,8 @@ roles = api.group.get_roles(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_OBJ_ROLES = [\'Contributor\']\n     self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n@@ -318,7 +334,8 @@ api.group.grant_roles(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n     roles = api.group.get_roles(groupname=\'staff\')\n@@ -337,7 +354,8 @@ api.group.grant_roles(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n     roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n@@ -359,7 +377,8 @@ api.group.revoke_roles(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n     roles = api.group.get_roles(groupname=\'staff\')\n@@ -369,7 +388,8 @@ api.group.revoke_roles(\n If you pass in a content object, it will revoke roles granted in that particular context.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n     roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n@@ -383,7 +403,8 @@ api.group.revoke_roles(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_CONTEXT_ROLES = []\n     roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\ndiff --git a/docs/portal.md b/docs/portal.md\nindex 9b570cf1..a083b736 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -19,7 +19,8 @@ portal = api.portal.get()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n     self.assertEqual(portal.getId(), \'plone\')\n@@ -37,7 +38,8 @@ You do this with {meth}`api.portal.get_navigation_root()`.\n Assuming there is a document `english_page` in a folder `en`, which is the navigation root:\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone import api\n     from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -63,7 +65,8 @@ nav_root = api.portal.get_navigation_root(english_page)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(nav_root.id, \'en\')\n ```\n@@ -80,7 +83,8 @@ url = api.portal.get().absolute_url()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(url, \'http://nohost/plone\')\n ```\n@@ -97,7 +101,8 @@ catalog = api.portal.get_tool(name=\'portal_catalog\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n ```\n@@ -116,7 +121,8 @@ localized = api.portal.get_localized_time(datetime=today)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     # assert that the result is in fact a datetime\n     self.assertEqual(DateTime(localized).__class__, DateTime)\n@@ -134,7 +140,8 @@ lang = api.portal.get_default_language()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     # assert that the result is \'en\'\n     self.assertEqual(lang, \'en\')\n@@ -152,7 +159,8 @@ lang = api.portal.get_current_language()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     # assert that the result is \'en\'\n     self.assertEqual(lang, \'en\')\n@@ -170,7 +178,8 @@ msg = api.portal.translate(\'Edited\', lang=\'es\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     # assert that the translation is correct\n     self.assertEqual(msg, u\'Editado\')\n@@ -183,7 +192,8 @@ msg = api.portal.translate(\'Edited\', lang=\'es\')\n To send an e-mail use {meth}`api.portal.send_email`:\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     # Mock the mail host so we can test sending the email\n     from plone import api\n@@ -214,7 +224,8 @@ api.portal.send_email(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(len(mailhost.messages), 1)\n \n@@ -259,7 +270,8 @@ api.portal.send_email(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(len(mailhost.messages), 2)\n \n@@ -288,7 +300,8 @@ api.portal.show_message(message=\'Blueberries!\', request=request)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from Products.statusmessages.interfaces import IStatusMessage\n     messages = IStatusMessage(request)\n@@ -305,7 +318,8 @@ Plone comes with a package `plone.app.registry` that provides a common way to st\n {meth}`api.portal.get_registry_record` provides an easy way to access these.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.registry.record import Record\n@@ -323,7 +337,8 @@ api.portal.get_registry_record(\'my.package.someoption\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n ```\n@@ -332,7 +347,8 @@ One common pattern when using registry records is to define an interface with al\n {meth}`api.portal.get_registry_record` also allows you to use this pattern.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.api.tests.test_portal import IMyRegistrySettings\n@@ -349,7 +365,8 @@ api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(\n         api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n@@ -368,7 +385,8 @@ api.portal.get_registry_record(\'foo\', default=u\'baz\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n     self.assertEqual(\n         api.portal.get_registry_record(\n             \'foo\',\n@@ -390,7 +408,8 @@ api.portal.get_registry_record(\'foo\', default=u\'baz\')\n {meth}`api.portal.set_registry_record` provides an easy way to change `plone.app.registry` configuration and settings.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.registry.record import Record\n@@ -408,7 +427,8 @@ api.portal.set_registry_record(\'my.package.someoption\', False)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(registry[\'my.package.someoption\'])\n ```\n@@ -416,7 +436,8 @@ api.portal.set_registry_record(\'my.package.someoption\', False)\n {meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.api.tests.test_portal import IMyRegistrySettings\n@@ -432,7 +453,8 @@ api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistryS\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(\n         api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\ndiff --git a/docs/user.md b/docs/user.md\nindex eec45811..a1ebb708 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -15,7 +15,8 @@ To create a new user, use {meth}`api.user.create`.\n If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     from plone import api\n     from plone.api.exc import InvalidParameterError\n@@ -32,7 +33,8 @@ user = api.user.create(email=\'alice@plone.org\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(user.id, \'alice@plone.org\')\n     self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n@@ -41,7 +43,8 @@ user = api.user.create(email=\'alice@plone.org\')\n Otherwise, you also need to pass in the username of the new user.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     try:\n         api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n@@ -55,7 +58,8 @@ user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(user.id, \'jane\')\n     self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n@@ -76,7 +80,8 @@ user = api.user.create(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n     self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n@@ -105,7 +110,8 @@ user = api.user.get(username=\'bob\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(user.id, \'bob\')\n ```\n@@ -123,7 +129,8 @@ location = user.getProperty(\'location\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(location, \'Neverland\')\n ```\n@@ -140,7 +147,8 @@ current = api.user.get_current()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(current.id, \'test_user_1_\')\n ```\n@@ -160,7 +168,8 @@ trigger = True\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(trigger)\n ```\n@@ -177,7 +186,8 @@ users = api.user.get_users()\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n ```\n@@ -189,7 +199,8 @@ users = api.user.get_users()\n If you set the `groupname` parameter, then {meth}`api.user.get_users` will return only users that are members of this group.\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     api.group.create(groupname=\'staff\')\n     api.group.add_user(username=\'jane\', groupname=\'staff\')\n@@ -201,7 +212,8 @@ users = api.user.get_users(groupname=\'staff\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(users[0].id, \'jane\')\n ```\n@@ -219,7 +231,8 @@ api.user.delete(username=\'unwanted\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(api.user.get(username=\'unwanted\'), None)\n ```\n@@ -230,7 +243,8 @@ api.user.delete(user=unwanted)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(api.user.get(username=\'unwanted\'), None)\n ```\n@@ -248,7 +262,8 @@ roles = api.user.get_roles(username=\'jane\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n ```\n@@ -263,7 +278,8 @@ roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n ```\n@@ -282,7 +298,8 @@ permissions = api.user.get_permissions(username=\'mike\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     PERMISSIONS = {\n         \'View\': True,\n@@ -306,7 +323,8 @@ permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     PERMISSIONS = {\n         \'View\': False,\n@@ -334,7 +352,8 @@ can_view = api.user.has_permission(\'View\', username=\'adam\')\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertTrue(can_view)\n ```\n@@ -349,7 +368,8 @@ can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     self.assertFalse(can_view)\n ```\n@@ -368,7 +388,8 @@ api.user.grant_roles(username=\'jane\',\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n     roles = api.user.get_roles(username=\'jane\')\n@@ -389,7 +410,8 @@ api.user.grant_roles(username=\'jane\',\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n     roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n@@ -410,7 +432,8 @@ api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n     roles = api.user.get_roles(username=\'jane\')\n@@ -440,7 +463,8 @@ api.user.revoke_roles(\n ```\n \n ```{eval-rst}\n-.. invisible-code-block:: python\n+.. ifconfig:: plone_api_doctests\n+.. invisible-code-block: python\n \n     EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n     roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-10T03:06:25-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/a1b04df52c84422c340b04d90a609b2482010fe4

Simply MyST syntax for note

Files changed:
M docs/contribute/develop.md

b"diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 51dcb392..7f598e29 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -76,11 +76,9 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n \n ## Creating and using the development environment\n \n-```{eval-rst}\n-.. todo::\n-\n-    Update this section as it seems out of date.\n-    There is no `Makefile`, so this description makes no sense anymore.\n+```{todo}\n+Update this section as it seems out of date.\n+There is no `Makefile`, so this description makes no sense anymore.\n ```\n \n Go to your project's folder, and download the latest `plone.api` code:\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-10T04:32:27-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/f06a4ae53c58cc553e82b12330f86118a68d7abd

This time for sure allow tests to run using MyST syntax

Files changed:
M docs/about.md
M docs/content.md
M docs/group.md
M docs/portal.md
M docs/user.md

b'diff --git a/docs/about.md b/docs/about.md\nindex ba7fd151..1589f8fe 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -59,8 +59,8 @@ For example:\n In general, importing and using an API looks something like this:\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone import api\n     from plone.api.exc import InvalidParameterError\n@@ -71,17 +71,17 @@ In general, importing and using an API looks something like this:\n         portal.portal_properties.site_properties.use_email_as_login = True\n ```\n \n-```python\n-from plone import api\n+```{eval-rst}\n+..  code-block:: python\n \n-portal = api.portal.get()\n-catalog = api.portal.get_tool(name="portal_catalog")\n-user = api.user.create(email=\'alice@plone.org\')\n-```\n+    from plone import api\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+    portal = api.portal.get()\n+    catalog = api.portal.get_tool(name="portal_catalog")\n+    user = api.user.create(email=\'alice@plone.org\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n     self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n@@ -135,7 +135,7 @@ This would be extremely difficult, if not impossible.\n It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated.\n Consider the failure lurking behind test code such as this:\n \n-```\n+```python\n if users[\'bob\'].__class__.__name__ == \'WrappedMemberDataObject\':\n     # do something\n ```\ndiff --git a/docs/content.md b/docs/content.md\nindex c855faff..1b97d815 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -55,9 +55,10 @@ plone (portal root)\n ```\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n+    from plone import api\n     portal = api.portal.get()\n     image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n     blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n@@ -72,35 +73,35 @@ plone (portal root)\n     api.content.create(container=events, type=\'Event\', id=\'sprint\')\n ```\n \n-The following operations will get objects from the stucture above, including using {meth}`api.content.get`.\n+The following operations will get objects from the structure above, including using {meth}`api.content.get`.\n \n-```python\n-# let\'s first get the portal object\n-from plone import api\n-portal = api.portal.get()\n-assert portal.id == \'plone\'\n+```{eval-rst}\n+..  code-block:: python\n+\n+    # let\'s first get the portal object\n+    from plone import api\n+    portal = api.portal.get()\n+    assert portal.id == \'plone\'\n \n-# content can be accessed directly with dict-like access\n-blog = portal[\'blog\']\n+    # content can be accessed directly with dict-like access\n+    blog = portal[\'blog\']\n \n-# another way is to use ``get()`` method and pass it a path\n-about = api.content.get(path=\'/about\')\n+    # another way is to use ``get()`` method and pass it a path\n+    about = api.content.get(path=\'/about\')\n \n-# more examples\n-conference = portal[\'events\'][\'conference\']\n-sprint = api.content.get(path=\'/events/sprint\')\n+    # more examples\n+    conference = portal[\'events\'][\'conference\']\n+    sprint = api.content.get(path=\'/events/sprint\')\n \n-# moreover, you can access content by its UID\n-uid = about[\'team\'].UID()\n-team = api.content.get(UID=uid)\n+    # moreover, you can access content by its UID\n+    uid = about[\'team\'].UID()\n+    team = api.content.get(UID=uid)\n \n-# returns None if UID cannot be found in catalog\n-not_found = api.content.get(UID=\'notfound\')\n-```\n+    # returns None if UID cannot be found in catalog\n+    not_found = api.content.get(UID=\'notfound\')\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(portal)\n     self.assertTrue(blog)\n@@ -119,93 +120,93 @@ You can use the find function to search for content.\n \n Finding all Documents:\n \n-```python\n-from plone import api\n-documents = api.content.find(portal_type=\'Document\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    documents = api.content.find(portal_type=\'Document\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n \n Finding all Documents within a context:\n \n-```python\n-from plone import api\n-documents = api.content.find(\n-    context=api.portal.get(), portal_type=\'Document\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    documents = api.content.find(\n+        context=api.portal.get(), portal_type=\'Document\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n \n Limit search depth:\n \n-```python\n-from plone import api\n-documents = api.content.find(depth=1, portal_type=\'Document\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    documents = api.content.find(depth=1, portal_type=\'Document\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n \n Limit search depth within a context:\n \n-```python\n-from plone import api\n-documents = api.content.find(\n-    context=api.portal.get(), depth=1, portal_type=\'Document\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    documents = api.content.find(\n+        context=api.portal.get(), depth=1, portal_type=\'Document\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n \n Search by interface:\n \n-```python\n-from plone import api\n-from Products.CMFCore.interfaces import IContentish\n-documents = api.content.find(object_provides=IContentish)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    from Products.CMFCore.interfaces import IContentish\n+    documents = api.content.find(object_provides=IContentish)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n \n Combining multiple arguments:\n \n-```python\n-from plone import api\n-from Products.CMFCore.interfaces import IContentish\n-documents = api.content.find(\n-    context=api.portal.get(),\n-    depth=2,\n-    object_provides=IContentish,\n-    SearchableText=\'Team\',\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    from Products.CMFCore.interfaces import IContentish\n+    documents = api.content.find(\n+        context=api.portal.get(),\n+        depth=2,\n+        object_provides=IContentish,\n+        SearchableText=\'Team\',\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertGreater(len(documents), 0)\n ```\n@@ -232,17 +233,17 @@ Plone uses UUIDs for storing references between content and for linking by UUIDs\n To get the UUID of any content object use {meth}`api.content.get_uuid`.\n The following code gets the UUID of the `contact` document.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-contact = portal[\'about\'][\'contact\']\n+```{eval-rst}\n+..  code-block:: python\n \n-uuid = api.content.get_uuid(obj=contact)\n-```\n+    from plone import api\n+    portal = api.portal.get()\n+    contact = portal[\'about\'][\'contact\']\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+    uuid = api.content.get_uuid(obj=contact)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(isinstance(uuid, str))\n ```\n@@ -254,17 +255,17 @@ uuid = api.content.get_uuid(obj=contact)\n To move content around the portal structure defined above use the {meth}`api.content.move` method.\n The code below moves the `contact` item (with all it contains) out of the folder `about` and into the Plone portal root.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-contact = portal[\'about\'][\'contact\']\n+```{eval-rst}\n+..  code-block:: python\n \n-api.content.move(source=contact, target=portal)\n-```\n+    from plone import api\n+    portal = api.portal.get()\n+    contact = portal[\'about\'][\'contact\']\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+    api.content.move(source=contact, target=portal)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(portal[\'about\'].get(\'contact\'))\n     self.assertTrue(portal[\'contact\'])\n@@ -280,15 +281,15 @@ By default it will retain its original ID.\n \n To rename a content object (change its ID), use the {meth}`api.content.rename` method.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(portal.get(\'blog\'))\n     self.assertTrue(portal[\'old-blog\'])\n@@ -300,20 +301,22 @@ api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n \n To copy a content object, use the {meth}`api.content.copy` method.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-training = portal[\'events\'][\'training\']\n+```{eval-rst}\n+..  code-block:: python\n \n-api.content.copy(source=training, target=portal)\n+    from plone import api\n+    portal = api.portal.get()\n+    training = portal[\'events\'][\'training\']\n+\n+    api.content.copy(source=training, target=portal)\n ```\n \n Note that the new object will have the same ID as the old object (unless otherwise stated).\n This is not a problem, since the new object is in a different container.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     assert portal[\'events\'][\'training\'].id == \'training\'\n     assert portal[\'training\'].id == \'training\'\n@@ -322,14 +325,14 @@ This is not a problem, since the new object is in a different container.\n You can also set `target` to source\'s container and set `safe_id=True`.\n This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n \n-```python\n-api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-new_training = portal[\'copy_of_training\']\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+    new_training = portal[\'copy_of_training\']\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(portal[\'training\'])  # old object remains\n     self.assertTrue(portal[\'copy_of_training\'])\n@@ -341,15 +344,15 @@ new_training = portal[\'copy_of_training\']\n \n To delete a content object, pass the object to the {meth}`api.content.delete` method:\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-api.content.delete(obj=portal[\'copy_of_training\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    api.content.delete(obj=portal[\'copy_of_training\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(portal.get(\'copy_of_training\'))\n ```\n@@ -357,23 +360,23 @@ api.content.delete(obj=portal[\'copy_of_training\'])\n To delete multiple content objects, pass the objects to the {meth}`api.content.delete` method:\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n     api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n ```\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n-api.content.delete(objects=data)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n+    api.content.delete(objects=data)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(portal.get(\'copy_of_training\'))\n     self.assertFalse(portal.events.get(\'copy_of_training\'))\n@@ -382,8 +385,8 @@ api.content.delete(objects=data)\n If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone.app.textfield import RichTextValue\n     from zope.lifecycleevent import modified\n@@ -393,15 +396,15 @@ If deleting content would result in broken links you will get a `LinkIntegrityNo\n     modified(portal[\'about\'][\'team\'])\n ```\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertNotIn(\'copy_of_training\', portal.keys())\n ```\n@@ -417,8 +420,8 @@ If another object with the same ID is already present in the target container th\n However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n ```\n@@ -434,30 +437,30 @@ document = portal[\'document-1\']\n \n To find out the current workflow state of your content, use the {meth}`api.content.get_state` method.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-state = api.content.get_state(obj=portal[\'about\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    state = api.content.get_state(obj=portal[\'about\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(state, \'private\')\n ```\n \n The optional `default` argument is returned if no workflow is defined for the object.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(state, \'Unknown\')\n ```\n@@ -468,15 +471,15 @@ state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n \n To transition your content to a new workflow state, use the {meth}`api.content.transition` method.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(\n         api.content.get_state(obj=portal[\'about\']),\n@@ -499,15 +502,15 @@ api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You ha\n \n To disable the acquisition of local roles for an object, use the {meth}`api.content.disable_roles_acquisition` method.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-api.content.disable_roles_acquisition(obj=portal[\'about\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    api.content.disable_roles_acquisition(obj=portal[\'about\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n     self.assertTrue(ac_flag)\n@@ -519,15 +522,15 @@ api.content.disable_roles_acquisition(obj=portal[\'about\'])\n \n To enable the acquisition of local roles for an object, use the {meth}`api.content.enable_roles_acquisition` method.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     # As __ac_local_roles_block__ is None by default, we have to set it,\n     # before we can test the enabling method.\n@@ -544,19 +547,19 @@ api.content.enable_roles_acquisition(obj=portal[\'about\'])\n \n To get a {class}`BrowserView` for your content, use {meth}`api.content.get_view`.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-view = api.content.get_view(\n-    name=\'plone\',\n-    context=portal[\'about\'],\n-    request=request,\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    view = api.content.get_view(\n+        name=\'plone\',\n+        context=portal[\'about\'],\n+        request=request,\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(view.__name__, u\'plone\')\n ```\ndiff --git a/docs/group.md b/docs/group.md\nindex 0502f719..8e44b177 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -13,35 +13,35 @@\n \n To create a new group, use {meth}`api.group.create`.\n \n-```python\n-from plone import api\n-group = api.group.create(groupname=\'staff\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    group = api.group.create(groupname=\'staff\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(group.id, \'staff\')\n ```\n \n When you create groups, `title`, `description`, `roles` and `groups` are optional.\n \n-```python\n-from plone import api\n+```{eval-rst}\n+..  code-block:: python\n+\n+    from plone import api\n \n-group = api.group.create(\n-    groupname=\'board_members\',\n-    title=\'Board members\',\n-    description=\'Just a description\',\n-    roles=[\'Reader\', ],\n-    groups=[\'Site Administrators\', ],\n-)\n-```\n+    group = api.group.create(\n+        groupname=\'board_members\',\n+        title=\'Board members\',\n+        description=\'Just a description\',\n+        roles=[\'Reader\', ],\n+        groups=[\'Site Administrators\', ],\n+    )\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(group.id, \'board_members\')\n     self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n@@ -56,14 +56,14 @@ group = api.group.create(\n \n To get a group by its name, use {meth}`api.group.get`.\n \n-```python\n-from plone import api\n-group = api.group.get(groupname=\'staff\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    group = api.group.get(groupname=\'staff\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(group.id, \'staff\')\n ```\n@@ -75,20 +75,20 @@ group = api.group.get(groupname=\'staff\')\n Groups can be edited by using the `group_tool`.\n In this example, the `title`, `description` and `roles` are updated for the group \'Staff\'.\n \n-```python\n-from plone import api\n-group_tool = api.portal.get_tool(name=\'portal_groups\')\n-group_tool.editGroup(\n-    \'staff\',\n-    roles=[\'Editor\', \'Reader\'],\n-    title=\'Staff\',\n-    description=\'Just a description\',\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    group_tool = api.portal.get_tool(name=\'portal_groups\')\n+    group_tool.editGroup(\n+        \'staff\',\n+        roles=[\'Editor\', \'Reader\'],\n+        title=\'Staff\',\n+        description=\'Just a description\',\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     group = api.group.get(groupname=\'staff\')\n \n@@ -108,14 +108,14 @@ group_tool.editGroup(\n \n You can also get all groups by using {meth}`api.group.get_groups`.\n \n-```python\n-from plone import api\n-groups = api.group.get_groups()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    groups = api.group.get_groups()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(groups[0].id, \'Administrators\')\n ```\n@@ -128,23 +128,23 @@ Groups may be filtered by member. By passing the `username` parameter,\n {meth}`api.group.get_groups` will return only the groups the user belongs to.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     api.user.create(email=\'jane@plone.org\', username=\'jane\')\n     api.group.add_user(username=\'jane\', groupname=\'staff\')\n     api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n ```\n \n-```python\n-from plone import api\n-user = api.user.get(username=\'jane\')\n-groups = api.group.get_groups(username=\'jane\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    user = api.user.get(username=\'jane\')\n+    groups = api.group.get_groups(username=\'jane\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n     self.assertCountEqual(\n@@ -155,13 +155,15 @@ groups = api.group.get_groups(username=\'jane\')\n \n You can also pass the user directly to {meth}`api.group.get_groups`:\n \n-> from plone import api\n-> user = api.user.get(username=\'jane\')\n-> groups = api.group.get_groups(user=user)\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    user = api.user.get(username=\'jane\')\n+    groups = api.group.get_groups(user=user)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     group_list = [g.id for g in groups]\n     self.assertCountEqual(\n@@ -174,14 +176,14 @@ You can also pass the user directly to {meth}`api.group.get_groups`:\n \n Use the {meth}`api.user.get_users` method to get all the users that are members of a group.\n \n-```python\n-from plone import api\n-members = api.user.get_users(groupname=\'staff\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    members = api.user.get_users(groupname=\'staff\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(members[0].id, \'jane\')\n ```\n@@ -192,27 +194,27 @@ members = api.user.get_users(groupname=\'staff\')\n \n To delete a group, use {meth}`api.group.delete` and pass in either the groupname or the group object you want to delete.\n \n-```python\n-from plone import api\n-api.group.create(groupname=\'unwanted\')\n-api.group.delete(groupname=\'unwanted\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n \n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n-```\n+    from plone import api\n+    api.group.create(groupname=\'unwanted\')\n+    api.group.delete(groupname=\'unwanted\')\n \n-```python\n-unwanted = api.group.create(groupname=\'unwanted\')\n-api.group.delete(group=unwanted)\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n+\n+    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n ```\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    unwanted = api.group.create(groupname=\'unwanted\')\n+    api.group.delete(group=unwanted)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n ```\n@@ -224,16 +226,16 @@ api.group.delete(group=unwanted)\n To add a user to a group, use the {meth}`api.group.add_user` method.\n This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group.\n \n-```python\n-from plone import api\n+```{eval-rst}\n+..  code-block:: python\n \n-api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-api.group.add_user(groupname=\'staff\', username=\'bob\')\n-```\n+    from plone import api\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+    api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+    api.group.add_user(groupname=\'staff\', username=\'bob\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(\n         \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n@@ -247,14 +249,14 @@ api.group.add_user(groupname=\'staff\', username=\'bob\')\n To remove a user from a group, use the {meth}`api.group.remove_user` method.\n This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group.\n \n-```python\n-from plone import api\n-api.group.remove_user(groupname=\'staff\', username=\'bob\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.group.remove_user(groupname=\'staff\', username=\'bob\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n ```\n@@ -266,14 +268,14 @@ api.group.remove_user(groupname=\'staff\', username=\'bob\')\n To find the roles assigned to a group, use the {meth}`api.group.get_roles` method.\n By default it returns site-wide roles.\n \n-```python\n-from plone import api\n-roles = api.group.get_roles(groupname=\'staff\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    roles = api.group.get_roles(groupname=\'staff\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n     self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n@@ -281,38 +283,38 @@ roles = api.group.get_roles(groupname=\'staff\')\n \n If you pass in a content object, it will return the local roles of the group in that particular context.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-folder = api.content.create(\n-    container=portal,\n-    type=\'Folder\',\n-    id=\'folder_four\',\n-    title=\'Folder Four\',\n-)\n-roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    folder = api.content.create(\n+        container=portal,\n+        type=\'Folder\',\n+        id=\'folder_four\',\n+        title=\'Folder Four\',\n+    )\n+    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n ```\n \n If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n \n-```python\n-api.group.grant_roles(\n-    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n+```{eval-rst}\n+..  code-block:: python\n \n-roles = api.group.get_roles(\n-    groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n-```\n+    api.group.grant_roles(\n+        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+    roles = api.group.get_roles(\n+        groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_OBJ_ROLES = [\'Contributor\']\n     self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n@@ -325,17 +327,17 @@ roles = api.group.get_roles(\n To grant roles to a group, use the {meth}`api.group.grant_roles` method.\n By default, roles are granted site-wide.\n \n-```python\n-from plone import api\n-api.group.grant_roles(\n-    groupname=\'staff\',\n-    roles=[\'Reviewer, SiteAdministrator\'],\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.group.grant_roles(\n+        groupname=\'staff\',\n+        roles=[\'Reviewer, SiteAdministrator\'],\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n     roles = api.group.get_roles(groupname=\'staff\')\n@@ -344,18 +346,18 @@ api.group.grant_roles(\n \n If you pass in a content object, roles will be assigned in that particular context.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-folder = api.content.create(\n-    container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n-api.group.grant_roles(\n-    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    folder = api.content.create(\n+        container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n+    api.group.grant_roles(\n+        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n     roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n@@ -370,15 +372,14 @@ api.group.grant_roles(\n \n To revoke roles already granted to a group, use the {meth}`api.group.revoke_roles` method.\n \n-```python\n-from plone import api\n-api.group.revoke_roles(\n-    groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+    from plone import api\n+    api.group.revoke_roles(\n+        groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n     roles = api.group.get_roles(groupname=\'staff\')\n@@ -388,23 +389,23 @@ api.group.revoke_roles(\n If you pass in a content object, it will revoke roles granted in that particular context.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n     roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n     self.assertEqual([\'Contributor\'], roles)\n ```\n \n-```python\n-from plone import api\n-api.group.revoke_roles(\n-    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.group.revoke_roles(\n+        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_CONTEXT_ROLES = []\n     roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\ndiff --git a/docs/portal.md b/docs/portal.md\nindex a083b736..7601c153 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -13,14 +13,14 @@\n \n Getting the Plone portal object is easy with {meth}`api.portal.get`.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n     self.assertEqual(portal.getId(), \'plone\')\n@@ -30,16 +30,15 @@ portal = api.portal.get()\n \n ## Get navigation root\n \n-In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object,\n-not the top portal object.\n+In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object, not the top portal object.\n \n You do this with {meth}`api.portal.get_navigation_root()`.\n \n Assuming there is a document `english_page` in a folder `en`, which is the navigation root:\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone import api\n     from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -59,32 +58,31 @@ Assuming there is a document `english_page` in a folder `en`, which is the navig\n     )\n ```\n \n-```python\n-from plone import api\n-nav_root = api.portal.get_navigation_root(english_page)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+    from plone import api\n+    nav_root = api.portal.get_navigation_root(english_page)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(nav_root.id, \'en\')\n ```\n \n-returns the folder `en`. If the folder `en` is not a navigation root it would return the portal.\n+returns the folder `en`. If the folder `en` is not a navigation root, it would return the portal.\n \n ## Get portal url\n \n Since we now have the portal object, it\'s easy to get the portal URL.\n \n-```python\n-from plone import api\n-url = api.portal.get().absolute_url()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    url = api.portal.get().absolute_url()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(url, \'http://nohost/plone\')\n ```\n@@ -95,14 +93,14 @@ url = api.portal.get().absolute_url()\n \n To get a portal tool easily, use {meth}`api.portal.get_tool` and pass in the name of the tool you need.\n \n-```python\n-from plone import api\n-catalog = api.portal.get_tool(name=\'portal_catalog\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    catalog = api.portal.get_tool(name=\'portal_catalog\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n ```\n@@ -113,16 +111,16 @@ catalog = api.portal.get_tool(name=\'portal_catalog\')\n \n To display the date/time in a user-friendly way, localized to the user\'s preferred language, use {meth}`api.portal.get_localized_time`.\n \n-```python\n-from plone import api\n-from DateTime import DateTime\n-today = DateTime()\n-localized = api.portal.get_localized_time(datetime=today)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    from DateTime import DateTime\n+    today = DateTime()\n+    localized = api.portal.get_localized_time(datetime=today)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     # assert that the result is in fact a datetime\n     self.assertEqual(DateTime(localized).__class__, DateTime)\n@@ -134,14 +132,14 @@ localized = api.portal.get_localized_time(datetime=today)\n \n To get the default language, use {meth}`api.portal.get_default_language`.\n \n-```python\n-from plone import api\n-lang = api.portal.get_default_language()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    lang = api.portal.get_default_language()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     # assert that the result is \'en\'\n     self.assertEqual(lang, \'en\')\n@@ -153,14 +151,14 @@ lang = api.portal.get_default_language()\n \n To get the currently negotiated language, use {meth}`api.portal.get_current_language`.\n \n-```python\n-from plone import api\n-lang = api.portal.get_current_language()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    lang = api.portal.get_current_language()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     # assert that the result is \'en\'\n     self.assertEqual(lang, \'en\')\n@@ -172,14 +170,14 @@ lang = api.portal.get_current_language()\n \n To translate a message in a given language, use {meth}`api.portal.translate`.\n \n-```python\n-from plone import api\n-msg = api.portal.translate(\'Edited\', lang=\'es\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    msg = api.portal.translate(\'Edited\', lang=\'es\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     # assert that the translation is correct\n     self.assertEqual(msg, u\'Editado\')\n@@ -192,8 +190,8 @@ msg = api.portal.translate(\'Edited\', lang=\'es\')\n To send an e-mail use {meth}`api.portal.send_email`:\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     # Mock the mail host so we can test sending the email\n     from plone import api\n@@ -213,19 +211,19 @@ To send an e-mail use {meth}`api.portal.send_email`:\n     mailhost.reset()\n ```\n \n-```python\n-from plone import api\n-api.portal.send_email(\n-    recipient="bob@plone.org",\n-    sender="noreply@plone.org",\n-    subject="Trappist",\n-    body="One for you Bob!",\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.portal.send_email(\n+        recipient="bob@plone.org",\n+        sender="noreply@plone.org",\n+        subject="Trappist",\n+        body="One for you Bob!",\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(len(mailhost.messages), 1)\n \n@@ -245,33 +243,32 @@ api.portal.send_email(\n If you need to add other fields not supported on send_email signature,\n Python\'s standard [email module](https://docs.python.org/2.7/library/email.message.html#email.message.Message) can also be used:\n \n-```python\n-from email.mime.multipart import MIMEMultipart\n-from email.mime.text import MIMEText\n+```{eval-rst}\n+..  code-block:: python\n+    from email.mime.multipart import MIMEMultipart\n+    from email.mime.text import MIMEText\n \n-message = MIMEMultipart()\n-message.attach(MIMEText("One for you Bar!"))\n+    message = MIMEMultipart()\n+    message.attach(MIMEText("One for you Bar!"))\n \n-part = MIMEText(\'<xml></xml>\', \'xml\')\n-part.add_header(\n-    \'Content-Disposition\',\n-    \'attachment; filename="report.xml"\'\n-)\n-message.attach(part)\n+    part = MIMEText(\'<xml></xml>\', \'xml\')\n+    part.add_header(\n+        \'Content-Disposition\',\n+        \'attachment; filename="report.xml"\'\n+    )\n+    message.attach(part)\n \n-message[\'Reply-To\'] = "community@plone.org"\n+    message[\'Reply-To\'] = "community@plone.org"\n \n-api.portal.send_email(\n-    recipient="bob@plone.org",\n-    sender="noreply@plone.org",\n-    subject="Trappist",\n-    body=message,\n-)\n-```\n+    api.portal.send_email(\n+        recipient="bob@plone.org",\n+        sender="noreply@plone.org",\n+        subject="Trappist",\n+        body=message,\n+    )\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(len(mailhost.messages), 2)\n \n@@ -294,19 +291,19 @@ api.portal.send_email(\n \n With {meth}`api.portal.show_message` you can show a notification message to the user.\n \n-```python\n+```{eval-rst}\n+..  code-block:: python\n+\n from plone import api\n api.portal.show_message(message=\'Blueberries!\', request=request)\n-```\n \n-```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from Products.statusmessages.interfaces import IStatusMessage\n     messages = IStatusMessage(request)\n     show = messages.show()\n-    self.assertEqual(len(show), 1)\n+    self.assertEqual(len(show), 1)  # TODO: This test fails, and blocks the next\n     self.assertTrue(\'Blueberries!\' in show[0].message)\n ```\n \n@@ -318,8 +315,8 @@ Plone comes with a package `plone.app.registry` that provides a common way to st\n {meth}`api.portal.get_registry_record` provides an easy way to access these.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.registry.record import Record\n@@ -331,14 +328,14 @@ Plone comes with a package `plone.app.registry` that provides a common way to st\n     registry[\'my.package.someoption\'] = True\n ```\n \n-```python\n-from plone import api\n-api.portal.get_registry_record(\'my.package.someoption\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.portal.get_registry_record(\'my.package.someoption\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n ```\n@@ -347,8 +344,8 @@ One common pattern when using registry records is to define an interface with al\n {meth}`api.portal.get_registry_record` also allows you to use this pattern.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.api.tests.test_portal import IMyRegistrySettings\n@@ -359,14 +356,14 @@ One common pattern when using registry records is to define an interface with al\n     records.field_one = u\'my text\'\n ```\n \n-```python\n-from plone import api\n-api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(\n         api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n@@ -378,15 +375,15 @@ It is possible to provide a default value\n that will be returned by {meth}`api.portal.get_registry_record`\n if the queried record is not found.\n \n-```python\n-from plone import api\n-api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n-api.portal.get_registry_record(\'foo\', default=u\'baz\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n+    api.portal.get_registry_record(\'foo\', default=u\'baz\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n     self.assertEqual(\n         api.portal.get_registry_record(\n             \'foo\',\n@@ -408,8 +405,8 @@ api.portal.get_registry_record(\'foo\', default=u\'baz\')\n {meth}`api.portal.set_registry_record` provides an easy way to change `plone.app.registry` configuration and settings.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.registry.record import Record\n@@ -421,14 +418,14 @@ api.portal.get_registry_record(\'foo\', default=u\'baz\')\n     registry[\'my.package.someoption\'] = True\n ```\n \n-```python\n-from plone import api\n-api.portal.set_registry_record(\'my.package.someoption\', False)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.portal.set_registry_record(\'my.package.someoption\', False)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(registry[\'my.package.someoption\'])\n ```\n@@ -436,8 +433,8 @@ api.portal.set_registry_record(\'my.package.someoption\', False)\n {meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone.registry.interfaces import IRegistry\n     from plone.api.tests.test_portal import IMyRegistrySettings\n@@ -447,14 +444,14 @@ api.portal.set_registry_record(\'my.package.someoption\', False)\n     records = registry.forInterface(IMyRegistrySettings)\n ```\n \n-```python\n-from plone import api\n-api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(\n         api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\ndiff --git a/docs/user.md b/docs/user.md\nindex a1ebb708..25c49799 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -15,8 +15,8 @@ To create a new user, use {meth}`api.user.create`.\n If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     from plone import api\n     from plone.api.exc import InvalidParameterError\n@@ -27,14 +27,14 @@ If your portal is configured to use emails as usernames, you just need to pass i\n         portal.portal_properties.site_properties.use_email_as_login = True\n ```\n \n-```python\n-from plone import api\n-user = api.user.create(email=\'alice@plone.org\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    user = api.user.create(email=\'alice@plone.org\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(user.id, \'alice@plone.org\')\n     self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n@@ -43,8 +43,8 @@ user = api.user.create(email=\'alice@plone.org\')\n Otherwise, you also need to pass in the username of the new user.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     try:\n         api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n@@ -53,35 +53,35 @@ Otherwise, you also need to pass in the username of the new user.\n         portal.portal_properties.site_properties.use_email_as_login = False\n ```\n \n-```python\n-user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(user.id, \'jane\')\n     self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n ```\n \n-To set user properties when creating a new user, pass in a properties dict.\n-\n-```python\n-properties = dict(\n-    fullname=\'Bob\',\n-    location=\'Munich\',\n-)\n-user = api.user.create(\n-    username=\'bob\',\n-    email=\'bob@plone.org\',\n-    properties=properties,\n-)\n-```\n+To set user properties when creating a new user, pass in a `properties` dict.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    properties = dict(\n+        fullname=\'Bob\',\n+        location=\'Munich\',\n+    )\n+    user = api.user.create(\n+        username=\'bob\',\n+        email=\'bob@plone.org\',\n+        properties=properties,\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n     self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n@@ -104,14 +104,14 @@ user = api.user.create(\n \n You can get a user with {meth}`api.user.get`.\n \n-```python\n-from plone import api\n-user = api.user.get(username=\'bob\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    user = api.user.get(username=\'bob\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(user.id, \'bob\')\n ```\n@@ -121,16 +121,16 @@ user = api.user.get(username=\'bob\')\n Users have various properties set on them.\n This is how you get and set them, using the underlying APIs:\n \n-```python\n-from plone import api\n-user = api.user.get(username=\'bob\')\n-user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n-location = user.getProperty(\'location\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    user = api.user.get(username=\'bob\')\n+    user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n+    location = user.getProperty(\'location\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(location, \'Neverland\')\n ```\n@@ -141,14 +141,14 @@ location = user.getProperty(\'location\')\n \n Getting the currently logged-in user is easy with {meth}`api.user.get_current`.\n \n-```python\n-from plone import api\n-current = api.user.get_current()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    current = api.user.get_current()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(current.id, \'test_user_1_\')\n ```\n@@ -160,16 +160,16 @@ current = api.user.get_current()\n Sometimes you need to trigger or display some piece of information only for logged-in users.\n It\'s easy to use {meth}`api.user.is_anonymous` to do a basic check for it.\n \n-```python\n-from plone import api\n-if not api.user.is_anonymous():\n-    trigger = False\n-trigger = True\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    if not api.user.is_anonymous():\n+        trigger = False\n+    trigger = True\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(trigger)\n ```\n@@ -180,14 +180,14 @@ trigger = True\n \n Get all users in your portal with {meth}`api.user.get_users`.\n \n-```python\n-from plone import api\n-users = api.user.get_users()\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    users = api.user.get_users()\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n ```\n@@ -199,21 +199,21 @@ users = api.user.get_users()\n If you set the `groupname` parameter, then {meth}`api.user.get_users` will return only users that are members of this group.\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     api.group.create(groupname=\'staff\')\n     api.group.add_user(username=\'jane\', groupname=\'staff\')\n ```\n \n-```python\n-from plone import api\n-users = api.user.get_users(groupname=\'staff\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    users = api.user.get_users(groupname=\'staff\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(users[0].id, \'jane\')\n ```\n@@ -224,27 +224,27 @@ users = api.user.get_users(groupname=\'staff\')\n \n To delete a user, use {meth}`api.user.delete` and pass in either the username or the user object you want to delete.\n \n-```python\n-from plone import api\n-api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-api.user.delete(username=\'unwanted\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n \n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n-```\n+    from plone import api\n+    api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+    api.user.delete(username=\'unwanted\')\n \n-```python\n-unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-api.user.delete(user=unwanted)\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n+\n+    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n ```\n \n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+    api.user.delete(user=unwanted)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(api.user.get(username=\'unwanted\'), None)\n ```\n@@ -256,30 +256,29 @@ api.user.delete(user=unwanted)\n The {meth}`api.user.get_roles` method is used for getting a user\'s roles.\n By default it returns site-wide roles.\n \n-```python\n-from plone import api\n-roles = api.user.get_roles(username=\'jane\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+    from plone import api\n+    roles = api.user.get_roles(username=\'jane\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n ```\n \n If you pass in a content object, it will return local roles of the user in that particular context.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n-roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n+    roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n ```\n@@ -291,15 +290,15 @@ roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n The {meth}`api.user.get_permissions` method is used for getting user\'s permissions.\n By default it returns site root permissions.\n \n-```python\n-from plone import api\n-mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n-permissions = api.user.get_permissions(username=\'mike\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n+    permissions = api.user.get_permissions(username=\'mike\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     PERMISSIONS = {\n         \'View\': True,\n@@ -315,16 +314,16 @@ permissions = api.user.get_permissions(username=\'mike\')\n \n If you pass in a content object, it will return local permissions of the user in that particular context.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n-permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n+    permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     PERMISSIONS = {\n         \'View\': False,\n@@ -345,31 +344,31 @@ permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']\n Instead of getting all user permissions, you can check a single permission using the {meth}`api.user.has_permission` method.\n By default it checks the permission on the site root.\n \n-```python\n-from plone import api\n-adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n-can_view = api.user.has_permission(\'View\', username=\'adam\')\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n+    can_view = api.user.has_permission(\'View\', username=\'adam\')\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertTrue(can_view)\n ```\n \n If you pass in a content object, it will check the permission in that particular context.\n \n-```python\n-from plone import api\n-portal = api.portal.get()\n-folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n-can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    portal = api.portal.get()\n+    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n+    can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     self.assertFalse(can_view)\n ```\n@@ -380,16 +379,16 @@ can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n \n The {meth}`api.user.grant_roles` allows us to grant a list of roles to the user.\n \n-```python\n-from plone import api\n-api.user.grant_roles(username=\'jane\',\n-    roles=[\'Reviewer\', \'SiteAdministrator\']\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.user.grant_roles(username=\'jane\',\n+        roles=[\'Reviewer\', \'SiteAdministrator\']\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n     roles = api.user.get_roles(username=\'jane\')\n@@ -400,18 +399,18 @@ If you pass a content object or folder,\n the roles are granted only on that context and not site-wide.\n But all site-wide roles will also be returned by {meth}`api.user.get_roles` for this user on the given context.\n \n-```python\n-from plone import api\n-folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n-api.user.grant_roles(username=\'jane\',\n-    roles=[\'Editor\', \'Contributor\'],\n-    obj=portal[\'folder_one\']\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n+    api.user.grant_roles(username=\'jane\',\n+        roles=[\'Editor\', \'Contributor\'],\n+        obj=portal[\'folder_one\']\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n     roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n@@ -426,14 +425,14 @@ api.user.grant_roles(username=\'jane\',\n \n The {meth}`api.user.revoke_roles` allows us to revoke a list of roles from the user.\n \n-```python\n-from plone import api\n-api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+\n+    from plone import api\n+    api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n     roles = api.user.get_roles(username=\'jane\')\n@@ -442,29 +441,28 @@ api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n \n If you pass a context object the local roles for that context will be removed.\n \n-```python\n-from plone import api\n-folder = api.content.create(\n-    container=portal,\n-    type=\'Folder\',\n-    id=\'folder_three\',\n-    title=\'Folder Three\'\n-)\n-api.user.grant_roles(\n-    username=\'jane\',\n-    roles=[\'Editor\', \'Contributor\'],\n-    obj=portal[\'folder_three\'],\n-)\n-api.user.revoke_roles(\n-    username=\'jane\',\n-    roles=[\'Editor\'],\n-    obj=portal[\'folder_three\'],\n-)\n-```\n-\n ```{eval-rst}\n-.. ifconfig:: plone_api_doctests\n-.. invisible-code-block: python\n+..  code-block:: python\n+    from plone import api\n+    folder = api.content.create(\n+        container=portal,\n+        type=\'Folder\',\n+        id=\'folder_three\',\n+        title=\'Folder Three\'\n+    )\n+    api.user.grant_roles(\n+        username=\'jane\',\n+        roles=[\'Editor\', \'Contributor\'],\n+        obj=portal[\'folder_three\'],\n+    )\n+    api.user.revoke_roles(\n+        username=\'jane\',\n+        roles=[\'Editor\'],\n+        obj=portal[\'folder_three\'],\n+    )\n+\n+..  ifconfig:: plone_api_doctests\n+..  invisible-code-block: python\n \n     EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n     roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-10T04:42:40-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/1ca205b4724f0721d6c9b5c35cfee32581dff511

Add TODO for failing tests

Files changed:
M docs/content.md

b'diff --git a/docs/content.md b/docs/content.md\nindex 1b97d815..fed1e620 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -158,7 +158,7 @@ Limit search depth:\n ..  ifconfig:: plone_api_doctests\n ..  invisible-code-block: python\n \n-    self.assertGreater(len(documents), 0)\n+    self.assertGreater(len(documents), 0)  # TODO: This test fails\n ```\n \n Limit search depth within a context:\n@@ -173,7 +173,7 @@ Limit search depth within a context:\n ..  ifconfig:: plone_api_doctests\n ..  invisible-code-block: python\n \n-    self.assertGreater(len(documents), 0)\n+    self.assertGreater(len(documents), 0)  # TODO: This test fails\n ```\n \n Search by interface:\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-14T17:15:57-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/b0f98462563f6f9e6f76a3af0e1457a739136625

Fix code-block spacing

Files changed:
M docs/group.md
M docs/portal.md
M docs/user.md

b"diff --git a/docs/group.md b/docs/group.md\nindex 8e44b177..9c7ebe71 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -374,6 +374,7 @@ To revoke roles already granted to a group, use the {meth}`api.group.revoke_role\n \n ```{eval-rst}\n ..  code-block:: python\n+\n     from plone import api\n     api.group.revoke_roles(\n         groupname='staff', roles=['Reviewer, SiteAdministrator'])\ndiff --git a/docs/portal.md b/docs/portal.md\nindex 7601c153..232b7834 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -60,6 +60,7 @@ Assuming there is a document `english_page` in a folder `en`, which is the navig\n \n ```{eval-rst}\n ..  code-block:: python\n+\n     from plone import api\n     nav_root = api.portal.get_navigation_root(english_page)\n \n@@ -245,6 +246,7 @@ Python's standard [email module](https://docs.python.org/2.7/library/email.messa\n \n ```{eval-rst}\n ..  code-block:: python\n+\n     from email.mime.multipart import MIMEMultipart\n     from email.mime.text import MIMEText\n \ndiff --git a/docs/user.md b/docs/user.md\nindex 25c49799..7a81142e 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -258,6 +258,7 @@ By default it returns site-wide roles.\n \n ```{eval-rst}\n ..  code-block:: python\n+\n     from plone import api\n     roles = api.user.get_roles(username='jane')\n \n@@ -443,6 +444,7 @@ If you pass a context object the local roles for that context will be removed.\n \n ```{eval-rst}\n ..  code-block:: python\n+\n     from plone import api\n     folder = api.content.create(\n         container=portal,\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-18T02:38:44-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/f9bbb97127d18a747c4ddb07f4cf2258c2474779

Merge branch 'master' into docs-6-cleanup

# Conflicts:
#	docs/content.md
#	docs/contribute/develop.md
#	docs/contribute/release.md

Files changed:
A .github/workflows/black.yml
A .github/workflows/docs.yml
A .github/workflows/isort.yml
A .github/workflows/plone_python.yml
A README.md
A constraints.txt
A constraints_plone52.txt
A constraints_plone60.txt
A news/412.feature
A news/474.feature
A requirements.txt
A src/plone/api/tests/doctests/env.md
A src/plone/api/tests/doctests/relation.md
A test_plone-52.cfg
A test_plone-60.cfg
M MANIFEST.in
M Makefile
M base.cfg
M buildout.cfg
M docs/conf.py
M docs/content.md
M docs/contribute/develop.md
M docs/contribute/release.md
M docs/portal.md
M docs/relation.md
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/tests/base.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_relation.py
M src/plone/api/tests/test_user.py
M src/plone/api/tests/test_validation.py
M src/plone/api/user.py
M src/plone/api/validation.py
M tox.ini
D README.rst

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nnew file mode 100644\nindex 00000000..420028cc\n--- /dev/null\n+++ b/.github/workflows/black.yml\n@@ -0,0 +1,32 @@\n+name: Black\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: tox -e black-check\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nnew file mode 100644\nindex 00000000..93fc39fc\n--- /dev/null\n+++ b/.github/workflows/docs.yml\n@@ -0,0 +1,34 @@\n+name: Build docs\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: |\n+          tox -e linkcheck\n+          tox -e plone6docs\ndiff --git a/.github/workflows/isort.yml b/.github/workflows/isort.yml\nnew file mode 100644\nindex 00000000..c6f499fc\n--- /dev/null\n+++ b/.github/workflows/isort.yml\n@@ -0,0 +1,32 @@\n+name: Isort\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: true\n+      matrix:\n+        python-version: [3.9]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+\n+      - name: Test with tox\n+        run: tox -e isort\ndiff --git a/.github/workflows/plone_python.yml b/.github/workflows/plone_python.yml\nnew file mode 100644\nindex 00000000..375c2a8b\n--- /dev/null\n+++ b/.github/workflows/plone_python.yml\n@@ -0,0 +1,31 @@\n+name: Plone backend tests\n+\n+on:\n+  push:\n+  pull_request:\n+\n+jobs:\n+  plone_python:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: ["3.7", "3.8", "3.9"]\n+        plone-version: ["5.2", "6.0"]\n+\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Install system libraries\n+        run: sudo apt-get install libxml2-dev libxslt1-dev libjpeg-dev\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v2\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Install dependencies\n+        run: |\n+          python -m pip install --upgrade pip\n+          pip install tox tox-gh-actions\n+      - name: Test with tox\n+        run: tox\n+        env:\n+          PLONE: ${{ matrix.plone-version }}\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 5378791b..b9ca1361 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -4,8 +4,8 @@ include tox.ini\n # Ignore most of the docs directory.\n prune docs\n \n-# The doctests point to docs/*.rst, so we need them, including CHANGES.rst.\n-include docs/*.rst\n+# The doctests point to docs/*.md, so we need them, including CHANGES.rst.\n+include docs/*.md\n \n graft src\n \n@@ -13,3 +13,7 @@ global-exclude *.pyc\n include pyproject.toml\n recursive-exclude news *\n exclude news\n+\n+# added by check-manifest\n+recursive-include src *.py\n+recursive-include src *.rst\ndiff --git a/Makefile b/Makefile\nindex 5eaf407b..3d8b79bd 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -29,6 +29,9 @@ bin/python bin/pip:\n # Documentation\n # ----------------------------------------------------------------------\n \n+# TODO Remove complete Makefile when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n+\n+# Just a developer helper. Can be replaced by \'tox -e docs\' (\'tox -e plone6docs\') \n .PHONY: docs-html\n docs-html: bin/python bin/pip ## Build documentation\n \tbin/pip install tox\n@@ -36,14 +39,20 @@ docs-html: bin/python bin/pip ## Build documentation\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n+.PHONY: livehtml\n+livehtml:\n+\tsphinx-autobuild  -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html $(O)\n+\n+# TODO Remove when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n .PHONY: netlify\n-netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n+netlify: bin/python bin/pip ## Build documentation (Netlfy style)\n \tbin/pip install tox\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n ## Run conversion of documentation from restructuredText to myST\n+# TODO Remove later when MyST documentation is settled.\n .PHONY: conversion-to-myst\n conversion-to-myst: bin/python bin/pip\n \tbin/pip install "rst-to-myst[sphinx]"\ndiff --git a/README.md b/README.md\nnew file mode 100644\nindex 00000000..e6bf8f87\n--- /dev/null\n+++ b/README.md\n@@ -0,0 +1,46 @@\n+# plone.api\n+\n+[![Latest PyPI version](https://img.shields.io/pypi/v/plone.api.svg "Latest PyPI version")](https://pypi.python.org/pypi/plone.api/)\n+\n+\n+[![Number of PyPI downloads](https://img.shields.io/pypi/dm/plone.api.svg "Number of PyPI downloads")](https://pypi.python.org/pypi/plone.api/)\n+\n+A simple API, built for humans wishing to develop with Plone.\n+\n+The intention is\n+\n+* to cover as much as possible the tasks carried out by a Plone developer\n+* to provide clear API methods for Plone functionality which may be confusing or difficult to access,\n+* keeping everything in one place,\n+* staying introspectable and discoverable, important aspects of being Pythonic.\n+\n+\n+## Documentation\n+\n+[plone.api documentation](https://6.dev-docs.plone.org/plone.api/index.html) is part of the official Plone documentation.\n+\n+`plone.api` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+\n+\n+## Source Code and Contribution\n+\n+[![Testing Status](https://github.com/plone/plone.api/actions/workflows/plone_python.yml/badge.svg "Testing Status")](https://github.com/plone/plone.api/actions/workflows/plone_python.yml)\n+\n+\n+Contributors\n+    Please read the document [Process for Plone core\'s development](https://docs.plone.org/develop/coredev/docs/index.html).\n+    Also consult the section about contribution in the [plone.api contributors documentation](https://docs.plone.org/develop/plone.api/docs/contribute/index.html).\n+\n+Source Code\n+    at the [Plone code repository hosted at GitHub](https://github.com/plone/plone.api).\n+\n+Issues\n+    Please use the [issue tracker](https://github.com/plone/plone.api/issues)\n+\n+Continuous Integration\n+    runs on [Travis CI](https://travis-ci.org/plone/plone.api).\n+\n+Code Coverage\n+    is measured at [Coveralls.io](https://coveralls.io/github/plone/plone.api).\n+\ndiff --git a/README.rst b/README.rst\ndeleted file mode 100644\nindex 79f52bb4..00000000\n--- a/README.rst\n+++ /dev/null\n@@ -1,56 +0,0 @@\n-plone.api\n-=========\n-\n-.. image:: https://img.shields.io/pypi/v/plone.api.svg\n-    :target: https://pypi.python.org/pypi/plone.api/\n-    :alt: Latest PyPI version\n-\n-.. image:: https://img.shields.io/pypi/dm/plone.api.svg\n-    :target: https://pypi.python.org/pypi/plone.api/\n-    :alt: Number of PyPI downloads\n-\n-A simple API, built for humans wishing to develop with Plone.\n-\n-The intention is\n-\n-* to cover as much as possible the tasks carried out by a Plone developer\n-* to provide clear API methods for Plone functionality which may be confusing or difficult to access,\n-* keeping everything in one place,\n-* staying introspectable and discoverable, important aspects of being Pythonic.\n-\n-\n-Documentation\n-=============\n-\n-`plone.api documentation <https://docs.plone.org/develop/plone.api/docs/index.html>`_ is part of the official Plone documentation.\n-\n-``plone.api`` comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-Recipes try to assume the user does not have extensive knowledge about Plone internals.\n-\n-\n-Source Code and Contribution\n-============================\n-\n-.. image:: https://api.travis-ci.org/plone/plone.api.svg\n-    :target: https://travis-ci.org/#!/plone/plone.api\n-\n-.. image:: https://coveralls.io/repos/github/plone/plone.api/badge.svg?branch=master\n-    :alt: Coverage\n-    :target: https://coveralls.io/github/plone/plone.api?branch=master\n-\n-Contributors\n-    Please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n-    Also consult the section about contribution in the `plone.api contributors documentation <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n-\n-Source Code\n-    at the `Plone code repository hosted at GitHub <https://github.com/plone/plone.api>`_.\n-\n-Issues\n-    Please use the `issue tracker <https://github.com/plone/plone.api/issues>`_\n-\n-Continuous Integration\n-    runs on `Travis CI <https://travis-ci.org/plone/plone.api>`_.\n-\n-Code Coverage\n-    is measured at `Coveralls.io <https://coveralls.io/github/plone/plone.api>`_.\n-\ndiff --git a/base.cfg b/base.cfg\nindex d94225b0..81d97c99 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -1,20 +1,57 @@\n [buildout]\n+show-picked-versions = true\n package-name = plone.api\n-package-extras = [test]\n-test-eggs =\n-    plone.api\n \n parts +=\n+    instance\n+    test\n     omelette\n \n # network speedup\n socket-timeout = 5\n \n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+deprecation-warnings = off\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    plone.api [test]\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${test:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ[\'TZ\'] = \'UTC\'\n+    # In Python 3.8+, for the TZ environment variable to be used, it\'s\n+    # necessary to explicitly call time.tzset().\n+    import time\n+    time.tzset()\n+defaults = [\'-s\', \'plone.api\', \'--auto-color\', \'--auto-progress\']\n+\n+\n [versions]\n plone.api =\n #setuptools = 33.1.1\n #zc.buildout = 2.8.0\n \n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n+# cffi 1.14.3 fails on apple m1\n+# cffi 1.14.4 fails with "ModuleNotFoundError: No module named \'_cffi_backend\'"\n+cffi = 1.14.6\n+\n+# Pillow 6 fails on apple m1\n+Pillow = >= 8.3.2\n+\n+# MyST markdown modules\n+manuel = >= 1.11.2\ndiff --git a/buildout.cfg b/buildout.cfg\nindex f45087fb..e710d7a2 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,2 +1,2 @@\n [buildout]\n-extends = plone-5.2.x.cfg\n+extends = test_plone-60.cfg\ndiff --git a/constraints.txt b/constraints.txt\nnew file mode 100644\nindex 00000000..c1fb3a1b\n--- /dev/null\n+++ b/constraints.txt\n@@ -0,0 +1 @@\n+-c constraints_plone60.txt\ndiff --git a/constraints_plone52.txt b/constraints_plone52.txt\nnew file mode 100644\nindex 00000000..3887b180\n--- /dev/null\n+++ b/constraints_plone52.txt\n@@ -0,0 +1 @@\n+-c https://dist.plone.org/release/5.2-latest/requirements.txt\n\\ No newline at end of file\ndiff --git a/constraints_plone60.txt b/constraints_plone60.txt\nnew file mode 100644\nindex 00000000..2c1d6188\n--- /dev/null\n+++ b/constraints_plone60.txt\n@@ -0,0 +1 @@\n+-c https://dist.plone.org/release/6.0-latest/requirements.txt\n\\ No newline at end of file\ndiff --git a/docs/conf.py b/docs/conf.py\nindex f5aff07a..264d3c25 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -26,7 +26,7 @@\n ]\n master_doc = \'index\'\n \n-locale_dirs = ["translated/"]\n+locale_dirs = [\'translated/\']\n language = \'en\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n@@ -36,8 +36,9 @@\n     \'index\',\n     \'ploneapi.tex\',\n     \'plone.api Documentation\',\n-    \'\', \'manual\'\n-), ]\n+    \'\',\n+    \'manual\',\n+)]\n \n \n def setup(app):\ndiff --git a/docs/content.md b/docs/content.md\nindex fed1e620..79403d6b 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -32,7 +32,7 @@ obj = api.content.create(\n The `id` of the new object is automatically and safely generated from its `title`.\n \n ```python\n-assert obj.id == \'my-content\'\n+self.assertEqual(obj.id, \'my-content\')\n ```\n \n (content-get-example)=\n@@ -54,64 +54,57 @@ plone (portal root)\n     `-- sprint\n ```\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n-    blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-    about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n-    events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n-\n-    api.content.create(container=about, type=\'Document\', id=\'team\')\n-    api.content.create(container=about, type=\'Document\', id=\'contact\')\n-\n-    api.content.create(container=events, type=\'Event\', id=\'training\')\n-    api.content.create(container=events, type=\'Event\', id=\'conference\')\n-    api.content.create(container=events, type=\'Event\', id=\'sprint\')\n-```\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+% about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n+% events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n+%\n+% api.content.create(container=about, type=\'Document\', id=\'team\')\n+% api.content.create(container=about, type=\'Document\', id=\'contact\')\n+%\n+% api.content.create(container=events, type=\'Event\', id=\'training\')\n+% api.content.create(container=events, type=\'Event\', id=\'conference\')\n+% api.content.create(container=events, type=\'Event\', id=\'sprint\')\n \n The following operations will get objects from the structure above, including using {meth}`api.content.get`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    # let\'s first get the portal object\n-    from plone import api\n-    portal = api.portal.get()\n-    assert portal.id == \'plone\'\n-\n-    # content can be accessed directly with dict-like access\n-    blog = portal[\'blog\']\n-\n-    # another way is to use ``get()`` method and pass it a path\n-    about = api.content.get(path=\'/about\')\n+```python\n+# let\'s first get the portal object\n+from plone import api\n+portal = api.portal.get()\n+assert portal.id == \'plone\'\n \n-    # more examples\n-    conference = portal[\'events\'][\'conference\']\n-    sprint = api.content.get(path=\'/events/sprint\')\n+# content can be accessed directly with dict-like access\n+blog = portal[\'blog\']\n \n-    # moreover, you can access content by its UID\n-    uid = about[\'team\'].UID()\n-    team = api.content.get(UID=uid)\n+# another way is to use ``get()`` method and pass it a path\n+about = api.content.get(path=\'/about\')\n \n-    # returns None if UID cannot be found in catalog\n-    not_found = api.content.get(UID=\'notfound\')\n+# more examples\n+conference = portal[\'events\'][\'conference\']\n+sprint = api.content.get(path=\'/events/sprint\')\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+# moreover, you can access content by its UID\n+uid = about[\'team\'].UID()\n+team = api.content.get(UID=uid)\n \n-    self.assertTrue(portal)\n-    self.assertTrue(blog)\n-    self.assertTrue(about)\n-    self.assertTrue(conference)\n-    self.assertTrue(sprint)\n-    self.assertTrue(team)\n-    self.assertEquals(not_found, None)\n+# returns None if UID cannot be found in catalog\n+not_found = api.content.get(UID=\'notfound\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(portal)\n+% self.assertTrue(blog)\n+% self.assertTrue(about)\n+% self.assertTrue(conference)\n+% self.assertTrue(sprint)\n+% self.assertTrue(team)\n+% self.assertEquals(not_found, None)\n+\n (content-find-example)=\n \n ## Find content objects\n@@ -120,97 +113,79 @@ You can use the find function to search for content.\n \n Finding all Documents:\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(portal_type=\'Document\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n+```python\n+from plone import api\n+documents = api.content.find(portal_type=\'Document\')\n ```\n \n-Finding all Documents within a context:\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(\n-        context=api.portal.get(), portal_type=\'Document\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+Finding all Documents within a context:\n \n-    self.assertGreater(len(documents), 0)\n+```python\n+from plone import api\n+documents = api.content.find(\n+    context=api.portal.get(), portal_type=\'Document\')\n ```\n \n-Limit search depth:\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(depth=1, portal_type=\'Document\')\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+Limit search depth:\n \n-    self.assertGreater(len(documents), 0)  # TODO: This test fails\n+```python\n+from plone import api\n+documents = api.content.find(depth=1, portal_type=\'Document\')\n ```\n \n-Limit search depth within a context:\n-\n-```{eval-rst}\n-..  code-block:: python\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n \n-    from plone import api\n-    documents = api.content.find(\n-        context=api.portal.get(), depth=1, portal_type=\'Document\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+Limit search depth within a context:\n \n-    self.assertGreater(len(documents), 0)  # TODO: This test fails\n+```python\n+from plone import api\n+documents = api.content.find(\n+    context=api.portal.get(), depth=1, portal_type=\'Document\')\n ```\n \n-Search by interface:\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    from Products.CMFCore.interfaces import IContentish\n-    documents = api.content.find(object_provides=IContentish)\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+Search by interface:\n \n-    self.assertGreater(len(documents), 0)\n+```python\n+from plone import api\n+from Products.CMFCore.interfaces import IContentish\n+documents = api.content.find(object_provides=IContentish)\n ```\n \n-Combining multiple arguments:\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    from Products.CMFCore.interfaces import IContentish\n-    documents = api.content.find(\n-        context=api.portal.get(),\n-        depth=2,\n-        object_provides=IContentish,\n-        SearchableText=\'Team\',\n-    )\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+Combining multiple arguments:\n \n-    self.assertGreater(len(documents), 0)\n+```python\n+from plone import api\n+from Products.CMFCore.interfaces import IContentish\n+documents = api.content.find(\n+    context=api.portal.get(),\n+    depth=2,\n+    object_provides=IContentish,\n+    SearchableText=\'Team\',\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n More information about how to use the catalog may be found in the\n [Plone Documentation](https://docs.plone.org/develop/plone/searching_and_indexing/index.html).\n \n@@ -228,26 +203,23 @@ document_obj = document_brain.getObject()\n \n A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which remains constant for the object even if the object is moved.\n \n-Plone uses UUIDs for storing references between content and for linking by UUIDs, enabling persistent links.\n+Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links.\n \n To get the UUID of any content object use {meth}`api.content.get_uuid`.\n The following code gets the UUID of the `contact` document.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    contact = portal[\'about\'][\'contact\']\n-\n-    uuid = api.content.get_uuid(obj=contact)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+```python\n+from plone import api\n+portal = api.portal.get()\n+contact = portal[\'about\'][\'contact\']\n \n-    self.assertTrue(isinstance(uuid, str))\n+uuid = api.content.get_uuid(obj=contact)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(isinstance(uuid, str))\n+\n (content-move-example)=\n \n ## Move content\n@@ -255,160 +227,140 @@ The following code gets the UUID of the `contact` document.\n To move content around the portal structure defined above use the {meth}`api.content.move` method.\n The code below moves the `contact` item (with all it contains) out of the folder `about` and into the Plone portal root.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    contact = portal[\'about\'][\'contact\']\n-\n-    api.content.move(source=contact, target=portal)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+```python\n+from plone import api\n+portal = api.portal.get()\n+contact = portal[\'about\'][\'contact\']\n \n-    self.assertFalse(portal[\'about\'].get(\'contact\'))\n-    self.assertTrue(portal[\'contact\'])\n+api.content.move(source=contact, target=portal)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal[\'about\'].get(\'contact\'))\n+% self.assertTrue(portal[\'contact\'])\n+\n Actually, `move` behaves like a filesystem move.\n If you pass it an `id` argument, the object will have that new ID in its new home.\n By default it will retain its original ID.\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(contact.id, "contact")\n+% self.assertTrue(portal[\'contact\'])\n+% contact = portal[\'contact\']\n+% api.content.move(source=contact, target=portal[\'about\'], id="new-contact")\n+% self.assertEqual(contact.id, "new-contact")\n+% self.assertTrue(portal[\'about\'][\'new-contact\'])\n+\n (content-rename-example)=\n \n ## Rename content\n \n To rename a content object (change its ID), use the {meth}`api.content.rename` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'blog\'))\n-    self.assertTrue(portal[\'old-blog\'])\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'blog\'))\n+% self.assertTrue(portal[\'old-blog\'])\n+\n (content-copy-example)=\n \n ## Copy content\n \n To copy a content object, use the {meth}`api.content.copy` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    training = portal[\'events\'][\'training\']\n+```python\n+from plone import api\n+portal = api.portal.get()\n+training = portal[\'events\'][\'training\']\n \n-    api.content.copy(source=training, target=portal)\n+api.content.copy(source=training, target=portal)\n ```\n \n Note that the new object will have the same ID as the old object (unless otherwise stated).\n This is not a problem, since the new object is in a different container.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    assert portal[\'events\'][\'training\'].id == \'training\'\n-    assert portal[\'training\'].id == \'training\'\n-```\n+% invisible-code-block: python\n+%\n+% assert portal[\'events\'][\'training\'].id == \'training\'\n+% assert portal[\'training\'].id == \'training\'\n \n You can also set `target` to source\'s container and set `safe_id=True`.\n This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    new_training = portal[\'copy_of_training\']\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertTrue(portal[\'training\'])  # old object remains\n-    self.assertTrue(portal[\'copy_of_training\'])\n+```python\n+api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+new_training = portal[\'copy_of_training\']\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(portal[\'training\'])  # old object remains\n+% self.assertTrue(portal[\'copy_of_training\'])\n+\n (content-delete-example)=\n \n ## Delete content\n \n To delete a content object, pass the object to the {meth}`api.content.delete` method:\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.delete(obj=portal[\'copy_of_training\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'copy_of_training\'))\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.delete(obj=portal[\'copy_of_training\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'copy_of_training\'))\n+\n To delete multiple content objects, pass the objects to the {meth}`api.content.delete` method:\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n \n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+```python\n+from plone import api\n+portal = api.portal.get()\n+data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n+api.content.delete(objects=data)\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n-    api.content.delete(objects=data)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'copy_of_training\'))\n-    self.assertFalse(portal.events.get(\'copy_of_training\'))\n-```\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'copy_of_training\'))\n+% self.assertFalse(portal.events.get(\'copy_of_training\'))\n \n If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone.app.textfield import RichTextValue\n-    from zope.lifecycleevent import modified\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n-    portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n-    modified(portal[\'about\'][\'team\'])\n-```\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% from plone.app.textfield import RichTextValue\n+% from zope.lifecycleevent import modified\n+% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+% portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n+% modified(portal[\'about\'][\'team\'])\n \n-    self.assertNotIn(\'copy_of_training\', portal.keys())\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertNotIn(\'copy_of_training\', portal.keys())\n+\n (content-manipulation-with-safe-id-option)=\n \n ## Content manipulation with the `safe_id` option\n@@ -419,12 +371,9 @@ If another object with the same ID is already present in the target container th\n \n However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n-```\n+% invisible-code-block: python\n+%\n+% api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n \n ```python\n api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n@@ -437,56 +386,47 @@ document = portal[\'document-1\']\n \n To find out the current workflow state of your content, use the {meth}`api.content.get_state` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    state = api.content.get_state(obj=portal[\'about\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(state, \'private\')\n+```python\n+from plone import api\n+portal = api.portal.get()\n+state = api.content.get_state(obj=portal[\'about\'])\n ```\n \n-The optional `default` argument is returned if no workflow is defined for the object.\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n+% invisible-code-block: python\n+%\n+% self.assertEqual(state, \'private\')\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+The optional `default` argument is returned if no workflow is defined for the object.\n \n-    self.assertEqual(state, \'Unknown\')\n+```python\n+from plone import api\n+portal = api.portal.get()\n+state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(state, \'Unknown\')\n+\n (content-transition-example)=\n \n ## Transition\n \n To transition your content to a new workflow state, use the {meth}`api.content.transition` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.content.get_state(obj=portal[\'about\']),\n-        \'published\'\n-    )\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.content.get_state(obj=portal[\'about\']),\n+%     \'published\'\n+% )\n+\n If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.\n These arguments can be saved to your transition using custom workflow variables inside the ZMI using an expression such as "python:state_change.kwargs.get(\'comment\', \'\')"\n \n@@ -496,74 +436,82 @@ portal = api.portal.get()\n api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n ```\n \n+\n (content-disable-roles-acquisition-example)=\n \n ## Disable local roles acquisition\n \n To disable the acquisition of local roles for an object, use the {meth}`api.content.disable_roles_acquisition` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.disable_roles_acquisition(obj=portal[\'about\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-    self.assertTrue(ac_flag)\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.disable_roles_acquisition(obj=portal[\'about\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+% self.assertTrue(ac_flag)\n+\n (content-enable-roles-acquisition-example)=\n \n ## Enable local roles acquisition\n \n To enable the acquisition of local roles for an object, use the {meth}`api.content.enable_roles_acquisition` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    # As __ac_local_roles_block__ is None by default, we have to set it,\n-    # before we can test the enabling method.\n-    portal[\'about\'].__ac_local_roles_block__ = 1\n-\n-    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-    self.assertFalse(ac_flag)\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.enable_roles_acquisition(obj=portal[\'about\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% # As __ac_local_roles_block__ is None by default, we have to set it,\n+% # before we can test the enabling method.\n+% portal[\'about\'].__ac_local_roles_block__ = 1\n+%\n+% api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+% self.assertFalse(ac_flag)\n+\n (content-get-view-example)=\n \n ## Get view\n \n To get a {class}`BrowserView` for your content, use {meth}`api.content.get_view`.\n \n-```{eval-rst}\n-..  code-block:: python\n+```python\n+from plone import api\n+portal = api.portal.get()\n+view = api.content.get_view(\n+    name=\'plone\',\n+    context=portal[\'about\'],\n+    request=request,\n+)\n+```\n \n-    from plone import api\n-    portal = api.portal.get()\n-    view = api.content.get_view(\n-        name=\'plone\',\n-        context=portal[\'about\'],\n-        request=request,\n-    )\n+% invisible-code-block: python\n+%\n+% self.assertEqual(view.__name__, u\'plone\')\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+Since version `2.0.0`, the `request` argument can be omitted.\n+In that case, the global request will be used.\n \n-    self.assertEqual(view.__name__, u\'plone\')\n+```python\n+from plone import api\n+portal = api.portal.get()\n+view = api.content.get_view(\n+    name=\'plone\',\n+    context=portal[\'about\'],\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(view.__name__, u\'plone\')\n+\n ## Further reading\n \n For more information on possible flags and usage options please see the full {ref}`plone-api-content` specification.\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 7f598e29..9ac5cab7 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -1,5 +1,7 @@\n # Development environment\n \n+{sub-ref}`today`\n+\n This section is meant for contributors to the `plone.api` project.\n Its purpose is to guide them through the steps needed to start contributing.\n \n@@ -28,33 +30,27 @@ First let\'s look at \'system\' libraries and applications that are normally instal\n - `git` - Version control system.\n - `gcc` - The GNU Compiler Collection.\n - `g++` - The C++ extensions for gcc.\n-- `GNU make` - The fundamental build-control tool.\n - `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n - `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 3.9` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n+- `Python 3` - It is recommended to use a Python virtual environment, using tools such as pyenv or venv, to get a clean Python version.\n \n ### Python tools\n \n-- tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+tox automation\n+: `tox` aims to automate and standardize testing in Python.\n+  It is part of a larger vision of easing the packaging, testing, and release process of Python software.\n+  Install with `pip install tox`.\n \n-```{note}\n-Again, OS X users should use <https://github.com/collective/buildout.python>,\n-it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n-```\n \n ### Further information\n \n-If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n+If you experience problems, read through the following links as almost all of the above steps are required for a default Plone development environment:\n \n - <https://docs.plone.org/manage/index.html>\n - <https://pypi.org/project/zc.buildout/>\n - <https://pypi.org/project/setuptools/>\n - <https://plone.org/download>\n \n-If you are an OS X user, you first need a working Python implementation\n-(the one that comes with the operating system is broken).\n-Use <https://github.com/collective/buildout.python> and be happy.\n-Also applicable to other OSes, if getting a working Python proves a challenge.\n \n (git-workflow)=\n \n@@ -76,12 +72,7 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n \n ## Creating and using the development environment\n \n-```{todo}\n-Update this section as it seems out of date.\n-There is no `Makefile`, so this description makes no sense anymore.\n-```\n-\n-Go to your project\'s folder, and download the latest `plone.api` code:\n+Go to your projects folder and download the lastest `plone.api` code:\n \n ```shell\n cd <your_work_folder>\n@@ -92,29 +83,26 @@ Now `cd` into the newly created directory and build your environment:\n \n ```shell\n cd plone.api\n-make\n+pip install tox\n+tox\n ```\n \n-Go make some tea while\n+Go make some tea while `tox` runs all tasks listed under `tox -l`.\n \n-- `make` creates an isolated Python environment in your `` plone.api` `` folder,\n-- bootstraps `zc.buildout`,\n-- fetches all dependencies,\n-- builds Plone,\n-- runs all tests, and\n-- generates documentation so that you can open it locally later on.\n+- runs all checks and tests\n+- generates documentation so you can open it locally later on\n \n Other commands that you may want to run:\n \n ```shell\n-make tests  # run all tests and syntax validation\n-make docs   # re-generate documentation\n-make clean  # reset your env back to a fresh start\n-make        # re-build env, generate docs, run tests\n+tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n+tox -e plone6docs     # re-generate documentation\n ```\n \n-Open `Makefile` in your favorite code editor to see all possible commands and what they do.\n-And read <http://www.gnu.org/software/make/manual/make.html> to learn more about `make`.\n+Run `tox -l` to list all tox environments.\n+Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n+Read <https://tox.wiki/en/latest/> to learn more about `tox`.\n+\n \n (working-on-an-issue)=\n \n@@ -164,13 +152,13 @@ where I added the get_navigation_root() method.\n Before every commit you should:\n \n - Run unit tests and syntax validation checks.\n-- Add an entry to `CHANGES.rst` (if applicable).\n+- Add an entry to `/news/` (if applicable).\n \n All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n \n ```shell\n-make\n+tox\n ```\n \n ```{note}\n@@ -179,13 +167,14 @@ It pays off to invest a little time to make your editor run `pep8` and `pyflakes\n This saves you lots of time in the long run.\n ```\n \n-## Travis Continuous Integration\n \n-On every push to GitHub, [Travis](https://travis-ci.org/plone/plone.api) runs all tests and syntax validation checks and reports build outcome to the `#sprint` IRC channel and the person who committed the last change.\n+## GitHub Continuous Integration\n \n-Travis is configured with the `.travis.yml` file located in the root of this package.\n+On every push GitHub runs all tests and syntax validation checks.\n+GitHub CI is configured in `.github/workflow` in the root of this package.\n \n-## Documentation\n+\n+## Sphinx Documentation\n \n ```{note}\n Un-documented code is broken code.\n@@ -199,37 +188,103 @@ Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.d\n \n For writing narrative documentation, read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html).\n \n-For docstrings in your code, use reStructuredText, as shown in the following examples.\n+### Adding a function to an existing module\n+\n+Example: Add a new function `plone.api.content.foo`.\n+\n+The function would go in the module `plone.api.content`.\n+Therefore you would add your function in `/src/plone/api/content.py`.\n+\n+% invisible-code-block: python\n+%\n+% from plone.api.validation import at_least_one_of\n+% from plone.api.validation import mutually_exclusive_parameters\n \n ```python\n-def add(a, b):\n-    """Calculate the sum of the two parameters.\n+@mutually_exclusive_parameters(\'path\', \'UID\')\n+@at_least_one_of(\'path\', \'UID\')\n+def foo(path=None, UID=None):\n+    """Do foo.\n+\n+    :param path: Path to the object we want to get,\n+        relative to the portal root.\n+    :type path: string\n+\n+    :param UID: UID of the object we want to get.\n+    :type UID: string\n+\n+    :returns: String\n+    :raises:\n+        :class:`~plone.api.exc.MissingParameterError`,\n+        :class:`~plone.api.exc.InvalidParameterError`\n+    :Example: :ref:`content-foo-example`\n+    """\n+    return "foo"\n+```\n \n-    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method`\n-    and :attr:`mod.path.MY_CONSTANT` for more details.\n+% invisible-code-block: python\n+%\n+% bar = foo(\'/plone/blog\')\n+% self.assertEqual(bar,"foo")\n+%\n+% from plone.api.exc import InvalidParameterError\n+% self.assertRaises(\n+%     InvalidParameterError,\n+%     lambda: foo("/plone/blog", "abcd001")\n+% )\n \n-    :param a: The first operand.\n-    :type a: :class:`mod.path.A`\n+Add documentation in `/docs/content.md`.\n+Describe what your function does, and write some tests in code blocks.\n+`TestCase` methods such as `self.assertEqual()` are available in `doctests`.\n+See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n+The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in `plone.api` testing set up.\n+The package `manuel` allows you to write doctests as common Python code in code blocks.\n \n-    :param b: The second operand.\n-    :type b: :class:`mod.path.B`\n+````markdown\n+(content-foo-example)=\n \n-    :rtype: int\n-    :return: The sum of the operands.\n-    :raises: `KeyError`, if the operands are not the correct type.\n-    """\n+## Get the foo of an object\n+\n+You can use the {meth}`api.content.foo` function to get the `foo` of an object.\n+\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n ```\n \n-Attributes are documented using the `#:` marker above the attribute.\n-The documentation may span multiple lines.\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n+\n+Code blocks are rendered in documentation.\n \n+````markdown\n ```python\n-#: Description of the constant value\n-MY_CONSTANT = 0xc0ffee\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+````\n \n-class Foobar(object):\n+Invisible code blocks are not rendered in documentation and can be used for tests.\n \n-    #: Description of the class variable which spans over\n-    #: multiple lines\n-    FOO = 1\n+```markdown\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n ```\n+\n+Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n+\n+```markdown\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+```\n+\n+Functions and examples in documentation are mutually referenced.\n+The function references the narrative documentation via label `content-foo-example`.\n+The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.\n+The documentation is rendered with a link from the API reference to the narrative documentation, which in turn links back to the API reference.\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex e5cd139f..158a1d3b 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -31,12 +31,12 @@ password = secret\n \n ## Checklist\n \n-Folow these step to create a new release of `plone.api`.\n+Follow these step to create a new release of `plone.api`.\n \n 1. Verify that we have documented all changes in the `CHANGES.rst` file.\n    Go through the list of commits since last release on GitHub and check all changes are documented.\n 2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n-3. Confirm that the package description (generated from `README.rst` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n+3. Confirm that the package description (generated from `README.md` and others) renders correctly by running `bin/longtest` and open its output in your favorite browser.\n 4. Commit all changes to the git repository and push them upstream to GitHub.\n 5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n \ndiff --git a/docs/portal.md b/docs/portal.md\nindex 232b7834..f0edb294 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -309,6 +309,20 @@ api.portal.show_message(message=\'Blueberries!\', request=request)\n     self.assertTrue(\'Blueberries!\' in show[0].message)\n ```\n \n+Since version `2.0.0`, the `request` argument can be omitted.\n+In that case the global request will be used.\n+\n+```python\n+api.portal.show_message(message=\'Cranberries!\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% from Products.statusmessages.interfaces import IStatusMessage\n+% messages = IStatusMessage(request)\n+% show = messages.show()\n+% self.assertTrue(\'Cranberries!\' in show[-1].message)\n+\n (portal-get-registry-record-example)=\n \n ## Get plone.app.registry record\ndiff --git a/docs/relation.md b/docs/relation.md\nindex 465e1c64..c05a606f 100644\n--- a/docs/relation.md\n+++ b/docs/relation.md\n@@ -7,20 +7,39 @@\n \n # Relations\n \n+\n (relation-get-example)=\n \n ## Get relations\n \n+% invisible-code-block: python\n+%\n+% from plone import api\n+% portal = api.portal.get()\n+% bob = api.content.create(type=\'Document\', id=\'bob\', container=portal)\n+% bobby = api.content.create(type=\'Document\', id=\'bobby\', container=portal)\n+%\n+% source = bob\n+% target = bobby\n+% api.relation.create(source=source, target=target, relationship="friend")\n+\n ```python\n-api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n+from plone import api\n+\n+friendship = api.relation.get(\n+    source=source, target=target, relationship="friend", unrestricted=False, as_dict=False\n+    )\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(friendship)\n+\n You must provide either source, target, or relationship, or a combination of those, to {meth}`api.relation.get`.\n `unrestricted` and `as_dict` are optional.\n \n-By default the result is a list of `RelationValue` objects.\n-\n-If you set `as_dict=True` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n+By default the result is a list of {class}`z3c.relationfield.RelationValue` objects.\n+If you set `as_dict=True` {meth}`api.relation.get` will return a dictionary with the names of the relations as keys and lists of objects as values.\n \n By default the View permission is checked on the relation objects.\n You only get objects that you are allowed to see.\n@@ -29,9 +48,13 @@ Use the `unrestricted` parameter if you want to bypass this check.\n To get back relations, so relations pointing to an item, use:\n \n ```python\n-api.relation.get(target=target)\n+friendships = api.relation.get(target=target)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual([friendship.from_object for friendship in friendships], [source])\n+\n To get the objects connected by relations you can use the api of these return values:\n \n ```python\n@@ -41,6 +64,7 @@ for relation in api.relation.get(source=source):\n     relationship = relation.from_attribute\n ```\n \n+\n (relation-create-example)=\n \n ## Create relation\ndiff --git a/news/412.feature b/news/412.feature\nnew file mode 100644\nindex 00000000..5bbdca44\n--- /dev/null\n+++ b/news/412.feature\n@@ -0,0 +1 @@\n+Do not require the request parameter to be specified. If not specify fallback to the global request [ale-rt]\ndiff --git a/news/474.feature b/news/474.feature\nnew file mode 100644\nindex 00000000..aeb6c1f3\n--- /dev/null\n+++ b/news/474.feature\n@@ -0,0 +1,3 @@\n+Testing code examples in MyST markdown documentation.\n+Update documentation [ksuess]\n+Add some doctests to module plone.api.relation. [ksuess]\n\\ No newline at end of file\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 00000000..a4377ccf\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1,5 @@\n+-c constraints.txt\n+setuptools\n+zc.buildout\n+Pillow>=8.3.2\n+tox\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 00706645..1204ce28 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -2,7 +2,6 @@\n ignore =\n     *.cfg\n     .editorconfig\n-    .travis.yml\n     Makefile\n     fix-converted-myst.py\n     netlify.toml\ndiff --git a/setup.py b/setup.py\nindex 03389875..ac95233e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,63 +8,62 @@ def read(*rnames):\n     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n \n-long_description = \\\n-    read(\'README.rst\') + \'\\n\\n\' + \\\n-    read(\'CHANGES.rst\') + \'\\n\\n\' + \\\n-    read(\'LICENSE\')\n+long_description = (\n+    read("README.md") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n+)\n \n-version = \'2.0.0a3.dev0\'\n+version = "2.0.0a3.dev0"\n \n setup(\n-    name=\'plone.api\',\n+    name="plone.api",\n     version=version,\n-    description=\'A Plone API.\',\n+    description="A Plone API.",\n     long_description=long_description,\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    license=\'GPL version 2\',\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\'],\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    license="GPL version 2",\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    url=\'https://github.com/plone/plone.api\',\n-    keywords=\'plone api\',\n+    url="https://github.com/plone/plone.api",\n+    keywords="plone api",\n     install_requires=[\n-        \'Products.statusmessages\',\n-        \'decorator\',\n-        \'plone.app.uuid\',\n-        \'plone.app.linkintegrity\',\n-        \'plone.uuid\',\n-        \'setuptools\',\n-        \'zope.globalrequest\',\n+        "Products.statusmessages",\n+        "decorator",\n+        "plone.app.uuid",\n+        "plone.app.linkintegrity",\n+        "plone.uuid",\n+        "setuptools",\n+        "zope.globalrequest",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'Products.CMFPlone\',\n-            \'manuel\',\n-            \'plone.app.dexterity\',\n-            \'plone.app.intid\',\n-            \'plone.app.testing\',\n-            \'plone.indexer\',\n-            \'plone.registry\',\n-            \'z3c.relationfield\',\n+        "test": [\n+            "Products.CMFPlone",\n+            "manuel>=1.11.2",\n+            "plone.app.dexterity",\n+            "plone.app.intid",\n+            "plone.app.testing",\n+            "plone.indexer",\n+            "plone.registry",\n+            "z3c.relationfield",\n+            "zope.testrunner",\n         ],\n     },\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 6.0\',\n-        \'Framework :: Plone :: Core\',\n-        \'Intended Audience :: Developers\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: 3.9\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Intended Audience :: Developers",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    platforms=\'Any\',\n+    platforms="Any",\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex de40ea7c..5284146e 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex c2a5538f..777b503a 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -1,32 +1,31 @@\n """Module that provides functionality for content manipulation."""\n \n from copy import copy as _copy\n-from pkg_resources import DistributionNotFound\n-from pkg_resources import get_distribution\n-from pkg_resources import parse_version\n from plone.api import portal\n from plone.api.exc import InvalidParameterError\n from plone.api.validation import at_least_one_of\n from plone.api.validation import mutually_exclusive_parameters\n from plone.api.validation import required_parameters\n-from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # noqa\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.uuid.utils import uuidToObject\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.WorkflowCore import WorkflowException\n from zope.component import getMultiAdapter\n from zope.component import getSiteManager\n from zope.container.interfaces import INameChooser\n+from zope.globalrequest import getRequest\n from zope.interface import Interface\n from zope.interface import providedBy\n \n import random\n import transaction\n \n+\n _marker = []\n \n \n-@required_parameters(\'container\', \'type\')\n-@at_least_one_of(\'id\', \'title\')\n+@required_parameters("container", "type")\n+@at_least_one_of("id", "title")\n def create(\n     container=None,\n     type=None,\n@@ -54,6 +53,7 @@ def create(\n         conflicting with another object in the target container, raise an\n         InvalidParameterError. When True, choose a new, non-conflicting id.\n     :type safe_id: boolean\n+\n     :returns: Content object\n     :raises:\n         KeyError,\n@@ -65,7 +65,7 @@ def create(\n     content_id = not safe_id and id or str(random.randint(0, 99999999))\n \n     if title:\n-        kwargs[\'title\'] = title\n+        kwargs["title"] = title\n \n     try:\n         container.invokeFactory(type, content_id, **kwargs)\n@@ -78,11 +78,11 @@ def create(\n \n         raise InvalidParameterError(\n             "Cannot add a \'{obj_type}\' object to the container.\\n"\n-            \'Allowed types are:\\n\'\n-            \'{allowed_types}\\n\'\n-            \'{message}\'.format(\n+            "Allowed types are:\\n"\n+            "{allowed_types}\\n"\n+            "{message}".format(\n                 obj_type=type,\n-                allowed_types=\'\\n\'.join(sorted(types)),\n+                allowed_types="\\n".join(sorted(types)),\n                 message=str(e),\n             ),\n         )\n@@ -105,8 +105,8 @@ def create(\n     return content\n \n \n-@mutually_exclusive_parameters(\'path\', \'UID\')\n-@at_least_one_of(\'path\', \'UID\')\n+@mutually_exclusive_parameters("path", "UID")\n+@at_least_one_of("path", "UID")\n def get(path=None, UID=None):\n     """Get an object.\n \n@@ -122,9 +122,9 @@ def get(path=None, UID=None):\n     """\n     if path:\n         site = portal.get()\n-        site_absolute_path = \'/\'.join(site.getPhysicalPath())\n-        if not path.startswith(\'{path}\'.format(path=site_absolute_path)):\n-            path = \'{site_path}{relative_path}\'.format(\n+        site_absolute_path = "/".join(site.getPhysicalPath())\n+        if not path.startswith("{path}".format(path=site_absolute_path)):\n+            path = "{site_path}{relative_path}".format(\n                 site_path=site_absolute_path,\n                 relative_path=path,\n             )\n@@ -138,8 +138,8 @@ def get(path=None, UID=None):\n         return uuidToObject(UID)\n \n \n-@required_parameters(\'source\')\n-@at_least_one_of(\'target\', \'id\')\n+@required_parameters("source")\n+@at_least_one_of("target", "id")\n def move(source=None, target=None, id=None, safe_id=False):\n     """Move the object to the target container.\n \n@@ -181,7 +181,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n         return target[source_id]\n \n \n-@required_parameters(\'obj\', \'new_id\')\n+@required_parameters("obj", "new_id")\n def rename(obj=None, new_id=None, safe_id=False):\n     """Rename the object.\n \n@@ -208,8 +208,8 @@ def rename(obj=None, new_id=None, safe_id=False):\n     return container[new_id]\n \n \n-@required_parameters(\'source\')\n-@at_least_one_of(\'target\', \'id\')\n+@required_parameters("source")\n+@at_least_one_of("target", "id")\n def copy(source=None, target=None, id=None, safe_id=False):\n     """Copy the object to the target container.\n \n@@ -243,7 +243,7 @@ def copy(source=None, target=None, id=None, safe_id=False):\n         source.aq_parent.manage_copyObjects(source_id),\n     )\n \n-    new_id = copy_info[0][\'new_id\']\n+    new_id = copy_info[0]["new_id"]\n     if id:\n         if not safe_id and id in target:\n             msg = "Duplicate ID \'{0}\' in \'{1}\' for \'{2}\'"\n@@ -254,8 +254,8 @@ def copy(source=None, target=None, id=None, safe_id=False):\n         return target[new_id]\n \n \n-@mutually_exclusive_parameters(\'obj\', \'objects\')\n-@at_least_one_of(\'obj\', \'objects\')\n+@mutually_exclusive_parameters("obj", "objects")\n+@at_least_one_of("obj", "objects")\n def delete(obj=None, objects=None, check_linkintegrity=True):\n     """Delete the object(s).\n \n@@ -282,7 +282,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n     if check_linkintegrity:\n         site = portal.get()\n         linkintegrity_view = get_view(\n-            name=\'delete_confirmation_info\',\n+            name="delete_confirmation_info",\n             context=site,\n             request=site.REQUEST,\n         )\n@@ -290,14 +290,14 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                \'Linkintegrity-breaches: {}\'.format(breaches),\n+                "Linkintegrity-breaches: {}".format(breaches),\n             )\n \n     for obj_ in objects:\n         obj_.aq_parent.manage_delObjects([obj_.getId()])\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def get_state(obj=None, default=_marker):\n     """Get the current workflow state of the object.\n \n@@ -310,14 +310,14 @@ def get_state(obj=None, default=_marker):\n         Products.CMFCore.WorkflowCore.WorkflowException\n     :Example: :ref:`content-get-state-example`\n     """\n-    workflow = portal.get_tool(\'portal_workflow\')\n+    workflow = portal.get_tool("portal_workflow")\n \n     if default is not _marker and not workflow.getWorkflowsFor(obj):\n         return default\n \n     # This still raises WorkflowException when the workflow state is broken,\n     # ie \'review_state\' is absent\n-    return workflow.getInfoFor(ob=obj, name=\'review_state\')\n+    return workflow.getInfoFor(ob=obj, name="review_state")\n \n \n # work backwards from our end state\n@@ -353,7 +353,8 @@ def _find_path(maps, path, current_state, start_state):\n \n \n def _wf_transitions_for(workflow, from_state, to_state):\n-    """Get a list of transition IDs required to transition\n+    """Get list of transition IDs required to transition.\n+\n     from ``from_state`` to ``to_state``.\n \n     :param workflow: Workflow object which contains states and transitions\n@@ -394,14 +395,14 @@ def _transition_to(obj, workflow, to_state, **kwargs):\n     # via any route we can find\n     for wf in workflow.getWorkflowsFor(obj):\n         status = workflow.getStatusOf(wf.getId(), obj)\n-        if not status or not status.get(\'review_state\'):\n+        if not status or not status.get("review_state"):\n             continue\n-        if status[\'review_state\'] == to_state:\n+        if status["review_state"] == to_state:\n             return\n \n         transitions = _wf_transitions_for(\n             wf,\n-            status[\'review_state\'],\n+            status["review_state"],\n             to_state,\n         )\n         if not transitions:\n@@ -420,11 +421,13 @@ def _transition_to(obj, workflow, to_state, **kwargs):\n         break\n \n \n-@required_parameters(\'obj\')\n-@at_least_one_of(\'transition\', \'to_state\')\n-@mutually_exclusive_parameters(\'transition\', \'to_state\')\n+@required_parameters("obj")\n+@at_least_one_of("transition", "to_state")\n+@mutually_exclusive_parameters("transition", "to_state")\n def transition(obj=None, transition=None, to_state=None, **kwargs):\n-    """Perform a workflow transition for the object or attempt to perform\n+    """Perform a workflow transition.\n+\n+    for the object or attempt to perform\n     workflow transitions on the object to reach the given state.\n     The later will not guarantee that transition guards conditions can be met.\n \n@@ -442,58 +445,58 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n         :class:`~plone.api.exc.InvalidParameterError`\n     :Example: :ref:`content-transition-example`\n     """\n-    workflow = portal.get_tool(\'portal_workflow\')\n+    workflow = portal.get_tool("portal_workflow")\n     if transition is not None:\n         try:\n             workflow.doActionFor(obj, transition, **kwargs)\n         except WorkflowException:\n-            transitions = [\n-                action[\'id\'] for action in workflow.listActions(object=obj)\n-            ]\n+            transitions = [action["id"] for action in workflow.listActions(object=obj)]\n \n             raise InvalidParameterError(\n                 "Invalid transition \'{}\'.\\n"\n-                \'Valid transitions are:\\n\'\n-                \'{}\'.format(transition, \'\\n\'.join(sorted(transitions))),\n+                "Valid transitions are:\\n"\n+                "{}".format(transition, "\\n".join(sorted(transitions))),\n             )\n     else:\n         _transition_to(obj, workflow, to_state, **kwargs)\n-        if workflow.getInfoFor(obj, \'review_state\') != to_state:\n+        if workflow.getInfoFor(obj, "review_state") != to_state:\n             raise InvalidParameterError(\n-                \'Could not find workflow to set state to {} on {}\'.format(\n+                "Could not find workflow to set state to {} on {}".format(\n                     to_state,\n                     obj,\n                 ),\n             )\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def disable_roles_acquisition(obj=None):\n     """Disable acquisition of local roles on given obj.\n+\n     Set __ac_local_roles_block__ = 1 on obj.\n \n     :param obj: [required] Context object to block the acquisition on.\n     :type obj: Content object\n     :Example: :ref:`content-disable-roles-acquisition-example`\n     """\n-    plone_utils = portal.get_tool(\'plone_utils\')\n+    plone_utils = portal.get_tool("plone_utils")\n     plone_utils.acquireLocalRoles(obj, status=0)\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def enable_roles_acquisition(obj=None):\n     """Enable acquisition of local roles on given obj.\n+\n     Set __ac_local_roles_block__ = 0 on obj.\n \n     :param obj: [required] Context object to enable the acquisition on.\n     :type obj: Content object\n     :Example: :ref:`content-enable-roles-acquisition-example`\n     """\n-    plone_utils = portal.get_tool(\'plone_utils\')\n+    plone_utils = portal.get_tool("plone_utils")\n     plone_utils.acquireLocalRoles(obj, status=1)\n \n \n-@required_parameters(\'name\', \'context\', \'request\')\n+@required_parameters("name", "context")\n def get_view(name=None, context=None, request=None):\n     """Get a BrowserView object.\n \n@@ -508,6 +511,8 @@ def get_view(name=None, context=None, request=None):\n         :class:`~plone.api.exc.InvalidParameterError`\n     :Example: :ref:`content-get-view-example`\n     """\n+    if request is None:\n+        request = getRequest()\n     # We do not use exceptionhandling to detect if the requested view is\n     # available, because the __init__ of said view will contain\n     # errors in client code.\n@@ -525,16 +530,16 @@ def get_view(name=None, context=None, request=None):\n     if name not in available_view_names:\n         raise InvalidParameterError(\n             "Cannot find a view with name \'{name}\'.\\n"\n-            \'Available views are:\\n\'\n-            \'{views}\'.format(\n+            "Available views are:\\n"\n+            "{views}".format(\n                 name=name,\n-                views=\'\\n\'.join(sorted(available_view_names)),\n+                views="\\n".join(sorted(available_view_names)),\n             ),\n         )\n     return getMultiAdapter((context, request), name=name)\n \n \n-@required_parameters(\'obj\')\n+@required_parameters("obj")\n def get_uuid(obj=None):\n     """Get the object\'s Universally Unique IDentifier (UUID).\n \n@@ -558,32 +563,32 @@ def _parse_object_provides_query(query):\n         (eg. `{\'query\': [Iface1, Iface2], \'operator\': \'or\'}`)\n     """\n     ifaces = query\n-    operator = \'or\'\n+    operator = "or"\n     query_not = []\n \n     if isinstance(query, dict):\n-        ifaces = query.get(\'query\', [])\n-        operator = query.get(\'operator\', operator)\n-        query_not = query.get(\'not\', [])\n+        ifaces = query.get("query", [])\n+        operator = query.get("operator", operator)\n+        query_not = query.get("not", [])\n         # KeywordIndex also supports "range",\n         # but that\'s not useful for querying object_provides\n \n     if not isinstance(ifaces, (list, tuple)):\n         ifaces = [ifaces]\n-    ifaces = [getattr(x, \'__identifier__\', x) for x in ifaces]\n+    ifaces = [getattr(x, "__identifier__", x) for x in ifaces]\n \n     if not isinstance(query_not, (list, tuple)):\n         query_not = [query_not]\n-    query_not = [getattr(x, \'__identifier__\', x) for x in query_not]\n+    query_not = [getattr(x, "__identifier__", x) for x in query_not]\n \n     result = {}\n \n     if ifaces:\n-        result[\'query\'] = ifaces\n-        result[\'operator\'] = operator\n+        result["query"] = ifaces\n+        result["operator"] = operator\n \n     if query_not:\n-        result[\'not\'] = query_not\n+        result["not"] = query_not\n \n     return result\n \n@@ -604,16 +609,16 @@ def find(context=None, depth=None, **kwargs):\n     query.update(**kwargs)\n \n     # Save the original path to maybe restore it later.\n-    orig_path = query.get(\'path\')\n+    orig_path = query.get("path")\n     if isinstance(orig_path, dict):\n-        orig_path = orig_path.get(\'query\')\n+        orig_path = orig_path.get("query")\n \n     # Passing a context or depth overrides the existing path query,\n     # for now.\n     if context or depth is not None:\n         # Make the path a dictionary, unless it already is.\n         if not isinstance(orig_path, dict):\n-            query[\'path\'] = {}\n+            query["path"] = {}\n \n     # Limit search depth\n     if depth is not None:\n@@ -622,20 +627,20 @@ def find(context=None, depth=None, **kwargs):\n             context = portal.get()\n         else:\n             # Restore the original path\n-            query[\'path\'][\'query\'] = orig_path\n-        query[\'path\'][\'depth\'] = depth\n+            query["path"]["query"] = orig_path\n+        query["path"]["depth"] = depth\n \n     if context is not None:\n-        query[\'path\'][\'query\'] = \'/\'.join(context.getPhysicalPath())\n+        query["path"]["query"] = "/".join(context.getPhysicalPath())\n \n     # Convert interfaces to their identifiers and also allow to query\n     # multiple values using {\'query:[], \'operator\':\'and|or\'}\n-    obj_provides = query.get(\'object_provides\', [])\n+    obj_provides = query.get("object_provides", [])\n     if obj_provides:\n-        query[\'object_provides\'] = _parse_object_provides_query(obj_provides)\n+        query["object_provides"] = _parse_object_provides_query(obj_provides)\n \n     # Make sure we don\'t dump the whole catalog.\n-    catalog = portal.get_tool(\'portal_catalog\')\n+    catalog = portal.get_tool("portal_catalog")\n     indexes = catalog.indexes()\n     valid_indexes = [index for index in query if index in indexes]\n     if not valid_indexes:\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex f8ccbc56..096cdc0f 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -1,3 +1,5 @@\n+"""Module provides info about your instance and tools to switch roles and user."""\n+\n from AccessControl.SecurityManagement import getSecurityManager\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -20,8 +22,8 @@\n IS_TEST = None\n \n \n-@at_least_one_of(\'username\', \'user\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@at_least_one_of("username", "user")\n+@mutually_exclusive_parameters("username", "user")\n def adopt_user(username=None, user=None):\n     """Context manager for temporarily switching user inside a block.\n \n@@ -83,7 +85,7 @@ def _adopt_user(user):\n     setSecurityManager(old_security_manager)\n \n \n-@required_parameters(\'roles\')\n+@required_parameters("roles")\n def adopt_roles(roles=None):\n     """Context manager for temporarily switching roles.\n \n@@ -178,7 +180,7 @@ def getWrappedOwner(self):\n \n \n def debug_mode():\n-    """Returns True if your zope instance is running in debug mode.\n+    """Return True if your zope instance is running in debug mode.\n \n     :Example: :ref:`env-debug-mode-example`\n     """\n@@ -195,7 +197,7 @@ def test_mode():\n     if IS_TEST is None:\n         IS_TEST = False\n         for frame in traceback.extract_stack():\n-            if \'testrunner\' in frame[0] or \'testreport/runner\' in frame[0]:\n+            if "testrunner" in frame[0] or "testreport/runner" in frame[0]:\n                 IS_TEST = True\n                 break\n \n@@ -218,7 +220,7 @@ def plone_version():\n     :returns: string denoting what release of Plone this distribution contains\n     :Example: :ref:`env-plone-version-example`\n     """\n-    return get_distribution(\'Products.CMFPlone\').version\n+    return get_distribution("Products.CMFPlone").version\n \n \n def zope_version():\n@@ -227,4 +229,4 @@ def zope_version():\n     :returns: string denoting what release of Zope2 this distribution contains\n     :Example: :ref:`env-zope-version-example`\n     """\n-    return get_distribution(\'Zope2\').version\n+    return get_distribution("Zope2").version\ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex 30bf4c7e..f85bf78c 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -10,7 +10,7 @@\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n \n \n-@required_parameters(\'groupname\')\n+@required_parameters("groupname")\n def create(\n     groupname=None,\n     title=None,\n@@ -36,7 +36,7 @@ def create(\n         ValueError\n     :Example: :ref:`group-create-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n     group_tool.addGroup(\n         groupname,\n         roles,\n@@ -47,7 +47,7 @@ def create(\n     return group_tool.getGroupById(groupname)\n \n \n-@required_parameters(\'groupname\')\n+@required_parameters("groupname")\n def get(groupname=None):\n     """Get a group.\n \n@@ -59,11 +59,11 @@ def get(groupname=None):\n         ValueError\n     :Example: :ref:`group-get-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n     return group_tool.getGroupById(groupname)\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_groups(username=None, user=None):\n     """Get all groups or all groups filtered by user.\n \n@@ -87,15 +87,15 @@ def get_groups(username=None, user=None):\n         if not user:\n             raise UserNotFoundError\n \n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n \n     if user:\n         try:\n             groups = group_tool.getGroupsForPrincipal(user)\n         except AttributeError as e:\n             # Anonymous users from the Zope acl_users folder will fail on this\n-            if \'portal_groups\' in str(e):\n-                return[]\n+            if "portal_groups" in str(e):\n+                return []\n             raise\n \n         return [get(groupname=group) for group in groups]\n@@ -103,8 +103,8 @@ def get_groups(username=None, user=None):\n     return group_tool.listGroups()\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def delete(groupname=None, group=None):\n     """Delete a group.\n \n@@ -119,7 +119,7 @@ def delete(groupname=None, group=None):\n         ValueError\n     :Example: :ref:`group-delete-example`\n     """\n-    group_tool = portal.get_tool(\'portal_groups\')\n+    group_tool = portal.get_tool("portal_groups")\n \n     if group:\n         groupname = group.id\n@@ -127,10 +127,10 @@ def delete(groupname=None, group=None):\n     return group_tool.removeGroup(groupname)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def add_user(groupname=None, group=None, username=None, user=None):\n     """Add the user to a group.\n \n@@ -161,14 +161,14 @@ def add_user(groupname=None, group=None, username=None, user=None):\n \n     user_id = user.id\n     group_id = groupname or group.id\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n     portal_groups.addPrincipalToGroup(user_id, group_id)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def remove_user(groupname=None, group=None, username=None, user=None):\n     """Remove the user from a group.\n \n@@ -197,12 +197,12 @@ def remove_user(groupname=None, group=None, username=None, user=None):\n             raise UserNotFoundError\n     user_id = user.id\n     group_id = groupname or group.id\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n     portal_groups.removePrincipalFromGroup(user_id, group_id)\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def get_roles(groupname=None, group=None, obj=None, inherit=True):\n     """Get group\'s site-wide or local roles.\n \n@@ -242,16 +242,16 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n         # same as above we use the PloneUser version of getRolesInContext.\n         # Include roles from adapters granting local roles\n         roles = set()\n-        pas = portal.get_tool(\'acl_users\')\n+        pas = portal.get_tool("acl_users")\n         for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n             for adapter in lrmanager._getAdapters(obj):\n                 roles.update(adapter.getRoles(group_id))\n         return list(roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def grant_roles(groupname=None, group=None, roles=None, obj=None):\n     """Grant roles to a group.\n \n@@ -270,7 +270,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         ValueError\n     :Example: :ref:`group-grant-roles-example`\n     """\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise ValueError\n \n     group_id = groupname or group.id\n@@ -282,13 +282,11 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         actual_roles = obj.get_local_roles_for_userid(group_id)\n \n     actual_roles = [\n-        role\n-        for role in actual_roles\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        role for role in actual_roles if role not in ["Anonymous", "Authenticated"]\n     ]\n \n     roles = list(set(actual_roles) | set(roles))\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n \n     if obj is None:\n         portal_groups.setRolesForGroup(group_id=group_id, roles=roles)\n@@ -296,9 +294,9 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n         obj.manage_setLocalRoles(group_id, roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n-@at_least_one_of(\'groupname\', \'group\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("groupname", "group")\n+@at_least_one_of("groupname", "group")\n def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n     """Revoke roles from a group.\n \n@@ -317,7 +315,7 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n         ValueError\n     :Example: :ref:`group-revoke-roles-example`\n     """\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise ValueError\n \n     group_id = groupname or group.id\n@@ -328,13 +326,11 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n         actual_roles = get_roles(groupname=group_id, obj=obj, inherit=False)\n \n     actual_roles = [\n-        role\n-        for role in actual_roles\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        role for role in actual_roles if role not in ["Anonymous", "Authenticated"]\n     ]\n \n     roles = list(set(actual_roles) - set(roles))\n-    portal_groups = portal.get_tool(\'portal_groups\')\n+    portal_groups = portal.get_tool("portal_groups")\n \n     if obj is None:\n         portal_groups.setRolesForGroup(group_id=group_id, roles=roles)\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 7b5f1883..ac5b028b 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -19,10 +19,9 @@\n from zope.interface.interfaces import IInterface\n \n import datetime as dtime\n-import pkg_resources\n \n \n-logger = getLogger(\'plone.api.portal\')\n+logger = getLogger("plone.api.portal")\n \n try:\n     from Products import PrintingMailHost\n@@ -36,16 +35,14 @@\n     and PrintingMailHost.ENABLED.lower() in PrintingMailHost.TRUISMS\n ):\n     PRINTINGMAILHOST_ENABLED = True\n-elif (\n-    PrintingMailHost.ENABLED is None\n-    and PrintingMailHost.DevelopmentMode is True\n-):\n+elif PrintingMailHost.ENABLED is None and PrintingMailHost.DevelopmentMode is True:\n     PRINTINGMAILHOST_ENABLED = True\n else:\n     # PrintingMailHost only patches in debug mode.\n     # plone.api.env.debug_mode cannot be used here, because .env imports this\n     # file\n     from App.config import getConfiguration\n+\n     PRINTINGMAILHOST_ENABLED = getConfiguration().debug_mode\n \n MISSING = object()\n@@ -61,7 +58,6 @@ def get():\n     :rtype: Portal object\n     :Example: :ref:`portal-get-example`\n     """\n-\n     closest_site = getSite()\n     if closest_site is not None:\n         for potential_portal in closest_site.aq_chain:\n@@ -69,13 +65,13 @@ def get():\n                 return potential_portal\n \n     raise CannotGetPortalError(\n-        \'Unable to get the portal object. More info on \'\n-        \'https://docs.plone.org/develop/plone.api/docs/api/exceptions.html\'\n-        \'#plone.api.exc.CannotGetPortalError\',\n+        "Unable to get the portal object. More info on "\n+        "https://docs.plone.org/develop/plone.api/docs/api/exceptions.html"\n+        "#plone.api.exc.CannotGetPortalError",\n     )\n \n \n-@required_parameters(\'context\')\n+@required_parameters("context")\n def get_navigation_root(context=None):\n     """Get the navigation root object for the context.\n \n@@ -92,7 +88,7 @@ def get_navigation_root(context=None):\n     return getNavigationRootObject(context, get())\n \n \n-@required_parameters(\'name\')\n+@required_parameters("name")\n def get_tool(name=None):\n     """Get a portal tool in a simple way.\n \n@@ -112,17 +108,17 @@ def get_tool(name=None):\n         portal = get()\n         tools = []\n         for id in portal.objectIds():\n-            if id.startswith(\'portal_\'):\n+            if id.startswith("portal_"):\n                 tools.append(id)\n \n         raise InvalidParameterError(\n             "Cannot find a tool with name \'{name}\'.\\n"\n-            \'Available tools are:\\n\'\n-            \'{tools}\'.format(name=name, tools=\'\\n\'.join(tools)),\n+            "Available tools are:\\n"\n+            "{tools}".format(name=name, tools="\\n".join(tools)),\n         )\n \n \n-@required_parameters(\'recipient\', \'subject\', \'body\')\n+@required_parameters("recipient", "subject", "body")\n def send_email(\n     sender=None,\n     recipient=None,\n@@ -153,19 +149,20 @@ def send_email(\n \n     if not PRINTINGMAILHOST_ENABLED:\n         from plone.api import content\n+\n         ctrlOverview = content.get_view(\n             context=portal,\n             request=portal.REQUEST,\n-            name=\'overview-controlpanel\',\n+            name="overview-controlpanel",\n         )\n         if ctrlOverview.mailhost_warning():\n-            raise ValueError(\'MailHost is not configured.\')\n+            raise ValueError("MailHost is not configured.")\n \n-    encoding = get_registry_record(\'plone.email_charset\')\n+    encoding = get_registry_record("plone.email_charset")\n \n     if not sender:\n-        from_address = get_registry_record(\'plone.email_from_address\')\n-        from_name = get_registry_record(\'plone.email_from_name\')\n+        from_address = get_registry_record("plone.email_from_address")\n+        from_name = get_registry_record("plone.email_from_name")\n         sender = formataddr((from_name, from_address))\n         if parseaddr(sender)[1] != from_address:\n             # formataddr probably got confused by special characters.\n@@ -176,7 +173,7 @@ def send_email(\n     if isinstance(body, str):\n         body = body.encode(encoding)\n \n-    host = get_tool(\'MailHost\')\n+    host = get_tool("MailHost")\n     host.send(\n         body,\n         recipient,\n@@ -187,7 +184,7 @@ def send_email(\n     )\n \n \n-@required_parameters(\'datetime\')\n+@required_parameters("datetime")\n def get_localized_time(datetime=None, long_format=False, time_only=False):\n     """Display a date/time in a user-friendly way.\n \n@@ -216,13 +213,13 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n         ValueError\n     :Example: :ref:`portal-get-localized-time-example`\n     """\n-    tool = get_tool(name=\'translation_service\')\n+    tool = get_tool(name="translation_service")\n     request = getRequest()\n \n     # isinstance won\'t work because of date -> datetime inheritance\n     if type(datetime) is dtime.date:\n         if time_only:\n-            return \'\'\n+            return ""\n         datetime = dtime.datetime(datetime.year, datetime.month, datetime.day)\n         long_format = False\n \n@@ -230,13 +227,13 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n         datetime,\n         long_format,\n         time_only,\n-        domain=\'plonelocales\',\n+        domain="plonelocales",\n         request=request,\n     )\n \n \n-@required_parameters(\'message\', \'request\')\n-def show_message(message=None, request=None, type=\'info\'):\n+@required_parameters("message")\n+def show_message(message=None, request=None, type="info"):\n     """Display a status message.\n \n     :param message: [required] Message to show.\n@@ -249,12 +246,14 @@ def show_message(message=None, request=None, type=\'info\'):\n         ValueError\n     :Example: :ref:`portal-show-message-example`\n     """\n+    if request is None:\n+        request = getRequest()\n     IStatusMessage(request).add(message, type=type)\n \n \n-@required_parameters(\'name\')\n+@required_parameters("name")\n def get_registry_record(name=None, interface=None, default=MISSING):\n-    """Get a record value from ``plone.app.registry``\n+    """Get a record value from ``plone.app.registry``.\n \n     :param name: [required] Name\n     :type name: string\n@@ -272,8 +271,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            \'The interface parameter has to derive from \'\n-            \'zope.interface.Interface\',\n+            "The interface parameter has to derive from " "zope.interface.Interface",\n         )\n \n     registry = getUtility(IRegistry)\n@@ -282,7 +280,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry[\'{}.{}\'.format(interface.__identifier__, name)]\n+            return registry["{}.{}".format(interface.__identifier__, name)]\n \n         if default is not MISSING:\n             return default\n@@ -291,12 +289,12 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = [key for key in interface.names()]\n         msg = (\n             \'Cannot find a record with name "{name}"\'\n-            \' on interface {identifier}.\\n\'\n-            \'Did you mean?\\n\'\n-            \'{records}\'.format(\n+            " on interface {identifier}.\\n"\n+            "Did you mean?\\n"\n+            "{records}".format(\n                 name=name,\n                 identifier=interface.__identifier__,\n-                records=\'\\n\'.join(records),\n+                records="\\n".join(records),\n             )\n         )\n         raise InvalidParameterError(msg)\n@@ -309,22 +307,20 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     # Show all records that \'look like\' name.\n     # We don\'t dump the whole list, because it 1500+ items.\n-    msg = (\n-        "Cannot find a record with name \'{name}\'".format(name=name)\n-    )\n+    msg = "Cannot find a record with name \'{name}\'".format(name=name)\n     records = [key for key in registry.records.keys() if name in key]\n     if records:\n         msg = (\n-            \'{message}\\n\'\n-            \'Did you mean?:\\n\'\n-            \'{records}\'.format(message=msg, records=\'\\n\'.join(records))\n+            "{message}\\n"\n+            "Did you mean?:\\n"\n+            "{records}".format(message=msg, records="\\n".join(records))\n         )\n     raise InvalidParameterError(msg)\n \n \n-@required_parameters(\'name\', \'value\')\n+@required_parameters("name", "value")\n def set_registry_record(name=None, value=None, interface=None):\n-    """Set a record value in the ``plone.app.registry``\n+    """Set a record value in the ``plone.app.registry``.\n \n     :param name: [required] Name of the record\n     :type name: string\n@@ -340,8 +336,7 @@ def set_registry_record(name=None, value=None, interface=None):\n \n     if interface is not None and not IInterface.providedBy(interface):\n         raise InvalidParameterError(\n-            \'The interface parameter has to derive from \'\n-            \'zope.interface.Interface\',\n+            "The interface parameter has to derive from " "zope.interface.Interface",\n         )\n \n     registry = getUtility(IRegistry)\n@@ -351,8 +346,9 @@ def set_registry_record(name=None, value=None, interface=None):\n         get_registry_record(name=name, interface=interface)\n \n         from zope.schema._bootstrapinterfaces import WrongType\n+\n         try:\n-            registry[interface.__identifier__ + \'.\' + name] = value\n+            registry[interface.__identifier__ + "." + name] = value\n         except WrongType:\n             field_type = None\n             for field in interface.namesAndDescriptions():\n@@ -360,8 +356,8 @@ def set_registry_record(name=None, value=None, interface=None):\n                     field_type = field[1]\n                     break\n             raise InvalidParameterError(\n-                \'The value parameter for the field {name} needs to be \'\n-                \'{of_class} instead of {of_type}\'.format(\n+                "The value parameter for the field {name} needs to be "\n+                "{of_class} instead of {of_type}".format(\n                     name=name,\n                     of_class=str(field_type.__class__),\n                     of_type=type(value),\n@@ -384,8 +380,9 @@ def get_default_language():\n     :Example: :ref:`portal-get-default-language-example`\n     """\n     from plone.i18n.interfaces import ILanguageSchema\n+\n     registry = getUtility(IRegistry)\n-    settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+    settings = registry.forInterface(ILanguageSchema, prefix="plone")\n     return settings.default_language\n \n \n@@ -399,12 +396,14 @@ def get_current_language(context=None):\n     :Example: :ref:`portal-get-current-language-example`\n     """\n     request = getRequest()\n-    return request.get(\'LANGUAGE\', None) or \\\n-        (context and aq_inner(context).Language()) \\\n+    return (\n+        request.get("LANGUAGE", None)\n+        or (context and aq_inner(context).Language())\n         or get_default_language()\n+    )\n \n \n-def translate(msgid, domain=\'plone\', lang=None):\n+def translate(msgid, domain="plone", lang=None):\n     """Translate a message into a given language.\n \n     Default to current negotiated language if no target language specified.\n@@ -419,13 +418,13 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :rtype: str\n     :Example: :ref:`portal-translate-example`\n     """\n-    translation_service = get_tool(\'translation_service\')\n+    translation_service = get_tool("translation_service")\n     query = {\n-        \'msgid\': msgid,\n-        \'domain\': domain,\n-        \'target_language\': lang,\n+        "msgid": msgid,\n+        "domain": domain,\n+        "target_language": lang,\n     }\n     if lang is None:\n         # Pass the request, so zope.i18n.translate can negotiate the language.\n-        query[\'context\'] = getRequest()\n+        query["context"] = getRequest()\n     return translation_service.utranslate(**query)\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 1de0f4cc..3291c88b 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -24,6 +24,7 @@\n import logging\n import pkg_resources\n \n+\n try:\n     pkg_resources.get_distribution("plone.app.iterate")\n except pkg_resources.DistributionNotFound:\n@@ -40,14 +41,14 @@\n def _get_field_and_schema_for_fieldname(field_id, portal_type):\n     """Get field and its schema from a portal_type."""\n     # Turn form.widgets.IDublinCore.title into title\n-    field_id = field_id.split(\'.\')[-1]\n+    field_id = field_id.split(".")[-1]\n     for schema in iterSchemataForType(portal_type):\n         field = schema.get(field_id, None)\n         if field is not None:\n             return (field, schema)\n \n \n-@at_least_one_of(\'source\', \'target\', \'relationship\')\n+@at_least_one_of("source", "target", "relationship")\n def get(\n     source=None,\n     target=None,\n@@ -55,7 +56,7 @@ def get(\n     unrestricted=False,\n     as_dict=False,\n ):\n-    """Get specific relations given a source/target/relationship\n+    """Get specific relations given a source/target/relationship.\n \n     :param source: Object that the relations originate from.\n     :type source: Content object\n@@ -73,17 +74,17 @@ def get(\n \n     :Example: :ref:`relation-get-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     intids = getUtility(IIntIds)\n     relation_catalog = getUtility(ICatalog)\n@@ -100,11 +101,11 @@ def get(\n         checkPermission = getSecurityManager().checkPermission\n \n     if source is not None:\n-        query[\'from_id\'] = intids.getId(source)\n+        query["from_id"] = intids.getId(source)\n     if target is not None:\n-        query[\'to_id\'] = intids.getId(target)\n+        query["to_id"] = intids.getId(target)\n     if relationship is not None:\n-        query[\'from_attribute\'] = relationship\n+        query["from_attribute"] = relationship\n \n     for relation in relation_catalog.findRelations(query):\n         if relation.isBroken():\n@@ -114,8 +115,8 @@ def get(\n             source_obj = relation.from_object\n             target_obj = relation.to_object\n \n-            if checkPermission(\'View\', source_obj) and checkPermission(\n-                \'View\',\n+            if checkPermission("View", source_obj) and checkPermission(\n+                "View",\n                 target_obj,\n             ):\n                 if as_dict:\n@@ -132,9 +133,9 @@ def get(\n     return results\n \n \n-@required_parameters(\'source\', \'target\', \'relationship\')\n+@required_parameters("source", "target", "relationship")\n def create(source=None, target=None, relationship=None):\n-    """Create a relation from source to target using zc.relation\n+    """Create a relation from source to target using zc.relation.\n \n     :param source: [required] Object that the relation will originate from.\n     :type source: Content object\n@@ -147,14 +148,14 @@ def create(source=None, target=None, relationship=None):\n     :type id: string\n     :Example: :ref:`relation-create-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if not isinstance(relationship, str):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n@@ -165,9 +166,9 @@ def create(source=None, target=None, relationship=None):\n     # Check if there is exactly this relation.\n     # If so remove it and create a fresh one.\n     query = {\n-        \'from_attribute\': from_attribute,\n-        \'from_id\': from_id,\n-        \'to_id\': to_id,\n+        "from_attribute": from_attribute,\n+        "from_id": from_id,\n+        "to_id": to_id,\n     }\n     for rel in relation_catalog.findRelations(query):\n         relation_catalog.unindex(rel)\n@@ -178,10 +179,7 @@ def create(source=None, target=None, relationship=None):\n         modifiedContent(source, None)\n         return\n \n-    if (\n-        ITERATE_RELATION_NAME is not None\n-        and from_attribute == ITERATE_RELATION_NAME\n-    ):\n+    if ITERATE_RELATION_NAME is not None and from_attribute == ITERATE_RELATION_NAME:\n         # Iterate relations use a subclass of RelationValue\n         relation = StagingRelationValue(to_id)\n         event._setRelation(source, ITERATE_RELATION_NAME, relation)\n@@ -197,7 +195,7 @@ def create(source=None, target=None, relationship=None):\n         # The relationship is not the name of a dexterity field.\n         # Only create a relation.\n         logger.debug(\n-            \'No dexterity field. Setting relation %s from %s to %s\',\n+            "No dexterity field. Setting relation %s from %s to %s",\n             source.absolute_url(),\n             target.absolute_url(),\n             relationship,\n@@ -209,7 +207,7 @@ def create(source=None, target=None, relationship=None):\n \n     if isinstance(field, RelationList):\n         logger.info(\n-            \'Add relation to relationlist %s from %s to %s\',\n+            "Add relation to relationlist %s from %s to %s",\n             from_attribute,\n             source.absolute_url(),\n             target.absolute_url(),\n@@ -222,7 +220,7 @@ def create(source=None, target=None, relationship=None):\n \n     elif isinstance(field, (Relation, RelationChoice)):\n         logger.info(\n-            \'Add relation %s from %s to %s\',\n+            "Add relation %s from %s to %s",\n             from_attribute,\n             source.absolute_url(),\n             target.absolute_url(),\n@@ -238,16 +236,16 @@ def create(source=None, target=None, relationship=None):\n     # Let\'s create the relationship and log a warning.\n     event._setRelation(source, from_attribute, RelationValue(to_id))\n     logger.warning(\n-        \'Created relation %s on an item that has a field with the same name \'\n-        \'which is not a relation field. Is this what you wanted? \'\n-        \'Relation points from %s to %s\',\n+        "Created relation %s on an item that has a field with the same name "\n+        "which is not a relation field. Is this what you wanted? "\n+        "Relation points from %s to %s",\n         from_attribute,\n         source.absolute_url(),\n         target.absolute_url(),\n     )\n \n \n-@at_least_one_of(\'source\', \'target\', \'relationship\')\n+@at_least_one_of("source", "target", "relationship")\n def delete(source=None, target=None, relationship=None):\n     """Delete relation or relations.\n \n@@ -262,27 +260,27 @@ def delete(source=None, target=None, relationship=None):\n     :type id: string\n     :Example: :ref:`relation-delete-example`\n     """\n-    if source is not None and not base_hasattr(source, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n+    if source is not None and not base_hasattr(source, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(source))\n \n-    if target is not None and not base_hasattr(target, \'portal_type\'):\n-        raise InvalidParameterError(\'{} has no portal_type\'.format(target))\n+    if target is not None and not base_hasattr(target, "portal_type"):\n+        raise InvalidParameterError("{} has no portal_type".format(target))\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError(\'{} is no string\'.format(relationship))\n+        raise InvalidParameterError("{} is no string".format(relationship))\n \n     query = {}\n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n     if source is not None:\n-        query[\'from_id\'] = intids.getId(source)\n+        query["from_id"] = intids.getId(source)\n     if target is not None:\n-        query[\'to_id\'] = intids.getId(target)\n+        query["to_id"] = intids.getId(target)\n     if relationship is not None:\n-        query[\'from_attribute\'] = relationship\n+        query["from_attribute"] = relationship\n     for rel in relation_catalog.findRelations(query):\n         source = rel.from_object\n         from_attribute = rel.from_attribute\n@@ -300,7 +298,7 @@ def delete(source=None, target=None, relationship=None):\n         field, _schema = field_and_schema\n         if isinstance(field, RelationList):\n             logger.info(\n-                \'Remove relation from %s to %s from relationlist %s\',\n+                "Remove relation from %s to %s from relationlist %s",\n                 source.absolute_url(),\n                 target.absolute_url(),\n                 from_attribute,\n@@ -312,7 +310,7 @@ def delete(source=None, target=None, relationship=None):\n \n         elif isinstance(field, (Relation, RelationChoice)):\n             logger.info(\n-                \'Remove relation %s from %s to %s\',\n+                "Remove relation %s from %s to %s",\n                 from_attribute,\n                 source.absolute_url(),\n                 target.absolute_url(),\ndiff --git a/src/plone/api/tests/base.py b/src/plone/api/tests/base.py\nindex 654836fd..e39c2a90 100644\n--- a/src/plone/api/tests/base.py\n+++ b/src/plone/api/tests/base.py\n@@ -9,33 +9,34 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n \n-import pkg_resources\n-\n \n class PloneApiLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         """Prepare Zope instance by loading appropriate ZCMLs."""\n         import plone.app.dexterity\n+\n         self.loadZCML(package=plone.app.dexterity)\n         import plone.api\n-        self.loadZCML(package=plone.api, name=\'testing.zcml\')\n+\n+        self.loadZCML(package=plone.api, name="testing.zcml")\n         import plone.app.contenttypes\n+\n         self.loadZCML(package=plone.app.contenttypes)\n \n     def setUpPloneSite(self, portal):\n         """Prepare a Plone instance for testing."""\n         # Install into Plone site using portal_setup\n-        self.applyProfile(portal, \'Products.CMFPlone:plone\')\n-        self.applyProfile(portal, \'plone.app.contenttypes:default\')\n+        self.applyProfile(portal, "Products.CMFPlone:plone")\n+        self.applyProfile(portal, "plone.app.contenttypes:default")\n \n         # Create dummy content types for Dexterity tests\n-        self.applyProfile(portal, \'plone.api:testfixture\')\n+        self.applyProfile(portal, "plone.api:testfixture")\n \n         # Login as manager\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n \n     def tearDownZope(self, app):\n@@ -44,10 +45,10 @@ def tearDownZope(self, app):\n \n FIXTURE = PloneApiLayer()\n INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(FIXTURE, ),\n-    name=\'PloneApiLayer:Integration\',\n+    bases=(FIXTURE,),\n+    name="PloneApiLayer:Integration",\n )\n FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(FIXTURE, ),\n-    name=\'PloneApiLayer:Functional\',\n+    bases=(FIXTURE,),\n+    name="PloneApiLayer:Functional",\n )\ndiff --git a/src/plone/api/tests/doctests/env.md b/src/plone/api/tests/doctests/env.md\nnew file mode 120000\nindex 00000000..1eb7795d\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/env.md\n@@ -0,0 +1 @@\n+../../../../../docs/env.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/doctests/relation.md b/src/plone/api/tests/doctests/relation.md\nnew file mode 120000\nindex 00000000..b8e3b628\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/relation.md\n@@ -0,0 +1 @@\n+../../../../../docs/relation.md\n\\ No newline at end of file\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 6c0c0922..03200cf6 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -8,9 +8,8 @@\n from plone.api.content import _parse_object_provides_query\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n-from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException  # NOQA: E501\n+from plone.app.linkintegrity.exceptions import LinkIntegrityNotificationException\n from plone.app.textfield import RichTextValue\n-from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer import indexer\n from plone.uuid.interfaces import IMutableUUID\n from plone.uuid.interfaces import IUUIDGenerator\n@@ -28,12 +27,11 @@\n from zope.lifecycleevent import modified\n from zope.lifecycleevent import ObjectMovedEvent\n \n-import pkg_resources\n import unittest\n \n \n class TestPloneApiContent(unittest.TestCase):\n-    """Unit tests for content manipulation using plone.api"""\n+    """Unit tests for content manipulation using plone.api."""\n \n     layer = INTEGRATION_TESTING\n \n@@ -51,65 +49,66 @@ def setUp(self):\n             |-- conference\n             `-- sprint\n         """\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.blog = api.content.create(\n-            type=\'Link\',\n-            id=\'blog\',\n+            type="Link",\n+            id="blog",\n             container=self.portal,\n         )\n         self.about = api.content.create(\n-            type=\'Folder\',\n-            id=\'about\',\n+            type="Folder",\n+            id="about",\n             container=self.portal,\n         )\n         self.events = api.content.create(\n-            type=\'Folder\',\n-            id=\'events\',\n+            type="Folder",\n+            id="events",\n             container=self.portal,\n         )\n \n         self.team = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'team\',\n+            type="Document",\n+            id="team",\n         )\n         self.contact = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'contact\',\n+            type="Document",\n+            id="contact",\n         )\n \n         self.training = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'training\',\n+            type="Event",\n+            id="training",\n         )\n         self.conference = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'conference\',\n+            type="Event",\n+            id="conference",\n         )\n         self.sprint = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'sprint\',\n+            type="Event",\n+            id="sprint",\n         )\n \n         self.image = api.content.create(\n             container=self.portal,\n-            type=\'Image\',\n-            id=\'image\',\n+            type="Image",\n+            id="image",\n         )\n \n     def verify_intids(self):\n-        """Test that the intids are in order"""\n+        """Test that the intids are in order."""\n         from zope.component import getUtility\n         from zope.intid.interfaces import IIntIds\n \n         intids = getUtility(IIntIds)\n         broken_keys = [\n-            key for key in intids.ids\n+            key\n+            for key in intids.ids\n             if not self.portal.unrestrictedTraverse(key.path, None)\n         ]\n         obsolete_paths = [key.path for key in broken_keys]\n@@ -117,10 +116,7 @@ def verify_intids(self):\n \n         # Objects used as keys with a hash can behave strangely.\n         # I have seen this go wrong in a production site.\n-        weird_keys = [\n-            key for key in intids.ids\n-            if key not in intids.ids\n-        ]\n+        weird_keys = [key for key in intids.ids if key not in intids.ids]\n         weird_paths = [key.path for key in weird_keys]\n         self.assertListEqual(weird_paths, [])\n \n@@ -136,8 +132,8 @@ def test_create_constraints(self):\n         # Check the constraints for the type container\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n-                type=\'Document\',\n-                id=\'test-doc\',\n+                type="Document",\n+                id="test-doc",\n             )\n \n         # Check the constraints for the type parameter\n@@ -145,14 +141,14 @@ def test_create_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n                 container=container,\n-                id=\'test-doc\',\n+                id="test-doc",\n             )\n \n         # Check the constraints for id and title parameters\n         with self.assertRaises(MissingParameterError):\n             api.content.create(\n                 container=container,\n-                type=\'Document\',\n+                type="Document",\n             )\n \n         # Check the constraints for allowed types in the container\n@@ -160,8 +156,8 @@ def test_create_constraints(self):\n         with self.assertRaises(InvalidParameterError):\n             api.content.create(\n                 container=container,\n-                type=\'foo\',\n-                id=\'test-foo\',\n+                type="foo",\n+                id="test-foo",\n             )\n \n         # Check the constraints for allowed types in the container if\n@@ -170,14 +166,14 @@ def test_create_constraints(self):\n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.create(\n                 container=container,\n-                type=\'foo\',\n-                id=\'test-foo\',\n+                type="foo",\n+                id="test-foo",\n             )\n \n         # Check if the underlying error message is included\n         # in the InvalidParameterError message\n         self.assertIn(\n-            \'No such content type: foo\',\n+            "No such content type: foo",\n             str(cm.exception),\n         )\n \n@@ -185,31 +181,32 @@ def test_create_constraints(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            id=\'test-folder\',\n+            type="Folder",\n+            id="test-folder",\n         )\n         assert folder\n \n         # Constraint the allowed types\n         ENABLED = 1\n-        if getattr(aq_base(folder), \'setConstrainTypesMode\', None):  # AT\n+        if getattr(aq_base(folder), "setConstrainTypesMode", None):  # AT\n             folder.setConstrainTypesMode(ENABLED)\n-            folder.setLocallyAllowedTypes((\'News Item\', ))\n+            folder.setLocallyAllowedTypes(("News Item",))\n         else:  # DX\n             from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n+\n             constraints = ISelectableConstrainTypes(folder)\n             constraints.setConstrainTypesMode(ENABLED)\n-            constraints.setLocallyAllowedTypes((\'News Item\', ))\n+            constraints.setLocallyAllowedTypes(("News Item",))\n \n         with self.assertRaises(InvalidParameterError):\n             api.content.create(\n                 container=folder,\n-                type=\'Document\',\n-                id=\'test-doc\',\n+                type="Document",\n+                id="test-doc",\n             )\n \n     def test_create_dexterity(self):\n-        """Test create dexterity"""\n+        """Test create dexterity."""\n         container = self.portal\n \n         # This section check for DX compatibilty. The custom DX types defined\n@@ -218,45 +215,45 @@ def test_create_dexterity(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Dexterity Folder\',\n-            id=\'test-folder\',\n+            type="Dexterity Folder",\n+            id="test-folder",\n         )\n         assert folder\n-        self.assertEqual(folder.id, \'test-folder\')\n-        self.assertEqual(folder.portal_type, \'Dexterity Folder\')\n+        self.assertEqual(folder.id, "test-folder")\n+        self.assertEqual(folder.portal_type, "Dexterity Folder")\n \n         # Create an item\n         page = api.content.create(\n             container=folder,\n-            type=\'Dexterity Item\',\n-            id=\'test-item\',\n+            type="Dexterity Item",\n+            id="test-item",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-item\')\n-        self.assertEqual(page.portal_type, \'Dexterity Item\')\n+        self.assertEqual(page.id, "test-item")\n+        self.assertEqual(page.portal_type, "Dexterity Item")\n \n         # Create an item with a title and without an id\n         page = api.content.create(\n             container=folder,\n-            type=\'Dexterity Item\',\n-            title=\'Test id generated\',\n+            type="Dexterity Item",\n+            title="Test id generated",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-id-generated\')\n-        self.assertEqual(page.Title(), \'Test id generated\')\n-        self.assertEqual(page.portal_type, \'Dexterity Item\')\n+        self.assertEqual(page.id, "test-id-generated")\n+        self.assertEqual(page.Title(), "Test id generated")\n+        self.assertEqual(page.portal_type, "Dexterity Item")\n \n         # Try to create another item with same id, this should fail\n         with self.assertRaises(BadRequest):\n             api.content.create(\n                 container=folder,\n-                type=\'Dexterity Item\',\n-                id=\'test-item\',\n+                type="Dexterity Item",\n+                id="test-item",\n             )\n         self.verify_intids()\n \n     def test_create_content(self):\n-        """Test create content"""\n+        """Test create content."""\n         container = self.portal\n \n         # This section below is either AT (Plone < 5) or DX (Plone >= 5)\n@@ -266,40 +263,40 @@ def test_create_content(self):\n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            id=\'test-folder\',\n+            type="Folder",\n+            id="test-folder",\n         )\n         assert folder\n-        self.assertEqual(folder.id, \'test-folder\')\n-        self.assertEqual(folder.portal_type, \'Folder\')\n+        self.assertEqual(folder.id, "test-folder")\n+        self.assertEqual(folder.portal_type, "Folder")\n \n         # Create a document\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-document\')\n-        self.assertEqual(page.portal_type, \'Document\')\n+        self.assertEqual(page.id, "test-document")\n+        self.assertEqual(page.portal_type, "Document")\n \n         # Create a document with a title and without an id\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            title=\'Test id generated\',\n+            type="Document",\n+            title="Test id generated",\n         )\n         assert page\n-        self.assertEqual(page.id, \'test-id-generated\')\n-        self.assertEqual(page.Title(), \'Test id generated\')\n-        self.assertEqual(page.portal_type, \'Document\')\n+        self.assertEqual(page.id, "test-id-generated")\n+        self.assertEqual(page.Title(), "Test id generated")\n+        self.assertEqual(page.portal_type, "Document")\n \n         # Try to create another page with same id, this should fail\n         with self.assertRaises(BadRequest):\n             api.content.create(\n                 container=folder,\n-                type=\'Document\',\n-                id=\'test-document\',\n+                type="Document",\n+                id="test-document",\n             )\n         self.verify_intids()\n \n@@ -309,53 +306,53 @@ def test_create_with_safe_id(self):\n \n         first_page = api.content.create(\n             container=container,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n             safe_id=True,\n         )\n         assert first_page\n-        self.assertEqual(first_page.id, \'test-document\')\n-        self.assertEqual(first_page.portal_type, \'Document\')\n+        self.assertEqual(first_page.id, "test-document")\n+        self.assertEqual(first_page.portal_type, "Document")\n \n         # Second page is created with non-conflicting id\n         second_page = api.content.create(\n             container=container,\n-            type=\'Document\',\n-            id=\'test-document\',\n+            type="Document",\n+            id="test-document",\n             safe_id=True,\n         )\n         assert second_page\n-        self.assertEqual(second_page.id, \'test-document-1\')\n-        self.assertEqual(second_page.portal_type, \'Document\')\n+        self.assertEqual(second_page.id, "test-document-1")\n+        self.assertEqual(second_page.portal_type, "Document")\n \n     def test_create_raises_unicodedecodeerror(self):\n         """Test that the create method raises UnicodeDecodeErrors correctly."""\n         site = getGlobalSiteManager()\n-        unicode_exception_message = \'This is a fake unicode error\'\n+        unicode_exception_message = "This is a fake unicode error"\n \n         # register a title indexer that will force a UnicodeDecodeError\n         # during content reindexing\n         @indexer(IContentish, IZCatalog)\n         def force_unicode_error(object):\n             raise UnicodeDecodeError(\n-                \'ascii\',\n-                b\'x\',\n+                "ascii",\n+                b"x",\n                 1,\n                 5,\n                 unicode_exception_message,\n             )\n \n-        site.registerAdapter(factory=force_unicode_error, name=\'Title\')\n+        site.registerAdapter(factory=force_unicode_error, name="Title")\n \n         def unregister_indexer():\n-            site.unregisterAdapter(factory=force_unicode_error, name=\'Title\')\n+            site.unregisterAdapter(factory=force_unicode_error, name="Title")\n \n         self.addCleanup(unregister_indexer)\n \n         with self.assertRaises(UnicodeDecodeError) as ude:\n             api.content.create(\n-                type=\'Folder\',\n-                id=\'test-unicode-folder\',\n+                type="Folder",\n+                id="test-unicode-folder",\n                 container=self.portal,\n             )\n \n@@ -363,115 +360,117 @@ def unregister_indexer():\n         self.assertEqual(ude.exception.reason, unicode_exception_message)\n \n     def test_create_at_with_title_in_request(self):\n-        """ Test that content gets created with the correct title, even if\n-            request.form[\'title\'] already exists and has a different value.\n-            This can occur, for example, when adding a Plone with an enabled\n-            product that creates a site structure. In that case, the \'title\'\n-            would be that of the portal.\n-            Only AT content types are affected, due to content.processForm.\n+        """Test that content gets created with the correct title.\n+\n+        even if request.form[\'title\'] already exists and has a different value.\n+        This can occur, for example, when adding a Plone with an enabled\n+        product that creates a site structure. In that case, the \'title\'\n+        would be that of the portal.\n+        Only AT content types are affected, due to content.processForm.\n         """\n-        leaked_title = \'This should not be set on content items\'\n-        self.layer[\'request\'].form[\'title\'] = leaked_title\n+        leaked_title = "This should not be set on content items"\n+        self.layer["request"].form["title"] = leaked_title\n \n         container = self.portal\n \n         # Create a folder\n         folder = api.content.create(\n             container=container,\n-            type=\'Folder\',\n-            title=\'Test folder\',\n+            type="Folder",\n+            title="Test folder",\n         )\n \n-        self.assertEqual(folder.title, \'Test folder\')\n+        self.assertEqual(folder.title, "Test folder")\n \n         # Create a document\n         page = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            title=\'Test document\',\n+            type="Document",\n+            title="Test document",\n         )\n \n-        self.assertEqual(page.title, \'Test document\')\n+        self.assertEqual(page.title, "Test document")\n \n     def test_create_collection(self):\n         """Test create a Collection."""\n         collection = api.content.create(\n             container=self.portal,\n-            type=\'Collection\',\n-            title=\'Mandelbrot set\',\n-            description=\'Image gallery of a zoom sequence\',\n+            type="Collection",\n+            title="Mandelbrot set",\n+            description="Image gallery of a zoom sequence",\n             query=[\n                 {\n-                 \'i\': \'Type\',\n-                 \'o\': \'plone.app.querystring.operation.string.is\',\n-                 \'v\': [\'Image\'],\n+                    "i": "Type",\n+                    "o": "plone.app.querystring.operation.string.is",\n+                    "v": ["Image"],\n                 },\n             ],\n         )\n-        self.assertEqual(collection.Title(), \'Mandelbrot set\')\n+        self.assertEqual(collection.Title(), "Mandelbrot set")\n \n     def test_create_event(self):\n         """Test create a event."""\n         import datetime\n+\n         today = datetime.datetime.now()\n         tomorrow = today + datetime.timedelta(days=1)\n         event = api.content.create(\n             container=self.portal,\n-            type=\'Event\',\n-            title=\'My event\',\n+            type="Event",\n+            title="My event",\n             start=today,\n             end=tomorrow,\n         )\n         self.assertEqual(event.start, today)\n         self.assertEqual(event.end, tomorrow)\n-        results = api.content.find(Title=\'My event\')\n+        results = api.content.find(Title="My event")\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].start, today)\n         self.assertEqual(results[0].end, tomorrow)\n \n     def test_get_constraints(self):\n         """Test the constraints when content is fetched with get."""\n-\n         # Path and UID parameter can not be given together\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.content.get(\n-                path=\'/\',\n-                UID=\'dummy\',\n+                path="/",\n+                UID="dummy",\n             )\n \n         # Either a path or UID must be given\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.get()\n \n     def test_get(self):\n         """Test the getting of content in varios ways."""\n-\n         # Test getting the about folder by path and UID\n-        about_by_path = api.content.get(\'/about\')\n+        about_by_path = api.content.get("/about")\n         about_by_uid = api.content.get(UID=self.about.UID())\n         self.assertEqual(self.about, about_by_path)\n         self.assertEqual(self.about, about_by_uid)\n \n         # Test getting the team document by path and UID\n-        team_by_path = api.content.get(\'/about/team\')\n+        team_by_path = api.content.get("/about/team")\n         team_by_uid = api.content.get(UID=self.team.UID())\n         self.assertEqual(self.team, team_by_path)\n         self.assertEqual(self.team, team_by_uid)\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            \'/{}/about/team\'.format(self.portal.getId()),\n+            "/{}/about/team".format(self.portal.getId()),\n         )\n         self.assertEqual(self.team, team_by_path)\n \n         # Test getting an non-existing item by path and UID\n-        self.assertFalse(api.content.get(\'/spam/ham\'))\n-        self.assertFalse(api.content.get(UID=\'bacon\'))\n+        self.assertFalse(api.content.get("/spam/ham"))\n+        self.assertFalse(api.content.get(UID="bacon"))\n \n         # Test getting a non-existing subfolder by path\n-        self.assertFalse(api.content.get(\'/about/spam\'))\n+        self.assertFalse(api.content.get("/about/spam"))\n \n     def test_move_constraints(self):\n         """Test the constraints for moving content."""\n@@ -493,64 +492,66 @@ def test_move_constraints(self):\n \n     def test_move(self):\n         """Test moving of content."""\n-\n         container = self.portal\n \n         # Move contact to the same folder (basically a rename)\n-        nucontact = api.content.move(source=self.contact, id=\'nu-contact\')\n-        assert (container[\'about\'][\'nu-contact\']\n-                and container[\'about\'][\'nu-contact\'] == nucontact)\n-        assert \'contact\' not in container[\'about\'].keys()\n+        nucontact = api.content.move(source=self.contact, id="nu-contact")\n+        assert (\n+            container["about"]["nu-contact"]\n+            and container["about"]["nu-contact"] == nucontact\n+        )\n+        assert "contact" not in container["about"].keys()\n \n         # Move team page to portal root\n         team = api.content.move(source=self.team, target=container)\n-        assert container[\'team\'] and container[\'team\'] == team\n-        assert \'team\' not in container[\'about\'].keys()\n+        assert container["team"] and container["team"] == team\n+        assert "team" not in container["about"].keys()\n \n         # When moving objects we can change the id\n-        team = container[\'team\']\n+        team = container["team"]\n         ourteam = api.content.move(\n             source=team,\n             target=self.about,\n-            id=\'our-team\',\n+            id="our-team",\n+        )\n+        assert (\n+            container["about"]["our-team"] and container["about"]["our-team"] == ourteam\n         )\n-        assert (container[\'about\'][\'our-team\']\n-                and container[\'about\'][\'our-team\'] == ourteam)\n-        assert \'team\' not in container.keys()\n+        assert "team" not in container.keys()\n \n         # Test with safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n         linktoblog1 = api.content.move(\n             source=self.blog,\n             target=self.about,\n-            id=\'link-to-blog\',\n+            id="link-to-blog",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1\']\n-                and container[\'about\'][\'link-to-blog-1\'] == linktoblog1)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n-        api.content.move(source=self.conference, id=\'conference-renamed\')\n-        self.assertEqual(self.conference.id, \'conference-renamed\')\n+        api.content.move(source=self.conference, id="conference-renamed")\n+        self.assertEqual(self.conference.id, "conference-renamed")\n \n         # Move folderish object\n         about = api.content.move(\n             source=container.about,\n             target=container.events,\n         )\n-        assert (\n-            container[\'events\'][\'about\']\n-            and container[\'events\'][\'about\'] == about\n-        )\n+        assert container["events"]["about"] and container["events"]["about"] == about\n         self.verify_intids()\n \n     def test_move_no_move_if_target_is_source_parent(self):\n-        """Test that trying to move an object to its parent is a noop"""\n-\n+        """Test that trying to move an object to its parent is a noop."""\n         target = self.contact.aq_parent\n-        with mock.patch.object(target, \'manage_pasteObjects\'):\n+        with mock.patch.object(target, "manage_pasteObjects"):\n             api.content.move(\n                 source=self.contact,\n                 target=target,\n@@ -573,7 +574,6 @@ def test_rename_constraints(self):\n \n     def test_rename(self):\n         """Test renaming of content."""\n-\n         container = self.portal\n         sm = getGlobalSiteManager()\n         firedEvents = []\n@@ -581,15 +581,17 @@ def test_rename(self):\n         def recordEvent(event):\n             firedEvents.append(event.__class__)\n \n-        sm.registerHandler(recordEvent, (IObjectWillBeMovedEvent, ))\n-        sm.registerHandler(recordEvent, (IObjectMovedEvent, ))\n-        sm.registerHandler(recordEvent, (IObjectModifiedEvent, ))\n+        sm.registerHandler(recordEvent, (IObjectWillBeMovedEvent,))\n+        sm.registerHandler(recordEvent, (IObjectMovedEvent,))\n+        sm.registerHandler(recordEvent, (IObjectModifiedEvent,))\n \n         # Rename contact\n-        nucontact = api.content.rename(obj=self.contact, new_id=\'nu-contact\')\n-        assert (container[\'about\'][\'nu-contact\']\n-                and container[\'about\'][\'nu-contact\'] == nucontact)\n-        assert \'contact\' not in container[\'about\'].keys()\n+        nucontact = api.content.rename(obj=self.contact, new_id="nu-contact")\n+        assert (\n+            container["about"]["nu-contact"]\n+            and container["about"]["nu-contact"] == nucontact\n+        )\n+        assert "contact" not in container["about"].keys()\n \n         self.assertCountEqual(\n             firedEvents,\n@@ -599,41 +601,49 @@ def recordEvent(event):\n                 ContainerModifiedEvent,\n             ],\n         )\n-        sm.unregisterHandler(recordEvent, (IObjectWillBeMovedEvent, ))\n-        sm.unregisterHandler(recordEvent, (IObjectMovedEvent, ))\n-        sm.unregisterHandler(recordEvent, (IObjectModifiedEvent, ))\n+        sm.unregisterHandler(recordEvent, (IObjectWillBeMovedEvent,))\n+        sm.unregisterHandler(recordEvent, (IObjectMovedEvent,))\n+        sm.unregisterHandler(recordEvent, (IObjectModifiedEvent,))\n \n         # Test with safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n         linktoblog1 = api.content.rename(\n-            obj=container[\'about\'][\'link-to-blog\'],\n-            new_id=\'link-to-blog\',\n+            obj=container["about"]["link-to-blog"],\n+            new_id="link-to-blog",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1\']\n-                and container[\'about\'][\'link-to-blog-1\'] == linktoblog1)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n         # Rename to existing id\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n \n         with self.assertRaises(CopyError):\n             api.content.rename(\n-                obj=container[\'about\'][\'link-to-blog\'],\n-                new_id=\'link-to-blog-1\',\n+                obj=container["about"]["link-to-blog"],\n+                new_id="link-to-blog-1",\n             )\n         linktoblog11 = api.content.rename(\n-            obj=container[\'about\'][\'link-to-blog\'],\n-            new_id=\'link-to-blog-1\',\n+            obj=container["about"]["link-to-blog"],\n+            new_id="link-to-blog-1",\n             safe_id=True,\n         )\n-        assert (container[\'about\'][\'link-to-blog-1-1\']\n-                and container[\'about\'][\'link-to-blog-1-1\'] == linktoblog11)\n-        assert \'link-to-blog\' not in container.keys()\n+        assert (\n+            container["about"]["link-to-blog-1-1"]\n+            and container["about"]["link-to-blog-1-1"] == linktoblog11\n+        )\n+        assert "link-to-blog" not in container.keys()\n \n     def test_rename_same_id(self):\n         api.content.rename(obj=self.contact, new_id=self.contact.getId())\n@@ -643,18 +653,18 @@ def test_rename_same_folder(self):\n         # already an existing folderish item with that id, it should choose\n         # a new name.\n \n-        events = self.portal[\'events\']\n-        about = self.portal[\'about\']\n+        events = self.portal["events"]\n+        about = self.portal["about"]\n         api.content.rename(\n             obj=events,\n-            new_id=\'about\',\n+            new_id="about",\n             safe_id=True,\n         )\n \n-        assert self.portal[\'about\']\n-        assert self.portal[\'about-1\']\n-        assert self.portal[\'about\'].aq_base is about.aq_base\n-        assert self.portal[\'about-1\'].aq_base is events.aq_base\n+        assert self.portal["about"]\n+        assert self.portal["about-1"]\n+        assert self.portal["about"].aq_base is about.aq_base\n+        assert self.portal["about-1"].aq_base is events.aq_base\n \n     def test_copy_constraints(self):\n         """Test the constraints for moving content."""\n@@ -676,41 +686,41 @@ def test_copy(self):\n \n         # Copy team page to portal root\n         team = api.content.copy(source=self.team, target=container)\n-        assert container[\'team\'] and container[\'team\'] == team\n+        assert container["team"] and container["team"] == team\n         assert (\n-            container[\'about\'][\'team\']\n-            and container[\'about\'][\'team\'] != team\n+            container["about"]["team"] and container["about"]["team"] != team\n         )  # old content still available\n \n         # When copying objects we can change the id\n         ourteam = api.content.copy(\n             source=self.team,\n             target=self.about,\n-            id=\'our-team\',\n+            id="our-team",\n         )\n-        assert(\n-            container[\'about\'][\'our-team\']\n-            and container[\'about\'][\'our-team\'] == ourteam\n+        assert (\n+            container["about"]["our-team"] and container["about"]["our-team"] == ourteam\n         )\n \n         # When copying whithout target parameter should take source parent\n-        api.content.copy(source=self.team, id=\'our-team-no-target\')\n-        assert container[\'about\'][\'our-team-no-target\']\n+        api.content.copy(source=self.team, id="our-team-no-target")\n+        assert container["about"]["our-team-no-target"]\n \n         # Test the safe_id option when moving content\n         api.content.create(\n-            container=self.about, type=\'Link\', id=\'link-to-blog\',\n+            container=self.about,\n+            type="Link",\n+            id="link-to-blog",\n         )\n \n         linktoblog1 = api.content.copy(\n             source=self.blog,\n             target=self.about,\n-            id=\'link-to-blog\',\n+            id="link-to-blog",\n             safe_id=True,\n         )\n-        assert(\n-            container[\'about\'][\'link-to-blog-1\']\n-            and container[\'about\'][\'link-to-blog-1\'] == linktoblog1\n+        assert (\n+            container["about"]["link-to-blog-1"]\n+            and container["about"]["link-to-blog-1"] == linktoblog1\n         )\n \n         # Copy folderish content under target\n@@ -718,28 +728,29 @@ def test_copy(self):\n             source=container.about,\n             target=container.events,\n         )\n-        assert(\n-            container[\'events\'][\'about\']\n-            and container[\'events\'][\'about\'] == about\n-        )\n+        assert container["events"]["about"] and container["events"]["about"] == about\n \n         # When copying with safe_id=True, the prior created item should not be\n         # renamed, and the copied item should have a sane postfix\n \n         # Create a products folder\n         products = api.content.create(\n-            type=\'Folder\', id=\'products\', container=self.portal,\n+            type="Folder",\n+            id="products",\n+            container=self.portal,\n         )\n \n         # Create a item inside the products folder\n         item = api.content.create(\n-            container=products, type=\'Document\', id=\'item\',\n+            container=products,\n+            type="Document",\n+            id="item",\n         )\n \n-        api.content.copy(source=item, id=\'item\', safe_id=True)\n+        api.content.copy(source=item, id="item", safe_id=True)\n \n-        assert container[\'products\'][\'item-1\']\n-        assert container[\'products\'][\'item\']\n+        assert container["products"]["item-1"]\n+        assert container["products"]["item"]\n \n         # When copying with safe_id=True, the created bargain with the id=item\n         # should not be renamed, and the item copied from the products folder\n@@ -748,34 +759,35 @@ def test_copy(self):\n \n         # Create a second folder named bargains\n         bargains = api.content.create(\n-            type=\'Folder\',\n-            id=\'bargains\',\n+            type="Folder",\n+            id="bargains",\n             container=self.portal,\n         )\n \n         # Create a bargain inside the bargains folder with the id="item"\n         bargain = api.content.create(\n-            type=\'Document\',\n-            id=\'item\',\n+            type="Document",\n+            id="item",\n             container=bargains,\n         )\n         api.content.copy(\n             source=item,\n             target=bargains,\n-            id=\'item\',\n+            id="item",\n             safe_id=True,\n         )\n \n-        assert container[\'bargains\'][\'item-1\']\n-        assert container[\'bargains\'][\'item\']\n-        assert container[\'bargains\'][\'item\'].aq_base is bargain.aq_base\n-        assert container[\'products\'][\'item\']\n+        assert container["bargains"]["item-1"]\n+        assert container["bargains"]["item"]\n+        assert container["bargains"]["item"].aq_base is bargain.aq_base\n+        assert container["products"]["item"]\n \n     def test_copy_same_id(self):\n         obj = self.contact\n \n         # Using the same id should fail\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.content.copy(obj, obj.__parent__, obj.id)\n \n@@ -787,6 +799,7 @@ def test_delete_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.delete()\n \n@@ -797,28 +810,29 @@ def test_delete(self):\n \n         # The content item must be given as parameter\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.delete()\n \n         # Delete the contact page\n         api.content.delete(self.contact)\n-        self.assertNotIn(\'contact\', container[\'about\'].keys())\n+        self.assertNotIn("contact", container["about"].keys())\n \n     def test_delete_multiple(self):\n         """Test deleting multiple content items."""\n \n         container = self.portal\n-        api.content.copy(source=container[\'about\'], target=container)\n-        api.content.copy(source=container[\'about\'], target=container[\'events\'])\n+        api.content.copy(source=container["about"], target=container)\n+        api.content.copy(source=container["about"], target=container["events"])\n \n         api.content.delete(\n             objects=[\n-                container[\'copy_of_about\'],\n-                container[\'events\'][\'about\'],\n+                container["copy_of_about"],\n+                container["events"]["about"],\n             ],\n         )\n-        self.assertNotIn(\'copy_of_about\', container)\n-        self.assertNotIn(\'about\', container[\'events\'])\n+        self.assertNotIn("copy_of_about", container)\n+        self.assertNotIn("about", container["events"])\n \n     def test_delete_no_objs(self):\n         # Check that we allow passing in an empty list of objects.\n@@ -829,7 +843,7 @@ def test_delete_ignore_linkintegrity(self):\n         self._set_text(self.team, \'<a href="contact">contact</a>\')\n         # Delete the contact page\n         api.content.delete(self.contact, check_linkintegrity=False)\n-        self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertNotIn("contact", self.portal["about"].keys())\n \n     def test_delete_check_linkintegrity(self):\n         """Test deleting a content item with a link pointed at it."""\n@@ -837,7 +851,7 @@ def test_delete_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(self.contact)\n-        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n+        self.assertIn("contact", self.portal["about"].keys())\n \n     def test_delete_multiple_check_linkintegrity(self):\n         """Test deleting multiple item with linkintegrity-breaches."""\n@@ -846,8 +860,8 @@ def test_delete_multiple_check_linkintegrity(self):\n         # Delete the contact page\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.contact])\n-        self.assertIn(\'contact\', self.portal[\'about\'].keys())\n-        self.assertIn(\'blog\', self.portal.keys())\n+        self.assertIn("contact", self.portal["about"].keys())\n+        self.assertIn("blog", self.portal.keys())\n \n     def test_delete_multiple_ignore_linkintegrity(self):\n         """Test deleting multiple items ignoring linkintegrity-breaches."""\n@@ -858,8 +872,8 @@ def test_delete_multiple_ignore_linkintegrity(self):\n             objects=[self.blog, self.contact],\n             check_linkintegrity=False,\n         )\n-        self.assertNotIn(\'contact\', self.portal[\'about\'].keys())\n-        self.assertNotIn(\'blog\', self.portal.keys())\n+        self.assertNotIn("contact", self.portal["about"].keys())\n+        self.assertNotIn("blog", self.portal.keys())\n \n     def test_delete_with_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n@@ -868,9 +882,9 @@ def test_delete_with_internal_breaches(self):\n         # Deleting pages with unresolved breaches throws an exception\n         with self.assertRaises(LinkIntegrityNotificationException):\n             api.content.delete(objects=[self.blog, self.about])\n-        self.assertIn(\'about\', self.portal.keys())\n-        self.assertIn(\'blog\', self.portal.keys())\n-        self.assertIn(\'training\', self.portal[\'events\'].keys())\n+        self.assertIn("about", self.portal.keys())\n+        self.assertIn("blog", self.portal.keys())\n+        self.assertIn("training", self.portal["events"].keys())\n \n     def test_delete_with_resolved_internal_breaches(self):\n         """Test deleting multiple with internal linkintegrity breaches."""\n@@ -878,19 +892,19 @@ def test_delete_with_resolved_internal_breaches(self):\n         self._set_text(self.training, \'<a href="../blog">contact</a>\')\n         # Deleting pages with resolved breaches throws no exception\n         api.content.delete(objects=[self.blog, self.training, self.about])\n-        self.assertNotIn(\'about\', self.portal.keys())\n-        self.assertNotIn(\'blog\', self.portal.keys())\n-        self.assertNotIn(\'training\', self.portal[\'events\'].keys())\n+        self.assertNotIn("about", self.portal.keys())\n+        self.assertNotIn("blog", self.portal.keys())\n+        self.assertNotIn("training", self.portal["events"].keys())\n \n     def _set_text(self, obj, text):\n-        obj.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n+        obj.text = RichTextValue(text, "text/html", "text/x-html-safe")\n         modified(obj)\n \n     def test_find(self):\n         """Test the finding of content in various ways."""\n \n         # Find documents\n-        documents = api.content.find(portal_type=\'Document\')\n+        documents = api.content.find(portal_type="Document")\n         self.assertEqual(len(documents), 2)\n \n     def test_find_empty_query(self):\n@@ -903,13 +917,13 @@ def test_find_invalid_indexes(self):\n         """Make sure invalid indexes yield no results"""\n \n         # All invalid indexes yields no results\n-        documents = api.content.find(invalid_index=\'henk\')\n+        documents = api.content.find(invalid_index="henk")\n         self.assertEqual(len(documents), 0)\n \n         # But at least one valid index does.\n         documents = api.content.find(\n-            invalid_index=\'henk\',\n-            portal_type=\'Document\',\n+            invalid_index="henk",\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n \n@@ -917,53 +931,53 @@ def test_find_context(self):\n         # Find documents in context\n         documents = api.content.find(\n             context=self.portal.about,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n             context=self.portal.events,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n     def test_find_depth(self):\n         # Limit search depth from portal root\n-        documents = api.content.find(depth=2, portal_type=\'Document\')\n+        documents = api.content.find(depth=2, portal_type="Document")\n         self.assertEqual(len(documents), 2)\n-        documents = api.content.find(depth=1, portal_type=\'Document\')\n+        documents = api.content.find(depth=1, portal_type="Document")\n         self.assertEqual(len(documents), 0)\n \n         # Limit search depth with explicit context\n         documents = api.content.find(\n             context=self.portal.about,\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n             context=self.portal.about,\n             depth=0,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n         # Limit search depth with explicit path\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.about.getPhysicalPath()),\n+            path="/".join(self.portal.about.getPhysicalPath()),\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 2)\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.about.getPhysicalPath()),\n+            path="/".join(self.portal.about.getPhysicalPath()),\n             depth=0,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n         documents = api.content.find(\n-            path=\'/\'.join(self.portal.events.getPhysicalPath()),\n+            path="/".join(self.portal.events.getPhysicalPath()),\n             depth=1,\n-            portal_type=\'Document\',\n+            portal_type="Document",\n         )\n         self.assertEqual(len(documents), 0)\n \n@@ -982,16 +996,16 @@ def test_find_interface_dict(self):\n         # Find documents by interface combined with \'and\'\n \n         alsoProvides(self.portal.events, INavigationRoot)\n-        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+        self.portal.events.reindexObject(idxs=["object_provides"])\n \n         # standard catalog query using identifiers\n         brains = api.content.find(\n             object_provides={\n-                \'query\': [\n+                "query": [\n                     IContentish.__identifier__,\n                     INavigationRoot.__identifier__,\n                 ],\n-                \'operator\': \'and\',\n+                "operator": "and",\n             },\n         )\n         self.assertEqual(len(brains), 1)\n@@ -999,112 +1013,111 @@ def test_find_interface_dict(self):\n         # plone.api query using interfaces\n         brains = api.content.find(\n             object_provides={\n-                \'query\': [IContentish, INavigationRoot],\n-                \'operator\': \'and\',\n+                "query": [IContentish, INavigationRoot],\n+                "operator": "and",\n             },\n         )\n         self.assertEqual(len(brains), 1)\n \n     def test_find_interface_dict__include_not_query(self):\n-        """Check if not query in object_provides is functional.\n-        """\n+        """Check if not query in object_provides is functional."""\n \n         brains_all = api.content.find(\n-            object_provides={\'query\': IContentish.__identifier__},\n+            object_provides={"query": IContentish.__identifier__},\n         )\n \n         alsoProvides(self.portal.events, INavigationRoot)\n-        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+        self.portal.events.reindexObject(idxs=["object_provides"])\n \n         brains = api.content.find(\n             object_provides={\n-                \'query\': IContentish.__identifier__,\n-                \'not\': INavigationRoot.__identifier__,\n+                "query": IContentish.__identifier__,\n+                "not": INavigationRoot.__identifier__,\n             },\n         )\n \n         self.assertEqual(len(brains_all) - len(brains), 1)\n \n     def test_find_interface_dict__all_options(self):\n-        """ Check for all options in a object_provides query are correctly\n+        """Check for all options in a object_provides query are correctly\n         transformed.\n         """\n         parser = _parse_object_provides_query\n \n         self.assertDictEqual(\n-            parser({\'query\': IContentish}),\n-            {\'query\': [IContentish.__identifier__], \'operator\': \'or\'},\n+            parser({"query": IContentish}),\n+            {"query": [IContentish.__identifier__], "operator": "or"},\n         )\n \n         self.assertDictEqual(\n             parser(\n                 {\n-                    \'query\': [IContentish, INavigationRoot.__identifier__],\n-                    \'operator\': \'and\',\n+                    "query": [IContentish, INavigationRoot.__identifier__],\n+                    "operator": "and",\n                 },\n             ),\n             {\n-                \'query\': [IContentish.__identifier__, INavigationRoot.__identifier__],\n-                \'operator\': \'and\',\n+                "query": [IContentish.__identifier__, INavigationRoot.__identifier__],\n+                "operator": "and",\n             },\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': IContentish}),\n-            {\'not\': [IContentish.__identifier__]},\n+            parser({"not": IContentish}),\n+            {"not": [IContentish.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': [IContentish, INavigationRoot.__identifier__]}),\n-            {\'not\': [IContentish.__identifier__, INavigationRoot.__identifier__]},\n+            parser({"not": [IContentish, INavigationRoot.__identifier__]}),\n+            {"not": [IContentish.__identifier__, INavigationRoot.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'not\': IContentish}),\n-            {\'not\': [IContentish.__identifier__]},\n+            parser({"not": IContentish}),\n+            {"not": [IContentish.__identifier__]},\n         )\n \n         self.assertDictEqual(\n-            parser({\'query\': IContentish, \'operator\': \'and\', \'not\': INavigationRoot}),\n+            parser({"query": IContentish, "operator": "and", "not": INavigationRoot}),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'and\',\n-                \'not\': [INavigationRoot.__identifier__],\n+                "query": [IContentish.__identifier__],\n+                "operator": "and",\n+                "not": [INavigationRoot.__identifier__],\n             },\n         )\n \n     def test_find_dict(self):\n         # Pass arguments using dict\n-        path = \'/\'.join(self.portal.about.getPhysicalPath())\n+        path = "/".join(self.portal.about.getPhysicalPath())\n \n         query = {\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path, \'depth\': 2},\n+            "portal_type": "Document",\n+            "path": {"query": path, "depth": 2},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 2)\n \n         query = {\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path, \'depth\': 0},\n+            "portal_type": "Document",\n+            "path": {"query": path, "depth": 0},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 0)\n \n         # This is a bit awkward, but it is nice if this does not crash.\n         query = {\n-            \'depth\': 2,\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path},\n+            "depth": 2,\n+            "portal_type": "Document",\n+            "path": {"query": path},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 2)\n \n-        path = \'/\'.join(self.portal.events.getPhysicalPath())\n+        path = "/".join(self.portal.events.getPhysicalPath())\n         query = {\n-            \'depth\': 2,\n-            \'portal_type\': \'Document\',\n-            \'path\': {\'query\': path},\n+            "depth": 2,\n+            "portal_type": "Document",\n+            "path": {"query": path},\n         }\n         documents = api.content.find(**query)\n         self.assertEqual(len(documents), 0)\n@@ -1117,75 +1130,76 @@ def test_find_parse_object_provides_query(self):\n         self.assertDictEqual(\n             parse(IContentish),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'or\',\n+                "query": [IContentish.__identifier__],\n+                "operator": "or",\n             },\n         )\n         # single identifier\n         self.assertDictEqual(\n             parse(IContentish.__identifier__),\n             {\n-                \'query\': [IContentish.__identifier__],\n-                \'operator\': \'or\',\n+                "query": [IContentish.__identifier__],\n+                "operator": "or",\n             },\n         )\n         # multiple interfaces/identifiers (mixed as list)\n         self.assertDictEqual(\n             parse([INavigationRoot, IContentish.__identifier__]),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'or\',\n+                "operator": "or",\n             },\n         )\n         # multiple interfaces/identifiers (mixed as tuple)\n         self.assertDictEqual(\n             parse((INavigationRoot, IContentish.__identifier__)),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'or\',\n+                "operator": "or",\n             },\n         )\n         # full blown query - interfaces/identifiers mixed\n         self.assertDictEqual(\n-            parse({\n-                \'query\': [INavigationRoot, IContentish.__identifier__],\n-                \'operator\': \'and\',\n-            }),\n+            parse(\n+                {\n+                    "query": [INavigationRoot, IContentish.__identifier__],\n+                    "operator": "and",\n+                }\n+            ),\n             {\n-                \'query\': [\n+                "query": [\n                     INavigationRoot.__identifier__,\n                     IContentish.__identifier__,\n                 ],\n-                \'operator\': \'and\',\n+                "operator": "and",\n             },\n         )\n \n     def test_get_state(self):\n         """Test retrieving the workflow state of a content item."""\n-\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.get_state()\n \n         review_state = api.content.get_state(obj=self.blog)\n-        self.assertEqual(review_state, \'private\')\n+        self.assertEqual(review_state, "private")\n \n     def test_get_state_default_value(self):\n-        """Test passing in a default value.\n-        """\n+        """Test passing in a default value."""\n         # A WorkflowException is raise if no workflow is defined for the obj.\n         # This is normally the case for Images and Files.\n         with self.assertRaises(WorkflowException):\n             review_state = api.content.get_state(obj=self.image)\n \n-        default = \'my default value\'\n+        default = "my default value"\n         review_state = api.content.get_state(obj=self.image, default=default)\n         review_state is default\n \n@@ -1205,81 +1219,82 @@ def test_transition(self):\n             api.content.transition(obj=mock.Mock())\n \n         with self.assertRaises(MissingParameterError):\n-            api.content.transition(transition=\'publish\')\n+            api.content.transition(transition="publish")\n \n         with self.assertRaises(InvalidParameterError):\n             api.content.transition(\n                 obj=mock.Mock(),\n-                transition=\'publish\',\n-                to_state=\'published\',\n+                transition="publish",\n+                to_state="published",\n             )\n \n-        api.content.transition(obj=self.blog, transition=\'publish\')\n+        api.content.transition(obj=self.blog, transition="publish")\n         review_state = api.content.get_state(obj=self.blog)\n-        self.assertEqual(review_state, \'published\')\n+        self.assertEqual(review_state, "published")\n \n         # This should fail because the transition doesn\'t exist\n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.transition(\n-                transition=\'foo\', obj=self.blog,\n+                transition="foo",\n+                obj=self.blog,\n             )\n \n         self.maxDiff = None  # to see assert diff\n         self.assertMultiLineEqual(\n             str(cm.exception),\n             "Invalid transition \'foo\'.\\n"\n-            \'Valid transitions are:\\n\'\n-            \'reject\\n\'\n-            \'retract\',\n+            "Valid transitions are:\\n"\n+            "reject\\n"\n+            "retract",\n         )\n \n         # change the workflow of a document so that there is no transition\n         # that goes directly from one state to another\n-        portal_workflow = api.portal.get_tool(\'portal_workflow\')\n-        portal_workflow._chains_by_type[\'File\'] = tuple(\n-            [\'intranet_workflow\'],\n+        portal_workflow = api.portal.get_tool("portal_workflow")\n+        portal_workflow._chains_by_type["File"] = tuple(\n+            ["intranet_workflow"],\n         )\n         test_file = api.content.create(\n             container=api.portal.get(),\n-            type=\'File\',\n-            id=\'test-file\',\n+            type="File",\n+            id="test-file",\n         )\n         self.assertEqual(\n             api.content.get_state(test_file),\n-            \'internal\',\n+            "internal",\n         )\n         api.content.transition(\n             obj=test_file,\n-            transition=\'hide\',\n+            transition="hide",\n         )\n \n         # the following transition must move through the internal state\n         api.content.transition(\n             obj=test_file,\n-            to_state=\'internally_published\',\n+            to_state="internally_published",\n         )\n         self.assertEqual(\n             api.content.get_state(test_file),\n-            \'internally_published\',\n+            "internally_published",\n         )\n \n     def test_diable_roles_acquisition(self):\n-        """ Test disabling local roles acquisition.\n-        """\n+        """Test disabling local roles acquisition."""\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.disable_roles_acquisition()\n \n         api.content.disable_roles_acquisition(obj=self.blog)\n-        blog_ac_flag = getattr(self.blog, \'__ac_local_roles_block__\', None)\n+        blog_ac_flag = getattr(self.blog, "__ac_local_roles_block__", None)\n         self.assertTrue(blog_ac_flag)\n \n     def test_enable_roles_acquisition(self):\n-        """ Test enabling local roles acquisition.\n-        """\n+        """Test enabling local roles acquisition."""\n         # This should fail because an content item is mandatory\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.content.enable_roles_acquisition()\n \n@@ -1288,13 +1303,14 @@ def test_enable_roles_acquisition(self):\n         self.blog.__ac_local_roles_block__ = 1\n \n         api.content.enable_roles_acquisition(obj=self.blog)\n-        blog_ac_flag = getattr(self.blog, \'__ac_local_roles_block__\', None)\n+        blog_ac_flag = getattr(self.blog, "__ac_local_roles_block__", None)\n         self.assertFalse(blog_ac_flag)\n \n     def test_get_view_constraints(self):\n         """Test the constraints for deleting content."""\n         from plone.api.exc import MissingParameterError\n-        request = self.layer[\'request\']\n+\n+        request = self.layer["request"]\n \n         # When no parameters are given an error is raised\n         with self.assertRaises(MissingParameterError):\n@@ -1310,38 +1326,31 @@ def test_get_view_constraints(self):\n         # context is required\n         with self.assertRaises(MissingParameterError):\n             api.content.get_view(\n-                name=\'plone\',\n+                name="plone",\n                 request=request,\n             )\n \n-        # request is required\n-        with self.assertRaises(MissingParameterError):\n-            api.content.get_view(\n-                name=\'plone\',\n-                context=self.blog,\n-            )\n-\n     def test_get_view(self):\n         """Test the view."""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n \n         view = api.content.get_view(\n-            name=\'plone\',\n+            name="plone",\n             context=self.blog,\n             request=request,\n         )\n         self.assertEqual(aq_base(view.context), aq_base(self.blog))\n-        self.assertEqual(view.__name__, \'plone\')\n-        self.assertTrue(hasattr(view, \'toLocalizedTime\'))\n-        self.assertTrue(hasattr(view, \'isDefaultPageInFolder\'))\n+        self.assertEqual(view.__name__, "plone")\n+        self.assertTrue(hasattr(view, "toLocalizedTime"))\n+        self.assertTrue(hasattr(view, "isDefaultPageInFolder"))\n \n         # Try another standard view.\n         view = api.content.get_view(\n-            name=\'plone_context_state\',\n+            name="plone_context_state",\n             context=self.blog,\n             request=request,\n         )\n-        self.assertEqual(view.__name__, \'plone_context_state\')\n+        self.assertEqual(view.__name__, "plone_context_state")\n         self.assertEqual(aq_base(view.canonical_object()), aq_base(self.blog))\n \n     def test_get_uuid(self):\n@@ -1358,8 +1367,8 @@ def test_get_uuid(self):\n \n         # Set the UUID and compare it with the one we get from our function\n         # Dexterity\n-        container.invokeFactory(\'Dexterity Item\', \'test-dexterity\')\n-        item = container[\'test-dexterity\']\n+        container.invokeFactory("Dexterity Item", "test-dexterity")\n+        item = container["test-dexterity"]\n         uuid1 = generator()\n         IMutableUUID(item).set(uuid1)\n \n@@ -1369,12 +1378,12 @@ def test_get_uuid(self):\n \n     def test_get_view_view_not_found(self):\n         """Test that error msg lists available views if a view is not found."""\n-        request = self.layer[\'request\']\n+        request = self.layer["request"]\n         from plone.api.exc import InvalidParameterError\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             api.content.get_view(\n-                name=\'foo\',\n+                name="foo",\n                 context=self.blog,\n                 request=request,\n             )\n@@ -1382,9 +1391,7 @@ def test_get_view_view_not_found(self):\n         self.maxDiff = None  # to see assert diff\n         self.assertTrue(\n             str(cm.exception).startswith(\n-                "Cannot find a view with name \'foo\'.\\n"\n-                \'Available views are:\\n\'\n-                \'\\n\',\n+                "Cannot find a view with name \'foo\'.\\n" "Available views are:\\n" "\\n",\n             ),\n         )\n \n@@ -1392,21 +1399,21 @@ def test_get_view_view_not_found(self):\n         # Test against only these rather than the full list. Otherwise, this\n         # test has to maintain an up-to-date list of every view in Plone.\n         should_be_theres = (\n-            \'adapter\',\n-            \'authenticator\',\n-            \'checkDocument\',\n-            \'get_macros\',\n-            \'history\',\n-            \'plone\',\n-            \'plone_tools\',\n-            \'resource\',\n-            \'search\',\n-            \'sharing\',\n-            \'skin\',\n-            \'text-transform\',\n-            \'uuid\',\n-            \'view\',\n+            "adapter",\n+            "authenticator",\n+            "checkDocument",\n+            "get_macros",\n+            "history",\n+            "plone",\n+            "plone_tools",\n+            "resource",\n+            "search",\n+            "sharing",\n+            "skin",\n+            "text-transform",\n+            "uuid",\n+            "view",\n         )\n \n         for should_be_there in should_be_theres:\n-            self.assertIn((should_be_there + \'\\n\'), str(cm.exception))\n+            self.assertIn((should_be_there + "\\n"), str(cm.exception))\ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex 4ad9fd0c..26a2fb18 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -8,12 +8,12 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing import layered\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.testing import renormalizing\n \n import doctest\n-import manuel.codeblock\n import manuel.doctest\n+import manuel.myst.codeblock\n import manuel.testing\n import os\n import pkg_resources\n@@ -24,7 +24,7 @@\n logger = getLogger(__name__)\n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n except pkg_resources.DistributionNotFound:\n     HAS_PA_CONTENTTYPES = False\n else:\n@@ -37,45 +37,52 @@\n     | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n-CHECKER = renormalizing.RENormalizing([\n-    # Normalize the generated UUID values to always compare equal.\n-    (re.compile(\n-        r\'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\'),\n-        \'<UUID>\',\n-     ),\n-])\n+CHECKER = renormalizing.RENormalizing(\n+    [\n+        # Normalize the generated UUID values to always compare equal.\n+        (\n+            re.compile(r"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"),\n+            "<UUID>",\n+        ),\n+    ]\n+)\n \n \n def setUp(self):  # pragma: no cover\n     """Shared test environment set-up, ran before every test."""\n-    layer = self.globs[\'layer\']\n+    layer = self.globs["layer"]\n     # Update global variables within the tests.\n-    self.globs.update({\n-        \'portal\': layer[\'portal\'],\n-        \'request\': layer[\'request\'],\n-        \'browser\': Browser(layer[\'app\']),\n-        \'TEST_USER_NAME\': TEST_USER_NAME,\n-        \'TEST_USER_PASSWORD\': TEST_USER_PASSWORD,\n-        \'self\': self,\n-    })\n-\n-    portal = self.globs[\'portal\']\n-    browser = self.globs[\'browser\']\n+    self.globs.update(\n+        {\n+            "portal": layer["portal"],\n+            "request": layer["request"],\n+            "browser": Browser(layer["app"]),\n+            "TEST_USER_NAME": TEST_USER_NAME,\n+            "TEST_USER_PASSWORD": TEST_USER_PASSWORD,\n+            "self": self,\n+        }\n+    )\n+\n+    portal = self.globs["portal"]\n+    browser = self.globs["browser"]\n \n     browser.handleErrors = True\n     portal.error_log._ignored_exceptions = ()\n \n-    setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    setRoles(portal, TEST_USER_ID, ["Manager"])\n \n-    applyProfile(portal, \'Products.CMFPlone:plone\')\n+    applyProfile(portal, "Products.CMFPlone:plone")\n \n     # Plone 5 support\n     if HAS_PA_CONTENTTYPES:\n-        applyProfile(portal, \'plone.app.contenttypes:default\')\n+        applyProfile(portal, "plone.app.contenttypes:default")\n \n \n def DocFileSuite(\n-    testfile, flags=FLAGS, setUp=setUp, layer=PLONE_INTEGRATION_TESTING,\n+    testfile,\n+    flags=FLAGS,\n+    setUp=setUp,\n+    layer=PLONE_INTEGRATION_TESTING,\n ):\n     """Returns a test suite configured with a test layer.\n \n@@ -94,7 +101,7 @@ def DocFileSuite(\n     :rtype: `manuel.testing.TestSuite`\n     """\n     m = manuel.doctest.Manuel(optionflags=flags, checker=CHECKER)\n-    m += manuel.codeblock.Manuel()\n+    m += manuel.myst.codeblock.Manuel()\n \n     return layered(\n         manuel.testing.TestSuite(\n@@ -109,7 +116,7 @@ def DocFileSuite(\n \n def test_suite():\n     """Find .rst files and test code examples in them."""\n-    path = \'doctests\'\n+    path = "doctests"\n     doctests = []\n     docs_path = os.path.join(os.path.dirname(__file__), path)\n \n@@ -118,7 +125,7 @@ def test_suite():\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n         except OSError:\n             logger.warning(\n-                \'test_doctest.py skipping {file}\'.format(file=filename),\n+                "test_doctest.py skipping {file}".format(file=filename),\n             )\n \n     return unittest.TestSuite(doctests)\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex f6402a99..28e632f9 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -15,16 +15,16 @@ class ExampleException(Exception):\n \n \n role_mapping = (\n-    (\'ppp\', (\'Manager\', \'VIP\', \'Member\')),\n-    (\'qqq\', (\'Manager\', \'VIP\')),\n-    (\'rrr\', (\'Manager\')),\n+    ("ppp", ("Manager", "VIP", "Member")),\n+    ("qqq", ("Manager", "VIP")),\n+    ("rrr", ("Manager")),\n )\n \n # Version of Zope and Plone should be something like\n # \'X.Y\' or \'X.Y.Z\' or \'X.Y.Z.A\'\n # It could also include a package status id (Alpha, Beta or RC).\n # When run against coredev, we may have a .devN suffix as well.\n-version_regexp = r\'^(\\d+(\\.\\d+){1,3})(a\\d+|b\\d+|rc\\d+)?(\\.dev\\d)?$\'\n+version_regexp = r"^(\\d+(\\.\\d+){1,3})(a\\d+|b\\d+|rc\\d+)?(\\.dev\\d)?$"\n \n \n class HasProtectedMethods(SimpleItem):\n@@ -38,15 +38,15 @@ def __init__(self, id):\n     def public_method(self):\n         pass\n \n-    @security.protected(\'ppp\')\n+    @security.protected("ppp")\n     def pp_method(self):\n         pass\n \n-    @security.protected(\'qqq\')\n+    @security.protected("qqq")\n     def qq_method(self):\n         pass\n \n-    @security.protected(\'rrr\')\n+    @security.protected("rrr")\n     def rr_method(self):\n         pass\n \n@@ -65,8 +65,8 @@ class TestPloneApiEnv(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        portal = self.portal = self.layer[\'portal\']\n-        portal._setObject(\'hpm\', HasProtectedMethods(\'hpm\'))\n+        portal = self.portal = self.layer["portal"]\n+        portal._setObject("hpm", HasProtectedMethods("hpm"))\n \n         # This isn\'t necessary to the unit tests, it makes debugging them\n         # easier when they go wrong. Like "verbose-security on" in zope.conf\n@@ -76,37 +76,37 @@ def setUp(self):\n         # Roles need to be created by name before we can assign permissions\n         # to them or grant them to users.\n         # \'Member\' and \'Manager\' already exist by default, we need to add \'VIP\'\n-        portal._addRole(\'VIP\')\n+        portal._addRole("VIP")\n \n         for permission, roles in role_mapping:\n             portal.manage_permission(permission, roles, 1)\n \n         api.user.create(\n-            username=\'worker\',\n-            email=\'ordinary_person@example.com\',\n-            password=\'password1\',\n-            roles=(\'Member\',),\n+            username="worker",\n+            email="ordinary_person@example.com",\n+            password="password1",\n+            roles=("Member",),\n         )\n \n         api.user.create(\n-            username=\'boss\',\n-            email=\'important_person@example.com\',\n-            password=\'123456\',\n-            roles=(\'Member\', \'VIP\'),\n+            username="boss",\n+            email="important_person@example.com",\n+            password="123456",\n+            roles=("Member", "VIP"),\n         )\n \n         api.user.create(\n-            username=\'superhuman\',\n-            email=\'xavier@example.com\',\n-            password=\'think_carefully\',\n-            roles=(\'Member\', \'Manager\'),\n+            username="superhuman",\n+            email="xavier@example.com",\n+            password="think_carefully",\n+            roles=("Member", "Manager"),\n         )\n \n         self._old_sm = AccessControl.SecurityManagement.getSecurityManager()\n \n         AccessControl.SecurityManagement.newSecurityManager(\n             self.portal.REQUEST,\n-            self.portal.acl_users.getUser(\'boss\'),\n+            self.portal.acl_users.getUser("boss"),\n         )\n \n     def tearDown(self):\n@@ -124,78 +124,98 @@ def should_forbid(self, names):\n \n     def test_test_defaults(self):\n         """Test that the default set-up does what I expect it to."""\n-        self.should_allow([\n-            \'public_method\',\n-            \'pp_method\',\n-            \'qq_method\',\n-        ])\n-        self.should_forbid([\n-            \'rr_method\',\n-            \'private_method\',\n-        ])\n+        self.should_allow(\n+            [\n+                "public_method",\n+                "pp_method",\n+                "qq_method",\n+            ]\n+        )\n+        self.should_forbid(\n+            [\n+                "rr_method",\n+                "private_method",\n+            ]\n+        )\n \n     def test_adopt_manager_role(self):\n         """Test that we can adopt the Manager role temporarily."""\n-        with api.env.adopt_roles(roles=[\'Manager\']):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Manager"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopt_manager_string_role(self):\n         """Test that we can adopt the Manager role temporarily."""\n-        with api.env.adopt_roles(roles=\'Manager\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles="Manager"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopt_fewers_role(self):\n         """Test that we can adopt a non-Manager role temporarily."""\n-        with api.env.adopt_roles(roles=[\'Member\']):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'qq_method\',\n-                \'rr_method\',\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Member"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "qq_method",\n+                    "rr_method",\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_drop_to_anon(self):\n         """Test that we can drop roles."""\n-        with api.env.adopt_roles(roles=[\'Anonymous\']):\n-            self.should_allow([\n-                \'public_method\',\n-            ])\n-            self.should_forbid([\n-                \'pp_method\',\n-                \'rr_method\',\n-                \'qq_method\',\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_roles(roles=["Anonymous"]):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "pp_method",\n+                    "rr_method",\n+                    "qq_method",\n+                    "private_method",\n+                ]\n+            )\n \n     def test_content_owner_role(self):\n         """Tests that adopting a role should not affect content ownership."""\n-        with api.env.adopt_roles(roles=[\'Manager\']):\n+        with api.env.adopt_roles(roles=["Manager"]):\n             doc2 = api.content.create(\n                 container=self.portal,\n-                type=\'Document\',\n-                id=\'doc_2\',\n+                type="Document",\n+                id="doc_2",\n             )\n \n         intended = self.portal.acl_users.getUser(api.user.get_current().id)\n@@ -204,192 +224,245 @@ def test_content_owner_role(self):\n \n     def test_become_manager_by_name(self):\n         """Tests that becoming a manager user works."""\n-        with api.env.adopt_user(username=\'superhuman\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_user(username="superhuman"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_become_manager_by_obj(self):\n         """Tests that becoming a manager with user from api.user works."""\n-        with api.env.adopt_user(user=api.user.get(username=\'superhuman\')):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+        with api.env.adopt_user(user=api.user.get(username="superhuman")):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_become_manager_by_acl_user(self):\n         """Tests that becoming a user with user from acl_users works."""\n         acl_users = api.portal.get().acl_users\n \n-        au_ordinary = acl_users.getUser(\'worker\')\n+        au_ordinary = acl_users.getUser("worker")\n         with api.env.adopt_user(user=au_ordinary):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-\n-        au_manager = acl_users.getUser(\'superhuman\')\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+\n+        au_manager = acl_users.getUser("superhuman")\n         with api.env.adopt_user(user=au_manager):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-            ])\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                ]\n+            )\n \n     def test_become_ordinary(self):\n         """Tests that becoming a user with fewer permissions works."""\n-        with api.env.adopt_user(username=\'worker\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n+        with api.env.adopt_user(username="worker"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n         self.test_test_defaults()\n \n     def test_adopted_content_ownership(self):\n         """Tests that content created while user-switched is owned."""\n-        with api.env.adopt_user(username=\'superhuman\'):\n+        with api.env.adopt_user(username="superhuman"):\n             doc3 = api.content.create(\n                 container=self.portal,\n-                type=\'Document\',\n-                id=\'doc_3\',\n+                type="Document",\n+                id="doc_3",\n             )\n-        intended = self.portal.acl_users.getUser(\'superhuman\')\n+        intended = self.portal.acl_users.getUser("superhuman")\n         actual = doc3.getOwner()\n         self.assertEqual(actual.getPhysicalPath(), intended.getPhysicalPath())\n \n     def test_adopted_nested_ownership(self):\n         """Test deep nesting of adopt_user and adopt_roles blocks."""\n-        with api.env.adopt_user(username=\'worker\'):\n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n-            with api.env.adopt_roles([\'Anonymous\']):\n-                self.should_allow([\n-                    \'public_method\',\n-                ])\n-                self.should_forbid([\n-                    \'private_method\',\n-                    \'pp_method\',\n-                    \'qq_method\',\n-                    \'rr_method\',\n-                ])\n-                with api.env.adopt_user(username=\'boss\'):\n-                    self.should_allow([\n-                        \'public_method\',\n-                        \'pp_method\',\n-                        \'qq_method\',\n-                    ])\n-                    self.should_forbid([\n-                        \'private_method\',\n-                        \'rr_method\',\n-                    ])\n-                    with api.env.adopt_roles([\'Manager\']):\n-                        self.should_allow([\n-                            \'public_method\',\n-                            \'pp_method\',\n-                            \'qq_method\',\n-                            \'rr_method\',\n-                        ])\n-                        self.should_forbid([\n-                            \'private_method\',\n-                        ])\n-\n-                        with api.env.adopt_roles([\'Anonymous\']):\n-                            self.should_allow([\n-                                \'public_method\',\n-                            ])\n-                            self.should_forbid([\n-                                \'private_method\',\n-                                \'pp_method\',\n-                                \'qq_method\',\n-                                \'rr_method\',\n-                            ])\n+        with api.env.adopt_user(username="worker"):\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n+            with api.env.adopt_roles(["Anonymous"]):\n+                self.should_allow(\n+                    [\n+                        "public_method",\n+                    ]\n+                )\n+                self.should_forbid(\n+                    [\n+                        "private_method",\n+                        "pp_method",\n+                        "qq_method",\n+                        "rr_method",\n+                    ]\n+                )\n+                with api.env.adopt_user(username="boss"):\n+                    self.should_allow(\n+                        [\n+                            "public_method",\n+                            "pp_method",\n+                            "qq_method",\n+                        ]\n+                    )\n+                    self.should_forbid(\n+                        [\n+                            "private_method",\n+                            "rr_method",\n+                        ]\n+                    )\n+                    with api.env.adopt_roles(["Manager"]):\n+                        self.should_allow(\n+                            [\n+                                "public_method",\n+                                "pp_method",\n+                                "qq_method",\n+                                "rr_method",\n+                            ]\n+                        )\n+                        self.should_forbid(\n+                            [\n+                                "private_method",\n+                            ]\n+                        )\n+\n+                        with api.env.adopt_roles(["Anonymous"]):\n+                            self.should_allow(\n+                                [\n+                                    "public_method",\n+                                ]\n+                            )\n+                            self.should_forbid(\n+                                [\n+                                    "private_method",\n+                                    "pp_method",\n+                                    "qq_method",\n+                                    "rr_method",\n+                                ]\n+                            )\n                         # /roles Anonymous\n \n                         doc4 = api.content.create(\n                             container=self.portal,\n-                            type=\'Document\',\n-                            id=\'doc_ock\',\n+                            type="Document",\n+                            id="doc_ock",\n                         )\n-                        intended = self.portal.acl_users.getUser(\'boss\')\n+                        intended = self.portal.acl_users.getUser("boss")\n                         intended_pp = intended.getPhysicalPath()\n                         actual = doc4.getOwner()\n                         actual_pp = actual.getPhysicalPath()\n                         self.assertEqual(actual_pp, intended_pp)\n                     # /roles Manager\n \n-                    self.should_allow([\n-                        \'public_method\',\n-                        \'pp_method\',\n-                        \'qq_method\',\n-                    ])\n-                    self.should_forbid([\n-                        \'private_method\',\n-                        \'rr_method\',\n-                    ])\n+                    self.should_allow(\n+                        [\n+                            "public_method",\n+                            "pp_method",\n+                            "qq_method",\n+                        ]\n+                    )\n+                    self.should_forbid(\n+                        [\n+                            "private_method",\n+                            "rr_method",\n+                        ]\n+                    )\n                 # /user boss\n \n-                self.should_allow([\n-                    \'public_method\',\n-                ])\n-                self.should_forbid([\n-                    \'private_method\',\n-                    \'pp_method\',\n-                    \'qq_method\',\n-                    \'rr_method\',\n-                ])\n+                self.should_allow(\n+                    [\n+                        "public_method",\n+                    ]\n+                )\n+                self.should_forbid(\n+                    [\n+                        "private_method",\n+                        "pp_method",\n+                        "qq_method",\n+                        "rr_method",\n+                    ]\n+                )\n             # /roles Anonymous\n \n-            self.should_allow([\n-                \'public_method\',\n-                \'pp_method\',\n-            ])\n-            self.should_forbid([\n-                \'private_method\',\n-                \'qq_method\',\n-                \'rr_method\',\n-            ])\n+            self.should_allow(\n+                [\n+                    "public_method",\n+                    "pp_method",\n+                ]\n+            )\n+            self.should_forbid(\n+                [\n+                    "private_method",\n+                    "qq_method",\n+                    "rr_method",\n+                ]\n+            )\n         # /user worker\n \n     def test_adopting_zope_users(self):\n-        api.env.adopt_user(username=\'admin\')\n-        api.env.adopt_user(user=api.user.get(username=\'admin\'))\n+        api.env.adopt_user(username="admin")\n+        api.env.adopt_user(user=api.user.get(username="admin"))\n \n     def test_adopting_anonymous(self):\n         from AccessControl.users import nobody\n+\n         self.assertNotEqual(nobody, api.user.get_current())\n         with api.env.adopt_user(user=nobody):\n             self.assertEqual(nobody, api.user.get_current())\n@@ -397,12 +470,14 @@ def test_adopting_anonymous(self):\n     def test_empty_warning(self):\n         """Tests that empty roles lists get warned about."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.env.adopt_roles([])\n \n     def test_argument_requirement(self):\n         """Tests that missing arguments don\'t go unnoticed."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.env.adopt_roles()\n \n@@ -411,6 +486,7 @@ def test_debug_mode(self):\n         getConfiguration.debug_mode."""\n         from App.config import getConfiguration\n         from plone.api.env import debug_mode\n+\n         getConfiguration().debug_mode = True\n         self.assertEqual(debug_mode(), True)\n         getConfiguration().debug_mode = False\n@@ -419,23 +495,27 @@ def test_debug_mode(self):\n     def test_test_mode(self):\n         """Tests that test_mode() returns True as we are in a test runner."""\n         from plone.api.env import test_mode\n+\n         self.assertEqual(test_mode(), True)\n \n     def test_read_only_mode(self):\n         """Test that read_only_mode() returns False\n         as we have a write enabled ZODB."""\n         from plone.api.env import read_only_mode\n+\n         self.assertFalse(read_only_mode())\n \n     def test_plone_version(self):\n         """Tests that plone_version() returns Plone version."""\n         from plone.api.env import plone_version\n+\n         self.assertTrue(isinstance(plone_version(), str))\n         self.assertRegexpMatches(plone_version(), version_regexp)\n \n     def test_zope_version(self):\n         """Tests that zope_version() returns Zope version."""\n         from plone.api.env import zope_version\n+\n         self.assertTrue(isinstance(zope_version(), str))\n         self.assertRegexpMatches(zope_version(), version_regexp)\n \ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex 4ef54ae9..c1718d48 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -21,68 +21,72 @@ class TestPloneApiGroup(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n-        self.group_tool = getToolByName(self.portal, \'portal_groups\')\n+        self.portal = self.layer["portal"]\n+        self.group_tool = getToolByName(self.portal, "portal_groups")\n         self.portal_membership = getToolByName(\n-            self.portal, \'portal_membership\',\n+            self.portal,\n+            "portal_membership",\n         )\n \n     def test_create_constraints(self):\n         """Test the constraints for creating a group."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.create()\n \n     def test_create(self):\n         """Test adding of a group, groupname is mandatory."""\n \n-        spam_group = api.group.create(groupname=\'spam\')\n-        self.assertEqual(spam_group, self.group_tool.getGroupById(\'spam\'))\n+        spam_group = api.group.create(groupname="spam")\n+        self.assertEqual(spam_group, self.group_tool.getGroupById("spam"))\n \n     def test_create_with_title_and_desc(self):\n         """Test adding of a group with title and description."""\n \n         bacon_group = api.group.create(\n-            groupname=\'bacon\',\n-            title=\'Bacon\',\n-            description=\'Hmm bacon good!\',\n+            groupname="bacon",\n+            title="Bacon",\n+            description="Hmm bacon good!",\n         )\n \n         self.assertEqual(\n             bacon_group,\n-            self.group_tool.getGroupById(\'bacon\'),\n+            self.group_tool.getGroupById("bacon"),\n         )\n         self.assertEqual(\n             bacon_group.getGroupTitleOrName(),\n-            \'Bacon\',\n+            "Bacon",\n         )\n         self.assertEqual(\n-            bacon_group.getProperty(\'description\'),\n-            \'Hmm bacon good!\',\n+            bacon_group.getProperty("description"),\n+            "Hmm bacon good!",\n         )\n \n     def test_create_with_roles_and_groups(self):\n         """Test adding of a group with roles and groups."""\n \n         ham_group = api.group.create(\n-            groupname=\'ham\',\n-            roles=[\'Editor\'],\n-            groups=[\'Reviewer\'],\n+            groupname="ham",\n+            roles=["Editor"],\n+            groups=["Reviewer"],\n         )\n-        group = self.group_tool.getGroupById(\'ham\')\n+        group = self.group_tool.getGroupById("ham")\n         self.assertEqual(ham_group, group)\n-        self.assertIn(\'Editor\', ham_group.getRoles())\n-        self.assertIn(\'Reviewer\', ham_group.getMemberIds())\n+        self.assertIn("Editor", ham_group.getRoles())\n+        self.assertIn("Reviewer", ham_group.getMemberIds())\n \n     def test_get_constraints(self):\n         """Test the constraints for geting a group."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.get()\n \n     def test_get_no_groupname(self):\n         """Test getting a group without passing a groupname."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.create()\n \n@@ -95,12 +99,12 @@ def test_get(self):\n             api.group.create()\n \n         # Create a group and retrieve it\n-        api.group.create(groupname=\'bacon\')\n-        bacon = api.group.get(groupname=\'bacon\')\n+        api.group.create(groupname="bacon")\n+        bacon = api.group.get(groupname="bacon")\n \n         self.assertEqual(\n             bacon,\n-            self.group_tool.getGroupById(\'bacon\'),\n+            self.group_tool.getGroupById("bacon"),\n         )\n \n     def test_get_all_groups(self):\n@@ -114,9 +118,10 @@ def test_get_groups_constraints(self):\n \n         # username and user are mutually exclusive\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.get_groups(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=mock.Mock(),\n             )\n \n@@ -124,30 +129,31 @@ def test_get_groups_user(self):\n         """Test retrieving of groups that the user is member of."""\n         user = self.portal_membership.getAuthenticatedMember()\n \n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(groupname=\'staff\', user=user)\n+        api.group.create(groupname="staff")\n+        api.group.add_user(groupname="staff", user=user)\n \n         groups = [g.id for g in api.group.get_groups(user=user)]\n-        self.assertIn(\'AuthenticatedUsers\', groups)\n-        self.assertIn(\'staff\', groups)\n+        self.assertIn("AuthenticatedUsers", groups)\n+        self.assertIn("staff", groups)\n \n     def test_get_groups_username(self):\n         """Test retrieving of groups that the user is member of."""\n         user = self.portal_membership.getAuthenticatedMember()\n         username = user.getUserName()\n \n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(groupname=\'staff\', user=user)\n+        api.group.create(groupname="staff")\n+        api.group.add_user(groupname="staff", user=user)\n \n         groups = [g.id for g in api.group.get_groups(username=username)]\n-        self.assertIn(\'AuthenticatedUsers\', groups)\n-        self.assertIn(\'staff\', groups)\n+        self.assertIn("AuthenticatedUsers", groups)\n+        self.assertIn("staff", groups)\n \n     def test_get_groups_nonexistant_user(self):\n         """Test retrieving of groups for a user that does not exist."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.group.get_groups(username=\'theurbanspaceman\')\n+            api.group.get_groups(username="theurbanspaceman")\n \n     def test_get_groups_anonymous(self):\n         from AccessControl.users import nobody\n@@ -166,52 +172,56 @@ def test_get_groups_anonymous(self):\n     def test_delete_constraints(self):\n         """Test deleting a group without passing parameters."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.group.delete()\n \n     def test_delete_groupname_and_group(self):\n         """Test deleting a group passing both groupname and group."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.delete(\n-                groupname=\'bacon\',\n+                groupname="bacon",\n                 group=mock.Mock(),\n             )\n \n     def test_delete_group_groupname(self):\n         """Test deleting a group by groupname."""\n \n-        bacon = api.group.create(groupname=\'bacon\')\n-        self.assertEqual(bacon, api.group.get(\'bacon\'))\n+        bacon = api.group.create(groupname="bacon")\n+        self.assertEqual(bacon, api.group.get("bacon"))\n \n-        api.group.delete(groupname=\'bacon\')\n-        self.assertIsNone(api.group.get(\'bacon\'))\n+        api.group.delete(groupname="bacon")\n+        self.assertIsNone(api.group.get("bacon"))\n \n     def test_delete_group_group(self):\n         """Test deleting a group by group object."""\n \n-        group = api.group.create(groupname=\'bacon\')\n-        self.assertEqual(group, api.group.get(\'bacon\'))\n+        group = api.group.create(groupname="bacon")\n+        self.assertEqual(group, api.group.get("bacon"))\n \n         api.group.delete(group=group)\n-        self.assertIsNone(api.group.get(\'bacon\'))\n+        self.assertIsNone(api.group.get("bacon"))\n \n     def test_add_user_constraints(self):\n         """Test the constraints when a user is added to a group."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.add_user(\n-                groupname=\'staff\',\n+                groupname="staff",\n                 group=mock.Mock(),\n             )\n \n     def test_add_user_username_and_user(self):\n         """Test adding a user to a group passing both username and user."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.group.add_user(\n-                groupname=\'staff\',\n-                username=\'staff\',\n+                groupname="staff",\n+                username="staff",\n                 user=mock.Mock(),\n             )\n \n@@ -222,43 +232,44 @@ def test_add_user_with_nonexistant_group(self):\n             KeyError,\n             api.group.add_user,\n             user=mock.Mock(),\n-            groupname=\'staff\',\n+            groupname="staff",\n         )\n \n     def test_add_user_with_nonexistant_user(self):\n         """Test adding a user that does not exist to a group."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.group.add_user(username=\'jane\', groupname=\'staff\')\n+            api.group.add_user(username="jane", groupname="staff")\n \n     def test_add_user_username(self):\n         """Test adding a user to a group by username."""\n-        group = api.group.create(groupname=\'staff\')\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+        group = api.group.create(groupname="staff")\n+        api.user.create(email="bob@plone.org", username="bob")\n \n-        api.group.add_user(groupname=\'staff\', username=\'bob\')\n+        api.group.add_user(groupname="staff", username="bob")\n \n         self.assertIn(\n-            \'staff\',\n-            [g.id for g in api.group.get_groups(username=\'bob\')],\n+            "staff",\n+            [g.id for g in api.group.get_groups(username="bob")],\n         )\n \n-        self.assertIn(\'bob\', group.getMemberIds())\n+        self.assertIn("bob", group.getMemberIds())\n \n     def test_add_user_user(self):\n         """Test adding a user to a group by user object."""\n \n-        group = api.group.create(groupname=\'staff\')\n-        user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+        group = api.group.create(groupname="staff")\n+        user = api.user.create(email="jane@plone.org", username="jane")\n \n         api.group.add_user(group=group, user=user)\n \n         self.assertIn(\n-            \'staff\',\n-            [g.id for g in api.group.get_groups(username=\'jane\')],\n+            "staff",\n+            [g.id for g in api.group.get_groups(username="jane")],\n         )\n \n-        self.assertIn(\'jane\', group.getMemberIds())\n+        self.assertIn("jane", group.getMemberIds())\n \n     def test_remove_user_constraints(self):\n         """Test the constraints when a user is removed from a group."""\n@@ -268,203 +279,206 @@ def test_remove_user_constraints(self):\n         # Arguments ``groupname`` and ``group`` are mutually exclusive.\n         with self.assertRaises(InvalidParameterError):\n             api.group.remove_user(\n-                username=\'jane\',\n-                groupname=\'staff\',\n+                username="jane",\n+                groupname="staff",\n                 group=mock.Mock(),\n             )\n         # Arguments ``username`` and ``user`` are mutually exclusive.\n         with self.assertRaises(InvalidParameterError):\n             api.group.remove_user(\n-                groupname=\'staff\',\n-                username=\'jane\',\n+                groupname="staff",\n+                username="jane",\n                 user=mock.Mock(),\n             )\n         # At least one of ``username`` and ``user`` must be provided\n         with self.assertRaises(MissingParameterError):\n-            api.group.remove_user(groupname=\'staff\')\n+            api.group.remove_user(groupname="staff")\n         # At least one of ``groupname`` and ``group`` must be provided\n         with self.assertRaises(MissingParameterError):\n-            api.group.remove_user(username=\'jane\')\n+            api.group.remove_user(username="jane")\n \n     def test_remove_user(self):\n         """Test removing a user from a group."""\n \n-        api.group.create(groupname=\'staff\')\n-        api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-        api.group.add_user(groupname=\'staff\', username=\'jane\')\n-        api.group.add_user(groupname=\'staff\', username=\'bob\')\n+        api.group.create(groupname="staff")\n+        api.user.create(email="jane@plone.org", username="jane")\n+        api.user.create(email="bob@plone.org", username="bob")\n+        api.group.add_user(groupname="staff", username="jane")\n+        api.group.add_user(groupname="staff", username="bob")\n \n         # Delete user by username from group\n-        api.group.remove_user(groupname=\'staff\', username=\'bob\')\n+        api.group.remove_user(groupname="staff", username="bob")\n \n-        group = api.group.get(groupname=\'staff\')\n-        user = api.user.get(username=\'jane\')\n+        group = api.group.get(groupname="staff")\n+        user = api.user.get(username="jane")\n \n         # Delete user by user object from group\n         api.group.remove_user(group=group, user=user)\n \n-        self.assertNotIn(\'staff\', api.group.get_groups(username=\'bob\'))\n-        self.assertNotIn(\'staff\', api.group.get_groups(username=\'jane\'))\n+        self.assertNotIn("staff", api.group.get_groups(username="bob"))\n+        self.assertNotIn("staff", api.group.get_groups(username="jane"))\n \n-        self.assertNotIn(\'bob\', group.getMemberIds())\n-        self.assertNotIn(\'jane\', group.getMemberIds())\n+        self.assertNotIn("bob", group.getMemberIds())\n+        self.assertNotIn("jane", group.getMemberIds())\n \n     def test_remove_user_with_nonexistant_user(self):\n         """Test removing a user from a group when the user does not exist"""\n         from plone.api.exc import UserNotFoundError\n-        api.group.create(groupname=\'staff\')\n-        group = api.group.get(groupname=\'staff\')\n+\n+        api.group.create(groupname="staff")\n+        group = api.group.get(groupname="staff")\n         with self.assertRaises(UserNotFoundError):\n-            api.group.remove_user(group=group, username=\'iamnothere\')\n+            api.group.remove_user(group=group, username="iamnothere")\n \n     def test_grant_roles(self):\n         """Test grant roles."""\n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n-        group = api.group.create(groupname=\'foo\')\n+\n+        group = api.group.create(groupname="foo")\n \n         # You can\'t grant Anonymous\n         with self.assertRaises(ValueError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n-                roles=[\'Anonymous\'],\n+                groupname="foo",\n+                roles=["Anonymous"],\n             )\n \n         # You can\'t grant Authenticated\n         with self.assertRaises(ValueError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n-                roles=[\'Authenticated\'],\n+                groupname="foo",\n+                roles=["Authenticated"],\n             )\n \n         # Roles are required\n         with self.assertRaises(MissingParameterError):\n-            api.group.grant_roles(groupname=\'foo\')\n+            api.group.grant_roles(groupname="foo")\n \n         # Groupname and group are mutually exclusive\n         with self.assertRaises(InvalidParameterError):\n             api.group.grant_roles(\n-                groupname=\'foo\',\n+                groupname="foo",\n                 group=group,\n-                roles=[\'Reviewer\'],\n+                roles=["Reviewer"],\n             )\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n-        self.assertIn(\'Editor\', api.group.get_roles(groupname=\'foo\'))\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group))\n+        api.group.grant_roles(groupname="foo", roles=["Editor"])\n+        self.assertIn("Editor", api.group.get_roles(groupname="foo"))\n+        self.assertIn("Editor", api.group.get_roles(group=group))\n \n-        api.group.grant_roles(groupname=\'foo\', roles=(\'Contributor\',))\n-        self.assertIn(\'Contributor\', api.group.get_roles(groupname=\'foo\'))\n-        self.assertIn(\'Contributor\', api.group.get_roles(group=group))\n+        api.group.grant_roles(groupname="foo", roles=("Contributor",))\n+        self.assertIn("Contributor", api.group.get_roles(groupname="foo"))\n+        self.assertIn("Contributor", api.group.get_roles(group=group))\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Reader\', \'Reader\'])\n-        ROLES = {\'Editor\', \'Contributor\', \'Reader\', \'Authenticated\'}\n-        self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'foo\')))\n+        api.group.grant_roles(groupname="foo", roles=["Reader", "Reader"])\n+        ROLES = {"Editor", "Contributor", "Reader", "Authenticated"}\n+        self.assertEqual(ROLES, set(api.group.get_roles(groupname="foo")))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n     def test_revoke_roles(self):\n         """Test revoke roles."""\n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n-        group = api.group.create(groupname=\'bar\')\n+\n+        group = api.group.create(groupname="bar")\n \n         # You can\'t revoke Anonymous\n         with self.assertRaises(ValueError):\n             api.group.revoke_roles(\n-                groupname=\'bar\',\n-                roles=[\'Anonymous\'],\n+                groupname="bar",\n+                roles=["Anonymous"],\n             )\n \n         # You can\'t revoke Authenticated\n         with self.assertRaises(ValueError):\n             api.group.revoke_roles(\n-                groupname=\'bar\',\n-                roles=[\'Authenticated\'],\n+                groupname="bar",\n+                roles=["Authenticated"],\n             )\n \n         # Roles are required\n         with self.assertRaises(MissingParameterError):\n-            api.group.revoke_roles(groupname=\'foo\')\n+            api.group.revoke_roles(groupname="foo")\n \n         # Groupname and group are mutually exclusive\n         with self.assertRaises(InvalidParameterError):\n             api.group.revoke_roles(\n-                groupname=\'foo\',\n+                groupname="foo",\n                 group=group,\n-                roles=[\'Reviewer\'],\n+                roles=["Reviewer"],\n             )\n \n-        api.group.grant_roles(groupname=\'bar\', roles=[\'Reviewer\', \'Editor\'])\n+        api.group.grant_roles(groupname="bar", roles=["Reviewer", "Editor"])\n \n-        api.group.revoke_roles(groupname=\'bar\', roles=[\'Reviewer\'])\n-        self.assertNotIn(\'Reviewer\', api.group.get_roles(groupname=\'bar\'))\n-        self.assertNotIn(\'Reviewer\', api.group.get_roles(group=group))\n-        self.assertIn(\'Editor\', api.group.get_roles(groupname=\'bar\'))\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group))\n+        api.group.revoke_roles(groupname="bar", roles=["Reviewer"])\n+        self.assertNotIn("Reviewer", api.group.get_roles(groupname="bar"))\n+        self.assertNotIn("Reviewer", api.group.get_roles(group=group))\n+        self.assertIn("Editor", api.group.get_roles(groupname="bar"))\n+        self.assertIn("Editor", api.group.get_roles(group=group))\n \n-        api.group.revoke_roles(groupname=\'bar\', roles=[\'Editor\'])\n-        ROLES = {\'Authenticated\'}\n-        self.assertEqual(ROLES, set(api.group.get_roles(groupname=\'bar\')))\n+        api.group.revoke_roles(groupname="bar", roles=["Editor"])\n+        ROLES = {"Authenticated"}\n+        self.assertEqual(ROLES, set(api.group.get_roles(groupname="bar")))\n         self.assertEqual(ROLES, set(api.group.get_roles(group=group)))\n \n     def test_grant_roles_in_context(self):\n         """Test grant roles."""\n \n-        group = api.group.create(groupname=\'foo\')\n+        group = api.group.create(groupname="foo")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n \n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Editor"], obj=folder)\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=folder))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'foo\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="foo", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=document))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=document))\n \n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=(\'Contributor\',),\n+            groupname="foo",\n+            roles=("Contributor",),\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            "Contributor",\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.group.get_roles(groupname=\'foo\', obj=document),\n+            "Contributor",\n+            api.group.get_roles(groupname="foo", obj=document),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = {\'Editor\', \'Contributor\', \'Authenticated\'}\n+        ROLES = {"Editor", "Contributor", "Authenticated"}\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'foo\', obj=folder)),\n+            set(api.group.get_roles(groupname="foo", obj=folder)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -472,18 +486,18 @@ def test_grant_roles_in_context(self):\n         )\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'foo\', obj=document)),\n+            set(api.group.get_roles(groupname="foo", obj=document)),\n         )\n         self.assertEqual(\n             ROLES,\n             set(api.group.get_roles(group=group, obj=document)),\n         )\n-        ROLES = {\'Editor\', \'Contributor\'}\n+        ROLES = {"Editor", "Contributor"}\n         self.assertEqual(\n             ROLES,\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=folder,\n                     inherit=False,\n                 ),\n@@ -497,7 +511,7 @@ def test_grant_roles_in_context(self):\n             set(),\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n@@ -510,89 +524,92 @@ def test_grant_roles_in_context(self):\n \n     def test_local_roles_without_inheritance(self):\n         """Test granting and getting local_roles."""\n-        api.group.create(groupname=\'foo\')\n+        api.group.create(groupname="foo")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         self.assertEqual(\n-            [\'Authenticated\'],\n-            api.group.get_roles(groupname=\'foo\'),\n+            ["Authenticated"],\n+            api.group.get_roles(groupname="foo"),\n         )\n         # Add the editor-role as global role\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'])\n+        api.group.grant_roles(groupname="foo", roles=["Editor"])\n         self.assertCountEqual(\n-            [\'Authenticated\', \'Editor\'],\n-            api.group.get_roles(groupname=\'foo\'),\n+            ["Authenticated", "Editor"],\n+            api.group.get_roles(groupname="foo"),\n         )\n         # local_roles plus global_roles\n         self.assertCountEqual(\n-            [\'Authenticated\', \'Editor\'],\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n+            ["Authenticated", "Editor"],\n+            api.group.get_roles(groupname="foo", obj=folder),\n         )\n         # only local_roles\n         self.assertEqual(\n             [],\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n         )\n \n         # The Contributor-role is added\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=folder,\n         )\n         self.assertCountEqual(\n-            [\'Contributor\'],\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            ["Contributor"],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n         )\n         # local_roles plus global_roles\n         self.assertEqual(\n-            {\'Authenticated\', \'Editor\', \'Contributor\'},\n-            set(api.group.get_roles(groupname=\'foo\', obj=document)),\n+            {"Authenticated", "Editor", "Contributor"},\n+            set(api.group.get_roles(groupname="foo", obj=document)),\n         )\n         # no only-local roles\n         self.assertEqual(\n             set(),\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n             ),\n         )\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=document,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=document,\n         )\n         # one only-local role\n         self.assertEqual(\n-            {\'Contributor\'},\n+            {"Contributor"},\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=document,\n                     inherit=False,\n                 ),\n             ),\n-\n         )\n \n         # The Editor-role is added even though it is already a global role\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Editor\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Editor"], obj=folder)\n         self.assertEqual(\n-            {\'Contributor\', \'Editor\'},\n+            {"Contributor", "Editor"},\n             set(\n                 api.group.get_roles(\n-                    groupname=\'foo\',\n+                    groupname="foo",\n                     obj=folder,\n                     inherit=False,\n                 ),\n@@ -605,18 +622,18 @@ def test_local_roles_disregard_adapter(self):\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n-        api.group.create(groupname=\'foo\')\n+        api.group.create(groupname="foo")\n \n         self.assertEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated"],\n         )\n         self.assertEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n             [],\n         )\n \n@@ -624,133 +641,135 @@ def test_local_roles_disregard_adapter(self):\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n         class LocalRoleProvider:\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRoles(self, principal_id):\n-                return (\'Reviewer\',)\n+                return ("Reviewer",)\n \n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated", "Reviewer"],\n         )\n \n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n-            [\'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n+            ["Reviewer"],\n         )\n \n         # Assign a local role\n         api.group.grant_roles(\n-            groupname=\'foo\', roles=[\'Contributor\'], obj=folder,\n+            groupname="foo",\n+            roles=["Contributor"],\n+            obj=folder,\n         )\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder),\n-            [\'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder),\n+            ["Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # The adapter role in in the local roles but not persistent\n         self.assertCountEqual(\n-            api.group.get_roles(groupname=\'foo\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.group.get_roles(groupname="foo", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        local_roles = getattr(folder, \'__ac_local_roles__\', {})\n+        local_roles = getattr(folder, "__ac_local_roles__", {})\n         self.assertCountEqual(\n-            local_roles.get(\'foo\'),\n-            [\'Contributor\'],\n+            local_roles.get("foo"),\n+            ["Contributor"],\n         )\n         # cleanup\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n-            factory=LocalRoleProvider, provided=ILocalRoleProvider,\n+            factory=LocalRoleProvider,\n+            provided=ILocalRoleProvider,\n         )\n \n     def test_revoke_roles_in_context(self):\n         """Test revoke roles."""\n \n-        group = api.group.create(groupname=\'ploneboat\')\n+        group = api.group.create(groupname="ploneboat")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.group.grant_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer", "Editor"],\n             obj=folder,\n         )\n \n         api.group.revoke_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=folder))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.group.get_roles(group=group, obj=document))\n+        self.assertIn("Editor", api.group.get_roles(group=group, obj=document))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Reviewer",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Reviewer",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n         api.group.revoke_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=folder),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=folder),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n+            "Editor",\n             api.group.get_roles(group=group, obj=folder),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.group.get_roles(groupname=\'ploneboat\', obj=document),\n+            "Editor",\n+            api.group.get_roles(groupname="ploneboat", obj=document),\n         )\n         self.assertNotIn(\n-            \'Editor\',\n+            "Editor",\n             api.group.get_roles(group=group, obj=document),\n         )\n \n-        ROLES = {\'Authenticated\'}\n+        ROLES = {"Authenticated"}\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'ploneboat\', obj=folder)),\n+            set(api.group.get_roles(groupname="ploneboat", obj=folder)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -758,7 +777,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertEqual(\n             ROLES,\n-            set(api.group.get_roles(groupname=\'ploneboat\', obj=document)),\n+            set(api.group.get_roles(groupname="ploneboat", obj=document)),\n         )\n         self.assertEqual(\n             ROLES,\n@@ -768,27 +787,31 @@ def test_revoke_roles_in_context(self):\n     def test_local_roles_no_inheritance(self):\n         """Test possibility to disregard roles\n         for inherited groups."""\n-        api.group.create(groupname=\'ploneboat\')\n+        api.group.create(groupname="ploneboat")\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.group.grant_roles(\n-            groupname=\'ploneboat\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            groupname="ploneboat",\n+            roles=["Reviewer", "Editor"],\n             obj=document,\n         )\n-        document.manage_setLocalRoles(\'AuthenticatedUsers\', (\'Reader\',))\n+        document.manage_setLocalRoles("AuthenticatedUsers", ("Reader",))\n         self.assertNotIn(\n-            \'Reader\',\n-            api.group.get_roles(groupname=\'ploneboat\', inherit=False, obj=document),  # noqa: E501\n+            "Reader",\n+            api.group.get_roles(\n+                groupname="ploneboat",\n+                inherit=False,\n+                obj=document,\n+            ),\n         )\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 595366d4..40ff53a3 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -33,27 +33,27 @@\n     from email import message_from_string as message_from_bytes\n \n \n-HAS_PLONE5 = parse_version(env.plone_version()) >= parse_version(\'5.0b2\')\n+HAS_PLONE5 = parse_version(env.plone_version()) >= parse_version("5.0b2")\n \n \n class IMyRegistrySettings(Interface):\n \n     field_one = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n     field_two = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n \n class IMyOtherRegistrySettings(Interface):\n \n     field_three = schema.TextLine(\n-        title=\'something\',\n-        description=\'something else\',\n+        title="something",\n+        description="something else",\n     )\n \n \n@@ -68,66 +68,66 @@ class TestPloneApiPortal(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         # Mock the mail host so we can test sending the email\n-        mockmailhost = MockMailHost(\'MailHost\')\n+        mockmailhost = MockMailHost("MailHost")\n \n-        if not getattr(mockmailhost, \'smtp_host\', None):\n-            mockmailhost.smtp_host = \'localhost\'\n+        if not getattr(mockmailhost, "smtp_host", None):\n+            mockmailhost.smtp_host = "localhost"\n \n         self.portal.MailHost = mockmailhost\n         sm = self.portal.getSiteManager()\n         sm.registerUtility(component=mockmailhost, provided=IMailHost)\n \n-        self.mailhost = portal.get_tool(\'MailHost\')\n+        self.mailhost = portal.get_tool("MailHost")\n         if HAS_PLONE5:\n             portal.set_registry_record(\n-                \'plone.email_from_name\',\n-                \'Portal Owner\',\n+                "plone.email_from_name",\n+                "Portal Owner",\n             )\n             portal.set_registry_record(\n-                \'plone.email_from_address\',\n-                \'sender@example.org\',\n+                "plone.email_from_address",\n+                "sender@example.org",\n             )\n         else:\n             self.portal._updateProperty(\n-                \'email_from_name\',\n-                \'Portal Owner\',\n+                "email_from_name",\n+                "Portal Owner",\n             )\n             self.portal._updateProperty(\n-                \'email_from_address\',\n-                \'sender@example.org\',\n+                "email_from_address",\n+                "sender@example.org",\n             )\n \n     def _set_localization_date_format(self):\n         """Set the expected localized date format."""\n         from plone.api.exc import InvalidParameterError\n \n-        name_root = \'Products.CMFPlone.i18nl10n.override_dateformat.\'\n+        name_root = "Products.CMFPlone.i18nl10n.override_dateformat."\n         try:\n             portal.set_registry_record(\n-                name=name_root + \'Enabled\',\n+                name=name_root + "Enabled",\n                 value=True,\n             )\n             portal.set_registry_record(\n-                name=name_root + \'date_format_long\',\n-                value=\'%b %d, %Y %I:%M %p\',\n+                name=name_root + "date_format_long",\n+                value="%b %d, %Y %I:%M %p",\n             )\n             portal.set_registry_record(\n-                name=name_root + \'time_format\',\n-                value=\'%I:%M %p\',\n+                name=name_root + "time_format",\n+                value="%I:%M %p",\n             )\n             portal.set_registry_record(\n-                name=name_root + \'date_format_short\',\n-                value=\'%b %d, %Y\',\n+                name=name_root + "date_format_short",\n+                value="%b %d, %Y",\n             )\n         except InvalidParameterError:\n             # before Plone 4.3, date formats were stored in portal_properties\n-            properties = portal.get_tool(\'portal_properties\')\n-            properties.localLongTimeFormat = \'%b %d, %Y %I:%M %p\'\n-            properties.localTimeOnlyFormat = \'%I:%M %p\'\n-            properties.localTimeFormat = \'%b %d, %Y\'\n+            properties = portal.get_tool("portal_properties")\n+            properties.localLongTimeFormat = "%b %d, %Y %I:%M %p"\n+            properties.localTimeOnlyFormat = "%I:%M %p"\n+            properties.localTimeFormat = "%b %d, %Y"\n \n     def test_get(self):\n         """Test getting the portal object."""\n@@ -143,8 +143,8 @@ def test_get_with_sub_site(self):\n         """\n         a_site = content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            title=\'A Site\',\n+            type="Folder",\n+            title="A Site",\n         )\n         a_site.setSiteManager(LocalSiteManager(a_site))\n \n@@ -155,11 +155,12 @@ def test_get_with_sub_site(self):\n         # cleanup\n         setSite(self.portal)\n \n-    @mock.patch(\'plone.api.portal.getSite\')\n+    @mock.patch("plone.api.portal.getSite")\n     def test_get_no_site(self, getSite):\n         """Test error msg when getSite() returns None."""\n         getSite.return_value = None\n         from plone.api.exc import CannotGetPortalError\n+\n         with self.assertRaises(CannotGetPortalError):\n             portal.get()\n \n@@ -168,14 +169,16 @@ def test_get_tool_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_tool()\n \n     def test_get_tool_tool_not_found(self):\n         """Test that error msg lists available tools if a tool is not found."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_tool(\'portal_foo\')\n+            portal.get_tool("portal_foo")\n \n         self.assertTrue(\n             str(cm.exception).startswith(\n@@ -185,23 +188,23 @@ def test_get_tool_tool_not_found(self):\n \n         # A selection of portal tools which should exist in all plone versions\n         should_be_theres = (\n-            \'portal_setup\',\n-            \'portal_catalog\',\n+            "portal_setup",\n+            "portal_catalog",\n         )\n \n         for should_be_there in should_be_theres:\n-            self.assertIn((should_be_there + \'\\n\'), str(cm.exception))\n+            self.assertIn((should_be_there + "\\n"), str(cm.exception))\n \n     def test_get_tool(self):\n         """Test to validate the tool name."""\n \n         self.assertEqual(\n-            portal.get_tool(name=\'portal_catalog\'),\n-            getToolByName(self.portal, \'portal_catalog\'),\n+            portal.get_tool(name="portal_catalog"),\n+            getToolByName(self.portal, "portal_catalog"),\n         )\n         self.assertEqual(\n-            portal.get_tool(name=\'portal_membership\'),\n-            getToolByName(self.portal, \'portal_membership\'),\n+            portal.get_tool(name="portal_membership"),\n+            getToolByName(self.portal, "portal_membership"),\n         )\n \n     def test_send_email_constraints(self):\n@@ -215,18 +218,18 @@ def test_send_email_constraints(self):\n         # recipient, subject and body are required\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                subject=\'Beer\',\n-                body=\'To beer or not to beer, that is the question\',\n+                subject="Beer",\n+                body="To beer or not to beer, that is the question",\n             )\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                recipient=\'joe@example.org\',\n-                subject=\'Beer\',\n+                recipient="joe@example.org",\n+                subject="Beer",\n             )\n         with self.assertRaises(MissingParameterError):\n             portal.send_email(\n-                recipient=\'joe@example.org\',\n-                body=\'To beer or not to beer, that is the question\',\n+                recipient="joe@example.org",\n+                body="To beer or not to beer, that is the question",\n             )\n \n     def test_send_email(self):\n@@ -235,56 +238,56 @@ def test_send_email(self):\n         self.mailhost.reset()\n \n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            sender=\'noreply@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            sender="noreply@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-        self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-        self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-        self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+        self.assertEqual(msg["To"], "bob@plone.org")\n+        self.assertEqual(msg["From"], "noreply@plone.org")\n+        self.assertEqual(msg["Subject"], "=?utf-8?q?Trappist?=")\n+        self.assertEqual(msg.get_payload(), "One for you Bob!")\n         self.mailhost.reset()\n \n         # When no sender is set, we take the portal properties.\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Portal Owner <sender@example.org>\')\n+        self.assertEqual(msg["From"], "Portal Owner <sender@example.org>")\n \n     def test_send_email_without_configured_mailhost(self):\n         """By default, the MailHost is not configured yet, so we cannot\n         send email.\n         """\n         if HAS_PLONE5:\n-            old_value = portal.get_registry_record(\'plone.email_from_address\')\n-            portal.set_registry_record(\'plone.email_from_address\', \'\')  # ASCII\n+            old_value = portal.get_registry_record("plone.email_from_address")\n+            portal.set_registry_record("plone.email_from_address", "")  # ASCII\n         else:\n             old_smtp_host = self.portal.MailHost.smtp_host\n             self.portal.MailHost.smtp_host = None\n \n         with self.assertRaises(ValueError):\n             portal.send_email(\n-                recipient=\'bob@plone.org\',\n-                sender=\'noreply@plone.org\',\n-                subject=\'Trappist\',\n-                body=\'One for you Bob!\',\n+                recipient="bob@plone.org",\n+                sender="noreply@plone.org",\n+                subject="Trappist",\n+                body="One for you Bob!",\n             )\n \n         if HAS_PLONE5:\n-            portal.set_registry_record(\'plone.email_from_address\', old_value)\n+            portal.set_registry_record("plone.email_from_address", old_value)\n         else:\n             self.portal.MailHost.smtp_host = old_smtp_host\n \n-    @mock.patch(\'plone.api.portal.parseaddr\')\n+    @mock.patch("plone.api.portal.parseaddr")\n     def test_send_email_parseaddr(self, mock_parseaddr):\n         """Simulate faulty parsing in parseaddr, from_address should be\n         default email_from_address.\n@@ -292,44 +295,43 @@ def test_send_email_parseaddr(self, mock_parseaddr):\n \n         self.mailhost.reset()\n \n-        mock_parseaddr.return_value = (\'Chuck Norris\', \'chuck@norris.org\')\n+        mock_parseaddr.return_value = ("Chuck Norris", "chuck@norris.org")\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n     def test_send_email_with_config_in_registry(self):\n-        """Test mail-setting being stored in registry\n-        """\n+        """Test mail-setting being stored in registry"""\n         self.mailhost.reset()\n \n         portal.set_registry_record(\n-            \'plone.email_from_address\',\n-            \'reg@example.org\',\n+            "plone.email_from_address",\n+            "reg@example.org",\n         )  # ASCII\n         portal.set_registry_record(\n-            \'plone.email_from_name\',\n-            \'Registry\',\n+            "plone.email_from_name",\n+            "Registry",\n         )  # TextLine\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = message_from_bytes(self.mailhost.messages[0])\n-        self.assertEqual(msg[\'From\'], \'Registry <reg@example.org>\')\n+        self.assertEqual(msg["From"], "Registry <reg@example.org>")\n \n     def test_send_email_with_printingmailhost(self):\n-        """ Test that send_email does not raise an exception when\n+        """Test that send_email does not raise an exception when\n         Products.PrintingMailHost is installed and active.\n         """\n         old_flag = portal.PRINTINGMAILHOST_ENABLED\n \n         if HAS_PLONE5:\n-            old_value = portal.get_registry_record(\'plone.email_from_address\')\n-            portal.set_registry_record(\'plone.email_from_address\', \'\')  # ASCII\n+            old_value = portal.get_registry_record("plone.email_from_address")\n+            portal.set_registry_record("plone.email_from_address", "")  # ASCII\n         else:\n             old_smtp_host = self.portal.MailHost.smtp_host\n             self.portal.MailHost.smtp_host = None\n@@ -338,24 +340,24 @@ def test_send_email_with_printingmailhost(self):\n         portal.PRINTINGMAILHOST_ENABLED = False\n         with self.assertRaises(ValueError):\n             portal.send_email(\n-                recipient=\'bob@plone.org\',\n-                sender=\'noreply@plone.org\',\n-                subject=\'Trappist\',\n-                body=\'One for you Bob!\',\n+                recipient="bob@plone.org",\n+                sender="noreply@plone.org",\n+                subject="Trappist",\n+                body="One for you Bob!",\n             )\n \n         # PrintingMailHost enabled\n         portal.PRINTINGMAILHOST_ENABLED = True\n         portal.send_email(\n-            recipient=\'bob@plone.org\',\n-            sender=\'noreply@plone.org\',\n-            subject=\'Trappist\',\n-            body=\'One for you Bob!\',\n+            recipient="bob@plone.org",\n+            sender="noreply@plone.org",\n+            subject="Trappist",\n+            body="One for you Bob!",\n         )\n \n         # Prevents sideeffects in other tests.\n         if HAS_PLONE5:\n-            portal.set_registry_record(\'plone.email_from_address\', old_value)\n+            portal.set_registry_record("plone.email_from_address", old_value)\n         else:\n             self.portal.MailHost.smtp_host = old_smtp_host\n         portal.PRINTINGMAILHOST_ENABLED = old_flag\n@@ -365,6 +367,7 @@ def test_get_localized_time_constraints(self):\n \n         # When no parameters are given an error is raised\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_localized_time()\n \n@@ -379,18 +382,18 @@ def test_get_localized_time(self):\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999 11:59 PM\')\n+        self.assertEqual(result, "Dec 31, 1999 11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'11:59 PM\')\n+        self.assertEqual(result, "11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=DateTime.DateTime(1999, 12, 31, 23, 59),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_get_localized_time_python_datetime(self):\n         """Test getting the localized time using Python datetime.datetime."""\n@@ -403,18 +406,18 @@ def test_get_localized_time_python_datetime(self):\n             datetime=datetime(1999, 12, 31, 23, 59),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999 11:59 PM\')\n+        self.assertEqual(result, "Dec 31, 1999 11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=datetime(1999, 12, 31, 23, 59),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'11:59 PM\')\n+        self.assertEqual(result, "11:59 PM")\n \n         result = portal.get_localized_time(\n             datetime=datetime(1999, 12, 31, 23, 59),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_get_localized_time_python_date(self):\n         """Test getting the localized time using Python datetime.date."""\n@@ -427,18 +430,18 @@ def test_get_localized_time_python_date(self):\n             datetime=date(1999, 12, 31),\n             long_format=True,\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n         result = portal.get_localized_time(\n             datetime=date(1999, 12, 31),\n             time_only=True,\n         )\n-        self.assertEqual(result, \'\')\n+        self.assertEqual(result, "")\n \n         result = portal.get_localized_time(\n             datetime=date(1999, 12, 31),\n         )\n-        self.assertEqual(result, \'Dec 31, 1999\')\n+        self.assertEqual(result, "Dec 31, 1999")\n \n     def test_show_message_constraints(self):\n         """Test the constraints for show_message."""\n@@ -448,30 +451,28 @@ def test_show_message_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             portal.show_message()\n \n-        # message and request are required\n-        with self.assertRaises(MissingParameterError):\n-            portal.show_message(request=self.layer[\'request\'])\n-\n+        # message is a required parameter\n         with self.assertRaises(MissingParameterError):\n-            portal.show_message(message=\'Beer is brewing.\')\n+            portal.show_message(request=self.layer["request"])\n \n     def test_show_message(self):\n         """Test to see if message appears."""\n \n         from Products.statusmessages.interfaces import IStatusMessage\n-        request = self.layer[\'request\']\n-        portal.show_message(message=\'Blueberries!\', request=request)\n+\n+        request = self.layer["request"]\n+        portal.show_message(message="Blueberries!", request=request)\n         messages = IStatusMessage(request)\n         show = messages.show()\n         self.assertEqual(len(show), 1)\n-        self.assertIn(\'Blueberries!\', show[0].message)\n-        portal.show_message(message=\'One\', request=request)\n-        portal.show_message(message=\'Two\', request=request)\n+        self.assertIn("Blueberries!", show[0].message)\n+        portal.show_message(message="One", request=request)\n+        portal.show_message(message="Two", request=request)\n         messages = IStatusMessage(request)\n         show = messages.show()\n         self.assertEqual(len(show), 2)\n-        self.assertEqual(show[0].message, \'One\')\n-        self.assertEqual(show[1].message, \'Two\')\n+        self.assertEqual(show[0].message, "One")\n+        self.assertEqual(show[1].message, "Two")\n \n     def test_get_navigation_root(self):\n         """Test to see if the navigation_root is returned."""\n@@ -480,41 +481,44 @@ def test_get_navigation_root(self):\n         self.assertTrue(INavigationRoot.providedBy(navigation_root))\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_navigation_root()\n \n     def test_get_existing_registry_record(self):\n         """Test that existing registry records are returned correctly."""\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.norris_power\'] = Record(\n+        registry.records["plone.api.norris_power"] = Record(\n             field.TextLine(title="Chuck Norris\' Power"),\n         )\n-        registry.records[\'plone.api.unset\'] = Record(\n-            field.TextLine(title=\'An unset field\'),\n+        registry.records["plone.api.unset"] = Record(\n+            field.TextLine(title="An unset field"),\n         )\n-        registry[\'plone.api.norris_power\'] = \'infinite\'\n+        registry["plone.api.norris_power"] = "infinite"\n \n         self.assertEqual(\n-            portal.get_registry_record(\'plone.api.norris_power\'),\n-            \'infinite\',\n+            portal.get_registry_record("plone.api.norris_power"),\n+            "infinite",\n         )\n \n         self.assertEqual(\n-            portal.get_registry_record(\'plone.api.unset\'),\n+            portal.get_registry_record("plone.api.unset"),\n             None,\n         )\n \n     def test_get_missing_registry_record(self):\n         """Test that getting a missing registry record raises an Exception."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.get_registry_record()\n \n     def test_get_invalid_registry_record(self):\n         """Test that getting an invalid registry record raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            portal.get_registry_record(name=dict({\'foo\': \'bar\'}))\n+            portal.get_registry_record(name=dict({"foo": "bar"}))\n \n     def test_get_invalid_registry_record_msg(self):\n         """Test that the error message from trying to get a\n@@ -524,32 +528,32 @@ def test_get_invalid_registry_record_msg(self):\n         from plone.api.exc import InvalidParameterError\n \n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'nonexistent.sharepoint.power\')\n+            portal.get_registry_record(name="nonexistent.sharepoint.power")\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n \n     def test_get_invalid_registry_record_suggestions(self):\n         from plone.api.exc import InvalidParameterError\n \n         # Check without suggestion\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'a random unique string\')\n+            portal.get_registry_record(name="a random unique string")\n         exc_str = str(cm.exception)\n \n         # Check for an error, but no suggestions.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n-        self.assertFalse(\'Did you mean?:\' in exc_str)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n+        self.assertFalse("Did you mean?:" in exc_str)\n \n         # Check with suggestions\n         with self.assertRaises(InvalidParameterError) as cm:\n-            portal.get_registry_record(name=\'querystring\')\n+            portal.get_registry_record(name="querystring")\n         exc_str = str(cm.exception)\n \n         # Check for an error with suggestions.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name\'))\n-        self.assertTrue(\'Did you mean?:\' in exc_str)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name"))\n+        self.assertTrue("Did you mean?:" in exc_str)\n \n     def test_get_registry_record_from_interface(self):\n         """Test that getting a record from an interface works."""\n@@ -558,7 +562,7 @@ def test_get_registry_record_from_interface(self):\n \n         self.assertEqual(\n             portal.get_registry_record(\n-                \'field_one\',\n+                "field_one",\n                 interface=IMyRegistrySettings,\n             ),\n             None,\n@@ -567,9 +571,10 @@ def test_get_registry_record_from_interface(self):\n     def test_get_invalid_interface_for_registry_record(self):\n         """Test that passing an invalid interface raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 interface=ImNotAnInterface,\n             )\n \n@@ -578,27 +583,29 @@ def test_get_invalid_interface_for_registry_record_msg(self):\n         interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 interface=ImNotAnInterface,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'The interface parameter has to \'))\n+        self.assertTrue(exc_str.startswith("The interface parameter has to "))\n \n     def test_get_invalid_record_in_interface_for_registry_record(self):\n         """Test that trying to get an invalid field from an interface raises\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -607,24 +614,25 @@ def test_get_invalid_record_in_interface_for_registry_record_msg(self):\n         field from an interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name \'))\n-        self.assertTrue(exc_str.find(\' on interface \') != -1)\n-        self.assertTrue(exc_str.find(\'field_one\') != -1)\n-        self.assertTrue(exc_str.find(\'field_two\') != -1)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name "))\n+        self.assertTrue(exc_str.find(" on interface ") != -1)\n+        self.assertTrue(exc_str.find("field_one") != -1)\n+        self.assertTrue(exc_str.find("field_two") != -1)\n \n     def test_get_invalid_record_with_default(self):\n-        """ If get_registry_record is called with a default parameter\n+        """If get_registry_record is called with a default parameter\n         and the record cannot be resolved\n         the default will be returned instead of raising InvalidParameterError\n         """\n@@ -633,7 +641,7 @@ def test_get_invalid_record_with_default(self):\n \n         self.assertEqual(\n             portal.get_registry_record(\n-                \'non_existing_field\',\n+                "non_existing_field",\n                 interface=IMyRegistrySettings,\n                 default=1,\n             ),\n@@ -641,7 +649,7 @@ def test_get_invalid_record_with_default(self):\n         )\n         self.assertEqual(\n             portal.get_registry_record(\n-                \'something\',\n+                "something",\n                 default=2,\n             ),\n             2,\n@@ -650,17 +658,18 @@ def test_get_invalid_record_with_default(self):\n     def test_set_valid_registry_record(self):\n         """Test that setting a valid registry record succeeds."""\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.plone_power\'] = Record(\n+        registry.records["plone.api.plone_power"] = Record(\n             field.TextLine(title="Plone\'s Power"),\n         )\n-        portal.set_registry_record(\'plone.api.plone_power\', \'awesome\')\n-        self.assertEqual(registry[\'plone.api.plone_power\'], \'awesome\')\n+        portal.set_registry_record("plone.api.plone_power", "awesome")\n+        self.assertEqual(registry["plone.api.plone_power"], "awesome")\n \n     def test_set_missing_param_registry_record(self):\n         """Test that when set_registry_record is called without\n         parameters, a MissingParameterError exception is raised.\n         """\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             portal.set_registry_record()\n \n@@ -669,10 +678,11 @@ def test_set_non_existing_record_value(self):\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                name=\'nonexistent.sharepoint.power\',\n-                value=\'Zero\',\n+                name="nonexistent.sharepoint.power",\n+                value="Zero",\n             )\n \n     def test_set_no_value_param_for_existing_record(self):\n@@ -681,23 +691,25 @@ def test_set_no_value_param_for_existing_record(self):\n         an Exception.\n         """\n         registry = getUtility(IRegistry)\n-        registry.records[\'plone.api.plone_power\'] = Record(\n+        registry.records["plone.api.plone_power"] = Record(\n             field.TextLine(title="Plone\'s Power"),\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n-            portal.set_registry_record(name=\'plone.api.plone_power\')\n+            portal.set_registry_record(name="plone.api.plone_power")\n \n     def test_set_invalid_key_type_record(self):\n         """Test that trying to set the value of a record by passing a\n         list for the record name instead of a string, raises an error.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                name=[\'foo\', \'bar\'],\n-                value=\'baz\',\n+                name=["foo", "bar"],\n+                value="baz",\n             )\n \n     def test_set_registry_record_from_interface(self):\n@@ -705,15 +717,15 @@ def test_set_registry_record_from_interface(self):\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n-        text = \'random text\'\n+        text = "random text"\n         portal.set_registry_record(\n-            \'field_one\',\n+            "field_one",\n             text,\n             interface=IMyRegistrySettings,\n         )\n         self.assertEqual(\n             portal.get_registry_record(\n-                \'field_one\',\n+                "field_one",\n                 interface=IMyRegistrySettings,\n             ),\n             text,\n@@ -727,28 +739,28 @@ def test_set_registry_record_with_invalid_value(self):\n         and duplicate: https://github.com/plone/plone.api/issues/464\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyOtherRegistrySettings)\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'field_three\',\n+                "field_three",\n                 42,\n                 interface=IMyOtherRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n-        self.assertIn(\n-            "The value parameter for the field field_three", exc_str\n-        )\n+        self.assertIn("The value parameter for the field field_three", exc_str)\n         self.assertIn("TextLine", exc_str)\n \n     def test_set_registry_record_on_invalid_interface(self):\n         """Test that passing an invalid interface raises an Exception."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'something\',\n-                \'value\',\n+                "something",\n+                "value",\n                 interface=ImNotAnInterface,\n             )\n \n@@ -757,29 +769,31 @@ def test_set_registry_record_on_invalid_interface_msg(self):\n         interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'something\',\n-                \'value\',\n+                "something",\n+                "value",\n                 interface=ImNotAnInterface,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'The interface parameter has to \'))\n+        self.assertTrue(exc_str.startswith("The interface parameter has to "))\n \n     def test_set_invalid_registry_record_from_interface(self):\n         """Test that trying to set an invalid field from an interface raises\n         an Exception.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'non_existing_field\',\n-                \'value\',\n+                "non_existing_field",\n+                "value",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -788,35 +802,37 @@ def test_set_invalid_registry_record_from_interface_msg(self):\n         field from an interface.\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'non_existing_field\',\n-                \'value\',\n+                "non_existing_field",\n+                "value",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n-        self.assertTrue(exc_str.startswith(\'Cannot find a record with name \'))\n-        self.assertTrue(exc_str.find(\' on interface \') != -1)\n-        self.assertTrue(exc_str.find(\'field_one\') != -1)\n-        self.assertTrue(exc_str.find(\'field_two\') != -1)\n+        self.assertTrue(exc_str.startswith("Cannot find a record with name "))\n+        self.assertTrue(exc_str.find(" on interface ") != -1)\n+        self.assertTrue(exc_str.find("field_one") != -1)\n+        self.assertTrue(exc_str.find("field_two") != -1)\n \n     def test_set_invalid_value_on_registry_record_from_interface(self):\n         """Test that setting a value not meant for the record raises an\n         Exception..\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError):\n             portal.set_registry_record(\n-                \'field_one\',\n-                b\'value\',\n+                "field_one",\n+                b"value",\n                 interface=IMyRegistrySettings,\n             )\n \n@@ -825,50 +841,50 @@ def test_set_invalid_value_on_registry_record_from_interface_msg(self):\n         Exception..\n         """\n         from plone.api.exc import InvalidParameterError\n+\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IMyRegistrySettings)\n \n         with self.assertRaises(InvalidParameterError) as cm:\n             portal.set_registry_record(\n-                \'field_one\',\n-                b\'value\',\n+                "field_one",\n+                b"value",\n                 interface=IMyRegistrySettings,\n             )\n         exc_str = str(cm.exception)\n \n         # Check if there is an error message.\n         self.assertTrue(\n-            exc_str.startswith(\'The value parameter for the field\'),\n+            exc_str.startswith("The value parameter for the field"),\n         )\n-        self.assertTrue(exc_str.find(\' needs to be \') != -1)\n-        self.assertTrue(exc_str.find(\'TextLine\') != -1)\n+        self.assertTrue(exc_str.find(" needs to be ") != -1)\n+        self.assertTrue(exc_str.find("TextLine") != -1)\n \n     def test_get_default_language(self):\n         """Test that default language is properly returned."""\n-        self.assertEqual(portal.get_default_language(), \'en\')\n+        self.assertEqual(portal.get_default_language(), "en")\n \n     def test_get_current_language(self):\n         """Test that current language is properly returned."""\n-        self.assertEqual(portal.get_current_language(portal.get()), \'en\')\n-        self.layer[\'request\'][\'LANGUAGE\'] = \'fr\'\n-        self.assertEqual(portal.get_current_language(), \'fr\')\n+        self.assertEqual(portal.get_current_language(portal.get()), "en")\n+        self.layer["request"]["LANGUAGE"] = "fr"\n+        self.assertEqual(portal.get_current_language(), "fr")\n \n     def test_translate(self):\n         """Test translation."""\n         self.assertEqual(\n             portal.translate(\n-                \'A workflow action triggers a workflow transition on an \'\n-                \'object.\',\n-                lang=\'es\',\n+                "A workflow action triggers a workflow transition on an " "object.",\n+                lang="es",\n             ),\n-            \'Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de \'\n-            \'flujo de trabajo en un objeto.\',\n+            "Una acci\xc3\xb3n de flujo de trabajo dispara una transici\xc3\xb3n de "\n+            "flujo de trabajo en un objeto.",\n         )\n         self.assertEqual(\n             portal.translate(\n-                \'month_apr\',\n-                domain=\'plonelocales\',\n-                lang=\'fr\',\n+                "month_apr",\n+                domain="plonelocales",\n+                lang="fr",\n             ),\n-            \'Avril\',\n+            "Avril",\n         )\ndiff --git a/src/plone/api/tests/test_relation.py b/src/plone/api/tests/test_relation.py\nindex 16c92576..24dd4f99 100644\n--- a/src/plone/api/tests/test_relation.py\n+++ b/src/plone/api/tests/test_relation.py\n@@ -34,55 +34,55 @@ def setUp(self):\n         This is copied from test_content.py.\n         We may want to simplify.  But could be okay.\n         """\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n         self.blog = api.content.create(\n-            type=\'Link\',\n-            id=\'blog\',\n+            type="Link",\n+            id="blog",\n             container=self.portal,\n         )\n         self.about = api.content.create(\n-            type=\'Folder\',\n-            id=\'about\',\n+            type="Folder",\n+            id="about",\n             container=self.portal,\n         )\n         self.events = api.content.create(\n-            type=\'Folder\',\n-            id=\'events\',\n+            type="Folder",\n+            id="events",\n             container=self.portal,\n         )\n \n         self.team = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'team\',\n+            type="Document",\n+            id="team",\n         )\n         self.contact = api.content.create(\n             container=self.about,\n-            type=\'Document\',\n-            id=\'contact\',\n+            type="Document",\n+            id="contact",\n         )\n \n         self.training = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'training\',\n+            type="Event",\n+            id="training",\n         )\n         self.conference = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'conference\',\n+            type="Event",\n+            id="conference",\n         )\n         self.sprint = api.content.create(\n             container=self.events,\n-            type=\'Event\',\n-            id=\'sprint\',\n+            type="Event",\n+            id="sprint",\n         )\n \n         self.image = api.content.create(\n             container=self.portal,\n-            type=\'Image\',\n-            id=\'image\',\n+            type="Image",\n+            id="image",\n         )\n \n     def test_create_constraints(self):\n@@ -98,14 +98,14 @@ def test_create_constraints(self):\n         with self.assertRaises(MissingParameterError):\n             api.relation.create(\n                 target=self.blog,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # Check the constraints for the target parameter\n         with self.assertRaises(MissingParameterError):\n             api.relation.create(\n                 source=self.about,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # Check the constraints for the relationship parameter\n@@ -116,12 +116,12 @@ def test_create_constraints(self):\n             )\n \n         # We require a source with portal_type\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.create(\n                 source=app,\n                 target=self.blog,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # We require a target with portal_type\n@@ -129,7 +129,7 @@ def test_create_constraints(self):\n             api.relation.create(\n                 source=self.about,\n                 target=app,\n-                relationship=\'link\',\n+                relationship="link",\n             )\n \n         # We require a string relationship\n@@ -147,18 +147,18 @@ def test_create_relation(self):\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 0)\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 1)\n         relation = relations[0]\n@@ -170,28 +170,27 @@ def test_create_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(self.about.relatedItems), 1)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n \n         # create relation with a fieldname that is no relationfield\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         self.assertEqual(len(api.relation.get(source=self.about, target=self.blog)), 3)\n \n-\n     def test_delete_constraints(self):\n         """Test the constraints when deleting relations."""\n         from plone.api.exc import InvalidParameterError\n \n         # If source is given, it must have a portal_type.\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.delete(source=app)\n \n@@ -208,17 +207,17 @@ def test_delete_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         relations = api.relation.get(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(relations), 0)\n \n@@ -227,12 +226,12 @@ def test_delete_fieldrelation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n@@ -240,7 +239,7 @@ def test_delete_fieldrelation(self):\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n         self.assertEqual(len(self.about.relatedItems), 0)\n@@ -250,17 +249,17 @@ def test_delete_one_fieldrelation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         api.relation.create(\n             source=self.about,\n             target=self.events,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 3)\n         self.assertIsInstance(self.about.relatedItems[0], RelationValue)\n@@ -268,7 +267,7 @@ def test_delete_one_fieldrelation(self):\n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'relatedItems\',\n+            relationship="relatedItems",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 2)\n         self.assertEqual(len(self.about.relatedItems), 1)\n@@ -279,21 +278,21 @@ def test_deleted_relation_is_purged(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n-        self.assertEqual(self.about.description, \'\')\n+        self.assertEqual(self.about.description, "")\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n-        rels = relation_catalog.findRelations({\'from_attribute\': \'description\'})\n+        rels = relation_catalog.findRelations({"from_attribute": "description"})\n         self.assertEqual(len([i for i in rels]), 1)\n \n         api.relation.delete(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'description\',\n+            relationship="description",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 0)\n-        self.assertEqual(self.about.description, \'\')\n-        rels = relation_catalog.findRelations({\'from_attribute\': \'description\'})\n+        self.assertEqual(self.about.description, "")\n+        rels = relation_catalog.findRelations({"from_attribute": "description"})\n         self.assertEqual(len([i for i in rels]), 0)\n \n     def test_get_constraints(self):\n@@ -301,7 +300,7 @@ def test_get_constraints(self):\n         from plone.api.exc import InvalidParameterError\n \n         # If source is given, it must have a portal_type.\n-        app = self.layer[\'app\']\n+        app = self.layer["app"]\n         with self.assertRaises(InvalidParameterError):\n             api.relation.get(source=app)\n \n@@ -318,106 +317,114 @@ def test_get_relation(self):\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about.team,\n             target=self.events,\n-            relationship=\'team\',\n+            relationship="team",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n         self.assertIsInstance(api.relation.get(source=self.about), list)\n         self.assertIsInstance(api.relation.get(source=self.about)[0], RelationValue)\n \n         self.assertEqual(len(api.relation.get(target=self.blog)), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 3)\n \n-        self.assertEqual(len(api.relation.get(source=self.about, relationship=\'link\')), 1)\n-        self.assertEqual(len(api.relation.get(source=self.about, target=self.events)), 0)\n+        self.assertEqual(\n+            len(api.relation.get(source=self.about, relationship="link")), 1\n+        )\n+        self.assertEqual(\n+            len(api.relation.get(source=self.about, target=self.events)), 0\n+        )\n         self.assertEqual(len(api.relation.get(source=self.about, target=self.blog)), 1)\n \n         self.assertEqual(len(api.relation.get(source=self.events)), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'team\')), 1)\n+        self.assertEqual(len(api.relation.get(relationship="team")), 1)\n \n     def test_get_relation_as_dict(self):\n         """Test getting relations as dicts"""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'bloglink\',\n+            relationship="bloglink",\n+        )\n+        self.assertEqual(\n+            len(api.relation.get(relationship="link", as_dict=True)["link"]), 1\n         )\n-        self.assertEqual(len(api.relation.get(relationship=\'link\', as_dict=True)[\'link\']), 1)\n         rels = api.relation.get(target=self.blog, as_dict=True)\n-        self.assertEqual(len(rels[\'link\']), 1)\n-        self.assertEqual(len(rels[\'bloglink\']), 1)\n+        self.assertEqual(len(rels["link"]), 1)\n+        self.assertEqual(len(rels["bloglink"]), 1)\n \n     def test_get_broken_relation(self):\n         """Test that broken relations are ignored."""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         self.assertEqual(len(api.relation.get(source=self.about)), 1)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 2)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n \n         # break a relation\n-        self.portal._delObject(\'blog\')\n+        self.portal._delObject("blog")\n \n         self.assertEqual(len(api.relation.get(source=self.about)), 0)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 1)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 1)\n \n     def test_restricted_relation(self):\n         """Test that rels between inaccessible items are ignored."""\n         api.relation.create(\n             source=self.about,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.blog,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n         api.relation.create(\n             source=self.about.team,\n             target=self.events,\n-            relationship=\'team\',\n+            relationship="team",\n         )\n         api.relation.create(\n             source=self.events,\n             target=self.portal.image,\n-            relationship=\'link\',\n+            relationship="link",\n         )\n-        api.content.transition(self.events, to_state=\'published\')\n-        api.content.transition(self.blog, to_state=\'published\')\n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 3)\n+        api.content.transition(self.events, to_state="published")\n+        api.content.transition(self.blog, to_state="published")\n+        self.assertEqual(len(api.relation.get(relationship="link")), 3)\n \n         # Switch user\n-        api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-        setRoles(self.portal, \'bob\', [\'Member\'])\n+        api.user.create(email="bob@plone.org", username="bob")\n+        setRoles(self.portal, "bob", ["Member"])\n         logout()\n-        login(self.portal, \'bob\')\n+        login(self.portal, "bob")\n \n-        self.assertEqual(len(api.relation.get(relationship=\'link\')), 2)\n-        self.assertEqual(len(api.relation.get(relationship=\'link\', unrestricted=True)), 3)\n+        self.assertEqual(len(api.relation.get(relationship="link")), 2)\n+        self.assertEqual(\n+            len(api.relation.get(relationship="link", unrestricted=True)), 3\n+        )\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 67313238..a324647b 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -7,14 +7,13 @@\n from plone.app.testing import logout\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n-from plone.registry.interfaces import IRegistry\n+from unittest import mock\n from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n-from unittest import mock\n import unittest\n \n \n@@ -25,11 +24,11 @@ class TestPloneApiUser(unittest.TestCase):\n \n     def setUp(self):\n         """Shared test environment set-up, ran before every test."""\n-        self.portal = self.layer[\'portal\']\n-        self.portal_membership = api.portal.get_tool(\'portal_membership\')\n+        self.portal = self.layer["portal"]\n+        self.portal_membership = api.portal.get_tool("portal_membership")\n \n     def _check_userid_and_username_different(self):\n-        """Ensure that the userid and username are not equal\n+        """Ensure that the userid and username are not equal.\n \n         This is important for tests which rely on differentiation between the\n         two. These tests should rely on the Test User created by\n@@ -44,22 +43,23 @@ def _check_userid_and_username_different(self):\n \n     def _set_emaillogin(self, value):\n         from plone.api.exc import InvalidParameterError\n+\n         try:\n-            api.portal.set_registry_record(\'plone.use_email_as_login\', value)\n+            api.portal.set_registry_record("plone.use_email_as_login", value)\n         except InvalidParameterError:\n             portal = api.portal.get()\n             portal.portal_properties.site_properties.use_email_as_login = value\n \n     def test_create_no_email(self):\n         """Test that exception is raised if no email is given."""\n-\n         self._set_emaillogin(True)\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.create(\n-                username=\'chuck\',\n-                password=\'secret\',\n+                username="chuck",\n+                password="secret",\n             )\n \n     def test_get_user_userid_username(self):\n@@ -77,35 +77,35 @@ def test_get_user_userid_username(self):\n     def test_create_email_in_properties(self):\n         """Test that email is parsed from the properties."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            password=\'secret\',\n-            properties={\'email\': \'chuck@norris.org\'},\n+            username="chuck",\n+            password="secret",\n+            properties={"email": "chuck@norris.org"},\n         )\n \n-        self.assertEqual(user.getProperty(\'email\'), \'chuck@norris.org\')\n+        self.assertEqual(user.getProperty("email"), "chuck@norris.org")\n \n     def test_create_no_username(self):\n         """Test create if no username is provided."""\n-\n         # If there is no username, email will be used instead\n         self._set_emaillogin(True)\n \n         user = api.user.create(\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        self.assertEqual(user.getUserName(), \'chuck@norris.org\')\n+        self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n         # But if using emails as a username is disabled, we should get\n         # an error\n         self._set_emaillogin(False)\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.create(\n-                email=\'chuck@norris.org\',\n-                password=\'secret\',\n+                email="chuck@norris.org",\n+                password="secret",\n             )\n \n     def test_create_with_username(self):\n@@ -113,76 +113,75 @@ def test_create_with_username(self):\n         self._set_emaillogin(True)\n \n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(user.getUserName(), \'chuck@norris.org\')\n+        self.assertEqual(user.getUserName(), "chuck@norris.org")\n \n         self._set_emaillogin(False)\n \n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(user.getUserName(), \'chuck\')\n+        self.assertEqual(user.getUserName(), "chuck")\n \n     def test_create_default_roles(self):\n         """Test the default role is set to member."""\n         # if create is given no roles, member is the default\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Member\', \'Authenticated\'],\n+            ["Member", "Authenticated"],\n         )\n \n     def test_create_specified_roles(self):\n         """Test specific roles are set correctly."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n+            roles=["Reviewer", "Editor"],\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Reviewer\', \'Authenticated\', \'Editor\'],\n+            ["Reviewer", "Authenticated", "Editor"],\n         )\n \n     def test_create_no_roles(self):\n         """Test that passing an empty list give a user with no member role."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n         self.assertCountEqual(\n             api.user.get_roles(user=user),\n-            [\'Authenticated\'],\n+            ["Authenticated"],\n         )\n \n     def test_get_constraints(self):\n-        """Test that exception is raised if no username is given when getting\n-        the user.\n-        """\n+        """Test on raised exeption if no username is given when getting the user."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.get()\n \n     def test_get(self):\n         """Test getting the user."""\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        self.assertEqual(api.user.get(\'chuck\').id, user.id)\n+        self.assertEqual(api.user.get("chuck").id, user.id)\n \n     def test_get_current(self):\n         """Test getting the currently logged-in user."""\n@@ -194,146 +193,147 @@ def test_get_current(self):\n     def test_get_all_users(self):\n         """Test getting all users."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         users = [user.getUserName() for user in api.user.get_users()]\n         self.assertCountEqual(\n             users,\n-            [\'chuck\', TEST_USER_NAME],\n+            ["chuck", TEST_USER_NAME],\n         )\n \n     def test_get_groups_users(self):\n         """Test getting all users of a certain group."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        api.group.create(groupname=\'staff\')\n-        api.group.add_user(username=\'chuck\', groupname=\'staff\')\n+        api.group.create(groupname="staff")\n+        api.group.add_user(username="chuck", groupname="staff")\n \n-        users = api.user.get_users(groupname=\'staff\')\n+        users = api.user.get_users(groupname="staff")\n         usernames = [user.getUserName() for user in users]\n \n-        self.assertEqual(usernames, [\'chuck\'])\n+        self.assertEqual(usernames, ["chuck"])\n \n     def test_get_users_groupname_and_group(self):\n         """Test getting users passing both groupname and group."""\n-        api.group.create(groupname=\'bacon\')\n-        bacon = api.group.get(groupname=\'bacon\')\n+        api.group.create(groupname="bacon")\n+        bacon = api.group.get(groupname="bacon")\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_users(\n-                groupname=\'bacon\',\n+                groupname="bacon",\n                 group=bacon,\n             )\n \n     def test_get_users_nonexistent_group(self):\n         """Test getting users for a group that does not exist."""\n-\n         from plone.api.exc import GroupNotFoundError\n+\n         with self.assertRaises(GroupNotFoundError):\n-            api.user.get_users(groupname=\'bacon\')\n+            api.user.get_users(groupname="bacon")\n \n     def test_delete_no_username(self):\n         """Test deleting of a member with email login."""\n-\n         self._set_emaillogin(True)\n \n         # This should fail either an username or user object should be given\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.delete()\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.delete(\n-                username=\'chuck@norris.org\',\n+                username="chuck@norris.org",\n                 user=mock.Mock(),\n             )\n \n-        api.user.create(email=\'chuck@norris.org\', password=\'secret\')\n-        api.user.delete(username=\'unwanted@norris.org\')\n+        api.user.create(email="chuck@norris.org", password="secret")\n+        api.user.delete(username="unwanted@norris.org")\n \n-        user = api.user.create(email=\'steven@seagal.org\', password=\'secret\')\n+        user = api.user.create(email="steven@seagal.org", password="secret")\n         api.user.delete(user=user)\n \n     def test_delete_username(self):\n-        """test whether the user has been deleted."""\n-\n+        """Test whether the user has been deleted."""\n         api.user.create(\n-            username=\'unwanted\',\n-            password=\'secret\',\n-            email=\'unwanted@example.org\',\n+            username="unwanted",\n+            password="secret",\n+            email="unwanted@example.org",\n         )\n-        api.user.delete(username=\'unwanted\')\n+        api.user.delete(username="unwanted")\n \n         user = api.user.create(\n-            username=\'steven\',\n-            password=\'secret\',\n-            email=\'steven@example.org\',\n+            username="steven",\n+            password="secret",\n+            email="steven@example.org",\n         )\n         api.user.delete(user=user)\n \n     def test_is_anonymous(self):\n         """Test anonymous access."""\n-\n         self.assertEqual(api.user.is_anonymous(), False)\n         logout()\n         self.assertEqual(api.user.is_anonymous(), True)\n \n     def test_get_roles_username(self):\n         """Test get roles passing a username."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n-            ROLES + [\'Authenticated\'],\n-            api.user.get_roles(username=\'chuck\'),\n+            ROLES + ["Authenticated"],\n+            api.user.get_roles(username="chuck"),\n         )\n \n     def test_get_roles_user(self):\n         """Test get roles passing a user."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n         self.assertCountEqual(\n-            ROLES + [\'Authenticated\'],\n+            ROLES + ["Authenticated"],\n             api.user.get_roles(user=user),\n         )\n \n     def test_get_roles_username_and_user(self):\n         """Test get roles passing username and user."""\n-        ROLES = [\'Reviewer\', \'Editor\']\n+        ROLES = ["Reviewer", "Editor"]\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=ROLES,\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_roles(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n     def test_get_roles_no_parameters(self):\n         """Test get roles without any parameters."""\n         self.assertCountEqual(\n-            [\'Manager\', \'Authenticated\'],\n+            ["Manager", "Authenticated"],\n             api.user.get_roles(),\n         )\n \n@@ -347,162 +347,164 @@ def test_get_permissions_no_parameters(self):\n     def test_get_roles_nonexistant_user(self):\n         """Test get roles for a user that does not exist."""\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.user.get_roles(username=\'theurbanspaceman\')\n+            api.user.get_roles(username="theurbanspaceman")\n \n     def test_get_roles_anonymous(self):\n         """Test get_roles for an anonymous user."""\n         from AccessControl.users import nobody\n+\n         with api.env.adopt_user(user=nobody):\n             self.assertEqual(\n                 api.user.get_roles(),\n-                (\'Anonymous\', ),\n+                ("Anonymous",),\n             )\n \n     def test_get_roles_in_context(self):\n-        """Test get local and inherited roles for a user on an object"""\n+        """Test get local and inherited roles for a user on an object."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n \n     def test_get_roles_local_only(self):\n-        """Test get local roles for a user on an object"""\n+        """Test get local roles for a user on an object."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n \n     def test_get_roles_local_includes_group_roles(self):\n         """Test if get local roles for a user on an object respects groups."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n-        api.group.create(\'foo\', roles=[\'Reviewer\'])\n-        api.group.add_user(groupname=\'foo\', username=\'chuck\')\n+        api.group.create("foo", roles=["Reviewer"])\n+        api.group.add_user(groupname="foo", username="chuck")\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Reviewer\', \'Authenticated\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Reviewer", "Authenticated"],\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Reviewer\', \'Authenticated\', \'Editor\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Reviewer", "Authenticated", "Editor"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n             [],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Editor\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Editor"],\n         )\n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=[\'Contributor\'],\n+            groupname="foo",\n+            roles=["Contributor"],\n             obj=document,\n         )\n         self.assertCountEqual(\n-            [\'Contributor\'],\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            ["Contributor"],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n \n     def test_get_permissions_root(self):\n         """Test get permissions on site root."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_permissions(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n         PERMISSIONS = {\n-            \'View\': True,\n-            \'Manage portal\': False,\n-            \'Modify portal content\': False,\n-            \'Access contents information\': True,\n+            "View": True,\n+            "Manage portal": False,\n+            "Modify portal content": False,\n+            "Access contents information": True,\n         }\n \n         for k, v in PERMISSIONS.items():\n             self.assertEqual(\n                 v,\n-                api.user.get_permissions(username=\'chuck\').get(k, None),\n+                api.user.get_permissions(username="chuck").get(k, None),\n             )\n             self.assertEqual(\n                 v,\n@@ -511,47 +513,47 @@ def test_get_permissions_root(self):\n \n     def test_get_permissions_nonexistant_user(self):\n         """Test get_permissions for a user that does not exist."""\n-\n         from plone.api.exc import UserNotFoundError\n+\n         with self.assertRaises(UserNotFoundError):\n-            api.user.get_permissions(username=\'ming\')\n+            api.user.get_permissions(username="ming")\n \n     def test_get_permissions_context(self):\n         """Test get permissions on some context."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n             roles=[],\n         )\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.get_permissions(\n-                username=\'chuck\',\n+                username="chuck",\n                 user=user,\n             )\n \n         PERMISSIONS = {\n-            \'View\': False,\n-            \'Manage portal\': False,\n-            \'Modify portal content\': False,\n-            \'Access contents information\': False,\n+            "View": False,\n+            "Manage portal": False,\n+            "Modify portal content": False,\n+            "Access contents information": False,\n         }\n \n         folder = api.content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n \n         for k, v in PERMISSIONS.items():\n             self.assertEqual(\n                 v,\n                 api.user.get_permissions(\n-                    username=\'chuck\',\n+                    username="chuck",\n                     obj=folder,\n                 ).get(k, None),\n             )\n@@ -565,41 +567,41 @@ def test_get_permissions_context(self):\n \n     def test_has_permission_context(self):\n         """Test has_permission on some context."""\n-\n-        username = \'billy\'\n+        username = "billy"\n         user = api.user.create(\n             username=username,\n-            email=\'billy@bob.net\',\n-            password=\'secret\',\n+            email="billy@bob.net",\n+            password="secret",\n         )\n \n         # Cannot supply both username and user arguments\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 username=username,\n                 user=user,\n             )\n \n         folder = api.content.create(\n             container=self.portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'A Folder\',\n+            type="Folder",\n+            id="folder_one",\n+            title="A Folder",\n         )\n-        api.content.transition(obj=folder, transition=\'publish\')\n+        api.content.transition(obj=folder, transition="publish")\n \n         self.assertTrue(\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 user=user,\n                 obj=folder,\n             ),\n         )\n         self.assertFalse(\n             api.user.has_permission(\n-                \'Modify portal content\',\n+                "Modify portal content",\n                 user=user,\n                 obj=folder,\n             ),\n@@ -607,7 +609,7 @@ def test_has_permission_context(self):\n \n         self.assertTrue(\n             api.user.has_permission(\n-                \'View\',\n+                "View",\n                 user=None,\n                 obj=folder,\n             ),\n@@ -615,32 +617,31 @@ def test_has_permission_context(self):\n \n     def test_grant_roles(self):\n         """Test granting a couple of roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Editor\'])\n-        self.assertIn(\'Editor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=["Editor"])\n+        self.assertIn("Editor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Editor", api.user.get_roles(user=user))\n \n-        api.user.grant_roles(username=\'chuck\', roles=(\'Contributor\',))\n-        self.assertIn(\'Contributor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Contributor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=("Contributor",))\n+        self.assertIn("Contributor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Contributor", api.user.get_roles(user=user))\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Reader\', \'Reader\'])\n+        api.user.grant_roles(username="chuck", roles=["Reader", "Reader"])\n         ROLES = [\n-            \'Editor\',\n-            \'Contributor\',\n-            \'Reader\',\n-            \'Authenticated\',\n-            \'Member\',\n+            "Editor",\n+            "Contributor",\n+            "Reader",\n+            "Authenticated",\n+            "Member",\n         ]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\'),\n+            api.user.get_roles(username="chuck"),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -649,77 +650,80 @@ def test_grant_roles(self):\n \n     def test_grant_roles_username_and_user(self):\n         """Test grant roles passing username and user."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.grant_roles(username=user)\n \n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            api.user.grant_roles(username=\'chuck\', roles=(\'Authenticated\'))\n+            api.user.grant_roles(username="chuck", roles=("Authenticated"))\n \n     def test_grant_roles_anonymous(self):\n         """Test granting Anonymous role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Anonymous\'],\n+                username="chuck",\n+                roles=["Anonymous"],\n             )\n \n     def test_grant_roles_authenticated(self):\n         """Test granting Authenticated role."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Authenticated\'],\n+                username="chuck",\n+                roles=["Authenticated"],\n             )\n \n     def test_grant_roles_no_parameters(self):\n         """Test grant roles without passing parameters."""\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.grant_roles()\n \n     def test_grant_roles_no_user(self):\n         """If no user is found, raise a suitable error."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.grant_roles(\n-                username=\'chuck\',\n-                roles=[\'Manager\'],\n+                username="chuck",\n+                roles=["Manager"],\n             )\n \n     def test_revoke_roles(self):\n         """Test revoke roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n-        api.user.grant_roles(username=\'chuck\', roles=[\'Reviewer\', \'Editor\'])\n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Reviewer\'])\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(username=\'chuck\'))\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(user=user))\n-        self.assertIn(\'Editor\', api.user.get_roles(username=\'chuck\'))\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user))\n+        api.user.grant_roles(username="chuck", roles=["Reviewer", "Editor"])\n+        api.user.revoke_roles(username="chuck", roles=["Reviewer"])\n+        self.assertNotIn("Reviewer", api.user.get_roles(username="chuck"))\n+        self.assertNotIn("Reviewer", api.user.get_roles(user=user))\n+        self.assertIn("Editor", api.user.get_roles(username="chuck"))\n+        self.assertIn("Editor", api.user.get_roles(user=user))\n \n-        api.user.revoke_roles(username=\'chuck\', roles=(\'Editor\',))\n-        ROLES = [\'Authenticated\', \'Member\']\n+        api.user.revoke_roles(username="chuck", roles=("Editor",))\n+        ROLES = ["Authenticated", "Member"]\n \n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\'),\n+            api.user.get_roles(username="chuck"),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -727,7 +731,7 @@ def test_revoke_roles(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', inherit=False),\n+            api.user.get_roles(username="chuck", inherit=False),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -736,152 +740,153 @@ def test_revoke_roles(self):\n \n     def test_revoke_roles_username_and_user(self):\n         """Test revoke roles passing username and user."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.revoke_roles(user=user)\n \n     def test_revoke_roles_anonymous(self):\n         """Test revoking Anonymous role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Anonymous\'],\n+                username="chuck",\n+                roles=["Anonymous"],\n             )\n \n     def test_revoke_roles_authenticated(self):\n         """Test revoking Authenticated role."""\n-\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Authenticated\'],\n+                username="chuck",\n+                roles=["Authenticated"],\n             )\n \n     def test_revoke_roles_no_parameters(self):\n         """Test revoke roles without passing parameters."""\n-\n         from plone.api.exc import MissingParameterError\n+\n         with self.assertRaises(MissingParameterError):\n             api.user.revoke_roles()\n \n     def test_revoke_roles_username(self):\n         """Test revoke roles for username."""\n         api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n-            api.user.revoke_roles(username=\'chuck\', roles=[\'Authenticated\'])\n+            api.user.revoke_roles(username="chuck", roles=["Authenticated"])\n \n-    @unittest.skip(\'Getting the Anonymous user does not work like this.\')\n+    @unittest.skip("Getting the Anonymous user does not work like this.")\n     def test_revoke_roles_from_anonymous(self):\n         """Test revoking roles from an Anonymous user."""\n         api.user.revoke_roles(\n-            username=\'Anonymous User\',\n-            roles=[\'Reviewer\'],\n+            username="Anonymous User",\n+            roles=["Reviewer"],\n         )\n-        ROLES = [\'Anonymous\']\n+        ROLES = ["Anonymous"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'Anonymous User\'),\n+            api.user.get_roles(username="Anonymous User"),\n         )\n \n     def test_revoke_roles_no_user(self):\n         """If no user is found, raise a suitable error."""\n         from plone.api.exc import InvalidParameterError\n+\n         with self.assertRaises(InvalidParameterError):\n             api.user.revoke_roles(\n-                username=\'chuck\',\n-                roles=[\'Manager\'],\n+                username="chuck",\n+                roles=["Manager"],\n             )\n \n     def test_grant_roles_in_context(self):\n         """Test grant roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n \n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Editor\'],\n+            username="chuck",\n+            roles=["Editor"],\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n-            [\'Editor\'],\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n+            ["Editor"],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n         )\n         self.assertIn(\n-            \'Editor\',\n+            "Editor",\n             api.user.get_roles(user=user, obj=folder),\n         )\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertIn(\n-            \'Editor\',\n+            "Editor",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=(\'Contributor\',),\n+            username="chuck",\n+            roles=("Contributor",),\n             obj=folder,\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Contributor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.user.get_roles(user=user, obj=folder),\n         )\n         self.assertIn(\n-            \'Contributor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Contributor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertIn(\n-            \'Contributor\',\n+            "Contributor",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n-        ROLES = [\'Editor\', \'Contributor\', \'Authenticated\', \'Member\']\n+        ROLES = ["Editor", "Contributor", "Authenticated", "Member"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -889,7 +894,7 @@ def test_grant_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -897,31 +902,29 @@ def test_grant_roles_in_context(self):\n         )\n \n     def test_grant_roles_disregards_adapter(self):\n-        """Test that borg.localrole-adpaters are not copied when granting\n-        local roles."""\n-\n+        """Test that borg.localrole-adpaters are not copied on granting local roles."""\n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated"],\n         )\n         self.assertFalse(\n             api.user.get_roles(user=user, obj=folder, inherit=False),\n@@ -931,175 +934,174 @@ def test_grant_roles_disregards_adapter(self):\n         @adapter(Interface)\n         @implementer(ILocalRoleProvider)\n         class LocalRoleProvider:\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRoles(self, principal_id):\n-                return (\'Reviewer\',)\n+                return ("Reviewer",)\n \n         provideAdapter(LocalRoleProvider)\n \n         # the adapter-role is added for get_role\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated", "Reviewer"],\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Reviewer"],\n         )\n \n         # Assign a local role\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Contributor\'],\n+            username="chuck",\n+            roles=["Contributor"],\n             obj=folder,\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n-            [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder),\n+            ["Member", "Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # The adapter role is in in the local roles but not persistent\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        local_roles = getattr(folder, \'__ac_local_roles__\', {})\n+        local_roles = getattr(folder, "__ac_local_roles__", {})\n         self.assertEqual(\n-            local_roles.get(\'chuck\'),\n-            [\'Contributor\'],\n+            local_roles.get("chuck"),\n+            ["Contributor"],\n         )\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Reviewer"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n-            [\'Member\', \'Authenticated\', \'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document),\n+            ["Member", "Authenticated", "Contributor", "Reviewer"],\n         )\n \n         # add a group and test mix of group and adapter and user-roles\n-        api.group.create(\'foo\')\n+        api.group.create("foo")\n         api.group.grant_roles(\n-            groupname=\'foo\',\n-            roles=[\'Contributor\'],\n+            groupname="foo",\n+            roles=["Contributor"],\n             obj=document,\n         )\n-        api.group.add_user(groupname=\'foo\', username=\'chuck\')\n+        api.group.add_user(groupname="foo", username="chuck")\n \n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n-        api.group.grant_roles(groupname=\'foo\', roles=[\'Manager\'], obj=folder)\n+        api.group.grant_roles(groupname="foo", roles=["Manager"], obj=folder)\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n-            [\'Contributor\', \'Reviewer\'],\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n+            ["Contributor", "Reviewer"],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n             [\n-                \'Contributor\',\n-                \'Reviewer\',\n-                \'Manager\',\n-                \'Authenticated\',\n-                \'Member\',\n+                "Contributor",\n+                "Reviewer",\n+                "Manager",\n+                "Authenticated",\n+                "Member",\n             ],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n             [\n-                \'Contributor\',\n-                \'Reviewer\',\n-                \'Manager\',\n-                \'Authenticated\',\n-                \'Member\',\n+                "Contributor",\n+                "Reviewer",\n+                "Manager",\n+                "Authenticated",\n+                "Member",\n             ],\n         )\n         self.assertCountEqual(\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n-            [\'Contributor\', \'Reviewer\', \'Manager\'],\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n+            ["Contributor", "Reviewer", "Manager"],\n         )\n \n         # cleanup\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n-            factory=LocalRoleProvider, provided=ILocalRoleProvider,\n+            factory=LocalRoleProvider,\n+            provided=ILocalRoleProvider,\n         )\n \n     def test_revoke_roles_in_context(self):\n         """Test revoke roles."""\n-\n         user = api.user.create(\n-            username=\'chuck\',\n-            email=\'chuck@norris.org\',\n-            password=\'secret\',\n+            username="chuck",\n+            email="chuck@norris.org",\n+            password="secret",\n         )\n \n         portal = api.portal.get()\n         folder = api.content.create(\n             container=portal,\n-            type=\'Folder\',\n-            id=\'folder_one\',\n-            title=\'Folder One\',\n+            type="Folder",\n+            id="folder_one",\n+            title="Folder One",\n         )\n         document = api.content.create(\n             container=folder,\n-            type=\'Document\',\n-            id=\'document_one\',\n-            title=\'Document One\',\n+            type="Document",\n+            id="document_one",\n+            title="Document One",\n         )\n         api.user.grant_roles(\n-            username=\'chuck\',\n-            roles=[\'Reviewer\', \'Editor\'],\n+            username="chuck",\n+            roles=["Reviewer", "Editor"],\n             obj=folder,\n         )\n \n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Reviewer\'], obj=folder)\n+        api.user.revoke_roles(username="chuck", roles=["Reviewer"], obj=folder)\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user, obj=folder))\n+        self.assertIn("Editor", api.user.get_roles(user=user, obj=folder))\n         self.assertIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n-        self.assertIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n+        self.assertIn("Editor", api.user.get_roles(user=user, obj=document))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Reviewer",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertNotIn(\'Reviewer\', api.user.get_roles(user=user, obj=folder))\n+        self.assertNotIn("Reviewer", api.user.get_roles(user=user, obj=folder))\n         self.assertNotIn(\n-            \'Reviewer\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Reviewer",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertNotIn(\n-            \'Reviewer\',\n+            "Reviewer",\n             api.user.get_roles(user=user, obj=document),\n         )\n \n-        api.user.revoke_roles(username=\'chuck\', roles=[\'Editor\'], obj=folder)\n+        api.user.revoke_roles(username="chuck", roles=["Editor"], obj=folder)\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n-        self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=folder))\n+        self.assertNotIn("Editor", api.user.get_roles(user=user, obj=folder))\n         self.assertNotIn(\n-            \'Editor\',\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            "Editor",\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n-        self.assertNotIn(\'Editor\', api.user.get_roles(user=user, obj=document))\n+        self.assertNotIn("Editor", api.user.get_roles(user=user, obj=document))\n \n-        ROLES = [\'Authenticated\', \'Member\']\n+        ROLES = ["Authenticated", "Member"]\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=folder),\n+            api.user.get_roles(username="chuck", obj=folder),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -1107,7 +1109,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             ROLES,\n-            api.user.get_roles(username=\'chuck\', obj=document),\n+            api.user.get_roles(username="chuck", obj=document),\n         )\n         self.assertCountEqual(\n             ROLES,\n@@ -1115,7 +1117,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             [],\n-            api.user.get_roles(username=\'chuck\', obj=folder, inherit=False),\n+            api.user.get_roles(username="chuck", obj=folder, inherit=False),\n         )\n         self.assertCountEqual(\n             [],\n@@ -1123,7 +1125,7 @@ def test_revoke_roles_in_context(self):\n         )\n         self.assertCountEqual(\n             [],\n-            api.user.get_roles(username=\'chuck\', obj=document, inherit=False),\n+            api.user.get_roles(username="chuck", obj=document, inherit=False),\n         )\n         self.assertCountEqual(\n             [],\ndiff --git a/src/plone/api/tests/test_validation.py b/src/plone/api/tests/test_validation.py\nindex 48c951b0..810a02cc 100644\n--- a/src/plone/api/tests/test_validation.py\n+++ b/src/plone/api/tests/test_validation.py\n@@ -10,7 +10,7 @@\n \n \n def undecorated_func(arg1=None, arg2=None, arg3=None):\n-    return \'foo\'\n+    return "foo"\n \n \n class TestPloneAPIValidation(unittest.TestCase):\n@@ -22,7 +22,8 @@ def test_decorator_works_the_same_as_explicit_calling(self):\n         """Check that calling the decorator with the function as an argument\n         is equivalent to decorating the function.\n         """\n-        @required_parameters(\'arg1\')\n+\n+        @required_parameters("arg1")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n             """This is my docstring"""\n             pass\n@@ -30,10 +31,11 @@ def _func1_decorated(arg1=None, arg2=None, arg3=None):\n         def _func2_undecorated(arg1=None, arg2=None, arg3=None):\n             """This is my docstring"""\n             pass\n-        _func2_decorated = required_parameters(\'arg1\')(_func2_undecorated)\n+\n+        _func2_decorated = required_parameters("arg1")(_func2_undecorated)\n \n         # Check that the decorated function gets the correct docstring\n-        self.assertEqual(_func1_decorated.__doc__, \'This is my docstring\')\n+        self.assertEqual(_func1_decorated.__doc__, "This is my docstring")\n \n         # Check that both functions have the same docstring\n         self.assertEqual(_func1_decorated.__doc__, _func2_decorated.__doc__)\n@@ -43,27 +45,27 @@ def test_non_existant_required_arg(self):\n         a parameter that doesn\'t exist in the function signature.\n         """\n         with self.assertRaises(ValueError):\n-            _func = required_parameters(\'arg1\', \'wibble\', \'wobble\')\n+            _func = required_parameters("arg1", "wibble", "wobble")\n             _func(undecorated_func)\n \n         with self.assertRaises(ValueError):\n             _func = mutually_exclusive_parameters(\n-                \'arg1\',\n-                \'wibble\',\n-                \'wobble\',\n+                "arg1",\n+                "wibble",\n+                "wobble",\n             )\n             _func(undecorated_func)\n \n     def test_get_supplied_args(self):\n         """Test that positional and keyword args are recognised correctly."""\n         # the arguments specified in the function signature\n-        signature = (\'arg1\', \'arg2\', \'arg3\')\n+        signature = ("arg1", "arg2", "arg3")\n \n         # test that positional args are recognised correctly\n-        result = _gsa(signature, (\'foo\', \'wibble\'), {})\n+        result = _gsa(signature, ("foo", "wibble"), {})\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that keyword args are recognised correctly\n@@ -71,35 +73,35 @@ def test_get_supplied_args(self):\n             signature,\n             (),\n             {\n-                \'arg1\': \'foo\',\n-                \'arg2\': \'wibble\',\n+                "arg1": "foo",\n+                "arg2": "wibble",\n             },\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that a mixture of args are recognised correctly\n         result = _gsa(\n             signature,\n-            (\'foo\',),\n-            {\'arg2\': \'wibble\'},\n+            ("foo",),\n+            {"arg2": "wibble"},\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\', \'arg2\'},\n+            {"arg1", "arg2"},\n         )\n \n         # test that None-valued positional args are ignored\n         result = _gsa(\n             signature,\n-            (\'foo\', None),\n+            ("foo", None),\n             {},\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg1\'},\n+            {"arg1"},\n         )\n \n         # test that None-valued keyword args are ignored\n@@ -107,33 +109,33 @@ def test_get_supplied_args(self):\n             signature,\n             (),\n             {\n-                \'arg1\': None,\n-                \'arg2\': \'wibble\',\n+                "arg1": None,\n+                "arg2": "wibble",\n             },\n         )\n         self.assertEqual(\n             set(result),\n-            {\'arg2\'},\n+            {"arg2"},\n         )\n \n     def test_single_keyword_arg_provided(self):\n         """Test for passing a single required parameter\n         as a keyword argument.\n         """\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+        _func = required_parameters("arg1")(undecorated_func)\n         self.assertEqual(\n-            _func(arg1=\'hello\'),\n-            \'foo\',\n+            _func(arg1="hello"),\n+            "foo",\n         )\n \n     def test_single_positional_arg_provided(self):\n         """Test for passing a single required parameter\n         as a positional argument.\n         """\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+        _func = required_parameters("arg1")(undecorated_func)\n         self.assertEqual(\n-            _func(\'hello\'),\n-            \'foo\',\n+            _func("hello"),\n+            "foo",\n         )\n \n     def test_single_arg_missing(self):\n@@ -141,7 +143,8 @@ def test_single_arg_missing(self):\n         single required parameter is missing.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = required_parameters(\'arg1\')(undecorated_func)\n+\n+        _func = required_parameters("arg1")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n             _func()\n \n@@ -150,104 +153,108 @@ def test_one_missing_one_provided(self):\n         required parameters is missing.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = required_parameters(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = required_parameters("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n-            _func(\'hello\')\n+            _func("hello")\n \n     def test_no_mutually_exclusive_args_provided(self):\n         """Test for passing no args (valid) to a function that specifies\n         mutually exclusive parameters.\n         """\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(), \'foo\')\n-        self.assertEqual(_func(arg3=\'hello\'), \'foo\')\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func(), "foo")\n+        self.assertEqual(_func(arg3="hello"), "foo")\n \n     def test_one_mutually_exclusive_arg_provided(self):\n         """Test for passing one arg (the right number) to a function\n         that specifies mutually exclusive parameters.\n         """\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'hello\'), \'foo\')\n-        self.assertEqual(_func(arg1=\'hello\'), \'foo\')\n-        self.assertEqual(_func(arg2=\'hello\'), \'foo\')\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("hello"), "foo")\n+        self.assertEqual(_func(arg1="hello"), "foo")\n+        self.assertEqual(_func(arg2="hello"), "foo")\n \n     def test_two_mutually_exclusive_args_provided(self):\n         """Test that InvalidParameterError is raised if more than\n         one mutually exclusive argument is provided.\n         """\n         from plone.api.exc import InvalidParameterError\n-        _func = mutually_exclusive_parameters(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = mutually_exclusive_parameters("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(InvalidParameterError):\n-            _func(\'ahoy\', \'there\')\n+            _func("ahoy", "there")\n \n         with self.assertRaises(InvalidParameterError):\n-            _func(arg1=\'ahoy\', arg2=\'there\')\n+            _func(arg1="ahoy", arg2="there")\n \n     def test_require_at_least_one_but_none_provided(self):\n         """Test that MissingParameterError is raised if no argument is supplied\n         when at least one is required.\n         """\n         from plone.api.exc import MissingParameterError\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n+\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n         with self.assertRaises(MissingParameterError):\n             _func()\n \n     def test_require_at_least_one_and_one_provided(self):\n         """Test for passing one argument when at least one is required."""\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'ahoy\'), \'foo\')\n-        self.assertEqual(_func(arg2=\'ahoy\'), \'foo\')\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("ahoy"), "foo")\n+        self.assertEqual(_func(arg2="ahoy"), "foo")\n \n     def test_require_at_least_one_and_several_provided(self):\n         """Test for passing several arguments when at least one is required."""\n-        _func = at_least_one_of(\'arg1\', \'arg2\')(undecorated_func)\n-        self.assertEqual(_func(\'ahoy\', \'there\'), \'foo\')\n-        self.assertEqual(_func(arg1=\'ahoy\', arg2=\'there\'), \'foo\')\n-        self.assertEqual(_func(\'ahoy\', arg2=\'there\', arg3=\'matey\'), \'foo\')\n+        _func = at_least_one_of("arg1", "arg2")(undecorated_func)\n+        self.assertEqual(_func("ahoy", "there"), "foo")\n+        self.assertEqual(_func(arg1="ahoy", arg2="there"), "foo")\n+        self.assertEqual(_func("ahoy", arg2="there", arg3="matey"), "foo")\n \n     def test_required_and_mutually_exclusive(self):\n         """Test that multiple decorators can be used together."""\n-        @mutually_exclusive_parameters(\'arg2\', \'arg3\')\n-        @required_parameters(\'arg1\')\n+\n+        @mutually_exclusive_parameters("arg2", "arg3")\n+        @required_parameters("arg1")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n-            return \'foo\'\n+            return "foo"\n \n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n \n         # test that the required parameter error works (missing arg1)\n         with self.assertRaises(MissingParameterError):\n-            _func1_decorated(arg2=\'ahoy\')\n+            _func1_decorated(arg2="ahoy")\n \n         # test that the mutually exclusive decorator works\n         # (arg2 and arg3 should not be there)\n         with self.assertRaises(InvalidParameterError):\n             _func1_decorated(\n-                arg1=\'ahoy\',\n-                arg2=\'there\',\n-                arg3=\'matey\',\n+                arg1="ahoy",\n+                arg2="there",\n+                arg3="matey",\n             )\n \n         # test that they both work.  Making no assumptions here about the order\n         # in which they fire.\n         with self.assertRaises((InvalidParameterError, MissingParameterError)):\n             _func1_decorated(\n-                arg2=\'ahoy\',\n-                arg3=\'there\',\n+                arg2="ahoy",\n+                arg3="there",\n             )\n \n         # everything ok\n-        self.assertEqual(_func1_decorated(\'ahoy\', arg3=\'there\'), \'foo\')\n+        self.assertEqual(_func1_decorated("ahoy", arg3="there"), "foo")\n \n     def test_exactly_one_required(self):\n         """Test that combining mutually_exclusive_parameters and\n         at_least_one_of is equivalent to \'exactly one required\'.\n         """\n \n-        @mutually_exclusive_parameters(\'arg1\', \'arg2\')\n-        @at_least_one_of(\'arg1\', \'arg2\')\n+        @mutually_exclusive_parameters("arg1", "arg2")\n+        @at_least_one_of("arg1", "arg2")\n         def _func1_decorated(arg1=None, arg2=None, arg3=None):\n-            return \'foo\'\n+            return "foo"\n \n         from plone.api.exc import InvalidParameterError\n         from plone.api.exc import MissingParameterError\n@@ -258,8 +265,8 @@ def _func1_decorated(arg1=None, arg2=None, arg3=None):\n \n         # test that it errors if you provide both\n         with self.assertRaises(InvalidParameterError):\n-            _func1_decorated(\'ahoy\', \'there\')\n+            _func1_decorated("ahoy", "there")\n \n         # everything ok\n-        self.assertEqual(_func1_decorated(\'ahoy\'), \'foo\')\n-        self.assertEqual(_func1_decorated(\'ahoy\', arg3=\'there\'), \'foo\')\n+        self.assertEqual(_func1_decorated("ahoy"), "foo")\n+        self.assertEqual(_func1_decorated("ahoy", arg3="there"), "foo")\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 00428248..206cbe70 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -23,7 +23,7 @@ def create(\n     email=None,\n     username=None,\n     password=None,\n-    roles=(\'Member\', ),\n+    roles=("Member",),\n     properties=None,\n ):\n     """Create a user.\n@@ -52,26 +52,26 @@ def create(\n \n     # it may happen that someone passes email in the properties dict, catch\n     # that and set the email so the code below this works fine\n-    if not email and properties.get(\'email\'):\n-        email = properties.get(\'email\')\n+    if not email and properties.get("email"):\n+        email = properties.get("email")\n \n     if not email:\n         raise MissingParameterError("You need to pass the new user\'s email.")\n \n-    use_email_as_username = portal.get_registry_record(\'plone.use_email_as_login\')\n+    use_email_as_username = portal.get_registry_record("plone.use_email_as_login")\n     if not use_email_as_username and not username:\n         raise InvalidParameterError(\n-            \'The portal is configured to use username \'\n-            \'that is not email so you need to pass a username.\',\n+            "The portal is configured to use username "\n+            "that is not email so you need to pass a username.",\n         )\n \n-    registration = portal.get_tool(\'portal_registration\')\n+    registration = portal.get_tool("portal_registration")\n     user_id = use_email_as_username and email or username\n \n     # Generate a random 8-char password\n     if not password:\n         chars = string.ascii_letters + string.digits\n-        password = \'\'.join(random.choice(chars) for char in range(8))\n+        password = "".join(random.choice(chars) for char in range(8))\n \n     properties.update(username=user_id)\n     properties.update(email=email)\n@@ -85,8 +85,8 @@ def create(\n     return get(username=user_id)\n \n \n-@mutually_exclusive_parameters(\'userid\', \'username\')\n-@at_least_one_of(\'userid\', \'username\')\n+@mutually_exclusive_parameters("userid", "username")\n+@at_least_one_of("userid", "username")\n def get(userid=None, username=None):\n     """Get a user.\n \n@@ -111,7 +111,7 @@ def get(userid=None, username=None):\n     :Example: :ref:`user-get-example`\n     """\n     if userid is not None:\n-        portal_membership = portal.get_tool(\'portal_membership\')\n+        portal_membership = portal.get_tool("portal_membership")\n         return portal_membership.getMemberById(userid)\n \n     return get_member_by_login_name(\n@@ -128,11 +128,11 @@ def get_current():\n     :rtype: MemberData object\n     :Example: :ref:`user-get-current-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n     return portal_membership.getAuthenticatedMember()\n \n \n-@mutually_exclusive_parameters(\'groupname\', \'group\')\n+@mutually_exclusive_parameters("groupname", "group")\n def get_users(groupname=None, group=None):\n     """Get all users or all users filtered by group.\n \n@@ -151,12 +151,12 @@ def get_users(groupname=None, group=None):\n         :ref:`user-get-groups-users-example`\n     """\n     if groupname:\n-        group_tool = portal.get_tool(\'portal_groups\')\n+        group_tool = portal.get_tool("portal_groups")\n         group = group_tool.getGroupById(groupname)\n         if not group:\n             raise GroupNotFoundError\n \n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n \n     if group:\n         return group.getGroupMembers()\n@@ -164,8 +164,8 @@ def get_users(groupname=None, group=None):\n         return portal_membership.listMembers()\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n-@at_least_one_of(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n+@at_least_one_of("username", "user")\n def delete(username=None, user=None):\n     """Delete a user.\n \n@@ -181,7 +181,7 @@ def delete(username=None, user=None):\n         InvalidParameterError\n     :Example: :ref:`user-delete-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n     user_id = username or user.id\n     portal_membership.deleteMembers((user_id,))\n \n@@ -193,10 +193,10 @@ def is_anonymous():\n     :rtype: bool\n     :Example: :ref:`user-is-anonymous-example`\n     """\n-    return bool(portal.get_tool(\'portal_membership\').isAnonymousUser())\n+    return bool(portal.get_tool("portal_membership").isAnonymousUser())\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_roles(username=None, user=None, obj=None, inherit=True):\n     """Get user\'s site-wide or local roles.\n \n@@ -218,7 +218,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n         MissingParameterError\n     :Example: :ref:`user-get-roles-example`\n     """\n-    portal_membership = portal.get_tool(\'portal_membership\')\n+    portal_membership = portal.get_tool("portal_membership")\n \n     if username is None:\n         if user is None:\n@@ -244,7 +244,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n             principal_ids = list(plone_user.getGroups())\n             principal_ids.insert(0, plone_user.getId())\n             roles = set()\n-            pas = portal.get_tool(\'acl_users\')\n+            pas = portal.get_tool("acl_users")\n             for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):\n                 for adapter in lrmanager._getAdapters(obj):\n                     for principal_id in principal_ids:\n@@ -256,11 +256,11 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n \n @contextmanager\n def _nop_context_manager():\n-    """A trivial context manager that does nothing."""\n+    """Do nothing (trivial context manager)."""\n     yield\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def get_permissions(username=None, user=None, obj=None):\n     """Get user\'s site-wide or local permissions.\n \n@@ -295,7 +295,7 @@ def get_permissions(username=None, user=None, obj=None):\n     return result\n \n \n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@mutually_exclusive_parameters("username", "user")\n def has_permission(permission, username=None, user=None, obj=None):\n     """Check whether this user has the given permission.\n \n@@ -330,8 +330,8 @@ def has_permission(permission, username=None, user=None, obj=None):\n         return bool(getSecurityManager().checkPermission(permission, obj))\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("username", "user")\n def grant_roles(username=None, user=None, obj=None, roles=None):\n     """Grant roles to a user.\n \n@@ -357,13 +357,13 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n         user = get(username=username)\n     # check we got a user\n     if user is None:\n-        raise InvalidParameterError(\'User could not be found\')\n+        raise InvalidParameterError("User could not be found")\n \n     if isinstance(roles, tuple):\n         roles = list(roles)\n \n     # These roles cannot be granted\n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise InvalidParameterError\n \n     if obj is None:\n@@ -379,8 +379,8 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n         obj.manage_setLocalRoles(user.getId(), roles)\n \n \n-@required_parameters(\'roles\')\n-@mutually_exclusive_parameters(\'username\', \'user\')\n+@required_parameters("roles")\n+@mutually_exclusive_parameters("username", "user")\n def revoke_roles(username=None, user=None, obj=None, roles=None):\n     """Revoke roles from a user.\n \n@@ -405,11 +405,11 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n         user = get(username=username)\n     # check we got a user\n     if user is None:\n-        raise InvalidParameterError(\'User could not be found\')\n+        raise InvalidParameterError("User could not be found")\n \n     roles = set(roles)\n \n-    if \'Anonymous\' in roles or \'Authenticated\' in roles:\n+    if "Anonymous" in roles or "Authenticated" in roles:\n         raise InvalidParameterError\n \n     inherit = True\n@@ -420,7 +420,7 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n     actual_roles = {\n         role\n         for role in get_roles(user=user, obj=obj, inherit=inherit)\n-        if role not in [\'Anonymous\', \'Authenticated\']\n+        if role not in ["Anonymous", "Authenticated"]\n     }\n \n     roles = list(actual_roles - roles)\ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex c7b2e312..d4bc707f 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -1,4 +1,4 @@\n-"""Decorators for validating parameters"""\n+"""Provide decorators for validating parameters."""\n \n from decorator import decorator\n from plone.api.exc import InvalidParameterError\n@@ -8,17 +8,18 @@\n \n \n def _get_arg_spec(func, validator_args):\n-    """Get the arguments specified in the function spec\n+    """Get the arguments specified in the function spec.\n+\n     and check that the decorator doesn\'t refer to non-existant args.\n     """\n     signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\n     if extra_args:\n         raise ValueError(\n-            \'Validator for {name} refers to parameters \'\n-            \'that are not part of the function signature: {signature}\'.format(\n+            "Validator for {name} refers to parameters "\n+            "that are not part of the function signature: {signature}".format(\n                 name=func.__name__,\n-                signature=\', \'.join(extra_args),\n+                signature=", ".join(extra_args),\n             ),\n         )\n \n@@ -26,7 +27,8 @@ def _get_arg_spec(func, validator_args):\n \n \n def _get_supplied_args(signature_params, args, kwargs):\n-    """Return names of all args that have been passed in\n+    """Return names of all args that have been passed in.\n+\n     either as positional or keyword arguments, and are not None.\n     """\n     supplied_args = []\n@@ -42,8 +44,7 @@ def _get_supplied_args(signature_params, args, kwargs):\n \n \n def required_parameters(*required_params):\n-    """A decorator that tests whether all of the specified parameters\n-    have been supplied and are not None\n+    """Test whether all of the specified parameters have been supplied and are not None.\n \n     Todo: add an optional flag to allow None values through as valid parameters\n \n@@ -52,23 +53,20 @@ def required_parameters(*required_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _required_parameters(func):\n-        """The actual decorator"""\n+        """Provide actual decorator."""\n         signature_params = _get_arg_spec(func, required_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)"""\n+            """Provide wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n \n-            missing = [\n-                param\n-                for param in required_params\n-                if param not in supplied_args\n-            ]\n+            missing = [param for param in required_params if param not in supplied_args]\n             if len(missing):\n                 raise MissingParameterError(\n-                    \'Missing required parameter(s): {params}\'.format(\n-                        params=\', \'.join(missing),\n+                    "Missing required parameter(s): {params}".format(\n+                        params=", ".join(missing),\n                     ),\n                 )\n \n@@ -80,7 +78,9 @@ def wrapped(function, *args, **kwargs):\n \n \n def mutually_exclusive_parameters(*exclusive_params):\n-    """A decorator that raises an exception if more than one\n+    """Provide decorator.\n+\n+    The decorator raises an exception if more than one\n     of the specified parameters has been supplied and is not None\n \n     Usage:\n@@ -88,22 +88,21 @@ def mutually_exclusive_parameters(*exclusive_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _mutually_exclusive_parameters(func):\n-        """The actual decorator."""\n+        """Provide a decorator."""\n         signature_params = _get_arg_spec(func, exclusive_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)."""\n+            """Provide a wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n             clashes = [\n-                argument\n-                for argument in supplied_args\n-                if argument in exclusive_params\n+                argument for argument in supplied_args if argument in exclusive_params\n             ]\n             if len(clashes) > 1:\n                 raise InvalidParameterError(\n-                    \'These parameters are mutually exclusive: {arg}.\'.format(\n-                        arg=\', \'.join(supplied_args),\n+                    "These parameters are mutually exclusive: {arg}.".format(\n+                        arg=", ".join(supplied_args),\n                     ),\n                 )\n \n@@ -115,7 +114,9 @@ def wrapped(function, *args, **kwargs):\n \n \n def at_least_one_of(*candidate_params):\n-    """A decorator that raises an exception if none of the\n+    """Provide a decorator.\n+\n+    The decorator raises an exception if none of the\n     specified parameters has been supplied.  Can be used in conjunction with\n     mutually_exclusive_parameters to enforce exactly one.\n \n@@ -124,12 +125,13 @@ def at_least_one_of(*candidate_params):\n     def foo(a=None, b=None, c=None):\n         pass\n     """\n+\n     def _at_least_one_of(func):\n-        """The actual decorator."""\n+        """Provide an actual decorator."""\n         signature_params = _get_arg_spec(func, candidate_params)\n \n         def wrapped(function, *args, **kwargs):\n-            """The wrapped function (whose docstring will get replaced)."""\n+            """Provide a wrapped function (whose docstring will get replaced)."""\n             supplied_args = _get_supplied_args(signature_params, args, kwargs)\n             candidates = [\n                 candidate\n@@ -138,9 +140,9 @@ def wrapped(function, *args, **kwargs):\n             ]\n             if len(candidates) < 1:\n                 raise MissingParameterError(\n-                    \'At least one of these parameters must be \'\n-                    \'supplied: {params}.\'.format(\n-                        params=\', \'.join(candidate_params),\n+                    "At least one of these parameters must be "\n+                    "supplied: {params}.".format(\n+                        params=", ".join(candidate_params),\n                     ),\n                 )\n \ndiff --git a/test_plone-52.cfg b/test_plone-52.cfg\nnew file mode 100644\nindex 00000000..22236359\n--- /dev/null\n+++ b/test_plone-52.cfg\n@@ -0,0 +1,6 @@\n+[buildout]\n+extends =\n+    https://raw.github.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\ndiff --git a/test_plone-60.cfg b/test_plone-60.cfg\nnew file mode 100644\nindex 00000000..2fae3a15\n--- /dev/null\n+++ b/test_plone-60.cfg\n@@ -0,0 +1,6 @@\n+[buildout]\n+extends =\n+    https://raw.github.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\ndiff --git a/tox.ini b/tox.ini\nindex 4574f5c2..fee9166b 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,53 +1,57 @@\n [tox]\n envlist =\n-    py{36,37,38}-plone-{5.2},\n-#    black-check,\n+    py{37,38,39}-plone-{5.2},\n+    py{38,39}-plone-{6.0}\n+    # towncrier\n+    # black-enforce,\n+    black-check,\n+    # isort-apply,\n     isort,\n     lint,\n-    coverage-report,\n+#    coverage-report,\n+    linkcheck\n     plone6docs,\n     docs\n-    docs-livehtml\n-    linkcheck\n \n-skip_missing_interpreters = False\n+skip_missing_interpreters = True\n+\n+[gh-actions]\n+python =\n+    3.7: py37\n+    3.8: py38\n+    3.9: py39\n+\n+[gh-actions:env]\n+PLONE =\n+    5.2: plone-5.2\n+    6.0: plone-6.0\n+\n \n [testenv]\n skip_install = True\n \n-basepython:\n-    py36: python3.6\n-    py37: python3.7\n-    py38: python3.8\n-\n commands =\n     python -VV\n+    pip install -r requirements.txt\n     pip list\n-    mkdir -p {toxinidir}/reports/coverage\n-# Calling bin/buildout -c toxinidir/buildout.cfg works in principle.\n-# But when buildout restarts because it has upgraded or downgraded itself,\n-# it will fail to find the buildout config file in the envdir.\n-# So make sure the versions in the deps match what is in the buildout config.\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} bootstrap\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir}\n-    {envbindir}/coverage run {envbindir}/test -v1 --auto-color {posargs}\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir}\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n \n setenv =\n-    COVERAGE_FILE=.coverage.{envname}\n-    plone-5.2: BUILDOUT_FILE="plone-5.2.x.cfg"\n+    BUILDOUT_FILE=test_plone-60.cfg\n+    plone-5.2: BUILDOUT_FILE=test_plone-52.cfg\n \n deps =\n     pdbpp\n-    setuptools==42.0.2\n-    zc.buildout==2.13.3\n-    coverage\n+    manuel\n \n whitelist_externals =\n     mkdir\n     echo\n \n [testenv:coverage-report]\n-basepython = python\n+basepython = python3.9\n deps = coverage\n \n setenv =\n@@ -64,75 +68,75 @@ commands =\n     coverage xml\n \n [testenv:black-check]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n deps =\n     black\n \n commands =\n     python -VV\n-    black --line-length=79 --check --diff -v --skip-string-normalization src setup.py\n+    black --check --diff -v src setup.py\n \n [testenv:black-enforce]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n deps =\n     black\n \n commands =\n     python -VV\n-    black -v --line-length=79 --skip-string-normalization src setup.py\n+    black -v src setup.py\n \n-[testenv:isort-apply]\n-basepython = python\n+[testenv:isort]\n+basepython = python3.9\n skip_install = True\n-\n deps =\n     isort\n \n commands =\n     python -VV\n-    isort {toxinidir}/src setup.py {posargs}\n+    isort --check-only --diff src setup.py\n \n-[testenv:isort]\n-basepython = python\n+[testenv:isort-apply]\n+basepython = python3.9\n skip_install = True\n+\n deps =\n     isort\n \n commands =\n     python -VV\n-    isort --check-only --diff {toxinidir}/src setup.py\n+    isort src setup.py {posargs}\n \n [testenv:lint]\n-basepython = python\n+basepython = python3.9\n skip_install = True\n \n deps =\n+    Jinja2<=3.0.3\n     isort\n     flake8\n     # helper to generate HTML reports:\n     flake8-html\n     flake8-blind-except\n     flake8-coding\n-    flake8-commas\n+    # flake8-commas\n     flake8-debugger\n     flake8-deprecated\n+    # flake8-docstrings\n     flake8-isort\n     flake8-pep3101\n-    #flake8-plone-api  # Sorry did not make sense here as this is plone.api\n     flake8-plone-hasattr\n     flake8-print\n-    flake8-quotes\n+    # flake8-quotes\n     flake8-string-format\n     flake8-todo\n-    flake8_strict\n \n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 src setup.py\n-    flake8 src setup.py\n+    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --ignore=C101 src setup.py\n+    flake8 --ignore=C101,P101,Q000 src setup.py\n \n whitelist_externals =\n     mkdir\n@@ -141,7 +145,7 @@ whitelist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python\n+basepython = python3.9\n skip_install = False\n usedevelop = True\n extras =\n@@ -160,14 +164,14 @@ commands =\n # Locally for Maurits this only works with Python 2.7.\n # Travis is happy with 3.7, not with 3.8 or 3.9.\n # So pick the right one in .travis.yml (or GitHub Actions).\n-basepython = python\n+basepython = python3.9\n skip_install = False\n usedevelop = True\n extras =\n     tests\n \n deps =\n-    Sphinx\n+    -r requirements-docs.txt\n \n commands =\n     python -VV\n@@ -192,20 +196,6 @@ commands =\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n \n-[testenv:docs-livehtml]\n-basepython = python\n-skip_install = False\n-usedevelop = True\n-extras =\n-    {[testenv:plone6docs]extras}\n-deps =\n-    {[testenv:plone6docs]deps}\n-commands =\n-    python -VV\n-    mkdir -p {toxinidir}/_build/plone6docs\n-    sphinx-autobuild --ignore "*.swp" -b html docs _build/plone6docs/html \n-\n-\n [testenv:towncrier]\n basepython = python\n skip_install = True\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-18T03:11:47-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/7c3fdf009890a52eb4285326b22eb8176ef3342b

Restore MyST doctest syntax

Files changed:
M docs/about.md
M docs/conf.py
M docs/content.md
M docs/group.md
M docs/portal.md
M docs/user.md

b'diff --git a/docs/about.md b/docs/about.md\nindex 1589f8fe..a321e281 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -58,36 +58,30 @@ For example:\n {ref}`chapter-env`.\n In general, importing and using an API looks something like this:\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone import api\n-    from plone.api.exc import InvalidParameterError\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = True\n-```\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-    catalog = api.portal.get_tool(name="portal_catalog")\n-    user = api.user.create(email=\'alice@plone.org\')\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.api.exc import InvalidParameterError\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = True\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+```python\n+from plone import api\n \n-    self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n-    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n-    self.assertEqual(user.__class__.__name__, \'MemberData\')\n+portal = api.portal.get()\n+catalog = api.portal.get_tool(name="portal_catalog")\n+user = api.user.create(email=\'alice@plone.org\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n+% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+% self.assertEqual(user.__class__.__name__, \'MemberData\')\n+\n Always import the top-level package\n (`from plone import api`)\n and then use the group namespace to access the method you want\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 264d3c25..16b402c6 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -20,7 +20,6 @@\n     \'sphinx.ext.autodoc\',\n     \'sphinx.ext.viewcode\',\n     \'sphinx.ext.autosummary\',\n-    "sphinx.ext.ifconfig",\n     "myst_parser",\n     "sphinx.ext.todo",\n ]\n@@ -41,10 +40,6 @@\n )]\n \n \n-def setup(app):\n-    app.add_config_value("plone_api_doctests", "", True)\n-\n-\n class Mock:\n     def __init__(self, *args, **kwargs):\n         pass\ndiff --git a/docs/content.md b/docs/content.md\nindex 79403d6b..672f6132 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -103,7 +103,7 @@ not_found = api.content.get(UID=\'notfound\')\n % self.assertTrue(conference)\n % self.assertTrue(sprint)\n % self.assertTrue(team)\n-% self.assertEquals(not_found, None)\n+% self.assertEqual(not_found, None)\n \n (content-find-example)=\n \ndiff --git a/docs/group.md b/docs/group.md\nindex 9c7ebe71..0da005d0 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -13,61 +13,52 @@\n \n To create a new group, use {meth}`api.group.create`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    group = api.group.create(groupname=\'staff\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'staff\')\n+```python\n+from plone import api\n+group = api.group.create(groupname=\'staff\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'staff\')\n+\n When you create groups, `title`, `description`, `roles` and `groups` are optional.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-\n-    group = api.group.create(\n-        groupname=\'board_members\',\n-        title=\'Board members\',\n-        description=\'Just a description\',\n-        roles=[\'Reader\', ],\n-        groups=[\'Site Administrators\', ],\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'board_members\')\n-    self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n-    self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n-    self.assertTrue(\'Reader\' in group.getRoles())\n-    self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n+```python\n+from plone import api\n+\n+group = api.group.create(\n+    groupname=\'board_members\',\n+    title=\'Board members\',\n+    description=\'Just a description\',\n+    roles=[\'Reader\', ],\n+    groups=[\'Site Administrators\', ],\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'board_members\')\n+% self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n+% self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n+% self.assertTrue(\'Reader\' in group.getRoles())\n+% self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n+\n (group-get-example)=\n \n ## Get group\n \n To get a group by its name, use {meth}`api.group.get`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    group = api.group.get(groupname=\'staff\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'staff\')\n+```python\n+from plone import api\n+group = api.group.get(groupname=\'staff\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'staff\')\n+\n (group-edit-example)=\n \n ## Editing a group\n@@ -75,51 +66,45 @@ To get a group by its name, use {meth}`api.group.get`.\n Groups can be edited by using the `group_tool`.\n In this example, the `title`, `description` and `roles` are updated for the group \'Staff\'.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    group_tool = api.portal.get_tool(name=\'portal_groups\')\n-    group_tool.editGroup(\n-        \'staff\',\n-        roles=[\'Editor\', \'Reader\'],\n-        title=\'Staff\',\n-        description=\'Just a description\',\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    group = api.group.get(groupname=\'staff\')\n-\n-    title = group.getProperty(\'title\')\n-    description = group.getProperty(\'description\')\n-    roles = group.getRoles()\n-\n-    self.assertEqual(title, \'Staff\')\n-    self.assertEqual(description, \'Just a description\')\n-    self.assertTrue(\'Editor\' in roles)\n-    self.assertTrue(\'Reader\' in roles)\n+```python\n+from plone import api\n+group_tool = api.portal.get_tool(name=\'portal_groups\')\n+group_tool.editGroup(\n+    \'staff\',\n+    roles=[\'Editor\', \'Reader\'],\n+    title=\'Staff\',\n+    description=\'Just a description\',\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% group = api.group.get(groupname=\'staff\')\n+%\n+% title = group.getProperty(\'title\')\n+% description = group.getProperty(\'description\')\n+% roles = group.getRoles()\n+%\n+% self.assertEqual(title, \'Staff\')\n+% self.assertEqual(description, \'Just a description\')\n+% self.assertTrue(\'Editor\' in roles)\n+% self.assertTrue(\'Reader\' in roles)\n+\n (group-get-all-groups-example)=\n \n ## Get all groups\n \n You can also get all groups by using {meth}`api.group.get_groups`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    groups = api.group.get_groups()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(groups[0].id, \'Administrators\')\n+```python\n+from plone import api\n+groups = api.group.get_groups()\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(groups[0].id, \'Administrators\')\n+\n (group-get-users-groups-example)=\n \n ## Get user\'s groups\n@@ -127,98 +112,80 @@ You can also get all groups by using {meth}`api.group.get_groups`.\n Groups may be filtered by member. By passing the `username` parameter,\n {meth}`api.group.get_groups` will return only the groups the user belongs to.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+% api.group.add_user(username=\'jane\', groupname=\'staff\')\n+% api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n \n-    api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-    api.group.add_user(username=\'jane\', groupname=\'staff\')\n-    api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n+```python\n+from plone import api\n+user = api.user.get(username=\'jane\')\n+groups = api.group.get_groups(username=\'jane\')\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'jane\')\n-    groups = api.group.get_groups(username=\'jane\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    group_list = [g.id for g in groups]\n-    self.assertCountEqual(\n-        group_list,\n-        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-    )\n-```\n+% invisible-code-block: python\n+%\n+% group_list = [g.id for g in groups]\n+% self.assertCountEqual(\n+%     group_list,\n+%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+% )\n \n You can also pass the user directly to {meth}`api.group.get_groups`:\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'jane\')\n-    groups = api.group.get_groups(user=user)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    group_list = [g.id for g in groups]\n-    self.assertCountEqual(\n-        group_list,\n-        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-    )\n+```python\n+from plone import api\n+user = api.user.get(username=\'jane\')\n+groups = api.group.get_groups(user=user)\n ```\n \n+% invisible-code-block: python\n+%\n+% group_list = [g.id for g in groups]\n+% self.assertCountEqual(\n+%     group_list,\n+%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+% )\n+\n ## Get group members\n \n Use the {meth}`api.user.get_users` method to get all the users that are members of a group.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    members = api.user.get_users(groupname=\'staff\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(members[0].id, \'jane\')\n+```python\n+from plone import api\n+members = api.user.get_users(groupname=\'staff\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(members[0].id, \'jane\')\n+\n (group-delete-example)=\n \n ## Delete group\n \n To delete a group, use {meth}`api.group.delete` and pass in either the groupname or the group object you want to delete.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.group.create(groupname=\'unwanted\')\n-    api.group.delete(groupname=\'unwanted\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+```python\n+from plone import api\n+api.group.create(groupname=\'unwanted\')\n+api.group.delete(groupname=\'unwanted\')\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    unwanted = api.group.create(groupname=\'unwanted\')\n-    api.group.delete(group=unwanted)\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+```python\n+unwanted = api.group.create(groupname=\'unwanted\')\n+api.group.delete(group=unwanted)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+\n (group-add-user-example)=\n \n ## Adding user to group\n@@ -226,22 +193,19 @@ To delete a group, use {meth}`api.group.delete` and pass in either the groupname\n To add a user to a group, use the {meth}`api.group.add_user` method.\n This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-\n-    api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-    api.group.add_user(groupname=\'staff\', username=\'bob\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+```python\n+from plone import api\n \n-    self.assertTrue(\n-        \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n-    )\n+api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+api.group.add_user(groupname=\'staff\', username=\'bob\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(\n+%     \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n+% )\n+\n (group-remove-user-example)=\n \n ## Removing user from group\n@@ -249,18 +213,15 @@ This method accepts either the groupname or the group object for the target grou\n To remove a user from a group, use the {meth}`api.group.remove_user` method.\n This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.group.remove_user(groupname=\'staff\', username=\'bob\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n+```python\n+from plone import api\n+api.group.remove_user(groupname=\'staff\', username=\'bob\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n+\n (group-get-roles-example)=\n \n ## Get group roles\n@@ -268,58 +229,49 @@ This also accepts either the groupname or the group object for the target group\n To find the roles assigned to a group, use the {meth}`api.group.get_roles` method.\n By default it returns site-wide roles.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    roles = api.group.get_roles(groupname=\'staff\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```python\n+from plone import api\n+roles = api.group.get_roles(groupname=\'staff\')\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n If you pass in a content object, it will return the local roles of the group in that particular context.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(\n-        container=portal,\n-        type=\'Folder\',\n-        id=\'folder_four\',\n-        title=\'Folder Four\',\n-    )\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(\n+    container=portal,\n+    type=\'Folder\',\n+    id=\'folder_four\',\n+    title=\'Folder Four\',\n+)\n+roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n ```\n \n-If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    api.group.grant_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n \n-    roles = api.group.get_roles(\n-        groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n+If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+```python\n+api.group.grant_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n \n-    EXPECTED_OBJ_ROLES = [\'Contributor\']\n-    self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n+roles = api.group.get_roles(\n+    groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_OBJ_ROLES = [\'Contributor\']\n+% self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n+\n (group-grant-roles-example)=\n \n ## Grant roles to group\n@@ -327,91 +279,76 @@ If you pass in a content object and `inherit=False`, it will return only the loc\n To grant roles to a group, use the {meth}`api.group.grant_roles` method.\n By default, roles are granted site-wide.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.group.grant_roles(\n-        groupname=\'staff\',\n-        roles=[\'Reviewer, SiteAdministrator\'],\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n-    roles = api.group.get_roles(groupname=\'staff\')\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```python\n+from plone import api\n+api.group.grant_roles(\n+    groupname=\'staff\',\n+    roles=[\'Reviewer, SiteAdministrator\'],\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n+% roles = api.group.get_roles(groupname=\'staff\')\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n If you pass in a content object, roles will be assigned in that particular context.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(\n-        container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n-    api.group.grant_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual(set([\'Contributor\']), set(roles))\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n-    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(\n+    container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n+api.group.grant_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual(set([\'Contributor\']), set(roles))\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n+% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+\n (group-revoke-roles-example)=\n \n ## Revoke roles from group\n \n To revoke roles already granted to a group, use the {meth}`api.group.revoke_roles` method.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.group.revoke_roles(\n-        groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-    roles = api.group.get_roles(groupname=\'staff\')\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+```python\n+from plone import api\n+api.group.revoke_roles(\n+    groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+% roles = api.group.get_roles(groupname=\'staff\')\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n If you pass in a content object, it will revoke roles granted in that particular context.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual([\'Contributor\'], roles)\n \n-    EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual([\'Contributor\'], roles)\n+```python\n+from plone import api\n+api.group.revoke_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.group.revoke_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = []\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n-```\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = []\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n \n ## Further reading\n \ndiff --git a/docs/portal.md b/docs/portal.md\nindex f0edb294..a7dbeeb8 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -13,19 +13,16 @@\n \n Getting the Plone portal object is easy with {meth}`api.portal.get`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n-    self.assertEqual(portal.getId(), \'plone\')\n+```python\n+from plone import api\n+portal = api.portal.get()\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n+% self.assertEqual(portal.getId(), \'plone\')\n+\n (portal-get-navigation-root-example)=\n \n ## Get navigation root\n@@ -36,281 +33,245 @@ You do this with {meth}`api.portal.get_navigation_root()`.\n \n Assuming there is a document `english_page` in a folder `en`, which is the navigation root:\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone import api\n-    from plone.app.layout.navigation.interfaces import INavigationRoot\n-    from zope.interface import alsoProvides\n-\n-    portal = api.portal.get()\n-    english_folder = api.content.create(\n-        type=\'Folder\',\n-        title=\'en\',\n-        container=portal,\n-    )\n-    alsoProvides(english_folder, INavigationRoot)\n-    english_page = api.content.create(\n-        type=\'Document\',\n-        title=\'English Page\',\n-        container=english_folder,\n-    )\n-```\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    nav_root = api.portal.get_navigation_root(english_page)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.app.layout.navigation.interfaces import INavigationRoot\n+% from zope.interface import alsoProvides\n+%\n+% portal = api.portal.get()\n+% english_folder = api.content.create(\n+%     type=\'Folder\',\n+%     title=\'en\',\n+%     container=portal,\n+% )\n+% alsoProvides(english_folder, INavigationRoot)\n+% english_page = api.content.create(\n+%     type=\'Document\',\n+%     title=\'English Page\',\n+%     container=english_folder,\n+% )\n \n-    self.assertEqual(nav_root.id, \'en\')\n+```python\n+from plone import api\n+nav_root = api.portal.get_navigation_root(english_page)\n ```\n \n-returns the folder `en`. If the folder `en` is not a navigation root, it would return the portal.\n+% invisible-code-block: python\n+%\n+% self.assertEqual(nav_root.id, \'en\')\n+\n+Returns the folder `en`. If the folder `en` is not a navigation root, it would return the portal.\n \n ## Get portal url\n \n Since we now have the portal object, it\'s easy to get the portal URL.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    url = api.portal.get().absolute_url()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(url, \'http://nohost/plone\')\n+```python\n+from plone import api\n+url = api.portal.get().absolute_url()\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(url, \'http://nohost/plone\')\n+\n (portal-get-tool-example)=\n \n ## Get tool\n \n To get a portal tool easily, use {meth}`api.portal.get_tool` and pass in the name of the tool you need.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    catalog = api.portal.get_tool(name=\'portal_catalog\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+```python\n+from plone import api\n+catalog = api.portal.get_tool(name=\'portal_catalog\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+\n (portal-get-localized-time-example)=\n \n ## Get localized time\n \n To display the date/time in a user-friendly way, localized to the user\'s preferred language, use {meth}`api.portal.get_localized_time`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    from DateTime import DateTime\n-    today = DateTime()\n-    localized = api.portal.get_localized_time(datetime=today)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    # assert that the result is in fact a datetime\n-    self.assertEqual(DateTime(localized).__class__, DateTime)\n+```python\n+from plone import api\n+from DateTime import DateTime\n+today = DateTime()\n+localized = api.portal.get_localized_time(datetime=today)\n ```\n \n+% invisible-code-block: python\n+%\n+% # assert that the result is in fact a datetime\n+% self.assertEqual(DateTime(localized).__class__, DateTime)\n+\n (portal-get-default-language-example)=\n \n ## Get default language\n \n To get the default language, use {meth}`api.portal.get_default_language`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    lang = api.portal.get_default_language()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    # assert that the result is \'en\'\n-    self.assertEqual(lang, \'en\')\n+```python\n+from plone import api\n+lang = api.portal.get_default_language()\n ```\n \n+% invisible-code-block: python\n+%\n+% # assert that the result is \'en\'\n+% self.assertEqual(lang, \'en\')\n+\n (portal-get-current-language-example)=\n \n ## Get current language\n \n To get the currently negotiated language, use {meth}`api.portal.get_current_language`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    lang = api.portal.get_current_language()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    # assert that the result is \'en\'\n-    self.assertEqual(lang, \'en\')\n+```python\n+from plone import api\n+lang = api.portal.get_current_language()\n ```\n \n+% invisible-code-block: python\n+%\n+% # assert that the result is \'en\'\n+% self.assertEqual(lang, \'en\')\n+\n (portal-translate-example)=\n \n ## Translate\n \n To translate a message in a given language, use {meth}`api.portal.translate`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    msg = api.portal.translate(\'Edited\', lang=\'es\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    # assert that the translation is correct\n-    self.assertEqual(msg, u\'Editado\')\n+```python\n+from plone import api\n+msg = api.portal.translate(\'Edited\', lang=\'es\')\n ```\n \n+% invisible-code-block: python\n+%\n+% # assert that the translation is correct\n+% self.assertEqual(msg, u\'Editado\')\n+\n (portal-send-email-example)=\n \n ## Send E-Mail\n \n To send an e-mail use {meth}`api.portal.send_email`:\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    # Mock the mail host so we can test sending the email\n-    from plone import api\n-    from Products.CMFPlone.tests.utils import MockMailHost\n-    from Products.CMFPlone.utils import getToolByName\n-    from Products.MailHost.interfaces import IMailHost\n-    api.portal.PRINTINGMAILHOST_ENABLED = True\n-\n-    mockmailhost = MockMailHost(\'MailHost\')\n-    if not hasattr(mockmailhost, \'smtp_host\'):\n-        mockmailhost.smtp_host = \'localhost\'\n-    portal = api.portal.get()\n-    portal.MailHost = mockmailhost\n-    sm = portal.getSiteManager()\n-    sm.registerUtility(component=mockmailhost, provided=IMailHost)\n-    mailhost = getToolByName(portal, \'MailHost\')\n-    mailhost.reset()\n-```\n+% invisible-code-block: python\n+%\n+% # Mock the mail host so we can test sending the email\n+% from plone import api\n+% from Products.CMFPlone.tests.utils import MockMailHost\n+% from Products.CMFPlone.utils import getToolByName\n+% from Products.MailHost.interfaces import IMailHost\n+% api.portal.PRINTINGMAILHOST_ENABLED = True\n+%\n+% mockmailhost = MockMailHost(\'MailHost\')\n+% if not hasattr(mockmailhost, \'smtp_host\'):\n+%     mockmailhost.smtp_host = \'localhost\'\n+% portal = api.portal.get()\n+% portal.MailHost = mockmailhost\n+% sm = portal.getSiteManager()\n+% sm.registerUtility(component=mockmailhost, provided=IMailHost)\n+% mailhost = getToolByName(portal, \'MailHost\')\n+% mailhost.reset()\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.portal.send_email(\n-        recipient="bob@plone.org",\n-        sender="noreply@plone.org",\n-        subject="Trappist",\n-        body="One for you Bob!",\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(len(mailhost.messages), 1)\n-\n-    try:\n-        # Python 3\n-        from email import message_from_bytes\n-    except ImportError:\n-        # Python 2\n-        from email import message_from_string as message_from_bytes\n-    msg = message_from_bytes(mailhost.messages[0])\n-    self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-    self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-    self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-    self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+```python\n+from plone import api\n+api.portal.send_email(\n+    recipient="bob@plone.org",\n+    sender="noreply@plone.org",\n+    subject="Trappist",\n+    body="One for you Bob!",\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(len(mailhost.messages), 1)\n+%\n+% try:\n+%     # Python 3\n+%     from email import message_from_bytes\n+% except ImportError:\n+%     # Python 2\n+%     from email import message_from_string as message_from_bytes\n+% msg = message_from_bytes(mailhost.messages[0])\n+% self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n+% self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n+% self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n+% self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+\n If you need to add other fields not supported on send_email signature,\n Python\'s standard [email module](https://docs.python.org/2.7/library/email.message.html#email.message.Message) can also be used:\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from email.mime.multipart import MIMEMultipart\n-    from email.mime.text import MIMEText\n-\n-    message = MIMEMultipart()\n-    message.attach(MIMEText("One for you Bar!"))\n-\n-    part = MIMEText(\'<xml></xml>\', \'xml\')\n-    part.add_header(\n-        \'Content-Disposition\',\n-        \'attachment; filename="report.xml"\'\n-    )\n-    message.attach(part)\n-\n-    message[\'Reply-To\'] = "community@plone.org"\n-\n-    api.portal.send_email(\n-        recipient="bob@plone.org",\n-        sender="noreply@plone.org",\n-        subject="Trappist",\n-        body=message,\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(len(mailhost.messages), 2)\n-\n-    msg = message_from_bytes(mailhost.messages[1])\n-    payloads = msg.get_payload()\n-    self.assertEqual(len(payloads), 2)\n-    self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n-    self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n-    self.assertIn(\n-        \'attachment; filename="report.xml\',\n-        payloads[1][\'Content-Disposition\']\n-    )\n-    api.portal.PRINTINGMAILHOST_ENABLED = False\n-    mailhost.reset()\n+```python\n+from email.mime.multipart import MIMEMultipart\n+from email.mime.text import MIMEText\n+\n+message = MIMEMultipart()\n+message.attach(MIMEText("One for you Bar!"))\n+\n+part = MIMEText(\'<xml></xml>\', \'xml\')\n+part.add_header(\n+    \'Content-Disposition\',\n+    \'attachment; filename="report.xml"\'\n+)\n+message.attach(part)\n+\n+message[\'Reply-To\'] = "community@plone.org"\n+\n+api.portal.send_email(\n+    recipient="bob@plone.org",\n+    sender="noreply@plone.org",\n+    subject="Trappist",\n+    body=message,\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(len(mailhost.messages), 2)\n+%\n+% msg = message_from_bytes(mailhost.messages[1])\n+% payloads = msg.get_payload()\n+% self.assertEqual(len(payloads), 2)\n+% self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n+% self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n+% self.assertIn(\n+%     \'attachment; filename="report.xml\',\n+%     payloads[1][\'Content-Disposition\']\n+% )\n+% api.portal.PRINTINGMAILHOST_ENABLED = False\n+% mailhost.reset()\n+\n (portal-show-message-example)=\n \n ## Show notification message\n \n With {meth}`api.portal.show_message` you can show a notification message to the user.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n+```python\n from plone import api\n api.portal.show_message(message=\'Blueberries!\', request=request)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from Products.statusmessages.interfaces import IStatusMessage\n-    messages = IStatusMessage(request)\n-    show = messages.show()\n-    self.assertEqual(len(show), 1)  # TODO: This test fails, and blocks the next\n-    self.assertTrue(\'Blueberries!\' in show[0].message)\n ```\n \n+% invisible-code-block: python\n+%\n+% from Products.statusmessages.interfaces import IStatusMessage\n+% messages = IStatusMessage(request)\n+% show = messages.show()\n+% self.assertEqual(len(show), 1)\n+% self.assertTrue(\'Blueberries!\' in show[0].message)\n+\n Since version `2.0.0`, the `request` argument can be omitted.\n-In that case the global request will be used.\n+In that case, the global request will be used.\n \n ```python\n api.portal.show_message(message=\'Cranberries!\')\n@@ -330,89 +291,72 @@ api.portal.show_message(message=\'Cranberries!\')\n Plone comes with a package `plone.app.registry` that provides a common way to store configuration and settings.\n {meth}`api.portal.get_registry_record` provides an easy way to access these.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.registry.record import Record\n-    from plone.registry import field\n-    from zope.component import getUtility\n-    registry = getUtility(IRegistry)\n-    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-            title=u"Foo"))\n-    registry[\'my.package.someoption\'] = True\n-```\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'my.package.someoption\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.registry.record import Record\n+% from plone.registry import field\n+% from zope.component import getUtility\n+% registry = getUtility(IRegistry)\n+% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+%         title=u"Foo"))\n+% registry[\'my.package.someoption\'] = True\n \n-    self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'my.package.someoption\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n+\n One common pattern when using registry records is to define an interface with all the settings.\n {meth}`api.portal.get_registry_record` also allows you to use this pattern.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.api.tests.test_portal import IMyRegistrySettings\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.api.tests.test_portal import IMyRegistrySettings\n+%\n+% registry = getUtility(IRegistry)\n+% registry.registerInterface(IMyRegistrySettings)\n+% records = registry.forInterface(IMyRegistrySettings)\n+% records.field_one = u\'my text\'\n \n-    registry = getUtility(IRegistry)\n-    registry.registerInterface(IMyRegistrySettings)\n-    records = registry.forInterface(IMyRegistrySettings)\n-    records.field_one = u\'my text\'\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+%     u\'my text\'\n+% )\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+It is possible to provide a default value that will be returned by {meth}`api.portal.get_registry_record`, if the queried record is not found.\n \n-    self.assertEqual(\n-        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-        u\'my text\'\n-    )\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n+api.portal.get_registry_record(\'foo\', default=u\'baz\')\n ```\n \n-It is possible to provide a default value\n-that will be returned by {meth}`api.portal.get_registry_record`\n-if the queried record is not found.\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n-    api.portal.get_registry_record(\'foo\', default=u\'baz\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-    self.assertEqual(\n-        api.portal.get_registry_record(\n-            \'foo\',\n-            interface=IMyRegistrySettings,\n-            default=u\'bar\'\n-        ),\n-        u\'bar\',\n-    )\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n-        u\'baz\',\n-    )\n-```\n+% invisible-code-block: python\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\n+%         \'foo\',\n+%         interface=IMyRegistrySettings,\n+%         default=u\'bar\'\n+%     ),\n+%     u\'bar\',\n+% )\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n+%     u\'baz\',\n+% )\n \n (portal-set-registry-record-example)=\n \n@@ -420,60 +364,48 @@ if the queried record is not found.\n \n {meth}`api.portal.set_registry_record` provides an easy way to change `plone.app.registry` configuration and settings.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.registry.record import Record\n-    from plone.registry import field\n-    from zope.component import getUtility\n-    registry = getUtility(IRegistry)\n-    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-            title=u"Foo"))\n-    registry[\'my.package.someoption\'] = True\n-```\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.portal.set_registry_record(\'my.package.someoption\', False)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.registry.record import Record\n+% from plone.registry import field\n+% from zope.component import getUtility\n+% registry = getUtility(IRegistry)\n+% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+%         title=u"Foo"))\n+% registry[\'my.package.someoption\'] = True\n \n-    self.assertFalse(registry[\'my.package.someoption\'])\n+```python\n+from plone import api\n+api.portal.set_registry_record(\'my.package.someoption\', False)\n ```\n \n-{meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n+% invisible-code-block: python\n+%\n+% self.assertFalse(registry[\'my.package.someoption\'])\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+{meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n \n-    from plone.registry.interfaces import IRegistry\n-    from plone.api.tests.test_portal import IMyRegistrySettings\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.api.tests.test_portal import IMyRegistrySettings\n+%\n+% registry = getUtility(IRegistry)\n+% registry.registerInterface(IMyRegistrySettings)\n+% records = registry.forInterface(IMyRegistrySettings)\n \n-    registry = getUtility(IRegistry)\n-    registry.registerInterface(IMyRegistrySettings)\n-    records = registry.forInterface(IMyRegistrySettings)\n+```python\n+from plone import api\n+api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-        u\'new value\'\n-    )\n-```\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+%     u\'new value\'\n+% )\n \n ## Further reading\n \ndiff --git a/docs/user.md b/docs/user.md\nindex 7a81142e..b44b59bb 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -14,80 +14,65 @@\n To create a new user, use {meth}`api.user.create`.\n If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    from plone import api\n-    from plone.api.exc import InvalidParameterError\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = True\n-```\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    user = api.user.create(email=\'alice@plone.org\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'alice@plone.org\')\n-    self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n-```\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.api.exc import InvalidParameterError\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = True\n \n-Otherwise, you also need to pass in the username of the new user.\n-\n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = False\n+```python\n+from plone import api\n+user = api.user.create(email=\'alice@plone.org\')\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'alice@plone.org\')\n+% self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n \n-    user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+Otherwise, you also need to pass in the username of the new user.\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = False\n \n-    self.assertEqual(user.id, \'jane\')\n-    self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n+```python\n+user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'jane\')\n+% self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n+\n To set user properties when creating a new user, pass in a `properties` dict.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    properties = dict(\n-        fullname=\'Bob\',\n-        location=\'Munich\',\n-    )\n-    user = api.user.create(\n-        username=\'bob\',\n-        email=\'bob@plone.org\',\n-        properties=properties,\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n-    self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n+```python\n+properties = dict(\n+    fullname=\'Bob\',\n+    location=\'Munich\',\n+)\n+user = api.user.create(\n+    username=\'bob\',\n+    email=\'bob@plone.org\',\n+    properties=properties,\n+)\n ```\n \n-Besides user properties you can also specify a password for the new user.\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n+% self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n+\n+Beside user properties, you can also specify a password for the new user.\n Otherwise a random 8-character alphanumeric password will be generated.\n \n ```python\n@@ -104,55 +89,46 @@ user = api.user.create(\n \n You can get a user with {meth}`api.user.get`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'bob\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'bob\')\n+```python\n+from plone import api\n+user = api.user.get(username=\'bob\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'bob\')\n+\n ## User properties\n \n Users have various properties set on them.\n This is how you get and set them, using the underlying APIs:\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'bob\')\n-    user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n-    location = user.getProperty(\'location\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(location, \'Neverland\')\n+```python\n+from plone import api\n+user = api.user.get(username=\'bob\')\n+user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n+location = user.getProperty(\'location\')\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(location, \'Neverland\')\n+\n (user-get-current-example)=\n \n ## Get currently logged-in user\n \n Getting the currently logged-in user is easy with {meth}`api.user.get_current`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    current = api.user.get_current()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(current.id, \'test_user_1_\')\n+```python\n+from plone import api\n+current = api.user.get_current()\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(current.id, \'test_user_1_\')\n+\n (user-is-anonymous-example)=\n \n ## Check if current user is anonymous\n@@ -160,63 +136,51 @@ Getting the currently logged-in user is easy with {meth}`api.user.get_current`.\n Sometimes you need to trigger or display some piece of information only for logged-in users.\n It\'s easy to use {meth}`api.user.is_anonymous` to do a basic check for it.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    if not api.user.is_anonymous():\n-        trigger = False\n-    trigger = True\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertTrue(trigger)\n+```python\n+from plone import api\n+if not api.user.is_anonymous():\n+    trigger = False\n+trigger = True\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(trigger)\n+\n (user-get-all-users-example)=\n \n ## Get all users\n \n Get all users in your portal with {meth}`api.user.get_users`.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    users = api.user.get_users()\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n+```python\n+from plone import api\n+users = api.user.get_users()\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n+\n (user-get-groups-users-example)=\n \n ## Get group\'s users\n \n If you set the `groupname` parameter, then {meth}`api.user.get_users` will return only users that are members of this group.\n \n-```{eval-rst}\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% api.group.create(groupname=\'staff\')\n+% api.group.add_user(username=\'jane\', groupname=\'staff\')\n \n-    api.group.create(groupname=\'staff\')\n-    api.group.add_user(username=\'jane\', groupname=\'staff\')\n+```python\n+from plone import api\n+users = api.user.get_users(groupname=\'staff\')\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    users = api.user.get_users(groupname=\'staff\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(users[0].id, \'jane\')\n-```\n+% invisible-code-block: python\n+%\n+% self.assertEqual(users[0].id, \'jane\')\n \n (user-delete-example)=\n \n@@ -224,31 +188,25 @@ If you set the `groupname` parameter, then {meth}`api.user.get_users` will retur\n \n To delete a user, use {meth}`api.user.delete` and pass in either the username or the user object you want to delete.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-    api.user.delete(username=\'unwanted\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+```python\n+from plone import api\n+api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+api.user.delete(username=\'unwanted\')\n ```\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-    api.user.delete(user=unwanted)\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n \n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+```python\n+unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+api.user.delete(user=unwanted)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+\n (user-get-roles-example)=\n \n ## Get user roles\n@@ -256,34 +214,28 @@ To delete a user, use {meth}`api.user.delete` and pass in either the username or\n The {meth}`api.user.get_roles` method is used for getting a user\'s roles.\n By default it returns site-wide roles.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    roles = api.user.get_roles(username=\'jane\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+```python\n+from plone import api\n+roles = api.user.get_roles(username=\'jane\')\n ```\n \n-If you pass in a content object, it will return local roles of the user in that particular context.\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+If you pass in a content object, it will return local roles of the user in that particular context.\n \n-    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+```python\n+from plone import api\n+portal = api.portal.get()\n+blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n+roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+\n (user-get-permissions-example)=\n \n ## Get user permissions\n@@ -291,53 +243,47 @@ If you pass in a content object, it will return local roles of the user in that\n The {meth}`api.user.get_permissions` method is used for getting user\'s permissions.\n By default it returns site root permissions.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n-    permissions = api.user.get_permissions(username=\'mike\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    PERMISSIONS = {\n-        \'View\': True,\n-        \'Manage portal\': False,\n-        \'Modify portal content\': False,\n-        \'Access contents information\': True,\n-    }\n-\n-    for k, v in PERMISSIONS.items():\n-        self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n-        self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n+```python\n+from plone import api\n+mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n+permissions = api.user.get_permissions(username=\'mike\')\n ```\n \n+% invisible-code-block: python\n+%\n+% PERMISSIONS = {\n+%     \'View\': True,\n+%     \'Manage portal\': False,\n+%     \'Modify portal content\': False,\n+%     \'Access contents information\': True,\n+% }\n+%\n+% for k, v in PERMISSIONS.items():\n+%     self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n+%     self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n+\n If you pass in a content object, it will return local permissions of the user in that particular context.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n-    permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    PERMISSIONS = {\n-        \'View\': False,\n-        \'Manage portal\': False,\n-        \'Modify portal content\': False,\n-        \'Access contents information\': False,\n-    }\n-\n-    for k, v in PERMISSIONS.items():\n-        self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n-        self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n+permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% PERMISSIONS = {\n+%     \'View\': False,\n+%     \'Manage portal\': False,\n+%     \'Modify portal content\': False,\n+%     \'Access contents information\': False,\n+% }\n+%\n+% for k, v in PERMISSIONS.items():\n+%     self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n+%     self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n+\n (user-has-permission-example)=\n \n ## Check user permission\n@@ -345,132 +291,114 @@ If you pass in a content object, it will return local permissions of the user in\n Instead of getting all user permissions, you can check a single permission using the {meth}`api.user.has_permission` method.\n By default it checks the permission on the site root.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n-    can_view = api.user.has_permission(\'View\', username=\'adam\')\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    self.assertTrue(can_view)\n+```python\n+from plone import api\n+adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n+can_view = api.user.has_permission(\'View\', username=\'adam\')\n ```\n \n-If you pass in a content object, it will check the permission in that particular context.\n-\n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n-    can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n+% invisible-code-block: python\n+%\n+% self.assertTrue(can_view)\n \n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n+If you pass in a content object, it will check the permission in that particular context.\n \n-    self.assertFalse(can_view)\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n+can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n ```\n \n+% invisible-code-block: python\n+%\n+% self.assertFalse(can_view)\n+\n (user-grant-roles-example)=\n \n ## Grant roles to user\n \n The {meth}`api.user.grant_roles` allows us to grant a list of roles to the user.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.user.grant_roles(username=\'jane\',\n-        roles=[\'Reviewer\', \'SiteAdministrator\']\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```python\n+from plone import api\n+api.user.grant_roles(username=\'jane\',\n+    roles=[\'Reviewer\', \'SiteAdministrator\']\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n If you pass a content object or folder,\n the roles are granted only on that context and not site-wide.\n But all site-wide roles will also be returned by {meth}`api.user.get_roles` for this user on the given context.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n-    api.user.grant_roles(username=\'jane\',\n-        roles=[\'Editor\', \'Contributor\'],\n-        obj=portal[\'folder_one\']\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n-    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```python\n+from plone import api\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n+api.user.grant_roles(username=\'jane\',\n+    roles=[\'Editor\', \'Contributor\'],\n+    obj=portal[\'folder_one\']\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n+% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n+% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n (user-revoke-roles-example)=\n \n ## Revoke roles from user\n \n The {meth}`api.user.revoke_roles` allows us to revoke a list of roles from the user.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+```python\n+from plone import api\n+api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n If you pass a context object the local roles for that context will be removed.\n \n-```{eval-rst}\n-..  code-block:: python\n-\n-    from plone import api\n-    folder = api.content.create(\n-        container=portal,\n-        type=\'Folder\',\n-        id=\'folder_three\',\n-        title=\'Folder Three\'\n-    )\n-    api.user.grant_roles(\n-        username=\'jane\',\n-        roles=[\'Editor\', \'Contributor\'],\n-        obj=portal[\'folder_three\'],\n-    )\n-    api.user.revoke_roles(\n-        username=\'jane\',\n-        roles=[\'Editor\'],\n-        obj=portal[\'folder_three\'],\n-    )\n-\n-..  ifconfig:: plone_api_doctests\n-..  invisible-code-block: python\n-\n-    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n-    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+```python\n+from plone import api\n+folder = api.content.create(\n+    container=portal,\n+    type=\'Folder\',\n+    id=\'folder_three\',\n+    title=\'Folder Three\'\n+)\n+api.user.grant_roles(\n+    username=\'jane\',\n+    roles=[\'Editor\', \'Contributor\'],\n+    obj=portal[\'folder_three\'],\n+)\n+api.user.revoke_roles(\n+    username=\'jane\',\n+    roles=[\'Editor\'],\n+    obj=portal[\'folder_three\'],\n+)\n ```\n \n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n+% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n+% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+\n ## Further reading\n \n For more information on possible flags and usage options please see the full {ref}`plone-api-user` specification.\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-18T03:12:09-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/cc9a2c28760293c965e4332a45d10649c28d6fd4

Minor grammar and spacing fixes

Files changed:
M docs/contribute/develop.md
M docs/portal.md

b'diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 9ac5cab7..e6709a90 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -119,7 +119,7 @@ This way your work is kept in an isolated place where you can receive feedback o\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n \n ```shell\n-git checkout master  # go to master branch\n+git checkout master       # go to master branch\n git checkout -b issue_17  # create a feature branch\n # replace 17 with the issue number you are working on\n \ndiff --git a/docs/portal.md b/docs/portal.md\nindex a7dbeeb8..4ca0449b 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -27,7 +27,7 @@ portal = api.portal.get()\n \n ## Get navigation root\n \n-In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object, not the top portal object.\n+In multilingual or multi-site Plone installations, you probably want to get the language-specific navigation root object, not the top portal object.\n \n You do this with {meth}`api.portal.get_navigation_root()`.\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-18T03:16:40-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/914be20fc2e4cf05a7794e4fdadaf96977962b8e

Grammar and MyST syntax fixes

Files changed:
M docs/contribute/release.md

b"diff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 158a1d3b..4a41ad9a 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -11,13 +11,13 @@ Releasing a new version of `plone.api` involves the following steps:\n 5. Upload the generated package to Python Package Index (PyPI).\n \n To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n-It's listed as a dependency in `setup.py` and should already be installed in your local bin:\n+It's listed as a dependency in `setup.py` and should already be installed in your local `bin`:\n \n ```shell\n bin/mkrelease --help\n ```\n \n-Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the `~/.pypirc` file, e.g.:\n+Apart from that, to upload a new version to PyPI, you need to be listed under the `Package Index Owner` list, and you need to configure your PyPI credentials in the `~/.pypirc` file, for example:\n \n ```\n [distutils]\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-18T03:23:48-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/2289775a9530d5bd61568755080e58a8a5be9f4b

Add WSL

Files changed:
M docs/contribute/develop.md

b"diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex e6709a90..babc9946 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -7,7 +7,7 @@ Its purpose is to guide them through the steps needed to start contributing.\n \n ```{note}\n This HowTo is written for Linux and OS X users.\n-If you are running Windows, we suggest either using VMWare or a similar virtualization tool to install Ubuntu Linux on a virtual machine, or installing Ubuntu Linux as a secondary operating system on your machine.\n+If you are running Windows, we suggest using either Windows Subsystem for Linux, VMWare or a similar virtualization tool to install Ubuntu Linux on a virtual machine, or installing Ubuntu Linux as a secondary operating system on your machine.\n Alternatively, you can browse Plone's documentation on how to get Plone development environment up and running on Windows.\n Plone does run on Windows, but it's not completely trivial to set it up.\n ```\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-18T03:40:55-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/d47d85012a57e205f6b01a21414e82b6f8c2e1cc

Remove python syntax indicator to avoid getting caught by the test runner

Files changed:
M docs/about.md

b"diff --git a/docs/about.md b/docs/about.md\nindex a321e281..cfeaf3a2 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -129,7 +129,7 @@ This would be extremely difficult, if not impossible.\n It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated.\n Consider the failure lurking behind test code such as this:\n \n-```python\n+```\n if users['bob'].__class__.__name__ == 'WrappedMemberDataObject':\n     # do something\n ```\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-24T17:02:26-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/b47fbeb1b20f3445fc3afc599407d29c8855dbc4

Use prettier directory listing

Files changed:
M docs/content.md

b'diff --git a/docs/content.md b/docs/content.md\nindex 672f6132..54335c82 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -44,14 +44,14 @@ Consider the following portal structure:\n \n ```console\n plone (portal root)\n-|-- blog\n-|-- about\n-|   |-- team\n-|   `-- contact\n-`-- events\n-    |-- training\n-    |-- conference\n-    `-- sprint\n+\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 blog\n+\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 about\n+\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 team\n+\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 contact\n+\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 events\n+    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 training\n+    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 conference\n+    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 sprint\n ```\n \n % invisible-code-block: python\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-24T17:18:16-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/cad4045307f2257bb7498d648195ba2e75a9693b

Reinstate list of API methods in the page content, but not in the toctree

Files changed:
M docs/index.md

b'diff --git a/docs/index.md b/docs/index.md\nindex f55a05a0..d87d5fc5 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -23,6 +23,7 @@ Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n ```\n \n+\n ## Narrative documentation\n \n ```{toctree}\n@@ -37,14 +38,26 @@ env\n relation\n ```\n \n+\n ## Complete API and advanced usage\n \n ```{toctree}\n :maxdepth: 1\n+:hidden:\n \n api/index\n ```\n \n+-   {doc}`api/index`\n+-   [`plone.api.portal`](api/portal)\n+-   [`plone.api.content`](api/content)\n+-   [`plone.api.user`](api/user)\n+-   [`plone.api.group`](api/group)\n+-   [`plone.api.env`](api/env)\n+-   [`plone.api.relation`](api/relation)\n+-   [`plone.api.exceptions`](api/exceptions)\n+\n+\n ## Contribute\n \n ```{toctree}\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-24T23:52:30-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/6faafced57c388b2508c577892fc5fb9c9c032f9

Fix broken link to Python requests library docs

Files changed:
M docs/about.md

b"diff --git a/docs/about.md b/docs/about.md\nindex cfeaf3a2..8576962d 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -23,7 +23,7 @@ Two libraries are especially inspiring:\n [SQLAlchemy](https://www.sqlalchemy.org/)\n : Arguably, the reason for SQLAlchemy's success in the developer community lies as much in its feature set as in the fact that its API is very well-designed, is consistent, explicit, and easy to learn.\n \n-[Requests](https://docs.python-requests.org/en/latest/)\n+[Requests](https://requests.readthedocs.io/en/latest/)\n : If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n   At the very least, we should have the option of being able to write such clean code.\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-25T00:12:12-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/e4f0ac908719dba94bcb0600ec8b0f733838b631

Delete releasing information.
See https://github.com/plone/documentation/issues/1258 for discussion of globabl replacement

Files changed:
M docs/contribute/index.md
D docs/contribute/release.md

b"diff --git a/docs/contribute/index.md b/docs/contribute/index.md\nindex b59f24e1..04338f82 100644\n--- a/docs/contribute/index.md\n+++ b/docs/contribute/index.md\n@@ -13,13 +13,3 @@ Setting up and using the local development environment.\n \n develop\n ```\n-\n-## Releasing a new version\n-\n-Description of our release process and guidelines.\n-\n-```{toctree}\n-:maxdepth: 2\n-\n-release\n-```\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\ndeleted file mode 100644\nindex 4a41ad9a..00000000\n--- a/docs/contribute/release.md\n+++ /dev/null\n@@ -1,75 +0,0 @@\n-(releasing-a-new-version)=\n-\n-# Releasing a new version\n-\n-Releasing a new version of `plone.api` involves the following steps:\n-\n-1. Prepare source for a new release.\n-2. Create a git tag for the release.\n-3. Push the git tag upstream to GitHub.\n-4. Generate a distribution file for the package.\n-5. Upload the generated package to Python Package Index (PyPI).\n-\n-To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n-It's listed as a dependency in `setup.py` and should already be installed in your local `bin`:\n-\n-```shell\n-bin/mkrelease --help\n-```\n-\n-Apart from that, to upload a new version to PyPI, you need to be listed under the `Package Index Owner` list, and you need to configure your PyPI credentials in the `~/.pypirc` file, for example:\n-\n-```\n-[distutils]\n-index-servers =\n-  pypi\n-\n-[pypi]\n-username = fred\n-password = secret\n-```\n-\n-## Checklist\n-\n-Follow these step to create a new release of `plone.api`.\n-\n-1. Verify that we have documented all changes in the `CHANGES.rst` file.\n-   Go through the list of commits since last release on GitHub and check all changes are documented.\n-2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n-3. Confirm that the package description (generated from `README.md` and others) renders correctly by running `bin/longtest` and open its output in your favorite browser.\n-4. Commit all changes to the git repository and push them upstream to GitHub.\n-5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n-\n-## Example\n-\n-In the following example we are releasing version 0.1 of `plone.api`.\n-The package has been prepared so that `setup.py` contains the version `0.1`,\n-this change has been committed to git and all changes have been pushed upstream to GitHub:\n-\n-```shell\n-# Check that package description is rendered correctly\n-bin/longtest\n-\n-# Make a release and upload it to PyPI\n-bin/mkrelease -d pypi -pq ./\n-```\n-```console\n-Releasing plone.api 0.1\n-Tagging plone.api 0.1\n-To git@github.com:plone/plone.api.git\n-* [new tag]         0.1 -> 0.1\n-running egg_info\n-running sdist\n-warning: sdist: standard file not found: should have one of README, README.txt\n-running register\n-Server response (200): OK\n-running upload\n-warning: sdist: standard file not found: should have one of README, README.txt\n-Server response (200): OK\n-done\n-```\n-\n-```{note}\n-Please ignore the sdist warning about README file above.\n-PyPI does not depend on it and it's just a bug in setupools (reported and waiting to be fixed).\n-```\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-05-25T05:31:24-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/bede29c38c1e3d6e778fe5d27d9d29a4634de342

Merge pull request #476 from stevepiercy/docs-6-cleanup

Docs 6 cleanup

Files changed:
A news/476.bugfix
A src/plone/api/tests/doctests/about.md
M docs/about.md
M docs/api/content.md
M docs/api/env.md
M docs/api/exceptions.md
M docs/api/group.md
M docs/api/index.md
M docs/api/portal.md
M docs/api/relation.md
M docs/api/user.md
M docs/content.md
M docs/contribute/develop.md
M docs/contribute/index.md
M docs/group.md
M docs/index.md
M docs/portal.md
M docs/user.md
D docs/contribute/release.md

b'diff --git a/docs/about.md b/docs/about.md\nindex 2aa4b064..8576962d 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -21,11 +21,11 @@ All contributions to `plone.api` should keep these rules in mind.\n Two libraries are especially inspiring:\n \n [SQLAlchemy](https://www.sqlalchemy.org/)\n-: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well designed, is consistent, explicit, and easy to learn.\n+: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well-designed, is consistent, explicit, and easy to learn.\n \n-[Requests](https://docs.python-requests.org/en/latest/)\n+[Requests](https://requests.readthedocs.io/en/latest/)\n : If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n-At the very least, we should have the option of being able to write such clean code.\n+  At the very least, we should have the option of being able to write such clean code.\n \n The API provides grouped functional access to otherwise distributed logic in Plone.\n This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\ndiff --git a/docs/api/content.md b/docs/api/content.md\nindex 730e6b2e..6af55e2a 100644\n--- a/docs/api/content.md\n+++ b/docs/api/content.md\n@@ -1,6 +1,6 @@\n (plone-api-content)=\n \n-# plone.api.content\n+# `plone.api.content`\n \n ```{eval-rst}\n .. automodule:: plone.api.content\ndiff --git a/docs/api/env.md b/docs/api/env.md\nindex 334f8563..bdf3269f 100644\n--- a/docs/api/env.md\n+++ b/docs/api/env.md\n@@ -1,6 +1,6 @@\n (plone-api-env)=\n \n-# plone.api.env\n+# `plone.api.env`\n \n ```{eval-rst}\n .. automodule:: plone.api.env\ndiff --git a/docs/api/exceptions.md b/docs/api/exceptions.md\nindex 7c10736e..9c14a2d5 100644\n--- a/docs/api/exceptions.md\n+++ b/docs/api/exceptions.md\n@@ -1,6 +1,6 @@\n (plone-api-errors)=\n \n-# plone.api.exc\n+# `plone.api.exc`\n \n ```{eval-rst}\n .. automodule:: plone.api.exc\ndiff --git a/docs/api/group.md b/docs/api/group.md\nindex 3e59c6dd..dce12188 100644\n--- a/docs/api/group.md\n+++ b/docs/api/group.md\n@@ -1,6 +1,6 @@\n (plone-api-group)=\n \n-# plone.api.group\n+# `plone.api.group`\n \n ```{eval-rst}\n .. automodule:: plone.api.group\ndiff --git a/docs/api/index.md b/docs/api/index.md\nindex a087fc82..1004dbc9 100644\n--- a/docs/api/index.md\n+++ b/docs/api/index.md\n@@ -2,9 +2,23 @@\n .. currentmodule:: plone\n ```\n \n-# List of all API methods with descriptions\n+# API methods and descriptions\n+\n+```{toctree}\n+:maxdepth: 1\n+:hidden: true\n+\n+portal\n+content\n+user\n+group\n+env\n+relation\n+exceptions\n+```\n+\n \n-## api.portal\n+## `api.portal`\n \n ```{eval-rst}\n .. autosummary::\n@@ -19,7 +33,7 @@\n \n ```\n \n-## api.content\n+## `api.content`\n \n ```{eval-rst}\n .. autosummary::\n@@ -37,7 +51,7 @@\n \n ```\n \n-## api.user\n+## `api.user`\n \n ```{eval-rst}\n .. autosummary::\n@@ -55,7 +69,7 @@\n \n ```\n \n-## api.group\n+## `api.group`\n \n ```{eval-rst}\n .. autosummary::\n@@ -72,7 +86,7 @@\n \n ```\n \n-## api.env\n+## `api.env`\n \n ```{eval-rst}\n .. autosummary::\n@@ -84,7 +98,7 @@\n \n ```\n \n-## api.relation\n+## `api.relation`\n \n ```{eval-rst}\n .. autosummary::\ndiff --git a/docs/api/portal.md b/docs/api/portal.md\nindex cf0c35da..15f9f35b 100644\n--- a/docs/api/portal.md\n+++ b/docs/api/portal.md\n@@ -1,6 +1,6 @@\n (plone-api-portal)=\n \n-# plone.api.portal\n+# `plone.api.portal`\n \n ```{eval-rst}\n .. automodule:: plone.api.portal\ndiff --git a/docs/api/relation.md b/docs/api/relation.md\nindex abce712a..ceb7ad05 100644\n--- a/docs/api/relation.md\n+++ b/docs/api/relation.md\n@@ -1,6 +1,6 @@\n (plone-api-relation)=\n \n-# plone.api.relation\n+# `plone.api.relation`\n \n ```{eval-rst}\n .. automodule:: plone.api.relation\ndiff --git a/docs/api/user.md b/docs/api/user.md\nindex ec14613a..2f4978af 100644\n--- a/docs/api/user.md\n+++ b/docs/api/user.md\n@@ -1,6 +1,6 @@\n (plone-api-user)=\n \n-# plone.api.user\n+# `plone.api.user`\n \n ```{eval-rst}\n .. automodule:: plone.api.user\ndiff --git a/docs/content.md b/docs/content.md\nindex 94d360fe..f819e2f8 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -1,6 +1,5 @@\n ```{eval-rst}\n .. module:: plone\n-    :noindex:\n ```\n \n (chapter-content)=\n@@ -43,16 +42,16 @@ self.assertEqual(obj.id, \'my-content\')\n There are several approaches to getting your content object.\n Consider the following portal structure:\n \n-```\n+```console\n plone (portal root)\n-|-- blog\n-|-- about\n-|   |-- team\n-|   `-- contact\n-`-- events\n-    |-- training\n-    |-- conference\n-    `-- sprint\n+\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 blog\n+\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 about\n+\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 team\n+\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 contact\n+\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 events\n+    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 training\n+    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 conference\n+    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 sprint\n ```\n \n % invisible-code-block: python\n@@ -70,7 +69,7 @@ plone (portal root)\n % api.content.create(container=events, type=\'Event\', id=\'conference\')\n % api.content.create(container=events, type=\'Event\', id=\'sprint\')\n \n-The following operations will get objects from the stucture above, including using {meth}`api.content.get`.\n+The following operations will get objects from the structure above, including using {meth}`api.content.get`.\n \n ```python\n # let\'s first get the portal object\n@@ -498,7 +497,7 @@ view = api.content.get_view(\n % self.assertEqual(view.__name__, \'plone\')\n \n Since version `2.0.0`, the `request` argument can be omitted.\n-In that case the global request will be used.\n+In that case, the global request will be used.\n \n ```python\n from plone import api\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 27ed886d..babc9946 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -5,10 +5,12 @@\n This section is meant for contributors to the `plone.api` project.\n Its purpose is to guide them through the steps needed to start contributing.\n \n-% note ``` This HowTo is written for Linux and OS X users.\n-% If you\'re are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n-% Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n-% Plone does run on Windows but it\'s not completely trivial to set it up.\n+```{note}\n+This HowTo is written for Linux and OS X users.\n+If you are running Windows, we suggest using either Windows Subsystem for Linux, VMWare or a similar virtualization tool to install Ubuntu Linux on a virtual machine, or installing Ubuntu Linux as a secondary operating system on your machine.\n+Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n+Plone does run on Windows, but it\'s not completely trivial to set it up.\n+```\n \n ## Locations of information and tools\n \n@@ -30,12 +32,14 @@ First let\'s look at \'system\' libraries and applications that are normally instal\n - `g++` - The C++ extensions for gcc.\n - `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n - `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 3` - It is recommended to use a virtual environment , i.e. pyenv or venv, to get a clean Python version. \n+- `Python 3` - It is recommended to use a Python virtual environment, using tools such as pyenv or venv, to get a clean Python version.\n \n ### Python tools\n \n tox automation\n-: `tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+: `tox` aims to automate and standardize testing in Python.\n+  It is part of a larger vision of easing the packaging, testing, and release process of Python software.\n+  Install with `pip install tox`.\n \n \n ### Further information\n@@ -71,19 +75,19 @@ Use `git rebase --interactive` to squash all commits that you think are unnecess\n Go to your projects folder and download the lastest `plone.api` code:\n \n ```shell\n-[you@local ~]$ cd <your_work_folder>\n-[you@local work]$ git clone https://github.com/plone/plone.api.git\n+cd <your_work_folder>\n+git clone https://github.com/plone/plone.api.git\n ```\n \n Now `cd` into the newly created directory and build your environment:\n \n ```shell\n-[you@local work]$ cd plone.api\n-[you@local plone.api]$ pip install tox\n-[you@local plone.api]$ tox\n+cd plone.api\n+pip install tox\n+tox\n ```\n \n-Go make some tea while `tox` runs all tasks listed under `tox -l`\n+Go make some tea while `tox` runs all tasks listed under `tox -l`.\n \n - runs all checks and tests\n - generates documentation so you can open it locally later on\n@@ -91,12 +95,13 @@ Go make some tea while `tox` runs all tasks listed under `tox -l`\n Other commands that you may want to run:\n \n ```shell\n-[you@local plone.api]$ tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n-[you@local plone.api]$ tox -e plone6docs   # re-generate documentation\n+tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n+tox -e plone6docs     # re-generate documentation\n ```\n \n-Run `tox -l` to list all tox environments. Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n-And read <https://tox.wiki/en/latest/> to learn more about `tox`.\n+Run `tox -l` to list all tox environments.\n+Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n+Read <https://tox.wiki/en/latest/> to learn more about `tox`.\n \n \n (working-on-an-issue)=\n@@ -114,19 +119,19 @@ This way your work is kept in an isolated place where you can receive feedback o\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n \n ```shell\n-[you@local plone.api]$ git checkout master  # go to master branch\n-[you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n+git checkout master       # go to master branch\n+git checkout -b issue_17  # create a feature branch\n # replace 17 with the issue number you are working on\n \n # change code here\n \n-[you@local plone.api]$ git add -p && git commit  # commit my changes\n-[you@local plone.api]$ git push origin issue_17  # push my branch to GitHub\n-# at this point others can see your changes but they don\'t get effected by\n-them; in other words, others can comment on your code without your code\n-changing their development environments\n+git add -p && git commit  # commit my changes\n+git push origin issue_17  # push my branch to GitHub\n ```\n \n+At this point, others can see your changes, but they don\'t get affected by them.\n+In other words, others can comment on your code without your code changing their development environments.\n+\n Read more about Git branching at <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches> and on our Git workflow at [Working with Git and GitHub](https://docs.plone.org/develop/coredev/docs/git.html).\n \n Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n@@ -175,21 +180,20 @@ GitHub CI is configured in `.github/workflow` in the root of this package.\n Un-documented code is broken code.\n ```\n \n-For every feature you add to the codebase, you should also add documentation for it to `docs/`.\n+For every feature you add to the codebase, you should also add documentation of it to `docs/`.\n \n After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n \n-Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files.\n-So when you push changes to master on GitHub you should soon be able to see them published on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api).\n+Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n \n-Read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html) to brush up on your `MyST` skills.\n+For writing narrative documentation, read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html).\n \n ### Adding a function to an existing module\n \n Example: Add a new function `plone.api.content.foo`.\n \n-The function would go into module `plone.api.content`.\n-So you add your function in `/src/plone/api/content.py`\n+The function would go in the module `plone.api.content`.\n+Therefore you would add your function in `/src/plone/api/content.py`.\n \n % invisible-code-block: python\n %\n@@ -230,17 +234,18 @@ def foo(path=None, UID=None):\n % )\n \n Add documentation in `/docs/content.md`.\n-Describe what your function does and write some tests in code blocks. TestCase methods like `self.assertEqual()` are available in `doctests`.\n+Describe what your function does, and write some tests in code blocks.\n+`TestCase` methods such as `self.assertEqual()` are available in `doctests`.\n See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n-The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in plone.api testing set up.\n-The package `manuel` allows to write doctests as common Python code in code blocks.\n+The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in `plone.api` testing set up.\n+The package `manuel` allows you to write doctests as common Python code in code blocks.\n \n ````markdown\n (content-foo-example)=\n \n ## Get the foo of an object\n \n-You can use the {meth}`api.content.foo` function to get the foo of an object.\n+You can use the {meth}`api.content.foo` function to get the `foo` of an object.\n \n ```python\n from plone import api\n@@ -263,24 +268,23 @@ blog_foo = api.content.foo(path="/plone/blog")\n \n Invisible code blocks are not rendered in documentation and can be used for tests.\n \n-````markdown\n+```markdown\n % invisible-code-block: python\n %\n % self.assertEqual(blog_foo,"foo")\n-````\n+```\n \n Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n \n-````markdown\n+```markdown\n % invisible-code-block: python\n %\n % portal = api.portal.get()\n % image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n % blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-````\n-\n+```\n \n-Function and example in documentation are referenced vice versa.\n+Functions and examples in documentation are mutually referenced.\n The function references the narrative documentation via label `content-foo-example`.\n-The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.  \n-The documentation is rendered with a link from API reference to narrative documentation and a another link back.\n+The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.\n+The documentation is rendered with a link from the API reference to the narrative documentation, which in turn links back to the API reference.\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\nindex f99207a0..04338f82 100644\n--- a/docs/contribute/index.md\n+++ b/docs/contribute/index.md\n@@ -1,4 +1,4 @@\n-# How to contribute to this package?\n+# Contributing to `plone.api`\n \n ## Conventions\n \n@@ -11,15 +11,5 @@ Setting up and using the local development environment.\n ```{toctree}\n :maxdepth: 2\n \n-develop.rst\n-```\n-\n-## Releasing a new version\n-\n-Description of our release process and guidelines.\n-\n-```{toctree}\n-:maxdepth: 2\n-\n-release.rst\n+develop\n ```\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\ndeleted file mode 100644\nindex 4b7a5be9..00000000\n--- a/docs/contribute/release.md\n+++ /dev/null\n@@ -1,73 +0,0 @@\n-(releasing-a-new-version)=\n-\n-# Releasing a new version\n-\n-Releasing a new version of `plone.api` involves the following steps:\n-\n-1. Prepare source for a new release.\n-2. Create a git tag for the release.\n-3. Push the git tag upstream to GitHub.\n-4. Generate a distribution file for the package.\n-5. Upload the generated package to Python Package Index (PyPI).\n-\n-To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n-It\'s listed as a dependency in `setup.py` and should already be installed in your local bin:\n-\n-```shell\n-$ bin/mkrelease --help\n-```\n-\n-Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the `~/.pypirc` file, e.g.:\n-\n-```\n-[distutils]\n-index-servers =\n-  pypi\n-\n-[pypi]\n-username = fred\n-password = secret\n-```\n-\n-## Checklist\n-\n-Follow these step to create a new release of `plone.api`.\n-\n-1. Verify that we have documented all changes in the `CHANGES.rst` file.\n-   Go through the list of commits since last release on GitHub and check all changes are documented.\n-2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n-3. Confirm that the package description (generated from `README.md` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n-4. Commit all changes to the git repository and push them upstream to GitHub.\n-5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n-\n-## Example\n-\n-In the following example we are releasing version 0.1 of `plone.api`.\n-The package has been prepared so that `setup.py` contains the version `0.1`,\n-this change has been committed to git and all changes have been pushed upstream to GitHub:\n-\n-```shell\n-# Check that package description is rendered correctly\n-$ bin/longtest\n-\n-# Make a release and upload it to PyPI\n-$ bin/mkrelease -d pypi -pq ./\n-Releasing plone.api 0.1\n-Tagging plone.api 0.1\n-To git@github.com:plone/plone.api.git\n-* [new tag]         0.1 -> 0.1\n-running egg_info\n-running sdist\n-warning: sdist: standard file not found: should have one of README, README.txt\n-running register\n-Server response (200): OK\n-running upload\n-warning: sdist: standard file not found: should have one of README, README.txt\n-Server response (200): OK\n-done\n-```\n-\n-```{note}\n-Please ignore the sdist warning about README file above.\n-PyPI does not depend on it and it\'s just a bug in setupools (reported and waiting to be fixed).\n-```\ndiff --git a/docs/group.md b/docs/group.md\nindex 24a54458..0da005d0 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -134,9 +134,11 @@ groups = api.group.get_groups(username=\'jane\')\n \n You can also pass the user directly to {meth}`api.group.get_groups`:\n \n-> from plone import api\n-> user = api.user.get(username=\'jane\')\n-> groups = api.group.get_groups(user=user)\n+```python\n+from plone import api\n+user = api.user.get(username=\'jane\')\n+groups = api.group.get_groups(user=user)\n+```\n \n % invisible-code-block: python\n %\ndiff --git a/docs/index.md b/docs/index.md\nindex 81b80d11..d87d5fc5 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -1,9 +1,9 @@\n-# A Plone API\n+# `plone.api`\n \n-> The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n->\n-> It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-> Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n+\n+It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+Recipes try to assume the user does not have extensive knowledge about Plone internals.\n \n The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access.\n As the underlying code improves, some API methods may be deprecated and the documentation\n@@ -23,41 +23,47 @@ Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n ```\n \n+\n ## Narrative documentation\n \n ```{toctree}\n :maxdepth: 2\n \n-about.rst\n-portal.rst\n-content.rst\n-user.rst\n-group.rst\n-env.rst\n-relation.rst\n+about\n+portal\n+content\n+user\n+group\n+env\n+relation\n ```\n \n+\n ## Complete API and advanced usage\n \n ```{toctree}\n :maxdepth: 1\n+:hidden:\n \n-api/index.rst\n-api/portal.rst\n-api/content.rst\n-api/user.rst\n-api/group.rst\n-api/env.rst\n-api/relation.rst\n-api/exceptions.rst\n+api/index\n ```\n \n+-   {doc}`api/index`\n+-   [`plone.api.portal`](api/portal)\n+-   [`plone.api.content`](api/content)\n+-   [`plone.api.user`](api/user)\n+-   [`plone.api.group`](api/group)\n+-   [`plone.api.env`](api/env)\n+-   [`plone.api.relation`](api/relation)\n+-   [`plone.api.exceptions`](api/exceptions)\n+\n+\n ## Contribute\n \n ```{toctree}\n :maxdepth: 2\n \n-contribute/index.rst\n+contribute/index\n ```\n \n ## Indices and tables\ndiff --git a/docs/portal.md b/docs/portal.md\nindex b1e89a20..9da53054 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -27,8 +27,7 @@ portal = api.portal.get()\n \n ## Get navigation root\n \n-In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object,\n-not the top portal object.\n+In multilingual or multi-site Plone installations, you probably want to get the language-specific navigation root object, not the top portal object.\n \n You do this with {meth}`api.portal.get_navigation_root()`.\n \n@@ -62,7 +61,7 @@ nav_root = api.portal.get_navigation_root(english_page)\n %\n % self.assertEqual(nav_root.id, \'en\')\n \n-returns the folder `en`. If the folder `en` is not a navigation root it would return the portal.\n+Returns the folder `en`. If the folder `en` is not a navigation root, it would return the portal.\n \n ## Get portal url\n \n@@ -272,7 +271,7 @@ api.portal.show_message(message=\'Blueberries!\', request=request)\n % self.assertTrue(\'Blueberries!\' in show[0].message)\n \n Since version `2.0.0`, the `request` argument can be omitted.\n-In that case the global request will be used.\n+In that case, the global request will be used.\n \n ```python\n api.portal.show_message(message=\'Cranberries!\')\n@@ -337,9 +336,7 @@ api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n %     \'my text\'\n % )\n \n-It is possible to provide a default value\n-that will be returned by {meth}`api.portal.get_registry_record`\n-if the queried record is not found.\n+It is possible to provide a default value that will be returned by {meth}`api.portal.get_registry_record`, if the queried record is not found.\n \n ```python\n from plone import api\ndiff --git a/docs/user.md b/docs/user.md\nindex 6cb60ff4..b44b59bb 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -53,7 +53,7 @@ user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n % self.assertEqual(user.id, \'jane\')\n % self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n \n-To set user properties when creating a new user, pass in a properties dict.\n+To set user properties when creating a new user, pass in a `properties` dict.\n \n ```python\n properties = dict(\n@@ -72,7 +72,7 @@ user = api.user.create(\n % self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n % self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n \n-Besides user properties you can also specify a password for the new user.\n+Beside user properties, you can also specify a password for the new user.\n Otherwise a random 8-character alphanumeric password will be generated.\n \n ```python\ndiff --git a/news/476.bugfix b/news/476.bugfix\nnew file mode 100644\nindex 00000000..6c31a4be\n--- /dev/null\n+++ b/news/476.bugfix\n@@ -0,0 +1 @@\n+Clean up docs from review of #469 [stevepiercy]\ndiff --git a/src/plone/api/tests/doctests/about.md b/src/plone/api/tests/doctests/about.md\nnew file mode 120000\nindex 00000000..c281d2be\n--- /dev/null\n+++ b/src/plone/api/tests/doctests/about.md\n@@ -0,0 +1 @@\n+../../../../../docs/about.md\n\\ No newline at end of file\n'

