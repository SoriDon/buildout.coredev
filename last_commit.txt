Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2021-04-27T19:47:45+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/676405a304ea7a9df7fc76d78a1a880e85ffec66

Update languageselector.pt Template

use plone 6 icon resolver

Files changed:
M src/plone/app/multilingual/browser/templates/languageselector.pt

b'diff --git a/src/plone/app/multilingual/browser/templates/languageselector.pt b/src/plone/app/multilingual/browser/templates/languageselector.pt\nindex 70a9036ac..a815e56c4 100644\n--- a/src/plone/app/multilingual/browser/templates/languageselector.pt\n+++ b/src/plone/app/multilingual/browser/templates/languageselector.pt\n@@ -1,32 +1,34 @@\n <tal:language tal:condition="view/available">\n-<ul id="portal-languageselector"\n-    tal:define="showFlags view/showFlags;\n+  <ul\n+      id="portal-languageselector"\n+      tal:define="showFlags view/showFlags;\n                 languages view/languages;\n-                portal_url view/portal_url;">\n+                portal_url view/portal_url;\n+                icons python:context.restrictedTraverse(\'@@iconresolver\');">\n     <tal:language repeat="lang languages">\n-    <li tal:define="code lang/code;\n+      <li\n+          tal:define="code lang/code;\n                     selected lang/selected;\n                     codeclass string:language-${code};\n                     current python: selected and \'currentLanguage \' or \'\';"\n-        tal:attributes="class string:${current}${codeclass}">\n-        <a href=""\n-           tal:define="flag lang/flag|nothing;\n+          tal:attributes="class string:${current}${codeclass}">\n+        <a\n+            href=""\n+            tal:define="flag lang/flag|nothing;\n                        name lang/native|lang/name;\n                        showflag python:showFlags and flag;"\n-           tal:attributes="href lang/url;\n-                           title name"\n-            ><tal:flag condition="showflag">\n-                <img width="14"\n-                     height="11"\n-                     alt=""\n-                     tal:attributes="src string:${portal_url}${flag};\n-                                     alt name;\n-                                     title name;" />\n-            </tal:flag\n-            ><tal:nonflag condition="not: showflag"\n-                          replace="name">language name</tal:nonflag\n-        ></a>\n-    </li>\n+            tal:attributes="href lang/url;\n+                           title name">\n+          <tal:flag condition="showflag">\n+            <tal:flag condition="showflag">\n+              <img tal:replace="structure python:icons.tag(flag, tag_class=\'plone-icon-flag\')" />\n+            </tal:flag>\n+          </tal:flag>\n+          <tal:nonflag\n+              condition="not: showflag"\n+              replace="name">language name</tal:nonflag>\n+        </a>\n+      </li>\n     </tal:language>\n-</ul>\n+  </ul>\n </tal:language>\n\\ No newline at end of file\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2021-04-27T19:48:48+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/79bfe17e96f591df00008bbb487d5e9d16e574be

Update Tests

- update Tests
- add new Test for checking svg icons in laguage selector

Files changed:
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex f2b98d540..e3d209bd9 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -25,6 +25,7 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectModifiedEvent\n \n+import lxml\n import six\n import transaction\n import unittest\n@@ -119,7 +120,7 @@ def assertFullyTranslatedPages(self):\n             [\n                 {\n                     \'code\': u\'en\',\n-                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'flag\': u\'countryflag/gb\',\n                     u\'name\': u\'English\',\n                     u\'native\': u\'English\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -134,7 +135,7 @@ def assertFullyTranslatedPages(self):\n                 },\n                 {\n                     \'code\': u\'ca\',\n-                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'flag\': u\'languageflag/ca\',\n                     u\'name\': u\'Catalan\',\n                     u\'native\': u\'Catal\\xe0\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -149,7 +150,7 @@ def assertFullyTranslatedPages(self):\n                 },\n                 {\n                     \'code\': u\'es\',\n-                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'flag\': u\'countryflag/es\',\n                     u\'name\': u\'Spanish\',\n                     u\'native\': u\'Espa\\xf1ol\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -455,7 +456,7 @@ def assertRootFolders(self):\n             [\n                 {\n                     \'code\': u\'en\',\n-                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'flag\': u\'countryflag/gb\',\n                     u\'name\': u\'English\',\n                     u\'native\': u\'English\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -470,7 +471,7 @@ def assertRootFolders(self):\n                 },\n                 {\n                     \'code\': u\'ca\',\n-                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'flag\': u\'languageflag/ca\',\n                     u\'name\': u\'Catalan\',\n                     u\'native\': u\'Catal\\xe0\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -485,7 +486,7 @@ def assertRootFolders(self):\n                 },\n                 {\n                     \'code\': u\'es\',\n-                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'flag\': u\'countryflag/es\',\n                     u\'name\': u\'Spanish\',\n                     u\'native\': u\'Espa\\xf1ol\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -964,7 +965,7 @@ def test_set_language_is_present(self):\n             [\n                 {\n                     \'code\': u\'en\',\n-                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'flag\': u\'countryflag/gb\',\n                     u\'name\': u\'English\',\n                     u\'native\': u\'English\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -979,7 +980,7 @@ def test_set_language_is_present(self):\n                 },\n                 {\n                     \'code\': u\'ca\',\n-                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'flag\': u\'languageflag/ca\',\n                     u\'name\': u\'Catalan\',\n                     u\'native\': u\'Catal\\xe0\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -994,7 +995,7 @@ def test_set_language_is_present(self):\n                 },\n                 {\n                     \'code\': u\'es\',\n-                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'flag\': u\'countryflag/es\',\n                     u\'name\': u\'Spanish\',\n                     u\'native\': u\'Espa\\xf1ol\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -1026,7 +1027,7 @@ def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n             [\n                 {\n                     \'code\': u\'en\',\n-                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'flag\': u\'countryflag/gb\',\n                     u\'name\': u\'English\',\n                     u\'native\': u\'English\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -1041,7 +1042,7 @@ def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n                 },\n                 {\n                     \'code\': u\'ca\',\n-                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'flag\': u\'languageflag/ca\',\n                     u\'name\': u\'Catalan\',\n                     u\'native\': u\'Catal\\xe0\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -1056,7 +1057,7 @@ def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n                 },\n                 {\n                     \'code\': u\'es\',\n-                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'flag\': u\'countryflag/es\',\n                     u\'name\': u\'Spanish\',\n                     u\'native\': u\'Espa\\xf1ol\',\n                     \'url\': SELECTOR_VIEW_TEMPLATE\n@@ -1071,3 +1072,33 @@ def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n                 },\n             ],\n         )\n+\n+\n+class TestLanguageSelectorDisplayOptions(unittest.TestCase):\n+\n+    layer = PAM_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        # Set test variables\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.layer[\'request\']\n+        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+\n+        # Setup testbrowser\n+        self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = False\n+\n+    def test_language_selector_flag_is_a_svg(self):\n+\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        self.settings.display_flags = True\n+        self.settings.always_show_selector = True\n+\n+        transaction.commit()\n+\n+        self.browser.open(self.portal_url)\n+        output = lxml.html.fromstring(self.browser.contents)\n+        svgs = output.xpath(\'//svg[contains(@class, "plone-icon-flag")]\')\n+        self.assertGreater(len(svgs), 0)\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2021-04-27T19:49:05+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/6259d4d89f18b2bee7ae55327f8bafca596fb5cf

Add towncrier message

Files changed:
A news/387.feature

b'diff --git a/news/387.feature b/news/387.feature\nnew file mode 100644\nindex 000000000..59eaed586\n--- /dev/null\n+++ b/news/387.feature\n@@ -0,0 +1,4 @@\n+Use SVG Flags in Language Selector\n+Update Markup in Language Selector\n+Prepare of use the Icon Resolver in Plone 6\n+[1letter]\n\\ No newline at end of file\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2022-05-20T15:52:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/03370fdad658d56b81a48d1863af3b2dcfac3f54

Merge branch 'master' into 1letter/svg-flag-support

Files changed:
A news/401.bugfix
A src/plone/app/multilingual/profiles/upgrades/to_1000/types/LIF.xml
A src/plone/app/multilingual/profiles/upgrades/to_1000/types/LRF.xml
M CHANGES.rst
M README.rst
M bootstrap.py
M docs/conf.py
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/multilingual/__init__.py
M src/plone/app/multilingual/api.py
M src/plone/app/multilingual/browser/add.py
M src/plone/app/multilingual/browser/controlpanel.py
M src/plone/app/multilingual/browser/edit.py
M src/plone/app/multilingual/browser/helper_views.py
M src/plone/app/multilingual/browser/interfaces.py
M src/plone/app/multilingual/browser/menu.py
M src/plone/app/multilingual/browser/migrator.py
M src/plone/app/multilingual/browser/modify.py
M src/plone/app/multilingual/browser/selector.py
M src/plone/app/multilingual/browser/setup.py
M src/plone/app/multilingual/browser/switcher.py
M src/plone/app/multilingual/browser/templates/modify_translations.pt
M src/plone/app/multilingual/browser/translate.py
M src/plone/app/multilingual/browser/update.py
M src/plone/app/multilingual/browser/utils.py
M src/plone/app/multilingual/browser/view.py
M src/plone/app/multilingual/browser/viewlets.py
M src/plone/app/multilingual/browser/vocabularies.py
M src/plone/app/multilingual/content/__init__.py
M src/plone/app/multilingual/content/lif.py
M src/plone/app/multilingual/content/lrf.py
M src/plone/app/multilingual/dx/__init__.py
M src/plone/app/multilingual/dx/cloner.py
M src/plone/app/multilingual/dx/directives.py
M src/plone/app/multilingual/dx/form.py
M src/plone/app/multilingual/dx/interfaces.py
M src/plone/app/multilingual/dx/language.py
M src/plone/app/multilingual/dx/schemaeditor.py
M src/plone/app/multilingual/dx/subscriber.py
M src/plone/app/multilingual/dx/supermodel.py
M src/plone/app/multilingual/events.py
M src/plone/app/multilingual/factory.py
M src/plone/app/multilingual/indexer.py
M src/plone/app/multilingual/interfaces.py
M src/plone/app/multilingual/itg.py
M src/plone/app/multilingual/manager.py
M src/plone/app/multilingual/permissions.py
M src/plone/app/multilingual/profiles/default/metadata.xml
M src/plone/app/multilingual/profiles/default/registry.xml
M src/plone/app/multilingual/profiles/default/types/LIF.xml
M src/plone/app/multilingual/profiles/default/types/LRF.xml
M src/plone/app/multilingual/setuphandlers.py
M src/plone/app/multilingual/shared_uuid.py
M src/plone/app/multilingual/subscriber.py
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/robot/test_add_translation.robot
M src/plone/app/multilingual/tests/test_alternates.py
M src/plone/app/multilingual/tests/test_api.py
M src/plone/app/multilingual/tests/test_catalog.py
M src/plone/app/multilingual/tests/test_directives.py
M src/plone/app/multilingual/tests/test_form.py
M src/plone/app/multilingual/tests/test_helper_views.py
M src/plone/app/multilingual/tests/test_lif.py
M src/plone/app/multilingual/tests/test_lrf.py
M src/plone/app/multilingual/tests/test_menu.py
M src/plone/app/multilingual/tests/test_robot.py
M src/plone/app/multilingual/tests/test_selector.py
M src/plone/app/multilingual/tests/test_setup.py
M src/plone/app/multilingual/tests/test_sitemap.py
M src/plone/app/multilingual/tests/test_subscribers.py
M src/plone/app/multilingual/tests/test_uninstall.py
M src/plone/app/multilingual/tests/test_vocabularies.py
M src/plone/app/multilingual/upgrades.py
M src/plone/app/multilingual/upgrades.zcml
D news/337.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 7e1bc83ca..101279e32 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,141 @@ Changelog\n \n .. towncrier release notes start\n \n+6.0.0a10 (2022-05-15)\n+---------------------\n+\n+Bug fixes:\n+\n+\n+- Make compatible with robotframework 3-5.\n+  [maurits] (#5)\n+\n+\n+6.0.0a9 (2022-04-04)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Connect translations: always set basePath pattern option.\n+  In the supported Plone versions this always works.\n+  [maurits] (#6)\n+\n+\n+6.0.0a8 (2022-02-24)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Fix issue with wrong redirection URL if a language selector viewlet was rendered in a subrequest, like with Mosaic. \n+  [jensens] (397-2)\n+- isort, black, pyupgrade, remove six usages.\n+  [jensens] (#397)\n+\n+\n+6.0.0a7 (2022-01-19)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- In CMFPlone the ILanguage schema was moved to plone.i18n and is referenced as such there, here the change was missing.\n+  [jensens] (#394)\n+\n+\n+6.0.0a6 (2021-12-29)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Fix typos in documentation.  [telshock] (#340)\n+\n+\n+6.0.0a5 (2021-10-16)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Manage Translations view should not call translation objects. [mliebischer] (#384)\n+\n+\n+6.0.0a4 (2021-10-13)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Disable CSRF protection during the setting of TG attribute. [mamico] (#375)\n+\n+\n+6.0.0a3 (2021-09-15)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Remove cyclic dependency with Products.CMFPlone\n+  [ericof] (#391)\n+\n+\n+6.0.0a2 (2021-09-01)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Force view_methods to be a tuple on setup and uninstall (#337)\n+- Fix deleting items with broken relation in languageindependent field\n+  [pbauer] (#390)\n+\n+\n+6.0.0a1 (2021-04-28)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Bootstrapify for barceloneta-lts (#380)\n+\n+      * Init add to own branch\n+\n+      * Add back missing html tag\n+\n+      * Fix double msgs & add full width\n+\n+      * Fix headings\n+\n+      * Init add to own branch\n+\n+      * Add back missing html tag\n+\n+      * Fix headings\n+\n+      * fix test, use string from footer\n+\n+      * fix test, check h1 not documentFirstHeading\n+\n+      * fix test, use contains text\n+\n+      * update icons\n+\n+      * Jquery load is removed with jq3.\n+\n+      * major version bump\n+\n+      Co-authored-by: Peter Holzer <peter.holzer@agitator.com>\n+      Co-authored-by: Peter Mathis <peter.mathis@kombinat.at> (#380)\n+\n+\n+Bug fixes:\n+\n+\n+- Force view_methods to be a tuple on setup and uninstall (#337)\n+\n+\n 5.6.2 (2020-09-26)\n ------------------\n \n@@ -216,6 +351,10 @@ Bug fixes:\n - Fixed tests now that Catalan has translated \xe2\x80\x98assets\xe2\x80\x99 into \xe2\x80\x98recursos\xe2\x80\x99.\n   [maurits]\n \n+- Run addAttributeTG for the site root when installing. This prevents\n+  triggering plone.protect.\n+  [jaroel]\n+\n \n 5.2.0 (2018-04-04)\n ------------------\ndiff --git a/README.rst b/README.rst\nindex eddc7a5ae..fb92fbb9f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -4,13 +4,13 @@\n Introduction\n ============\n \n-In the old days before Plone 4.3, talking about multi-language support in Plone is talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its adoption into the core since Plone 4.3. With Plone 5 released, the transition is completed and Dexterity is shipped as its default content type story.\n+In the old days before Plone 4.3, talking about multi-language support in Plone was talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its adoption into the core since Plone 4.3. With Plone 5 released, the transition is completed and Dexterity is shipped as its default content type story.\n \n-plone.app.multilingual was designed originally to provide Plone a whole multilingual story. Using ZCA technologies, enables translations to Dexterity and Archetypes content types as well managed via an unified UI.\n+plone.app.multilingual was designed originally to add a whole multilingual story to Plone. Using ZCA technologies, it enables translations to Dexterity and Archetypes content types managed via a unified UI.\n \n This module provides the user interface for managing content translations. It\'s the app package of the next generation Plone multilingual engine. It\'s designed to work with Dexterity content types and the *old fashioned* Archetypes based content types as well. It only works with Plone 4.1 and above due to the use of UUIDs for referencing the translations.\n \n-After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries, two major Plone versions finally we are able to say that plone.app.multilingual is finally here.\n+After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries and two major Plone versions we are finally able to say that plone.app.multilingual has arrived.\n \n \n Versions\n@@ -29,7 +29,7 @@ Versions\n Components\n ==========\n \n-PAM is composed of two packages, one is mandatory:\n+PAM is composed of two packages. One is mandatory:\n \n * plone.app.multilingual (core, UI, enables Dexterity support via a behavior)\n \n@@ -67,7 +67,7 @@ These are the most important features PAM provides.\n Root Language folders\n ---------------------\n \n-After the setup, PAM will create root folders for each of your site\'s languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user\'s point of view, each language is "jailed" inside its correspondent language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when user moves or copy content between language folders.\n+After the setup, PAM will create root folders for each of your site\'s languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user\'s point of view, each language is "jailed" inside its corresponding language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when a user moves or copies content between language folders.\n \n \n Babel view\n@@ -79,26 +79,25 @@ An evolution of the LP *translate* view, unified for either Archetypes and Dexte\n Language independent fields\n ---------------------------\n \n-PAM has support for language independent fields, but with a twist respect the LP implementation. As PAM does design does not give more relevance to one translated object above the others siblings (has no canonical object), fields marked as language independent get copied over all the members of the translation group always. The PAM UI will warn you about this behavior by reminding you that the values in the field on the other group participants will be overwritten.\n+PAM has support for language independent fields, but with a twist regarding the LP implementation. As PAM\'s design does not give more relevance to one translated object than to its siblings (has no canonical object), fields marked as language independent are always copied over to all members of the translation group. The PAM UI will remind you about this behavior by warning you that the values in the corresponding field of all members of the translation group will be overwritten.\n \n \n Translation locator policy\n --------------------------\n \n-When translating content, this policy decides how it would be placed in the site\'s structure. There are two policies in place:\n-\n-* LP way, the translation gets placed in the nearest translated folder in parent\'s hierarchy\n+When translating content, the policy influences how the translated content will be placed in the site\'s structure. There are two policies to choose from:\n \n+* LP way, the translation gets placed in the nearest translated folder in the parent\'s hierarchy\n * Ask user where to place the translated element in the destination language root folder\n \n \n Language selector policy\n ------------------------\n \n-While browsing the site, the language selector viewlet allows users to switch site\'s content language and ease access between translations of the current content. There are two policies in place in case the translation of a specific language does not exist (yet):\n+While browsing the site, the language selector viewlet allows users to switch the site\'s content language. There are two policies in place in case the translation of a specific language does not exist (yet):\n \n * LP way, the selector shows the nearest translated container.\n-* Shows the user an informative view that shows the current available translations for the current content.\n+* Shows the user an informative view that shows the currently available translations for the current content.\n \n \n The assets folder - a shared "Language Independent Folder"\ndiff --git a/bootstrap.py b/bootstrap.py\nindex d1c8acb3f..16b8aaafc 100644\n--- a/bootstrap.py\n+++ b/bootstrap.py\n@@ -89,6 +89,7 @@\n     # this will remove them from the path to ensure that incompatible versions\n     # of setuptools are not in the path\n     import site\n+\n     # inside a virtualenv, there is no \'getsitepackages\'.\n     # We can\'t remove these reliably\n     if hasattr(site, \'getsitepackages\'):\ndiff --git a/docs/conf.py b/docs/conf.py\nindex f2e2ac439..349a510da 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.multilingual documentation build configuration file, created by\n # sphinx-quickstart on Mon Sep  3 22:04:18 2012.\n@@ -42,8 +41,8 @@\n master_doc = \'index\'\n \n # General information about the project.\n-project = u\'plone.app.multilingual\'\n-copyright = u\'2013, Plone Foundation\'\n+project = \'plone.app.multilingual\'\n+copyright = \'2013, Plone Foundation\'\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -185,8 +184,8 @@\n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'ploneappmultilingual.tex\', u\'plone.app.multilingual Documentation\',\n-   u\'Plone Foundation\', \'manual\'),\n+  (\'index\', \'ploneappmultilingual.tex\', \'plone.app.multilingual Documentation\',\n+   \'Plone Foundation\', \'manual\'),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n@@ -215,8 +214,8 @@\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'ploneappmultilingual\', u\'plone.app.multilingual Documentation\',\n-     [u\'Plone Foundation\'], 1)\n+    (\'index\', \'ploneappmultilingual\', \'plone.app.multilingual Documentation\',\n+     [\'Plone Foundation\'], 1)\n ]\n \n # If true, show URL addresses after external links.\n@@ -229,8 +228,8 @@\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'index\', \'ploneappmultilingual\', u\'plone.app.multilingual Documentation\',\n-   u\'Plone Foundation\', \'ploneappmultilingual\', \'One line description of project.\',\n+  (\'index\', \'ploneappmultilingual\', \'plone.app.multilingual Documentation\',\n+   \'Plone Foundation\', \'ploneappmultilingual\', \'One line description of project.\',\n    \'Miscellaneous\'),\n ]\n \ndiff --git a/news/337.bugfix b/news/337.bugfix\ndeleted file mode 100644\nindex 59cb544c8..000000000\n--- a/news/337.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Force view_methods to be a tuple on setup and uninstall\ndiff --git a/news/401.bugfix b/news/401.bugfix\nnew file mode 100644\nindex 000000000..77fae5a32\n--- /dev/null\n+++ b/news/401.bugfix\n@@ -0,0 +1,2 @@\n+Add icon expressions to types.\n+[agitator]\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 5a70c0bde..b68c65aee 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,5 +1,5 @@\n [metadata]\n-version = 6.0.0.dev0\n+version = 6.0.0a11.dev0\n name = plone.app.multilingual\n description = Multilingual Plone Content package\n long_description = file: README.rst, CREDITS.rst, CHANGES.rst\n@@ -15,6 +15,7 @@ classifiers=\n     Programming Language :: Python\n     Programming Language :: Python :: 3.7\n     Programming Language :: Python :: 3.8\n+    Programming Language :: Python :: 3.9\n url = https://github.com/plone/plone.app.multilingual\n license = GPL\n keywords = language, multilingual, content\n@@ -33,3 +34,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 0dd19a15f..ea656ad8d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,24 +5,22 @@\n \n setup(\n     # metadata in setup.cfg\n-    packages=find_packages(\'src\'),\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    packages=find_packages("src"),\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'plone.i18n>=4.0.4\',\n-        \'Products.CMFPlone>=5.2rc4\',\n-        \'setuptools\',\n-        \'six\',\n+        "plone.i18n>=4.0.4",\n+        "setuptools",\n     ],\n     extras_require={\n-        \'archetypes\': [\n-            \'archetypes.multilingual\',\n+        "archetypes": [\n+            "archetypes.multilingual",\n         ],\n-        \'test\': [\n-            \'plone.app.testing[robot]\',\n-            \'plone.app.robotframework\',\n+        "test": [\n+            "plone.app.testing[robot]",\n+            "plone.app.robotframework",\n         ],\n     },\n     entry_points="""\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af45..5284146eb 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex 68c04af45..5284146eb 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/app/multilingual/__init__.py b/src/plone/app/multilingual/__init__.py\nindex 98a504cef..88b89399a 100644\n--- a/src/plone/app/multilingual/__init__.py\n+++ b/src/plone/app/multilingual/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory\n \n import logging\n@@ -6,11 +5,11 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'Products.LinguaPlone\')\n+    pkg_resources.get_distribution("Products.LinguaPlone")\n except pkg_resources.DistributionNotFound:\n     isLPinstalled = False\n else:\n     isLPinstalled = True\n \n-logger = logging.getLogger(\'plone.app.multilingual\')\n-_ = MessageFactory(\'plone\')\n+logger = logging.getLogger("plone.app.multilingual")\n+_ = MessageFactory("plone")\ndiff --git a/src/plone/app/multilingual/api.py b/src/plone/app/multilingual/api.py\nindex 028af7e5b..b27eb5b50 100644\n--- a/src/plone/app/multilingual/api.py\n+++ b/src/plone/app/multilingual/api.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.interfaces import ITranslationManager\n@@ -15,7 +14,7 @@ def get_translation_group(content):\n     """\n     tg = ITG(content)\n     if tg is None:\n-        raise ValueError(\'No translation group found.\')\n+        raise ValueError("No translation group found.")\n     return tg\n \n \n@@ -30,11 +29,11 @@ def get_translation_manager(content):\n     """\n     tm = ITranslationManager(content)\n     if tm is None:\n-        raise ValueError(\'No translation manager available for this content.\')\n+        raise ValueError("No translation manager available for this content.")\n     return tm\n \n \n-def translate(content, target_language=\'en\'):\n+def translate(content, target_language="en"):\n     """Translate content into target language.\n \n     :param content: Content to be translated.\ndiff --git a/src/plone/app/multilingual/browser/add.py b/src/plone/app/multilingual/browser/add.py\nindex 03ef47d81..f28d6dfbb 100644\n--- a/src/plone/app/multilingual/browser/add.py\n+++ b/src/plone/app/multilingual/browser/add.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.multilingual.dx.interfaces import IMultilingualAddForm\n from plone.app.multilingual.events import ObjectTranslatedEvent\n@@ -31,9 +30,8 @@\n \n @adapter(IFolderish, Interface)\n @implementer(ITraversable)\n-class AddViewTraverser(object):\n-    """Add view traverser.\n-    """\n+class AddViewTraverser:\n+    """Add view traverser."""\n \n     def __init__(self, context, request):\n         self.context = context\n@@ -43,9 +41,9 @@ def __init__(self, context, request):\n \n     def traverse(self, name, ignored):\n         # Populate translation info\n-        self.info[\'target_language\'] = ILanguage(self.context).get_language()\n+        self.info["target_language"] = ILanguage(self.context).get_language()\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         # Search source object using unrestricted API,\n         # because user may be anonymous during traverse.\n         brains = catalog.unrestrictedSearchResults(UID=name)\n@@ -53,23 +51,22 @@ def traverse(self, name, ignored):\n             raise TraversalError(self.context, name)\n         source = brains[0]._unrestrictedGetObject()\n \n-        self.info[\'source_language\'] = ILanguage(source).get_language()\n-        self.info[\'portal_type\'] = source.portal_type\n-        self.info[\'tg\'] = ITG(source)\n+        self.info["source_language"] = ILanguage(source).get_language()\n+        self.info["portal_type"] = source.portal_type\n+        self.info["tg"] = ITG(source)\n \n         # If source has already been translated to this language, just redirect\n         for brain in catalog.unrestrictedSearchResults(\n-                TranslationGroup=self.info[\'tg\'],\n-                Language=self.info[\'target_language\']):\n+            TranslationGroup=self.info["tg"], Language=self.info["target_language"]\n+        ):\n             self.request.response.redirect(brain.getURL())\n-            return u\'\'\n+            return ""\n \n         # XXX: register this adapter on dx container and a second one for AT\n         if not IDexterityContent.providedBy(source):\n             # we are not on DX content, assume AT\n             baseUrl = self.context.absolute_url()\n-            url = \'%s/@@add_at_translation?type=%s\' % (baseUrl,\n-                                                       source.portal_type)\n+            url = f"{baseUrl}/@@add_at_translation?type={source.portal_type}"\n             return self.request.response.redirect(url)\n \n         # set the self.context to the place where it should be stored\n@@ -77,25 +74,25 @@ def traverse(self, name, ignored):\n             self.context = self.context.__parent__\n \n         # get the type information\n-        ttool = getToolByName(self.context, \'portal_types\')\n-        ti = ttool.getTypeInfo(self.info[\'portal_type\'])\n+        ttool = getToolByName(self.context, "portal_types")\n+        ti = ttool.getTypeInfo(self.info["portal_type"])\n \n         if ti is None:\n-            logger.error(\'No type information found for {0}\'.format(\n-                self.info[\'portal_type\'])\n+            logger.error(\n+                "No type information found for {}".format(self.info["portal_type"])\n             )\n             raise TraversalError(self.context, name)\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                         prefix="plone")\n+        settings = registry.forInterface(\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n \n         if not settings.redirect_babel_view:\n             add_view = None\n         else:\n             add_view = queryMultiAdapter(\n-                (self.context, self.request, ti),\n-                name=\'babel_view\'\n+                (self.context, self.request, ti), name="babel_view"\n             )\n         if add_view is None:\n             add_view = queryMultiAdapter((self.context, self.request, ti))\n@@ -108,8 +105,7 @@ def traverse(self, name, ignored):\n \n @implementer(IMultilingualAddForm)\n class MultilingualAddFormGroup(Group):\n-    """Multilingual marked group\n-    """\n+    """Multilingual marked group"""\n \n \n @implementer(IMultilingualAddForm)\n@@ -120,24 +116,24 @@ class MultilingualAddForm(DefaultAddForm):\n     group_class = MultilingualAddFormGroup\n \n     def portal_url(self):\n-        portal_tool = getToolByName(self.context, \'portal_url\', None)\n+        portal_tool = getToolByName(self.context, "portal_url", None)\n         if portal_tool is not None:\n             return portal_tool()\n         return None\n \n     def render(self):\n-        self.request[\'disable_border\'] = True\n-        self.request[\'disable_plone.leftcolumn\'] = True\n-        self.request[\'disable_plone.rightcolumn\'] = True\n-        self.babel_content = super(MultilingualAddForm, self).render()\n+        self.request["disable_border"] = True\n+        self.request["disable_plone.leftcolumn"] = True\n+        self.request["disable_plone.rightcolumn"] = True\n+        self.babel_content = super().render()\n         return self.babel()\n \n     def add(self, object):\n-        super(MultilingualAddForm, self).add(object)\n+        super().add(object)\n         language = ILanguage(object).get_language()\n         # extract UID from URL to get source object\n         # probably there is a better way to do that!?\n-        parts = self.request.getURL().split(\'++\')\n+        parts = self.request.getURL().split("++")\n         if not parts:\n             return\n         source = uuidToObject(parts[-1])\n@@ -146,8 +142,9 @@ def add(self, object):\n     @property\n     def max_nr_of_buttons(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                         prefix="plone")\n+        settings = registry.forInterface(\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         return settings.buttons_babel_view_up_to_nr_translations\n \n     def _process_language_independent(self, fields, widgets):\n@@ -159,20 +156,19 @@ def _process_language_independent(self, fields, widgets):\n                 # reference their schema by prefixing their fieldname\n                 # with schema.__identifier__ and then a dot as a separator\n                 # See autoform.txt in the autoform package\n-                if \'.\' not in field_key:\n+                if "." not in field_key:\n                     continue\n-                schema_name, field_name = field_key.split(\'.\')\n+                schema_name, field_name = field_key.split(".")\n                 for aschema in self.additionalSchemata:\n-                    if schema_name == aschema.__name__ \\\n-                       and field_name in aschema:\n+                    if schema_name == aschema.__name__ and field_name in aschema:\n                         schema_field = aschema[field_name]\n                         break\n \n             if ILanguageIndependentField.providedBy(schema_field):\n-                widgets[field_key].addClass(\'languageindependent\')\n+                widgets[field_key].addClass("languageindependent")\n \n     def update(self):\n-        super(MultilingualAddForm, self).update()\n+        super().update()\n         # process widgets to be shown as language independent\n         self._process_language_independent(self.fields, self.widgets)\n         for group in self.groups:\ndiff --git a/src/plone/app/multilingual/browser/controlpanel.py b/src/plone/app/multilingual/browser/controlpanel.py\nindex 7f3289e93..c721d59cb 100644\n--- a/src/plone/app/multilingual/browser/controlpanel.py\n+++ b/src/plone/app/multilingual/browser/controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import isLPinstalled\n from plone.app.multilingual.browser.migrator import portal_types_blacklist\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n@@ -6,7 +5,9 @@\n from plone.app.registry.browser import controlpanel\n from plone.app.uuid.utils import uuidToObject\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.controlpanel.browser.language import LanguageControlPanelForm  # noqa\n+from Products.CMFPlone.controlpanel.browser.language import (  # noqa\n+    LanguageControlPanelForm,\n+)\n from Products.CMFPlone.interfaces import ILanguage\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -14,26 +15,27 @@\n from z3c.form import button\n from zc.relation.interfaces import ICatalog as IRelationCatalog\n from zope.component import getUtility\n-from zope.interface.interfaces import ComponentLookupError\n from zope.i18nmessageid import MessageFactory\n+from zope.interface.interfaces import ComponentLookupError\n from zope.schema.interfaces import IVocabularyFactory\n \n import json\n \n \n-_ = MessageFactory(\'plone.app.multilingual\')\n+_ = MessageFactory("plone.app.multilingual")\n \n \n class LanguageControlPanelFormPAM(LanguageControlPanelForm):\n-    """A modified language control panel, allows selecting multiple languages.\n-    """\n+    """A modified language control panel, allows selecting multiple languages."""\n+\n     label = _("Multilingual Settings")\n-    description = _("pam_controlpanel_description",\n-                    default=u"All the configuration of "\n-                            u"a multilingual Plone site")\n+    description = _(\n+        "pam_controlpanel_description",\n+        default="All the configuration of " "a multilingual Plone site",\n+    )\n     schema = IMultiLanguageExtraOptionsSchema\n \n-    @button.buttonAndHandler(_(u"Save"), name=\'save\')\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -41,11 +43,14 @@ def handleSave(self, action):\n             return\n \n         # We need to check if the default language is in available languages\n-        if \'default_language\' in data and \'available_languages\' in data and \\\n-                data[\'default_language\'] not in data[\'available_languages\']:\n+        if (\n+            "default_language" in data\n+            and "available_languages" in data\n+            and data["default_language"] not in data["available_languages"]\n+        ):\n             IStatusMessage(self.request).addStatusMessage(\n-                _(u"Default language not in available languages"),\n-                "error")\n+                _("Default language not in available languages"), "error"\n+            )\n \n             # e = Invalid(_(u"Default language not in available languages"))\n             # raise WidgetActionExecutionError(\'default_language\', e)\n@@ -57,24 +62,24 @@ def handleSave(self, action):\n         output = setupTool.setupSite(self.context)\n         self.status += output\n \n-    @button.buttonAndHandler(_(u"Cancel"), name=\'cancel\')\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Changes canceled."), "info")\n-        self.request.response.redirect("%s/%s" % (\n-            self.context.absolute_url(),\n-            self.control_panel_view))\n+        IStatusMessage(self.request).addStatusMessage(_("Changes canceled."), "info")\n+        self.request.response.redirect(\n+            f"{self.context.absolute_url()}/{self.control_panel_view}"\n+        )\n \n \n class LanguageControlPanel(controlpanel.ControlPanelFormWrapper):\n     form = LanguageControlPanelFormPAM\n-    index = ViewPageTemplateFile(\'templates/controlpanel.pt\')\n+    index = ViewPageTemplateFile("templates/controlpanel.pt")\n     isLPinstalled = isLPinstalled\n \n \n class MigrationView(BrowserView):\n-    """ The view for display the migration information, actions and results """\n-    __call__ = ViewPageTemplateFile(\'templates/migration.pt\')\n+    """The view for display the migration information, actions and results"""\n+\n+    __call__ = ViewPageTemplateFile("templates/migration.pt")\n \n     isLPinstalled = isLPinstalled\n     portal_types_blacklist = portal_types_blacklist\n@@ -86,73 +91,70 @@ class MigrationView(BrowserView):\n \n \n class MigrationViewAfter(BrowserView):\n-    """ The view for display the migration information, actions and results """\n-    __call__ = ViewPageTemplateFile(\'templates/cleanup.pt\')\n+    """The view for display the migration information, actions and results"""\n+\n+    __call__ = ViewPageTemplateFile("templates/cleanup.pt")\n \n     isLPinstalled = isLPinstalled\n \n \n class multilingualMapViewJSON(BrowserView):\n-    """ Helper view to get json translations """\n+    """Helper view to get json translations"""\n \n     def __call__(self):\n-        """ Get the JSON information about based on a nodeId\n-        """\n+        """Get the JSON information about based on a nodeId"""\n \n         # We get the language we are looking for\n-        lang = \'\'\n-        tool = getToolByName(self.context, \'portal_languages\', None)\n-        if \'lang\' in self.request:\n-            lang = self.request[\'lang\']\n+        lang = ""\n+        tool = getToolByName(self.context, "portal_languages", None)\n+        if "lang" in self.request:\n+            lang = self.request["lang"]\n \n-        if lang == \'\':\n+        if lang == "":\n             lang = tool.getDefaultLanguage()\n \n         # We want all or just the missing translations elements\n-        if \'all\' in self.request:\n-            get_all = (self.request[\'all\'] == \'true\')\n+        if "all" in self.request:\n+            get_all = self.request["all"] == "true"\n         else:\n             get_all = True\n \n         # Which is the root nodeId\n-        folder_path = \'\'\n-        if \'nodeId\' in self.request:\n+        folder_path = ""\n+        if "nodeId" in self.request:\n             # We get the used UUID\n-            nodeId = (self.request[\'nodeId\'])\n-            if (nodeId != \'root\'):\n+            nodeId = self.request["nodeId"]\n+            if nodeId != "root":\n                 new_root = uuidToObject(nodeId)\n                 if ILanguage(new_root).get_language() == lang:\n-                    folder_path = \'/\'.join(new_root.getPhysicalPath())\n-        if folder_path == \'\':\n+                    folder_path = "/".join(new_root.getPhysicalPath())\n+        if folder_path == "":\n             # We get the root folder\n-            root = getToolByName(self.context, \'portal_url\')\n+            root = getToolByName(self.context, "portal_url")\n             root = root.getPortalObject()\n-            folder_path = \'/\'.join(root.getPhysicalPath())\n+            folder_path = "/".join(root.getPhysicalPath())\n \n         self.request.response.setHeader(\n-            "Content-type", "application/json; charset=utf-8")\n+            "Content-type", "application/json; charset=utf-8"\n+        )\n \n-        pcatalog = getToolByName(self.context, \'portal_catalog\')\n+        pcatalog = getToolByName(self.context, "portal_catalog")\n         query = {}\n-        query[\'path\'] = {\'query\': folder_path, \'depth\': 1}\n-        query[\'sort_on\'] = "sortable_title"\n-        query[\'sort_order\'] = "ascending"\n-        query[\'Language\'] = lang\n+        query["path"] = {"query": folder_path, "depth": 1}\n+        query["sort_on"] = "sortable_title"\n+        query["sort_order"] = "ascending"\n+        query["Language"] = lang\n         search_results = pcatalog.searchResults(query)\n-        resultat = {\n-            \'id\': \'root\',\n-            \'name\': folder_path,\n-            \'data\': {},\n-            \'children\': []\n-        }\n+        resultat = {"id": "root", "name": folder_path, "data": {}, "children": []}\n         supported_languages = tool.getSupportedLanguages()\n         for sr in search_results:\n             # We want to know the translated and missing elements\n             translations = {}\n-            if \'TranslationGroup\' in sr:\n+            if "TranslationGroup" in sr:\n                 # We look for the brain for each translation\n                 brains = pcatalog.unrestrictedSearchResults(\n-                    TranslationGroup=sr[\'TranslationGroup\'])\n+                    TranslationGroup=sr["TranslationGroup"]\n+                )\n                 languages = {}\n                 for brain in brains:\n                     languages[brain.Language] = brain.UID\n@@ -160,47 +162,53 @@ def __call__(self):\n                     if lang in languages.keys():\n                         translated_obj = uuidToObject(languages[lang])\n                         translations[lang] = {\n-                            \'url\': translated_obj.absolute_url(),\n-                            \'title\': translated_obj.getId(),\n+                            "url": translated_obj.absolute_url(),\n+                            "title": translated_obj.getId(),\n                         }\n                     else:\n-                        url_to_create = sr.getURL() + \\\n-                            "/@@create_translation?form.widgets.language"\\\n+                        url_to_create = (\n+                            sr.getURL() + "/@@create_translation?form.widgets.language"\n                             "=%s&form.buttons.create=1" % lang\n+                        )\n                         translations[lang] = {\n-                            \'url\': url_to_create,\n-                            \'title\': _(u\'Not translated\'),\n+                            "url": url_to_create,\n+                            "title": _("Not translated"),\n                         }\n             if get_all:\n-                resultat[\'children\'].append({\n-                    \'id\': sr[\'UID\'],\n-                    \'name\': sr[\'Title\'],\n-                    \'data\': translations,\n-                    \'children\': [],\n-                })\n+                resultat["children"].append(\n+                    {\n+                        "id": sr["UID"],\n+                        "name": sr["Title"],\n+                        "data": translations,\n+                        "children": [],\n+                    }\n+                )\n             else:\n                 pass\n         return json.dumps(resultat)\n \n \n class multilingualMapView(BrowserView):\n-    """ The view for display the current multilingual map for the site """\n-    __call__ = ViewPageTemplateFile(\'templates/mmap.pt\')\n+    """The view for display the current multilingual map for the site"""\n+\n+    __call__ = ViewPageTemplateFile("templates/mmap.pt")\n \n     def languages(self):\n-        langs = getUtility(IVocabularyFactory,\n-                           name=u"plone.app.multilingual.vocabularies"\n-                                u".AllAvailableLanguageVocabulary")\n-        tool = getToolByName(self.context, \'portal_languages\', None)\n+        langs = getUtility(\n+            IVocabularyFactory,\n+            name="plone.app.multilingual.vocabularies"\n+            ".AllAvailableLanguageVocabulary",\n+        )\n+        tool = getToolByName(self.context, "portal_languages", None)\n         lang = tool.getDefaultLanguage()\n-        return {\'default\': lang, \'languages\': langs(self.context)}\n+        return {"default": lang, "languages": langs(self.context)}\n \n     def canonicals(self):\n-        """ We get all the canonicals and see which translations are\n-            missing """\n+        """We get all the canonicals and see which translations are\n+        missing"""\n         # Get the language\n-        tool = getToolByName(self.context, \'portal_languages\', None)\n-        pcatalog = getToolByName(self.context, \'portal_catalog\', None)\n+        tool = getToolByName(self.context, "portal_languages", None)\n+        pcatalog = getToolByName(self.context, "portal_catalog", None)\n         languages = tool.getSupportedLanguages()\n         num_lang = len(languages)\n         # Get the canonicals\n@@ -212,42 +220,51 @@ def canonicals(self):\n             if not isinstance(brain.TranslationGroup, str):\n                 # is alone, with a Missing.Value\n                 missing_languages = [\n-                    lang for lang in languages if lang != brain.Language]\n-                translations = [{\n-                    \'url\': brain.getURL(),\n-                    \'path\': brain.getPath(),\n-                    \'lang\': brain.Language,\n-                }]\n-                not_full_translations.append({\n-                    \'id\': \'None\',\n-                    \'last_url\': brain.getURL(),\n-                    \'missing\': missing_languages,\n-                    \'translated\': translations,\n-                })\n+                    lang for lang in languages if lang != brain.Language\n+                ]\n+                translations = [\n+                    {\n+                        "url": brain.getURL(),\n+                        "path": brain.getPath(),\n+                        "lang": brain.Language,\n+                    }\n+                ]\n+                not_full_translations.append(\n+                    {\n+                        "id": "None",\n+                        "last_url": brain.getURL(),\n+                        "missing": missing_languages,\n+                        "translated": translations,\n+                    }\n+                )\n             elif isinstance(brain.TranslationGroup, str):\n                 tg = brain.TranslationGroup\n                 brains_tg = pcatalog.searchResults(TranslationGroup=tg)\n-                if len(brains_tg) < num_lang \\\n-                   and tg not in already_added_canonicals:\n+                if len(brains_tg) < num_lang and tg not in already_added_canonicals:\n                     translated_languages = [a.Language for a in brains_tg]\n-                    missing_languages = [lang for lang in languages\n-                                         if lang not in translated_languages]\n+                    missing_languages = [\n+                        lang for lang in languages if lang not in translated_languages\n+                    ]\n                     translations = []\n-                    last_url = \'\'\n+                    last_url = ""\n                     for brain_tg in brains_tg:\n                         last_url = brain_tg.getURL()\n-                        translations.append({\n-                            \'url\': brain_tg.getURL(),\n-                            \'path\': brain_tg.getPath(),\n-                            \'lang\': brain_tg.Language,\n-                        })\n-\n-                    not_full_translations.append({\n-                        \'id\': tg,\n-                        \'last_url\': last_url,\n-                        \'missing\': missing_languages,\n-                        \'translated\': translations,\n-                    })\n+                        translations.append(\n+                            {\n+                                "url": brain_tg.getURL(),\n+                                "path": brain_tg.getPath(),\n+                                "lang": brain_tg.Language,\n+                            }\n+                        )\n+\n+                    not_full_translations.append(\n+                        {\n+                            "id": tg,\n+                            "last_url": last_url,\n+                            "missing": missing_languages,\n+                            "translated": translations,\n+                        }\n+                    )\n                 already_added_canonicals.append(tg)\n         return not_full_translations\n \ndiff --git a/src/plone/app/multilingual/browser/edit.py b/src/plone/app/multilingual/browser/edit.py\nindex 9a11cf986..9488cb25e 100644\n--- a/src/plone/app/multilingual/browser/edit.py\n+++ b/src/plone/app/multilingual/browser/edit.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.multilingual.browser.selector import LanguageSelectorViewlet\n@@ -17,77 +16,82 @@ class MultilingualEditForm(DefaultEditForm):\n     babel = ViewPageTemplateFile("templates/dexterity_edit.pt")\n \n     def languages(self):\n-        """ Deprecated """\n+        """Deprecated"""\n         context = aq_inner(self.context)\n \n         ls = LanguageSelector(context, self.request, None, None)\n         ls.update()\n         results = ls.languages()\n \n-        supported_langs = [v[\'code\'] for v in results]\n-        missing = set([str(c) for c in supported_langs])\n+        supported_langs = [v["code"] for v in results]\n+        missing = {str(c) for c in supported_langs}\n \n         lsv = LanguageSelectorViewlet(context, self.request, None, None)\n         translations = lsv._translations(missing)\n \n         # We want to see the babel_view\n-        append_path = (\'\', \'babel_view\',)\n+        append_path = (\n+            "",\n+            "babel_view",\n+        )\n \n         non_viewable = set()\n         for data in results:\n-            code = str(data[\'code\'])\n-            data[\'translated\'] = code in translations.keys()\n+            code = str(data["code"])\n+            data["translated"] = code in translations.keys()\n \n-            appendtourl = \'/\'.join(append_path)\n+            appendtourl = "/".join(append_path)\n \n-            if data[\'translated\']:\n+            if data["translated"]:\n                 trans, direct, has_view_permission = translations[code]\n                 if not has_view_permission:\n                     # shortcut if the user cannot see the item\n-                    non_viewable.add((data[\'code\']))\n+                    non_viewable.add(data["code"])\n                     continue\n-                data[\'url\'] = trans.absolute_url() + appendtourl\n+                data["url"] = trans.absolute_url() + appendtourl\n             else:\n-                non_viewable.add((data[\'code\']))\n+                non_viewable.add(data["code"])\n \n         # filter out non-viewable items\n-        results = [r for r in results if r[\'code\'] not in non_viewable]\n+        results = [r for r in results if r["code"] not in non_viewable]\n         return results\n \n     def portal_url(self):\n-        portal_tool = getToolByName(self.context, \'portal_url\', None)\n+        portal_tool = getToolByName(self.context, "portal_url", None)\n         if portal_tool is not None:\n             return portal_tool.getPortalObject().absolute_url()\n         return None\n \n     def render(self):\n-        self.request[\'disable_border\'] = True\n-        self.request[\'disable_plone.leftcolumn\'] = True\n-        self.request[\'disable_plone.rightcolumn\'] = True\n+        self.request["disable_border"] = True\n+        self.request["disable_plone.leftcolumn"] = True\n+        self.request["disable_plone.rightcolumn"] = True\n \n         for field in self.fields.keys():\n             if field in self.schema:\n                 if ILanguageIndependentField.providedBy(self.schema[field]):\n-                    self.widgets[field].addClass(\'languageindependent\')\n+                    self.widgets[field].addClass("languageindependent")\n             # With plone.autoform, fieldnames from additional schematas\n             # reference their schema by prefixing their fieldname\n             # with schema.__identifier__ and then a dot as a separator\n             # See autoform.txt in the autoform package\n-            if \'.\' in field:\n-                schemaname, fieldname = field.split(\'.\')\n+            if "." in field:\n+                schemaname, fieldname = field.split(".")\n                 for schema in self.additionalSchemata:\n-                    if schemaname == schema.__identifier__ \\\n-                       and fieldname in schema:\n-                        if ILanguageIndependentField.providedBy(schema[fieldname]):  # noqa\n-                            self.widgets[field].addClass(\'languageindependent\')\n-        self.babel_content = super(MultilingualEditForm, self).render()\n+                    if schemaname == schema.__identifier__ and fieldname in schema:\n+                        if ILanguageIndependentField.providedBy(\n+                            schema[fieldname]\n+                        ):  # noqa\n+                            self.widgets[field].addClass("languageindependent")\n+        self.babel_content = super().render()\n         return self.babel()\n \n     @property\n     def max_nr_of_buttons(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                         prefix="plone")\n+        settings = registry.forInterface(\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         return settings.buttons_babel_view_up_to_nr_translations\n \n \ndiff --git a/src/plone/app/multilingual/browser/helper_views.py b/src/plone/app/multilingual/browser/helper_views.py\nindex a1e75bb17..93ec84218 100644\n--- a/src/plone/app/multilingual/browser/helper_views.py\n+++ b/src/plone/app/multilingual/browser/helper_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_chain\n from borg.localrole.interfaces import IFactoryTempFolder\n@@ -41,12 +40,12 @@ class IFactoryTool(Interface):\n \n @implementer(IPublishTraverse)\n class universal_link(BrowserView):\n-    """ Redirects the user to the negotiated translated page\n-        based on the user preferences in the user\'s browser.\n+    """Redirects the user to the negotiated translated page\n+    based on the user preferences in the user\'s browser.\n     """\n \n     def __init__(self, context, request):\n-        super(universal_link, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.tg = None\n         self.lang = None\n \n@@ -65,41 +64,43 @@ def getDestination(self):\n         # Look for the element\n         url = None\n         # We check if it\'s shared content\n-        query = {\'TranslationGroup\': self.tg}\n-        ptool = getToolByName(self.context, \'portal_catalog\')\n+        query = {"TranslationGroup": self.tg}\n+        ptool = getToolByName(self.context, "portal_catalog")\n         brains = ptool.searchResults(query)\n         is_shared = False\n         for brain in brains:\n-            if \'-\' in brain.UID:\n+            if "-" in brain.UID:\n                 is_shared = True\n                 brain_to_use = brain\n                 break\n         if is_shared:\n-            target_uid = brain_to_use.UID.split(\'-\')[0]\n+            target_uid = brain_to_use.UID.split("-")[0]\n             if self.lang:\n-                target_uid += \'-\' + self.lang\n+                target_uid += "-" + self.lang\n             else:\n                 # The negotiated language\n-                language = getMultiAdapter((self.context, self.request),\n-                                           INegotiateLanguage).language\n-                target_uid += \'-\' + language\n+                language = getMultiAdapter(\n+                    (self.context, self.request), INegotiateLanguage\n+                ).language\n+                target_uid += "-" + language\n             results = ptool.searchResults(UID=target_uid)\n             if len(results) > 0:\n                 url = results[0].getURL()\n             return url\n         # Normal content\n-        query = {\'TranslationGroup\': self.tg}\n+        query = {"TranslationGroup": self.tg}\n         if self.lang:\n-            query = {\'TranslationGroup\': self.tg, \'Language\': self.lang}\n+            query = {"TranslationGroup": self.tg, "Language": self.lang}\n         else:\n             # The negotiated language\n-            language = getMultiAdapter((self.context, self.request),\n-                                       INegotiateLanguage).language\n-            query = {\'TranslationGroup\': self.tg, \'Language\': language}\n+            language = getMultiAdapter(\n+                (self.context, self.request), INegotiateLanguage\n+            ).language\n+            query = {"TranslationGroup": self.tg, "Language": language}\n \n         # Comparison to plone/app/multilingual/browser/setup.py#L129\n-        if query.get(\'Language\') == \'id-id\':\n-            query[\'Language\'] = \'id\'\n+        if query.get("Language") == "id-id":\n+            query["Language"] = "id"\n \n         results = ptool.searchResults(query)\n         if len(results) > 0:\n@@ -109,13 +110,12 @@ def getDestination(self):\n     def __call__(self):\n         url = self.getDestination()\n         if not url:\n-            root = getToolByName(self.context, \'portal_url\')\n+            root = getToolByName(self.context, "portal_url")\n             url = root()\n         self.request.RESPONSE.redirect(url)\n \n \n class selector_view(universal_link):\n-\n     def getDialogDestination(self):\n         """Get the "not translated yet" dialog URL.\n         It\'s located on the root and shows the translated objects of that TG\n@@ -127,8 +127,8 @@ def getDialogDestination(self):\n         # And since we are mapping the root on itself,\n         # we also do postpath insertion (@@search case)\n \n-        root = getToolByName(self.context, \'portal_url\')\n-        url = root() + dialog_view + \'/\' + self.tg\n+        root = getToolByName(self.context, "portal_url")\n+        url = root() + dialog_view + "/" + self.tg\n         return self.wrapDestination(url, postpath=postpath)\n \n     def getParentChain(self, context):\n@@ -136,8 +136,7 @@ def getParentChain(self, context):\n         return aq_chain(context)\n \n     def getClosestDestination(self):\n-        """Get the "closest translated object" URL.\n-        """\n+        """Get the "closest translated object" URL."""\n         # We should travel the parent chain using the catalog here,\n         # but I think using the acquisition chain is faster\n         # (or well, __parent__ pointers) because the catalog\n@@ -149,8 +148,8 @@ def getClosestDestination(self):\n         # for the best option\n \n         site = getSite()\n-        root = getToolByName(site, \'portal_url\')\n-        ltool = getToolByName(site, \'portal_languages\')\n+        root = getToolByName(site, "portal_url")\n+        ltool = getToolByName(site, "portal_languages")\n \n         # We are using TranslationManager to get the translations of a\n         # string tg\n@@ -175,15 +174,13 @@ def getClosestDestination(self):\n         checkPermission = getSecurityManager().checkPermission\n         chain = self.getParentChain(context)\n         for item in chain:\n-            if ISiteRoot.providedBy(item) \\\n-               and not ILanguageRootFolder.providedBy(item):\n+            if ISiteRoot.providedBy(item) and not ILanguageRootFolder.providedBy(item):\n                 # We do not care to get a permission error\n                 # if the whole of the portal cannot be viewed.\n                 # Having a permission issue on the root is fine;\n                 # not so much for everything else so that is checked there\n                 return self.wrapDestination(item.absolute_url())\n-            elif IFactoryTempFolder.providedBy(item) or \\\n-                    IFactoryTool.providedBy(item):\n+            elif IFactoryTempFolder.providedBy(item) or IFactoryTool.providedBy(item):\n                 # TempFolder or portal_factory, can\'t have a translation\n                 continue\n             try:\n@@ -198,13 +195,12 @@ def getClosestDestination(self):\n                     raise\n             translation = canonical.get_translation(self.lang)\n             if translation and (\n-                INavigationRoot.providedBy(translation) or\n-                bool(checkPermission(\'View\', translation))\n+                INavigationRoot.providedBy(translation)\n+                or bool(checkPermission("View", translation))\n             ):\n                 # Not a direct translation, therefore no postpath\n                 # (the view might not exist on a different context)\n-                return self.wrapDestination(translation.absolute_url(),\n-                                            postpath=False)\n+                return self.wrapDestination(translation.absolute_url(), postpath=False)\n         # Site root\'s the fallback\n         return self.wrapDestination(root(), postpath=False)\n \n@@ -213,12 +209,8 @@ def wrapDestination(self, url, postpath=True):\n         and the eventual append path.\n         """\n         if postpath:\n-            url += self.request.form.get(\'post_path\', \'\')\n-        return addQuery(\n-            self.request,\n-            url,\n-            exclude=(\'post_path\')\n-        )\n+            url += self.request.form.get("post_path", "")\n+        return addQuery(self.request, url, exclude=("post_path"))\n \n     def __call__(self):\n         url = self.getDestination()\n@@ -227,9 +219,10 @@ def __call__(self):\n             url = self.wrapDestination(url)\n         else:\n             registry = getUtility(IRegistry)\n-            policies = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                             prefix="plone")\n-            if policies.selector_lookup_translations_policy == \'closest\':\n+            policies = registry.forInterface(\n+                IMultiLanguageExtraOptionsSchema, prefix="plone"\n+            )\n+            if policies.selector_lookup_translations_policy == "closest":\n                 url = self.getClosestDestination()\n             else:\n                 url = self.getDialogDestination()\n@@ -240,13 +233,14 @@ def __call__(self):\n \n @implementer(IPublishTraverse)\n class not_translated_yet(BrowserView):\n-    """ View to inform user that the view requested is not translated yet,\n-        and shows the already translated related content.\n+    """View to inform user that the view requested is not translated yet,\n+    and shows the already translated related content.\n     """\n-    __call__ = ViewPageTemplateFile(\'templates/not_translated_yet.pt\')\n+\n+    __call__ = ViewPageTemplateFile("templates/not_translated_yet.pt")\n \n     def __init__(self, context, request):\n-        super(not_translated_yet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.tg = None\n \n     def publishTraverse(self, request, name):\n@@ -271,9 +265,9 @@ def has_any_translation(self):\n             return 0\n \n     def language_name(self, lang=None):\n-        """ Get the current language native name """\n+        """Get the current language native name"""\n         if lang is None:\n-            lang_code = self.request.get(\'set_language\')\n+            lang_code = self.request.get("set_language")\n         else:\n             lang_code = lang\n         util = getUtility(IContentLanguageAvailability)\n@@ -281,12 +275,11 @@ def language_name(self, lang=None):\n         lang_info = data.get(lang_code)\n         if lang_info is None:\n             return None\n-        return lang_info.get(\'native\', None) or lang_info.get(\'name\')\n+        return lang_info.get("native", None) or lang_info.get("name")\n \n \n class TGView(BrowserView):\n-    """A simple browser view that renders the TG of its context\n-    """\n+    """A simple browser view that renders the TG of its context"""\n \n     def __call__(self):\n-        return str(ITG(self.context, u""))\n+        return str(ITG(self.context, ""))\ndiff --git a/src/plone/app/multilingual/browser/interfaces.py b/src/plone/app/multilingual/browser/interfaces.py\nindex 28b35c7a2..3f5391ea3 100644\n--- a/src/plone/app/multilingual/browser/interfaces.py\n+++ b/src/plone/app/multilingual/browser/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from plone.app.multilingual import _\n from plone.app.multilingual.browser.vocabularies import untranslated_languages\n@@ -16,42 +15,30 @@\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n \n-import pkg_resources\n-\n-\n-HAS_MOCKUP_240 = False\n-try:\n-    pkg_mockup = pkg_resources.get_distribution(\'mockup\')\n-    HAS_MOCKUP_240 = pkg_mockup.parsed_version >= pkg_resources.parse_version(\'2.4.0\')  # noqa\n-except pkg_resources.DistributionNotFound:\n-    pass\n-\n \n def make_relation_root_path(context):\n     ctx = getSite()\n     if not IPloneSiteRoot.providedBy(ctx):\n         ctx = aq_parent(ctx)\n-    return u\'/\'.join(ctx.getPhysicalPath())\n+    return "/".join(ctx.getPhysicalPath())\n \n \n class IMultilingualLayer(interface.Interface):\n-    """ browser layer """\n+    """browser layer"""\n \n \n class ITranslateSubMenuItem(IBrowserSubMenuItem):\n-    """The menu item linking to the translate menu.\n-    """\n+    """The menu item linking to the translate menu."""\n \n \n class ITranslateMenu(IBrowserMenu):\n-    """The translate menu.\n-    """\n+    """The translate menu."""\n \n \n class ICreateTranslation(interface.Interface):\n \n     language = schema.Choice(\n-        title=_(u"title_language", default=u"Language"),\n+        title=_("title_language", default="Language"),\n         source=untranslated_languages,\n     )\n \n@@ -59,10 +46,10 @@ class ICreateTranslation(interface.Interface):\n class IUpdateLanguage(interface.Interface):\n \n     language = schema.Choice(\n-        title=_(u"title_available_languages", default=u"Available languages"),\n+        title=_("title_available_languages", default="Available languages"),\n         description=_(\n-            u"description_update_language",\n-            default=u"Untranslated languages from the current content"\n+            "description_update_language",\n+            default="Untranslated languages from the current content",\n         ),\n         source=untranslated_languages,\n         required=True,\n@@ -71,31 +58,29 @@ class IUpdateLanguage(interface.Interface):\n \n @provider(IContextAwareDefaultFactory)\n def request_language(context):\n-    return context.REQUEST.form.get(\'language\')\n+    return context.REQUEST.form.get("language")\n \n \n class IConnectTranslation(model.Schema):\n \n     language = schema.Choice(\n-        title=_(u"title_language", default=u"Language"),\n+        title=_("title_language", default="Language"),\n         source=untranslated_languages,\n         defaultFactory=request_language,\n         required=True,\n     )\n     content = RelationChoice(\n-        title=_(u"content"),\n+        title=_("content"),\n         vocabulary="plone.app.multilingual.RootCatalog",\n         required=True,\n     )\n-\n-    if HAS_MOCKUP_240:\n-        directives.widget(\n-            \'content\',\n-            RelatedItemsFieldWidget,\n-            pattern_options={\n-                \'basePath\': make_relation_root_path,\n-            }\n-        )\n+    directives.widget(\n+        \'content\',\n+        RelatedItemsFieldWidget,\n+        pattern_options={\n+            \'basePath\': make_relation_root_path,\n+        }\n+    )\n \n \n interface.alsoProvides(IUpdateLanguage, IFormFieldProvider)\ndiff --git a/src/plone/app/multilingual/browser/menu.py b/src/plone/app/multilingual/browser/menu.py\nindex 958cc95d9..24c15191a 100644\n--- a/src/plone/app/multilingual/browser/menu.py\n+++ b/src/plone/app/multilingual/browser/menu.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_parent\n from plone.app.multilingual import _\n@@ -31,10 +30,8 @@\n \n @implementer(ITranslateMenu)\n class TranslateMenu(BrowserMenu):\n-\n     def getMenuItems(self, context, request):\n-        """Return menu item entries in a TAL-friendly form.\n-        """\n+        """Return menu item entries in a TAL-friendly form."""\n         # Settings\n         site_url = getSite().absolute_url()\n         language_tool = getToolByName(context, "portal_languages")\n@@ -45,25 +42,26 @@ def getMenuItems(self, context, request):\n             lang_names = {}\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                         prefix="plone")\n+        settings = registry.forInterface(\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         if settings.redirect_babel_view:\n-            translation_view = \'babel_edit\'\n+            translation_view = "babel_edit"\n         else:\n-            translation_view = \'edit\'\n+            translation_view = "edit"\n \n         # Content\n         content = context\n         content_url = context.absolute_url()\n         content_language = ILanguage(content).get_language()\n         content_translatable = not (\n-            content_language == LANGUAGE_INDEPENDENT or\n-            is_language_independent(content) or\n-            ILanguageRootFolder.providedBy(content)\n+            content_language == LANGUAGE_INDEPENDENT\n+            or is_language_independent(content)\n+            or ILanguageRootFolder.providedBy(content)\n         )\n         content_translated = translated_languages(content)\n         content_untranslated = untranslated_languages(content)\n-        content_translation_group = ITG(content, \'\')\n+        content_translation_group = ITG(content, "")\n         if not ITranslatable.providedBy(content):\n             content = None\n \n@@ -75,29 +73,30 @@ def getMenuItems(self, context, request):\n             folder_url = folder.absolute_url()\n             folder_language = ILanguage(folder).get_language()\n             folder_translatable = not (\n-                folder_language == LANGUAGE_INDEPENDENT or\n-                is_language_independent(folder) or\n-                ILanguageRootFolder.providedBy(folder)\n+                folder_language == LANGUAGE_INDEPENDENT\n+                or is_language_independent(folder)\n+                or ILanguageRootFolder.providedBy(folder)\n             )\n             folder_translated = translated_languages(folder)\n             folder_untranslated = untranslated_languages(folder)\n-            folder_translation_group = ITG(folder, \'\')\n+            folder_translation_group = ITG(folder, "")\n         else:\n-            folder_url = \'\'\n-            folder_language = \'\'\n+            folder_url = ""\n+            folder_language = ""\n             folder_translatable = False\n             folder_translated = []\n             folder_untranslated = []\n-            folder_translation_group = \'\'\n+            folder_translation_group = ""\n \n         # Assets folder\n         assets_folder_url = None\n         assets_folder_title = None\n-        pc = getToolByName(getSite(), \'portal_catalog\')\n+        pc = getToolByName(getSite(), "portal_catalog")\n         results = pc.unrestrictedSearchResults(\n-            portal_type=\'LIF\', Language=ILanguage(context).get_language())\n+            portal_type="LIF", Language=ILanguage(context).get_language()\n+        )\n         for brain in results:\n-            assets_folder_url = brain.getURL() + \'/folder_contents\'\n+            assets_folder_url = brain.getURL() + "/folder_contents"\n             assets_folder_title = safe_unicode(brain.Title)\n             break\n \n@@ -109,78 +108,86 @@ def getMenuItems(self, context, request):\n         if folder_translatable:\n             # Folder translation view\n             lang_name = lang_names.get(folder_language, folder_language)\n-            results_folder.append({\n-                "title": _(\n-                    u\'edit_translation\',\n-                    default=u"Edit ${lang_name}",\n-                    mapping={"lang_name": lang_name}\n-                ),\n-                "description": _(\n-                    u"description_babeledit_menu",\n-                    default=u"Edit {lang_name} with the two-column translation view",  # noqa\n-                    mapping={"lang_name": lang_name}\n-                ),\n-                "action": folder_url + "/" + translation_view,\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_edit_folder_babel_edit",\n-                    "separator": None,\n-                    "class": "",\n-                },\n-                "submenu": None,\n-            })\n-\n-        if folder and folder_untranslated and False:  # disabled in favor of cut & paste  # noqa\n-            # Set folder language\n-            results_folder.append({\n-                "title": _(\n-                    u\'title_set_language\',\n-                    default=u"Change content language"\n-                ),\n-                "description": _(\n-                    u"description_set_language",\n-                    default=u"Move the translation under another language folder"  # noqa\n-                ),\n-                "action": folder_url + "/update_language",\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_set_folder_language",\n-                    "separator": None,\n-                    "class": ""\n-                },\n-                "submenu": None,\n-            })\n-\n-        if folder_translatable:\n-            for idx, lang in enumerate(folder_untranslated):\n-                lang_name = lang_names.get(lang.value, lang.title)\n-                lang_id = lang.value\n-                icon = show_flags and language_tool.getFlagForLanguageCode(lang_id) or None  # noqa\n-                results_folder.append({\n+            results_folder.append(\n+                {\n                     "title": _(\n-                        u\'create_translation\',\n-                        default=u"Create ${lang_name}",\n-                        mapping={"lang_name": lang_name}\n+                        "edit_translation",\n+                        default="Edit ${lang_name}",\n+                        mapping={"lang_name": lang_name},\n                     ),\n                     "description": _(\n-                        u"description_translate_into",\n-                        default=u"Translate into ${lang_name}",\n-                        mapping={"lang_name": lang_name}\n+                        "description_babeledit_menu",\n+                        default="Edit {lang_name} with the two-column translation view",  # noqa\n+                        mapping={"lang_name": lang_name},\n+                    ),\n+                    "action": folder_url + "/" + translation_view,\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_edit_folder_babel_edit",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n+\n+        if (\n+            folder and folder_untranslated and False\n+        ):  # disabled in favor of cut & paste  # noqa\n+            # Set folder language\n+            results_folder.append(\n+                {\n+                    "title": _("title_set_language", default="Change content language"),\n+                    "description": _(\n+                        "description_set_language",\n+                        default="Move the translation under another language folder",  # noqa\n                     ),\n-                    "action": "%s/@@create_translation?language=%s" % (\n-                        folder_url, lang_id),\n+                    "action": folder_url + "/update_language",\n                     "selected": False,\n-                    "icon": icon,\n-                    "width": "14",\n-                    "height": "11",\n-                    "extra": {"id": "translate_folder_into_%s" % lang_id,\n-                              "separator": None,\n-                              "class": "contentmenuflags"},\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_set_folder_language",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n                     "submenu": None,\n+                }\n+            )\n \n-                })\n+        if folder_translatable:\n+            for idx, lang in enumerate(folder_untranslated):\n+                lang_name = lang_names.get(lang.value, lang.title)\n+                lang_id = lang.value\n+                icon = (\n+                    show_flags and language_tool.getFlagForLanguageCode(lang_id) or None\n+                )  # noqa\n+                results_folder.append(\n+                    {\n+                        "title": _(\n+                            "create_translation",\n+                            default="Create ${lang_name}",\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "description": _(\n+                            "description_translate_into",\n+                            default="Translate into ${lang_name}",\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "action": "%s/@@create_translation?language=%s"\n+                        % (folder_url, lang_id),\n+                        "selected": False,\n+                        "icon": icon,\n+                        "width": "14",\n+                        "height": "11",\n+                        "extra": {\n+                            "id": "translate_folder_into_%s" % lang_id,\n+                            "separator": None,\n+                            "class": "contentmenuflags",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n             urls = translated_urls(folder)\n             for lang in folder_translated:\n                 if lang.value not in urls.by_token:\n@@ -188,166 +195,178 @@ def getMenuItems(self, context, request):\n                     continue\n                 lang_name = lang_names.get(lang.value, lang.title)\n                 lang_id = lang.value\n-                icon = show_flags and language_tool.getFlagForLanguageCode(lang_id) or None  # noqa\n-                results_folder.append({\n+                icon = (\n+                    show_flags and language_tool.getFlagForLanguageCode(lang_id) or None\n+                )  # noqa\n+                results_folder.append(\n+                    {\n+                        "title": _(\n+                            "edit_translation",\n+                            default="Edit ${lang_name}",\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "description": _(\n+                            "description_babeledit_menu",\n+                            default="Edit {lang_name} with the two-column translation view",  # noqa\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "action": (\n+                            urls.getTerm(lang_id).title + "/" + translation_view\n+                        ),\n+                        "selected": False,\n+                        "icon": icon,\n+                        "width": "14",\n+                        "height": "11",\n+                        "extra": {\n+                            "id": "babel_edit_%s" % lang_id,\n+                            "separator": None,\n+                            "class": "contentmenuflags",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n+            # Manage folder translations\n+            results_folder.append(\n+                {\n                     "title": _(\n-                        u\'edit_translation\',\n-                        default=u"Edit ${lang_name}",\n-                        mapping={"lang_name": lang_name}\n+                        "title_modify_translations", default="Manage translations"\n                     ),\n                     "description": _(\n-                        u"description_babeledit_menu",\n-                        default=u"Edit {lang_name} with the two-column translation view",  # noqa\n-                        mapping={"lang_name": lang_name}\n+                        "description_modify_translations",\n+                        default="Add or delete translations",\n                     ),\n-                    "action": (urls.getTerm(lang_id).title + "/" +\n-                               translation_view),\n+                    "action": folder_url + "/modify_translations",\n                     "selected": False,\n-                    "icon": icon,\n-                    "width": "14",\n-                    "height": "11",\n-                    "extra": {"id": "babel_edit_%s" % lang_id,\n-                              "separator": None,\n-                              "class": "contentmenuflags"},\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_modify_folder_translations",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n                     "submenu": None,\n-                })\n-            # Manage folder translations\n-            results_folder.append({\n-                "title": _(\n-                    u"title_modify_translations",\n-                    default=u"Manage translations"\n-                ),\n-                "description": _(\n-                    u"description_modify_translations",\n-                    default=u"Add or delete translations"\n-                ),\n-                "action": folder_url + "/modify_translations",\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_modify_folder_translations",\n-                    "separator": None,\n-                    "class": ""\n-                },\n-                "submenu": None,\n-            })\n+                }\n+            )\n             # Universal link\n             if folder_translation_group:\n-                results_folder.append({\n+                results_folder.append(\n+                    {\n+                        "title": _("universal_link", default="Universal link"),\n+                        "description": _(\n+                            "description_universal_link",\n+                            default="Universal link to the content in user\'s preferred language",  # noqa\n+                        ),\n+                        "action": "%s/@@multilingual-universal-link/%s"\n+                        % (site_url, folder_translation_group),\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "_universal_folder_link",\n+                            "separator": None,\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n+\n+        if results_folder:\n+            # Folder translation separator\n+            results.append(\n+                {\n                     "title": _(\n-                        u"universal_link",\n-                        default=u"Universal link"\n-                    ),\n-                    "description": _(\n-                        u"description_universal_link",\n-                        default=u"Universal link to the content in user\'s preferred language"  # noqa\n+                        "title_translate_current_folder", default="Folder translation"\n                     ),\n-                    "action": "%s/@@multilingual-universal-link/%s" % (\n-                        site_url, folder_translation_group),\n+                    "description": "",\n+                    "action": None,\n                     "selected": False,\n                     "icon": None,\n                     "extra": {\n-                        "id": "_universal_folder_link",\n-                        "separator": None,\n-                        "class": ""\n+                        "id": "translateFolderHeader",\n+                        "separator": "actionSeparator",\n+                        "class": "plone-toolbar-submenu-header",\n                     },\n                     "submenu": None,\n-                })\n-\n-        if results_folder:\n-            # Folder translation separator\n-            results.append({\n-                \'title\': _(\n-                    u\'title_translate_current_folder\',\n-                    default=u\'Folder translation\'\n-                ),\n-                \'description\': \'\',\n-                \'action\': None,\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\'id\': \'translateFolderHeader\',\n-                          \'separator\': \'actionSeparator\',\n-                          \'class\': \'plone-toolbar-submenu-header\'},\n-                \'submenu\': None,\n-            })\n+                }\n+            )\n         results.extend(results_folder)\n \n         lang_name = lang_names.get(content_language, content_language)\n \n         # Content language\n         if content_untranslated and False:  # disabled in favor of cut & paste\n-            results_content.append({\n-                "title": _(\n-                    u"title_set_language",\n-                    default=u"Change content language"\n-                ),\n-                "description": _(\n-                    u"description_set_language",\n-                    default=u"Move the translation under another language folder"  # noqa\n-                ),\n-                "action": content_url + "/update_language",\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_set_language",\n-                    "separator": None,\n-                    "class": ""\n-                },\n-                "submenu": None,\n-            })\n+            results_content.append(\n+                {\n+                    "title": _("title_set_language", default="Change content language"),\n+                    "description": _(\n+                        "description_set_language",\n+                        default="Move the translation under another language folder",  # noqa\n+                    ),\n+                    "action": content_url + "/update_language",\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {"id": "_set_language", "separator": None, "class": ""},\n+                    "submenu": None,\n+                }\n+            )\n \n         if content_translatable:\n             # Content translation view\n-            results_content.append({\n-                "title": _(\n-                    u\'edit_translation\',\n-                    default=u"Edit ${lang_name}",\n-                    mapping={"lang_name": lang_name}\n-                ),\n-                "description": _(\n-                    u"description_babeledit_menu",\n-                    default=u"Edit {lang_name} with the two-column translation view",  # noqa\n-                    mapping={"lang_name": lang_name}\n-                ),\n-                "action": content_url + "/" + translation_view,\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_edit_babel_edit",\n-                    "separator": None,\n-                    "class": "",\n-                },\n-                "submenu": None,\n-            })\n-\n-        if content_translatable:\n-            for idx, lang in enumerate(content_untranslated):\n-                lang_name = lang_names.get(lang.value, lang.title)\n-                lang_id = lang.value\n-                icon = show_flags and language_tool.getFlagForLanguageCode(lang_id) or None  # noqa\n-                results_content.append({\n+            results_content.append(\n+                {\n                     "title": _(\n-                        u\'create_translation\',\n-                        default=u"Create ${lang_name}",\n-                        mapping={"lang_name": lang_name}\n+                        "edit_translation",\n+                        default="Edit ${lang_name}",\n+                        mapping={"lang_name": lang_name},\n                     ),\n                     "description": _(\n-                        u"description_translate_into",\n-                        default=u"Translate into ${lang_name}",\n-                        mapping={"lang_name": lang_name}\n+                        "description_babeledit_menu",\n+                        default="Edit {lang_name} with the two-column translation view",  # noqa\n+                        mapping={"lang_name": lang_name},\n                     ),\n-                    "action": "%s/@@create_translation?language=%s" % (\n-                        content_url, lang_id),\n+                    "action": content_url + "/" + translation_view,\n                     "selected": False,\n-                    "icon": icon,\n-                    "width": "14",\n-                    "height": "11",\n-                    "extra": {"id": "translate_into_%s" % lang_id,\n-                              "separator": None,\n-                              "class": "contentmenuflags"},\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_edit_babel_edit",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n                     "submenu": None,\n+                }\n+            )\n \n-                })\n+        if content_translatable:\n+            for idx, lang in enumerate(content_untranslated):\n+                lang_name = lang_names.get(lang.value, lang.title)\n+                lang_id = lang.value\n+                icon = (\n+                    show_flags and language_tool.getFlagForLanguageCode(lang_id) or None\n+                )  # noqa\n+                results_content.append(\n+                    {\n+                        "title": _(\n+                            "create_translation",\n+                            default="Create ${lang_name}",\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "description": _(\n+                            "description_translate_into",\n+                            default="Translate into ${lang_name}",\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "action": "%s/@@create_translation?language=%s"\n+                        % (content_url, lang_id),\n+                        "selected": False,\n+                        "icon": icon,\n+                        "width": "14",\n+                        "height": "11",\n+                        "extra": {\n+                            "id": "translate_into_%s" % lang_id,\n+                            "separator": None,\n+                            "class": "contentmenuflags",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n             urls = translated_urls(content)\n             for lang in content_translated:\n                 if lang.value not in urls.by_token:\n@@ -355,135 +374,152 @@ def getMenuItems(self, context, request):\n                     continue\n                 lang_name = lang_names.get(lang.value, lang.title)\n                 lang_id = lang.value\n-                icon = show_flags and language_tool.getFlagForLanguageCode(lang_id) or None  # noqa\n-                results_content.append({\n+                icon = (\n+                    show_flags and language_tool.getFlagForLanguageCode(lang_id) or None\n+                )  # noqa\n+                results_content.append(\n+                    {\n+                        "title": _(\n+                            "edit_translation",\n+                            default="Edit ${lang_name}",\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "description": _(\n+                            "description_babeledit_menu",\n+                            default="Edit {lang_name} with the two-column translation view",  # noqa\n+                            mapping={"lang_name": lang_name},\n+                        ),\n+                        "action": (\n+                            urls.getTerm(lang_id).title + "/" + translation_view\n+                        ),\n+                        "selected": False,\n+                        "icon": icon,\n+                        "width": "14",\n+                        "height": "11",\n+                        "extra": {\n+                            "id": "babel_edit_%s" % lang_id,\n+                            "separator": None,\n+                            "class": "contentmenuflags",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n+            # Manage content translations\n+            results_content.append(\n+                {\n                     "title": _(\n-                        u\'edit_translation\',\n-                        default=u"Edit ${lang_name}",\n-                        mapping={"lang_name": lang_name}\n+                        "title_modify_translations", default="Manage translations"\n                     ),\n                     "description": _(\n-                        u"description_babeledit_menu",\n-                        default=u"Edit {lang_name} with the two-column translation view",  # noqa\n-                        mapping={"lang_name": lang_name}\n+                        "description_modify_translations",\n+                        default="Add or delete translations",\n                     ),\n-                    "action": (urls.getTerm(lang_id).title + "/" +\n-                               translation_view),\n+                    "action": content_url + "/modify_translations",\n                     "selected": False,\n-                    "icon": icon,\n-                    "width": "14",\n-                    "height": "11",\n-                    "extra": {"id": "babel_edit_%s" % lang_id,\n-                              "separator": None,\n-                              "class": "contentmenuflags"},\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_modify_translations",\n+                        "separator": None,\n+                        "class": "",\n+                    },\n                     "submenu": None,\n-                })\n-            # Manage content translations\n-            results_content.append({\n-                "title": _(u"title_modify_translations",\n-                           default=u"Manage translations"),\n-                "description": _(\n-                    u"description_modify_translations",\n-                    default=u"Add or delete translations"\n-                ),\n-                "action": content_url + "/modify_translations",\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_modify_translations",\n-                    "separator": None,\n-                    "class": ""\n-                },\n-                "submenu": None,\n-            })\n+                }\n+            )\n             # Universal link\n             if content_translation_group:\n-                results_content.append({\n+                results_content.append(\n+                    {\n+                        "title": _("universal_link", default="Universal link"),\n+                        "description": _(\n+                            "description_universal_link",\n+                            default="Universal link to the content in user\'s preferred language",  # noqa\n+                        ),\n+                        "action": "%s/@@multilingual-universal-link/%s"\n+                        % (site_url, content_translation_group),\n+                        "selected": False,\n+                        "icon": None,\n+                        "extra": {\n+                            "id": "_universal_link",\n+                            "separator": None,\n+                            "class": "",\n+                        },\n+                        "submenu": None,\n+                    }\n+                )\n+\n+        if results_folder and results_content:\n+            # Item translations separator\n+            results.append(\n+                {\n                     "title": _(\n-                        u"universal_link",\n-                        default=u"Universal link"\n-                    ),\n-                    "description": _(\n-                        u"description_universal_link",\n-                        default=u"Universal link to the content in user\'s preferred language"  # noqa\n+                        "title_translate_current_item", default="Item translation"\n                     ),\n-                    "action": "%s/@@multilingual-universal-link/%s" % (\n-                        site_url, content_translation_group),\n+                    "description": "",\n+                    "action": None,\n                     "selected": False,\n                     "icon": None,\n                     "extra": {\n-                        "id": "_universal_link",\n-                        "separator": None,\n-                        "class": ""\n+                        "id": "translateItemHeader",\n+                        "separator": "actionSeparator",\n+                        "class": "",\n                     },\n                     "submenu": None,\n-                })\n-\n-        if results_folder and results_content:\n-            # Item translations separator\n-            results.append({\n-                \'title\': _(\n-                    u\'title_translate_current_item\',\n-                    default=u\'Item translation\'\n-                ),\n-                \'description\': \'\',\n-                \'action\': None,\n-                \'selected\': False,\n-                \'icon\': None,\n-                \'extra\': {\'id\': \'translateItemHeader\',\n-                          \'separator\': \'actionSeparator\',\n-                          \'class\': \'\'},\n-                \'submenu\': None,\n-            })\n+                }\n+            )\n         results.extend(results_content)\n \n         # Language independent assets folder\n         if assets_folder_url:\n-            results.append({\n-                "title": _(\n-                    u"shared_folder",\n-                    default=u"Open ${title} folder",\n-                    mapping={"title": assets_folder_title}\n-                ),\n-                "description": _(\n-                    u"description_shared_folder",\n-                    default=u"Open the language independent assets folder"\n-                ),\n-                "action": assets_folder_url,\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_shared_folder",\n-                    "separator": results and \'actionSeparator\' or None,\n-                    "class": ""},\n-                "submenu": None,\n-            })\n+            results.append(\n+                {\n+                    "title": _(\n+                        "shared_folder",\n+                        default="Open ${title} folder",\n+                        mapping={"title": assets_folder_title},\n+                    ),\n+                    "description": _(\n+                        "description_shared_folder",\n+                        default="Open the language independent assets folder",\n+                    ),\n+                    "action": assets_folder_url,\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_shared_folder",\n+                        "separator": results and "actionSeparator" or None,\n+                        "class": "",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n \n         # User preferred language root folder\n         if not folder_translatable and not content_translatable:\n-            results.append({\n-                "title": _(\n-                    u"language_folder",\n-                    default=u"Return to language folder"\n-                ),\n-                "description": _(\n-                    u"description_language_folder",\n-                    default=u"Go to the user\'s browser preferred language "\n-                            u"related folder"\n-                ),\n-                "action": site_url + \'/\' + language_tool.getPreferredLanguage(),  # noqa\n-                "selected": False,\n-                "icon": None,\n-                "extra": {\n-                    "id": "_language_folder",\n-                    "separator": (\n-                        (results and not assets_folder_url) and\n-                        \'actionSeparator\' or None\n+            results.append(\n+                {\n+                    "title": _("language_folder", default="Return to language folder"),\n+                    "description": _(\n+                        "description_language_folder",\n+                        default="Go to the user\'s browser preferred language "\n+                        "related folder",\n                     ),\n-                    "class": ""\n-                },\n-                "submenu": None,\n-            })\n+                    "action": site_url\n+                    + "/"\n+                    + language_tool.getPreferredLanguage(),  # noqa\n+                    "selected": False,\n+                    "icon": None,\n+                    "extra": {\n+                        "id": "_language_folder",\n+                        "separator": (\n+                            (results and not assets_folder_url)\n+                            and "actionSeparator"\n+                            or None\n+                        ),\n+                        "class": "",\n+                    },\n+                    "submenu": None,\n+                }\n+            )\n \n         return results\n \n@@ -491,9 +527,10 @@ def getMenuItems(self, context, request):\n @implementer(ITranslateSubMenuItem)\n class TranslateSubMenuItem(BrowserSubMenuItem):\n \n-    title = _(u"label_translate_menu", default=u"Translate")\n-    description = _(u"title_translate_menu",\n-                    default="Manage translations for your content.")\n+    title = _("label_translate_menu", default="Translate")\n+    description = _(\n+        "title_translate_menu", default="Manage translations for your content."\n+    )\n     submenuId = "plone_contentmenu_multilingual"\n     order = 5\n     extra = {"id": "plone-contentmenu-multilingual"}\n@@ -505,8 +542,8 @@ def action(self):\n     @property\n     def extra(self):\n         return {\n-            \'id\': \'plone-contentmenu-multilingual\',\n-            \'li_class\': \'plonetoolbar-multilingual\'\n+            "id": "plone-contentmenu-multilingual",\n+            "li_class": "plonetoolbar-multilingual",\n         }\n \n     @view.memoize\n@@ -516,7 +553,7 @@ def available(self):\n             return False\n \n         # Do we have portal_languages?\n-        lt = getToolByName(self.context, \'portal_languages\', None)\n+        lt = getToolByName(self.context, "portal_languages", None)\n         if lt is None:\n             return False\n \ndiff --git a/src/plone/app/multilingual/browser/migrator.py b/src/plone/app/multilingual/browser/migrator.py\nindex 9b21dfacb..81694e963 100644\n--- a/src/plone/app/multilingual/browser/migrator.py\n+++ b/src/plone/app/multilingual/browser/migrator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n@@ -14,8 +13,8 @@\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n from zope.component.hooks import getSite\n-from zope.interface.interfaces import ComponentLookupError\n from zope.interface import Interface\n+from zope.interface.interfaces import ComponentLookupError\n \n import logging\n import warnings\n@@ -29,43 +28,47 @@\n try:\n     from plone.dexterity.interfaces import IDexterityContent\n except ImportError:\n+\n     class IDexterityContent(Interface):\n         pass\n+\n+\n try:\n     from Products.Archetypes.interfaces import IBaseObject\n except ImportError:\n+\n     class IBaseObject(Interface):\n         pass\n \n+\n with warnings.catch_warnings():\n     warnings.filterwarnings(\n-        "ignore", \n+        "ignore",\n         message="LanguageRootFolder: LanguageRootFolders should be migrate "\n-                "to DexterityContainers",\n+        "to DexterityContainers",\n     )\n     from plone.app.multilingual.content.lrf import LanguageRootFolder\n \n \n-LP_TRANSLATABLE = \'Products.LinguaPlone.interfaces.ITranslatable\'\n-portal_types_blacklist = [\'Collage\', \'FormFolder\', \'Ploneboard\']\n+LP_TRANSLATABLE = "Products.LinguaPlone.interfaces.ITranslatable"\n+portal_types_blacklist = ["Collage", "FormFolder", "Ploneboard"]\n logger = logging.getLogger(__name__)\n \n \n class LP2PAMView(BrowserView):\n-    """View for migrating multilingual catalog from LP to PAM.\n-    """\n+    """View for migrating multilingual catalog from LP to PAM."""\n \n-    template = ViewPageTemplateFile(\'templates/migrator-results.pt\')\n-    stepinfo = _(u"Transfer multilingual catalog information")\n+    template = ViewPageTemplateFile("templates/migrator-results.pt")\n+    stepinfo = _("Transfer multilingual catalog information")\n \n     def __call__(self):\n-        pc = getToolByName(self.context, \'portal_catalog\')\n-        pl = getToolByName(self.context, \'portal_languages\')\n+        pc = getToolByName(self.context, "portal_catalog")\n+        pl = getToolByName(self.context, "portal_languages")\n         self.results = []\n         for language_supported in pl.getSupportedLanguages():\n             translated_objects = pc.searchResults(\n-                object_provides=LP_TRANSLATABLE,\n-                Language=language_supported)\n+                object_provides=LP_TRANSLATABLE, Language=language_supported\n+            )\n             for brain in translated_objects:\n                 obj = brain.getObject()\n                 if obj.isCanonical():\n@@ -75,23 +78,28 @@ def __call__(self):\n                         for language in translations.keys():\n                             try:\n                                 manager.register_translation(\n-                                    language, translations[language][0])\n+                                    language, translations[language][0]\n+                                )\n                             except KeyError:\n                                 logger.info(\n-                                    \'%s already translated to %s: %s\' %\n-                                    (obj.id, language,\n-                                        str(manager.get_translations())))\n+                                    "%s already translated to %s: %s"\n+                                    % (\n+                                        obj.id,\n+                                        language,\n+                                        str(manager.get_translations()),\n+                                    )\n+                                )\n \n                         self.results.append(str(manager.get_translations()))\n \n-        logger.info(\'Finished with transferring catalog information\')\n+        logger.info("Finished with transferring catalog information")\n         return self.template()\n \n \n class LP2PAMAfterView(BrowserView):\n \n-    template = ViewPageTemplateFile(\'templates/cleanup_results.pt\')\n-    stepinfo = _(u"After migration relation cleanup")\n+    template = ViewPageTemplateFile("templates/cleanup_results.pt")\n+    stepinfo = _("After migration relation cleanup")\n \n     def reset_relation_catalog(self):\n         """Sometimes there are dependencies to the ITranslatable interface\n@@ -101,7 +109,7 @@ def reset_relation_catalog(self):\n         try:\n             catalog = getUtility(ICatalog)\n         except ComponentLookupError:\n-            return 0, [\'A zc.relation catalog is not present.\']\n+            return 0, ["A zc.relation catalog is not present."]\n         relations = catalog.findRelations()\n         catalog.clear()\n         total = 0\n@@ -114,8 +122,8 @@ def reset_relation_catalog(self):\n                 # If you read this because you wonder why you have many\n                 # missing relations, please inform do3cc\n                 logger.warning(\n-                    "A relation could not be recreated. You have "\n-                    "lost relations")\n+                    "A relation could not be recreated. You have " "lost relations"\n+                )\n                 bad.append(str(relation.__dict__))\n         return total, bad\n \n@@ -132,40 +140,48 @@ class moveContentToProperRLF(BrowserView):\n     the site\'s content tree and moves them to its nearest translated parent.\n     """\n \n-    template = ViewPageTemplateFile(\'templates/relocate-results.pt\')\n-    stepinfo = _(u"Relocate content to the proper root language folder")\n+    template = ViewPageTemplateFile("templates/relocate-results.pt")\n+    stepinfo = _("Relocate content to the proper root language folder")\n     blacklist = list()\n \n     def findContent(self, content, depth):\n         # only handle portal content\n-        if not IDexterityContent.providedBy(content)\\\n-                and not IBaseObject.providedBy(content):\n-            logger.warning(\'SKIP non-portal content %s (%s)\' % (\n-                content.absolute_url(), content.meta_type))\n+        if not IDexterityContent.providedBy(content) and not IBaseObject.providedBy(\n+            content\n+        ):\n+            logger.warning(\n+                "SKIP non-portal content %s (%s)"\n+                % (content.absolute_url(), content.meta_type)\n+            )\n             return\n-        if hasattr(aq_base(content), \'objectIds\')\\\n-                and aq_base(content).portal_type not in self.blacklist:\n+        if (\n+            hasattr(aq_base(content), "objectIds")\n+            and aq_base(content).portal_type not in self.blacklist\n+        ):\n             for id in content.objectIds():\n                 self.findContent(getattr(content, id), depth + 1)\n         while len(self.content_tree) < depth + 1:\n             self.content_tree.append([])\n         if ITranslatable.providedBy(content):\n             # The content parent has the same language?\n-            if not IPloneSiteRoot.providedBy(aq_parent(content)) \\\n-               and aq_parent(content).Language() != content.Language():\n+            if (\n+                not IPloneSiteRoot.providedBy(aq_parent(content))\n+                and aq_parent(content).Language() != content.Language()\n+            ):\n                 self.content_tree[depth].append(content)\n \n     def searchNearestTranslatedParent(self, content):\n         parent = aq_parent(content)\n-        while parent.Language() != content.Language()\\\n-                and not IPloneSiteRoot.providedBy(parent):\n+        while parent.Language() != content.Language() and not IPloneSiteRoot.providedBy(\n+            parent\n+        ):\n             parent = aq_parent(parent)\n         return parent\n \n     def __call__(self):\n-        """ Note: Steps names don\'t correspond with the control panel ones """\n-        blacklist = self.request.form.get(\'blacklist\', \'\').split()\n-        self.blacklist = [x.strip() for x in blacklist if x.strip() != \'\']\n+        """Note: Steps names don\'t correspond with the control panel ones"""\n+        blacklist = self.request.form.get("blacklist", "").split()\n+        self.blacklist = [x.strip() for x in blacklist if x.strip() != ""]\n         self.results = self.step1andstep2()\n         self.results += self.step3()\n         return self.template()\n@@ -208,26 +224,30 @@ def step1andstep2(self):\n                         cutted = parent.manage_cutObjects(content.getId())\n                     try:\n                         target_folder.manage_pasteObjects(cutted)\n-                        info_str = "Step 2: Moved object %s to folder %s" % (\n-                                   \'/\'.join(content.getPhysicalPath()),\n-                                   \'/\'.join(target_folder.getPhysicalPath()))\n+                        info_str = "Step 2: Moved object {} to folder {}".format(\n+                            "/".join(content.getPhysicalPath()),\n+                            "/".join(target_folder.getPhysicalPath()),\n+                        )\n                         log = logger.info\n                     except Exception as err:\n-                        info_str = "ERROR. Step 2: not possible to move " \\\n-                            "object %s to folder %s. Error: %s" % (\n-                                \'/\'.join(content.getPhysicalPath()),\n-                                \'/\'.join(target_folder.getPhysicalPath()),\n-                                err)\n+                        info_str = (\n+                            "ERROR. Step 2: not possible to move "\n+                            "object %s to folder %s. Error: %s"\n+                            % (\n+                                "/".join(content.getPhysicalPath()),\n+                                "/".join(target_folder.getPhysicalPath()),\n+                                err,\n+                            )\n+                        )\n                         log = logger.error\n                     log(info_str)\n                     output.append(info_str)\n \n-        logger.info(\'Finished step 2\')\n+        logger.info("Finished step 2")\n         return output\n \n     def step3(self):\n-        """Move the existing site content to its correspondent RLF.\n-        """\n+        """Move the existing site content to its correspondent RLF."""\n         portal = getSite()\n         pc = getToolByName(portal, "portal_catalog")\n         pl = getToolByName(portal, "portal_languages")\n@@ -240,14 +260,18 @@ def step3(self):\n             RLF_id = "%s" % lang\n             folder = getattr(portal, RLF_id, None)\n             if not folder:\n-                raise AttributeError("One of the root language folder are \\\n+                raise AttributeError(\n+                    "One of the root language folder are \\\n                                       missing. Check the site\'s language \\\n-                                      setup.")\n-\n-            path = \'/\'.join(portal.getPhysicalPath())\n-            objects = pc.searchResults(path={\'query\': path, \'depth\': 1},\n-                                       sort_on=\'getObjPositionInParent\',\n-                                       Language=lang)\n+                                      setup."\n+                )\n+\n+            path = "/".join(portal.getPhysicalPath())\n+            objects = pc.searchResults(\n+                path={"query": path, "depth": 1},\n+                sort_on="getObjPositionInParent",\n+                Language=lang,\n+            )\n \n             for brain in objects:\n                 if brain.id != lang:\n@@ -262,38 +286,41 @@ def step3(self):\n                         cutted = self.context.manage_cutObjects(brain.id)\n                     try:\n                         folder.manage_pasteObjects(cutted)\n-                        info_str = "Moved object %s to language root folder "\\\n-                            "%s" % (old_path, lang)\n+                        info_str = "Moved object %s to language root folder " "%s" % (\n+                            old_path,\n+                            lang,\n+                        )\n                         log = logger.info\n                     except Exception as err:\n-                        info_str = "ERROR. Step 3: not possible to move "\\\n-                            "object %s to root language folder %s. Error: %s"\\\n+                        info_str = (\n+                            "ERROR. Step 3: not possible to move "\n+                            "object %s to root language folder %s. Error: %s"\n                             % (old_path, lang, err)\n+                        )\n                         log = logger.error\n                     log(info_str)\n                     output.append(info_str)\n \n-        logger.info(\'Finished step 3\')\n+        logger.info("Finished step 3")\n         return output\n \n \n class LP2PAMReindexLanguageIndex(BrowserView):\n \n-    template = ViewPageTemplateFile(\'templates/reindex-results.pt\')\n-    stepinfo = u"Reindex the LanguageIndex"\n+    template = ViewPageTemplateFile("templates/reindex-results.pt")\n+    stepinfo = "Reindex the LanguageIndex"\n \n     def __call__(self):\n-        pc = getToolByName(self.context, \'portal_catalog\')\n-        index = pc._catalog.getIndex(\'Language\')\n+        pc = getToolByName(self.context, "portal_catalog")\n+        index = pc._catalog.getIndex("Language")\n         self.items_before = index.numObjects()\n-        pc.manage_reindexIndex(ids=[\'Language\'])\n+        pc.manage_reindexIndex(ids=["Language"])\n         self.items_after = index.numObjects()\n \n         return self.template()\n \n \n class MigrateFolderToLRFView(BrowserView):\n-\n     def __call__(self):\n         plone_utils = getToolByName(self.context, "plone_utils")\n \n@@ -303,9 +330,10 @@ def __call__(self):\n \n         if not IPloneSiteRoot.providedBy(aq_parent(aq_inner(self.context))):\n             plone_utils.addPortalMessage(\n-                _(u"folder_to_lrf_not_next_to_root",\n-                  default=u"Only folders just below the root "\n-                          u"can be transformed")\n+                _(\n+                    "folder_to_lrf_not_next_to_root",\n+                    default="Only folders just below the root " "can be transformed",\n+                )\n             )\n             self.request.response.redirect(self.context.absolute_url())\n             return\n@@ -314,8 +342,10 @@ def __call__(self):\n         available_languages = portal_languages.getAvailableLanguages()\n         if self.context.id not in available_languages.keys():\n             plone_utils.addPortalMessage(\n-                _(u"folder_to_lrf_id_not_language",\n-                  default=u"Folder\'s id is not a valid language code")\n+                _(\n+                    "folder_to_lrf_id_not_language",\n+                    default="Folder\'s id is not a valid language code",\n+                )\n             )\n             self.request.response.redirect(self.context.absolute_url())\n             return\n@@ -323,22 +353,25 @@ def __call__(self):\n         # Do the transform\n         self.context.__class__ = LanguageRootFolder\n         self.context._p_changed = aq_parent(self.context).p_changed = True\n-        self.context.portal_type = \'LRF\'\n+        self.context.portal_type = "LRF"\n \n         # Update content language\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         search_results = portal_catalog.unrestrictedSearchResults(\n-            path=\'/\'.join(self.context.getPhysicalPath()))\n+            path="/".join(self.context.getPhysicalPath())\n+        )\n         for brain in search_results:\n             ob = brain._unrestrictedGetObject()\n             language_aware = ILanguage(ob, None)\n             if language_aware is not None:\n                 language_aware.set_language(self.context.id)\n-                ob.reindexObject(idxs=[\'Language\', \'TranslationGroup\'])\n+                ob.reindexObject(idxs=["Language", "TranslationGroup"])\n \n         plone_utils.addPortalMessage(\n-            _(u"folder_to_lrf_success",\n-              default=u"Folder has been successfully transformed to "\n-                      u"a language root folder")\n+            _(\n+                "folder_to_lrf_success",\n+                default="Folder has been successfully transformed to "\n+                "a language root folder",\n+            )\n         )\n         self.request.response.redirect(self.context.absolute_url())\ndiff --git a/src/plone/app/multilingual/browser/modify.py b/src/plone/app/multilingual/browser/modify.py\nindex bd2cb6948..2066d7d89 100644\n--- a/src/plone/app/multilingual/browser/modify.py\n+++ b/src/plone/app/multilingual/browser/modify.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import _\n from plone.app.multilingual.browser.interfaces import IConnectTranslation\n from plone.app.multilingual.interfaces import ITranslationManager\n@@ -22,10 +21,9 @@\n \n \n class ModifyTranslationsForm(BrowserView):\n-\n     def available_languages(self):\n         registry = getUtility(IRegistry)\n-        return registry[\'plone.available_languages\']\n+        return registry["plone.available_languages"]\n \n     def get_translation(self, language):\n \n@@ -37,22 +35,21 @@ class ConnectTranslation(AutoExtensibleForm, Form):\n \n     schema = IFormFieldProvider(IConnectTranslation)\n     ignoreContext = True\n-    label = _(u"label_connect_translation", default=u"Connect translation")\n+    label = _("label_connect_translation", default="Connect translation")\n     description = _(\n-        u"long_description_connect_translation",\n-        default=u"This form allows you to connect a currently existing "\n-                u"translations of the current object."\n+        "long_description_connect_translation",\n+        default="This form allows you to connect a currently existing "\n+        "translations of the current object.",\n     )\n \n-    @button.buttonAndHandler(_(u"connect_translation",\n-                               default=u"Connect translation"))\n+    @button.buttonAndHandler(_("connect_translation", default="Connect translation"))\n     def handle_add(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n-        content = data[\'content\']\n-        language = data[\'language\']\n+        content = data["content"]\n+        language = data["language"]\n         ILanguage(content).set_language(language)\n         itm = ITranslationManager(self.context)\n         # the \'register_translation\'-method takes content OR\n@@ -61,20 +58,22 @@ def handle_add(self, action):\n         # and the translation index is not updated\n         itm.register_translation(language, IUUID(content))\n         return self.request.response.redirect(\n-            self.context.absolute_url() + \'/modify_translations\')\n+            self.context.absolute_url() + "/modify_translations"\n+        )\n \n \n class DisconnectTranslation(BrowserView):\n \n-    tpl = ViewPageTemplateFile(\'templates/disconnect_translation.pt\')\n+    tpl = ViewPageTemplateFile("templates/disconnect_translation.pt")\n \n     def __call__(self):\n \n-        if self.request.form.get(\'submitted\'):\n-            language = self.request.form[\'language\']\n-            catalog = getToolByName(self.context, \'portal_catalog\')\n+        if self.request.form.get("submitted"):\n+            language = self.request.form["language"]\n+            catalog = getToolByName(self.context, "portal_catalog")\n             context = catalog.unrestrictedSearchResults(\n-                UID=self.request.form[\'came_from\'])\n+                UID=self.request.form["came_from"]\n+            )\n             if context:\n                 context = context[0].getObject()\n             if language and context:\n@@ -83,9 +82,10 @@ def __call__(self):\n                     manager.remove_translation(language)\n                 except Exception as e:\n                     messages = IStatusMessage(self.request)\n-                    messages.addStatusMessage(e, type=\'error\')\n+                    messages.addStatusMessage(e, type="error")\n \n                 return self.request.response.redirect(\n-                    context.absolute_url() + \'/modify_translations\')\n+                    context.absolute_url() + "/modify_translations"\n+                )\n \n         return self.tpl()\ndiff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py\nindex 0bd6167ec..8ded4e9e0 100644\n--- a/src/plone/app/multilingual/browser/selector.py\n+++ b/src/plone/app/multilingual/browser/selector.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import NOTG\n@@ -9,8 +8,6 @@\n from zope.component.hooks import getSite\n from ZTUtils import make_query\n \n-import six\n-\n \n def addQuery(request, url, exclude=tuple(), **extras):\n     """Adds the incoming GET query to the end of the url\n@@ -19,24 +16,30 @@ def addQuery(request, url, exclude=tuple(), **extras):\n     formvariables = {}\n     for k, v in request.form.items():\n         if k not in exclude:\n-            if six.PY2 and isinstance(v, six.text_type):\n-                formvariables[k] = v.encode(\'utf-8\')\n-            else:\n-                formvariables[k] = v\n-    for k, v in extras.items():\n-        if six.PY2 and isinstance(v, six.text_type):\n-            formvariables[k] = v.encode(\'utf-8\')\n-        else:\n             formvariables[k] = v\n+    for k, v in extras.items():\n+        formvariables[k] = v\n     try:\n         if len(formvariables) > 0:\n-            url += \'?\' + make_query(formvariables)\n+            url += "?" + make_query(formvariables)\n     # Again, LinguaPlone did this try/except here so I\'m keeping it.\n     except UnicodeError:\n         pass\n     return url\n \n \n+def get_root_request(request):\n+    """If in a subrequest, go up to the root request and return it"""\n+\n+    def parent_request(current_request):\n+        preq = current_request.get("PARENT_REQUEST", None)\n+        if preq:\n+            return parent_request(preq)\n+        return current_request\n+\n+    return parent_request(request)\n+\n+\n def getPostPath(context, request):\n     """Finds the path to be added at the end of a context.\n \n@@ -53,14 +56,14 @@ def getPostPath(context, request):\n     # We need to find the actual translatable content object. As an\n     # optimization we assume it is within the last three segments.\n     path = context.getPhysicalPath()\n-    path_info = request.get(\'PATH_INFO\', \'\')\n+    path_info = get_root_request(request).get("PATH_INFO", "")\n     match = [p for p in path[-3:] if p]\n-    current_path = [pi for pi in path_info.split(\'/\') if pi]\n+    current_path = [pi for pi in path_info.split("/") if pi]\n     append_path = []\n     stop = False\n     while current_path and not stop:\n         check = current_path.pop()\n-        if check == \'VirtualHostRoot\' or check.startswith(\'_vh_\'):\n+        if check == "VirtualHostRoot" or check.startswith("_vh_"):\n             # Once we hit a VHM marker, we should stop\n             break\n         if check not in match:\n@@ -68,19 +71,18 @@ def getPostPath(context, request):\n         else:\n             stop = True\n     if append_path:\n-        append_path.insert(0, \'\')\n+        append_path.insert(0, "")\n     return "/".join(append_path)\n \n \n-NOT_TRANSLATED_YET_TEMPLATE = \'/not_translated_yet\'\n+NOT_TRANSLATED_YET_TEMPLATE = "/not_translated_yet"\n \n \n class LanguageSelectorViewlet(LanguageSelector):\n-    """Language selector for translatable content.\n-    """\n+    """Language selector for translatable content."""\n \n     def languages(self):\n-        languages_info = super(LanguageSelectorViewlet, self).languages()\n+        languages_info = super().languages()\n         results = []\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ILanguageSchema, prefix="plone")\n@@ -91,22 +93,24 @@ def languages(self):\n         for lang_info in languages_info:\n             # Avoid to modify the original language dict\n             data = lang_info.copy()\n-            data[\'translated\'] = True\n+            data["translated"] = True\n             query_extras = {}\n             if not settings.set_cookie_always:\n-                query_extras.update({\n-                    \'set_language\': data[\'code\'],\n-                })\n+                query_extras.update(\n+                    {\n+                        "set_language": data["code"],\n+                    }\n+                )\n             post_path = getPostPath(self.context, self.request)\n             if post_path:\n-                query_extras[\'post_path\'] = post_path\n+                query_extras["post_path"] = post_path\n             site = getSite()\n-            data[\'url\'] = addQuery(self.request,\n-                                   site.absolute_url().rstrip("/") +\n-                                   "/@@multilingual-selector/%s/%s" % (\n-                                       translation_group,\n-                                       lang_info[\'code\']\n-                                   ),\n-                                   **query_extras)\n+            data["url"] = addQuery(\n+                self.request,\n+                site.absolute_url().rstrip("/")\n+                + "/@@multilingual-selector/%s/%s"\n+                % (translation_group, lang_info["code"]),\n+                **query_extras\n+            )\n             results.append(data)\n         return results\ndiff --git a/src/plone/app/multilingual/browser/setup.py b/src/plone/app/multilingual/browser/setup.py\nindex 9fc3c0272..90d0391ad 100644\n--- a/src/plone/app/multilingual/browser/setup.py\n+++ b/src/plone/app/multilingual/browser/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from logging import getLogger\n from plone.app.dexterity.behaviors.exclfromnav import IExcludeFromNavigation\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -22,27 +21,26 @@\n from zope.lifecycleevent import modified\n \n \n-logger = getLogger(\'plone.app.multilingual\')\n+logger = getLogger("plone.app.multilingual")\n \n \n # Setup view imported from LinguaPlone\n class SetupView(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(SetupView, self).__init__(context, request)\n+        super().__init__(context, request)\n \n     def __call__(self, forceOneLanguage=False, forceMovingAndSetting=True):\n         setupTool = SetupMultilingualSite()\n         return setupTool.setupSite(self.context, forceOneLanguage)\n \n \n-class SetupMultilingualSite(object):\n+class SetupMultilingualSite:\n \n     # portal_type that is added as root language folder\n-    folder_type = \'LRF\'\n+    folder_type = "LRF"\n \n     # portal_type that is added as language independent asset folder\n-    folder_type_language_independent = \'LIF\'\n+    folder_type_language_independent = "LIF"\n \n     def __init__(self, context=None):\n         self.context = context\n@@ -64,18 +62,18 @@ def setupSite(self, context, forceOneLanguage=False):\n         self.ensure_translatable(self.folder_type)\n         self.ensure_translatable(self.folder_type_language_independent)\n \n-        language_tool = getToolByName(self.context, \'portal_languages\')\n+        language_tool = getToolByName(self.context, "portal_languages")\n         self.languages = languages = language_tool.getSupportedLanguages()\n         self.defaultLanguage = language_tool.getDefaultLanguage()\n \n         if len(languages) == 1 and not forceOneLanguage:\n-            return u\'Only one supported language configured.\'\n+            return "Only one supported language configured."\n \n         doneSomething = False\n         available = language_tool.getAvailableLanguages()\n         for language in languages:\n             info = available[language]\n-            name = info.get(\'native\', info.get(\'name\'))\n+            name = info.get("native", info.get("name"))\n             doneSomething += self.setUpLanguage(language, name)\n \n         doneSomething += self.linkTranslations()\n@@ -84,20 +82,20 @@ def setupSite(self, context, forceOneLanguage=False):\n         self.set_default_language_content()\n \n         if not doneSomething:\n-            return u\'Nothing done.\'\n+            return "Nothing done."\n         else:\n-            return u"Setup of language root folders on Plone site \'%s\'" % (\n-                self.context.getId())\n+            return "Setup of language root folders on Plone site \'%s\'" % (\n+                self.context.getId()\n+            )\n \n     def linkTranslations(self):\n-        """Links the translations of the default language Folders\n-        """\n+        """Links the translations of the default language Folders"""\n         doneSomething = False\n \n         try:\n             canonical = ITranslationManager(self.folders[self.defaultLanguage])\n         except TypeError as e:\n-            raise TypeError(str(e) + u\' Are your folders ITranslatable?\')\n+            raise TypeError(str(e) + " Are your folders ITranslatable?")\n \n         for language in self.languages:\n             if language == self.defaultLanguage:\n@@ -108,48 +106,55 @@ def linkTranslations(self):\n                 doneSomething = True\n \n         if doneSomething:\n-            logger.info(u\'Translations linked.\')\n+            logger.info("Translations linked.")\n \n         return doneSomething\n \n     def set_default_language_content(self):\n-        """Set default language on root to language independent\n-        """\n+        """Set default language on root to language independent"""\n         portal = getSite()\n         defaultLanguage = LANGUAGE_INDEPENDENT\n \n         for id_ in portal.objectIds():\n-            if all([id_ not in _languagelist,\n+            if all(\n+                [\n+                    id_ not in _languagelist,\n                     id_ not in _combinedlanguagelist,\n-                    ITranslatable.providedBy(portal[id_])]):\n+                    ITranslatable.providedBy(portal[id_]),\n+                ]\n+            ):\n                 set_recursive_language(portal[id_], defaultLanguage)\n \n     def setUpLanguage(self, code, name):\n-        """Create the language folders on top of the site\n-        """\n+        """Create the language folders on top of the site"""\n         doneSomething = False\n \n-        if code == \'id\':\n-            folderId = \'id-id\'\n+        if code == "id":\n+            folderId = "id-id"\n         else:\n             folderId = str(code)\n \n         folder = getattr(self.context, folderId, None)\n-        wftool = getToolByName(self.context, \'portal_workflow\')\n-\n-        assets_folder_id = translate(_(\'assets_folder_id\',\n-                                       default=\'assets\'),\n-                                     domain=\'plone\',\n-                                     target_language=folderId)\n-        assets_folder_title = translate(_(\'assets_folder_title\',\n-                                          default=u\'Assets\'),\n-                                        domain=\'plone\',\n-                                        target_language=folderId)\n+        wftool = getToolByName(self.context, "portal_workflow")\n+\n+        assets_folder_id = translate(\n+            _("assets_folder_id", default="assets"),\n+            domain="plone",\n+            target_language=folderId,\n+        )\n+        assets_folder_title = translate(\n+            _("assets_folder_title", default="Assets"),\n+            domain="plone",\n+            target_language=folderId,\n+        )\n \n         if folder is None:\n             _createObjectByType(self.folder_type, self.context, folderId)\n-            _createObjectByType(self.folder_type_language_independent,\n-                                self.context[folderId], assets_folder_id)\n+            _createObjectByType(\n+                self.folder_type_language_independent,\n+                self.context[folderId],\n+                assets_folder_id,\n+            )\n \n             folder = self.context[folderId]\n \n@@ -162,18 +167,17 @@ def setUpLanguage(self, code, name):\n             # This assumes a direct \'publish\' transition from the initial state\n             # We are going to check if its private and has publish action for\n             # the out of the box case otherwise don\'t do anything\n-            state = wftool.getInfoFor(folder, \'review_state\', None)\n-            available_transitions = [t[\'id\'] for t in\n-                                     wftool.getTransitionsFor(folder)]\n-            if state != \'published\' and \'publish\' in available_transitions:\n-                wftool.doActionFor(folder, \'publish\')\n-\n-            state = wftool.getInfoFor(folder[assets_folder_id],\n-                                      \'review_state\', None)\n-            available_transitions = [t[\'id\'] for t in\n-                                     wftool.getTransitionsFor(folder[assets_folder_id])]  # noqa\n-            if state != \'published\' and \'publish\' in available_transitions:\n-                wftool.doActionFor(folder[assets_folder_id], \'publish\')\n+            state = wftool.getInfoFor(folder, "review_state", None)\n+            available_transitions = [t["id"] for t in wftool.getTransitionsFor(folder)]\n+            if state != "published" and "publish" in available_transitions:\n+                wftool.doActionFor(folder, "publish")\n+\n+            state = wftool.getInfoFor(folder[assets_folder_id], "review_state", None)\n+            available_transitions = [\n+                t["id"] for t in wftool.getTransitionsFor(folder[assets_folder_id])\n+            ]  # noqa\n+            if state != "published" and "publish" in available_transitions:\n+                wftool.doActionFor(folder[assets_folder_id], "publish")\n \n             # Exclude folder from navigation (if applicable)\n             adapter = IExcludeFromNavigation(folder, None)\n@@ -189,20 +193,19 @@ def setUpLanguage(self, code, name):\n             notify(modified(folder[assets_folder_id]))\n \n             doneSomething = True\n-            logger.info(u"Added \'%s\' folder: %s" % (code, folderId))\n+            logger.info(f"Added \'{code}\' folder: {folderId}")\n \n         self.folders[code] = folder\n         if not INavigationRoot.providedBy(folder):\n             alsoProvides(folder, INavigationRoot)\n \n             doneSomething = True\n-            logger.info(u"INavigationRoot setup on folder \'%s\'" % code)\n+            logger.info("INavigationRoot setup on folder \'%s\'" % code)\n \n         return doneSomething\n \n     def removePortalDefaultPage(self):\n-        """Remove the default page of the site\n-        """\n+        """Remove the default page of the site"""\n \n         defaultPageId = self.context.getDefaultPage()\n         if not defaultPageId:\n@@ -212,12 +215,11 @@ def removePortalDefaultPage(self):\n         self.context.setDefaultPage(None)\n         self.context.reindexObject()\n \n-        logger.info(u\'Portal default page removed.\')\n+        logger.info("Portal default page removed.")\n         return True\n \n     def resetDefaultPage(self):\n-        """Maintain the default page of the site on the language it was defined\n-        """\n+        """Maintain the default page of the site on the language it was defined"""\n         previousDefaultPage = getattr(self.context, self.previousDefaultPageId)\n         languageWrapped = ILanguage(previousDefaultPage, None)\n \n@@ -230,7 +232,7 @@ def resetDefaultPage(self):\n         pageId = self.previousDefaultPageId\n \n         # test language neutral\n-        if language == \'\':\n+        if language == "":\n             language = self.defaultLanguage\n         target = self.folders[language]\n         objects = self.context.manage_cutObjects(pageId)\n@@ -240,9 +242,11 @@ def resetDefaultPage(self):\n         except ValueError as exc:\n             # This portal_type may not be allowed.  This should not be\n             # fatal, so we only log a warning.\n-            logger.warn((u"Could not move default page \'{0:s}\' j"\n-                         u"to folder \'{1:s}\': {2:s}").format(\n-                pageId, target.getId(), exc))\n+            logger.warn(\n+                (\n+                    "Could not move default page \'{:s}\' j" "to folder \'{:s}\': {:s}"\n+                ).format(pageId, target.getId(), exc)\n+            )\n             return False\n \n         target.setDefaultPage(pageId)\n@@ -250,8 +254,7 @@ def resetDefaultPage(self):\n         defaultPage = getattr(target, pageId)\n         defaultPage.reindexObject()\n \n-        logger.info(u"Moved default page \'{0}\' to folder \'{1}\'.".format(\n-            pageId, target.getId()))\n+        logger.info(f"Moved default page \'{pageId}\' to folder \'{target.getId()}\'.")\n \n         return True\n \n@@ -261,26 +264,26 @@ def setupLanguageSwitcher(self):\n         """\n         doneSomething = False\n \n-        tt = getToolByName(self.context, \'portal_types\')\n-        site = tt[\'Plone Site\']\n+        tt = getToolByName(self.context, "portal_types")\n+        site = tt["Plone Site"]\n \n-        if \'language-switcher\' not in site.view_methods:\n-            methods = tuple(site.view_methods)\n-            site.view_methods = methods + (\'language-switcher\', )\n-            site.default_view = \'language-switcher\'\n+        methods = tuple(site.view_methods)\n+        if "language-switcher" not in methods:\n+            site.view_methods = methods + ("language-switcher",)\n+            site.default_view = "language-switcher"\n             self.context.reindexObject()\n \n             doneSomething = True\n-            logger.info(u\'Root language switcher set up.\')\n+            logger.info("Root language switcher set up.")\n \n         return doneSomething\n \n     def ensure_translatable(self, type_):\n-        types_tool = getToolByName(self.context, \'portal_types\')\n+        types_tool = getToolByName(self.context, "portal_types")\n         fti = getattr(types_tool, type_)\n \n         if IDexterityFTI.providedBy(fti):\n             behaviors = list(fti.behaviors)\n-            behaviors.append(\'plone.translatable\')\n+            behaviors.append("plone.translatable")\n             behaviors = tuple(set(behaviors))\n-            fti._updateProperty(\'behaviors\', behaviors)\n+            fti._updateProperty("behaviors", behaviors)\ndiff --git a/src/plone/app/multilingual/browser/switcher.py b/src/plone/app/multilingual/browser/switcher.py\nindex a06477b08..88602d759 100644\n--- a/src/plone/app/multilingual/browser/switcher.py\n+++ b/src/plone/app/multilingual/browser/switcher.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n \n \n class LanguageSwitcher(BrowserView):\n-\n     def __call__(self):\n         """Redirect to the preferred language top-level folder.\n \n@@ -15,17 +13,17 @@ def __call__(self):\n         Copy from LinguaPlone\n         """\n         context = aq_inner(self.context)\n-        plt = getToolByName(context, \'portal_languages\')\n+        plt = getToolByName(context, "portal_languages")\n         pref = plt.getPreferredLanguage(self.request)\n         default = plt.getDefaultLanguage()\n         ids = self.context.keys()\n         target = (pref in ids) and pref or default\n-        url = "%s/%s" % (context.absolute_url(), target)\n+        url = f"{context.absolute_url()}/{target}"\n \n         # We need to set the language cookie on the first response or it will\n         # be set on the frontpage itself, making it uncachable\n-        langCookie = self.request.cookies.get(\'I18N_LANGUAGE\')\n+        langCookie = self.request.cookies.get("I18N_LANGUAGE")\n         if not langCookie or langCookie != target:\n-            self.request.response.setCookie(\'I18N_LANGUAGE\', target, path=\'/\')\n+            self.request.response.setCookie("I18N_LANGUAGE", target, path="/")\n \n         self.request.response.redirect(url, status=302)\ndiff --git a/src/plone/app/multilingual/browser/templates/modify_translations.pt b/src/plone/app/multilingual/browser/templates/modify_translations.pt\nindex 7a500f81a..a32f8adc9 100644\n--- a/src/plone/app/multilingual/browser/templates/modify_translations.pt\n+++ b/src/plone/app/multilingual/browser/templates/modify_translations.pt\n@@ -32,13 +32,13 @@\n                   tal:content="lang"></span>\n           </td>\n           <td>\n-            <tal:hastranslation condition="translation">\n+            <tal:hastranslation condition="python:translation">\n               <h3 class="translationTitle" tal:content="translation/Title">Title</h3>\n               <a class="translationURL" href="#" tal:attributes="href translation/absolute_url">\n                 <span tal:replace="python:\'/\'.join(translation.getPhysicalPath())">URL</span>\n               </a>\n             </tal:hastranslation>\n-            <tal:notranslation condition="not:translation">\n+            <tal:notranslation condition="python:not translation">\n               <h3 class="translationTitle discreet" i18n:translate="">Translation missing</h3>\n             </tal:notranslation>\n           </td>\n@@ -52,7 +52,7 @@\n                     class="d-none d-md-inline-block text-xs-right" i18n:translate="disconnect_translation">Disconnect translation</span>\n               </a>\n             </tal:hastranslation>\n-            <tal:notranslation condition="not:translation">\n+            <tal:notranslation condition="python:not translation">\n               <a href="#" title="Connect existing translation" class="pat-plone-modal connectTranslationAction"\n                  tal:attributes="href string:${context/absolute_url}/connect_translation?language=${lang}"\n                  i18n:attributes="title connect_existing_translation">\n@@ -72,7 +72,7 @@\n                     class="d-none d-md-inline-block" i18n:translate="delete_translated_item">Delete translated item</span>\n               </a>\n             </tal:hastranslation>\n-            <tal:notranslation condition="not:translation">\n+            <tal:notranslation condition="python:not translation">\n               <a href="#" title="Add translation" class="pat-plone-modal addTranslationAction"\n                  tal:attributes="href string:${context/absolute_url}/@@create_translation?language=${lang}"\n                  i18n:attributes="title add_translation">\ndiff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py\nindex b227aa3c5..4e7708021 100644\n--- a/src/plone/app/multilingual/browser/translate.py\n+++ b/src/plone/app/multilingual/browser/translate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.multilingual import _\n from plone.app.multilingual.interfaces import IMultiLanguageExtraOptionsSchema\n@@ -7,83 +6,86 @@\n from plone.uuid.interfaces import IUUID\n from Products.CMFPlone.interfaces import ILanguage\n from Products.Five import BrowserView\n-from six.moves import urllib\n from zope.component import getUtility\n \n import json\n+import urllib\n \n \n def google_translate(question, key, lang_target, lang_source):\n     length = len(question)\n-    translated = \'\'\n-    url = \'https://www.googleapis.com/language/translate/v2\'\n+    translated = ""\n+    url = "https://www.googleapis.com/language/translate/v2"\n     temp_question = question\n-    while(length > 400):\n+    while length > 400:\n         temp_question = question[:399]\n-        index = temp_question.rfind(\' \')\n+        index = temp_question.rfind(" ")\n         temp_question = temp_question[:index]\n         question = question[index:]\n         length = len(question)\n-        data = {\'key\': key,\n-                \'target\': lang_target,\n-                \'source\': lang_source,\n-                \'q\': temp_question}\n+        data = {\n+            "key": key,\n+            "target": lang_target,\n+            "source": lang_source,\n+            "q": temp_question,\n+        }\n         params = urllib.parse.urlencode(data)\n \n-        retorn = urllib.request.urlopen(url + \'?\' + params)\n-        translated += json.loads(\n-            retorn.read())[\'data\'][\'translations\'][0][\'translatedText\']\n+        retorn = urllib.request.urlopen(url + "?" + params)\n+        translated += json.loads(retorn.read())["data"]["translations"][0][\n+            "translatedText"\n+        ]\n \n-    data = {\'key\': key,\n-            \'target\': lang_target,\n-            \'source\': lang_source,\n-            \'q\': temp_question}\n+    data = {\n+        "key": key,\n+        "target": lang_target,\n+        "source": lang_source,\n+        "q": temp_question,\n+    }\n     params = urllib.parse.urlencode(data)\n \n-    retorn = urllib.request.urlopen(url + \'?\' + params)\n-    translated += json.loads(\n-        retorn.read())[\'data\'][\'translations\'][0][\'translatedText\']\n-    return json.dumps({\'data\': translated})\n+    retorn = urllib.request.urlopen(url + "?" + params)\n+    translated += json.loads(retorn.read())["data"]["translations"][0]["translatedText"]\n+    return json.dumps({"data": translated})\n \n \n class gtranslation_service_dexterity(BrowserView):\n-\n     def __call__(self):\n-        if (self.request.method != \'POST\' and\n-            not (\'field\' in self.request.form.keys() and\n-                 \'lang_source\' in self.request.form.keys())):\n+        if self.request.method != "POST" and not (\n+            "field" in self.request.form.keys()\n+            and "lang_source" in self.request.form.keys()\n+        ):\n             return _("Need a field")\n         else:\n             manager = ITranslationManager(self.context)\n             registry = getUtility(IRegistry)\n-            settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                             prefix="plone")\n+            settings = registry.forInterface(\n+                IMultiLanguageExtraOptionsSchema, prefix="plone"\n+            )\n             lang_target = ILanguage(self.context).get_language()\n-            lang_source = self.request.form[\'lang_source\']\n+            lang_source = self.request.form["lang_source"]\n             orig_object = manager.get_translation(lang_source)\n-            field = self.request.form[\'field\'].split(\'.\')[-1]\n+            field = self.request.form["field"].split(".")[-1]\n             if hasattr(orig_object, field):\n-                question = getattr(orig_object, field, \'\')\n-                if hasattr(question, \'raw\'):\n+                question = getattr(orig_object, field, "")\n+                if hasattr(question, "raw"):\n                     question = question.raw\n             else:\n                 return _("Invalid field")\n-            return google_translate(question,\n-                                    settings.google_translation_key,\n-                                    lang_target,\n-                                    lang_source)\n+            return google_translate(\n+                question, settings.google_translation_key, lang_target, lang_source\n+            )\n \n \n class TranslationForm(BrowserView):\n-    """Translation Form\n-    """\n+    """Translation Form"""\n \n     def __call__(self):\n-        language = self.request.get(\'language\', None)\n+        language = self.request.get("language", None)\n         if language:\n             context = aq_inner(self.context)\n             translation_manager = ITranslationManager(context)\n             new_parent = translation_manager.add_translation_delegated(language)  # noqa\n             baseUrl = new_parent.absolute_url()\n-            url = \'%s/++addtranslation++%s\' % (baseUrl, IUUID(context))\n+            url = f"{baseUrl}/++addtranslation++{IUUID(context)}"\n             return self.request.response.redirect(url)\ndiff --git a/src/plone/app/multilingual/browser/update.py b/src/plone/app/multilingual/browser/update.py\nindex 2831e787a..518998746 100644\n--- a/src/plone/app/multilingual/browser/update.py\n+++ b/src/plone/app/multilingual/browser/update.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import _\n from plone.app.multilingual.browser.interfaces import IUpdateLanguage\n from plone.app.multilingual.browser.utils import multilingualMoveObject\n@@ -9,7 +8,7 @@\n \n \n class UpdateLanguageForm(form.Form):\n-    """ A form to change language """\n+    """A form to change language"""\n \n     fields = field.Fields(IUpdateLanguage)\n \n@@ -17,7 +16,7 @@ class UpdateLanguageForm(form.Form):\n \n     output = None\n \n-    @button.buttonAndHandler(_(u"update_language", default=u"Update Language"))\n+    @button.buttonAndHandler(_("update_language", default="Update Language"))\n     def handle_update(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -25,12 +24,13 @@ def handle_update(self, action):\n             return\n \n         new_object = self.context\n-        language = data[\'language\']\n+        language = data["language"]\n         # We need to move the object to its place!!\n         new_object = multilingualMoveObject(self.context, language)\n \n         return self.request.response.redirect(\n-            new_object.absolute_url() + \'?set_language=\' + language)\n+            new_object.absolute_url() + "?set_language=" + language\n+        )\n \n \n update_language_form = wrap_form(UpdateLanguageForm)\ndiff --git a/src/plone/app/multilingual/browser/utils.py b/src/plone/app/multilingual/browser/utils.py\nindex 347c69dc1..f5d5c5635 100644\n--- a/src/plone/app/multilingual/browser/utils.py\n+++ b/src/plone/app/multilingual/browser/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_chain\n from Acquisition import aq_inner\n@@ -29,15 +28,13 @@ def is_language_independent(ob):\n \n \n class BabelUtils(BrowserView):\n-\n     def __init__(self, context, request):\n-        super(BabelUtils, self).__init__(context, request)\n-        portal_state = getMultiAdapter((context, request),\n-                                       name="plone_portal_state")\n+        super().__init__(context, request)\n+        portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n         self.portal_url = portal_state.portal_url()\n         # If there is any translation_info lets use it\n         try:\n-            self.group = TranslationManager(request.translation_info[\'tg\'])\n+            self.group = TranslationManager(request.translation_info["tg"])\n         except AttributeError:\n             self.group = ITranslationManager(self.context)\n \n@@ -48,7 +45,7 @@ def getTranslatedLanguages(self):\n         return self.group.get_translated_languages()\n \n     def getPortal(self):\n-        portal_url = getToolByName(self.context, \'portal_url\')\n+        portal_url = getToolByName(self.context, "portal_url")\n         return portal_url\n \n     def objToTranslate(self):\n@@ -56,58 +53,66 @@ def objToTranslate(self):\n \n     def gtenabled(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                         prefix="plone")\n+        settings = registry.forInterface(\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         key = settings.google_translation_key\n         return key is not None and len(key.strip()) > 0\n \n     def languages(self):\n-        """ Deprecated """\n+        """Deprecated"""\n         context = aq_inner(self.context)\n \n         ls = LanguageSelector(context, self.request, None, None)\n         ls.update()\n         results = ls.languages()\n \n-        supported_langs = [v[\'code\'] for v in results]\n-        missing = set([str(c) for c in supported_langs])\n+        supported_langs = [v["code"] for v in results]\n+        missing = {str(c) for c in supported_langs}\n \n         lsv = LanguageSelectorViewlet(context, self.request, None, None)\n         translations = lsv._translations(missing)\n \n         # We want to see the babel_view\n-        append_path = (\'\', \'babel_view\',)\n+        append_path = (\n+            "",\n+            "babel_view",\n+        )\n         non_viewable = set()\n         for data in results:\n-            code = str(data[\'code\'])\n-            data[\'translated\'] = code in translations.keys()\n+            code = str(data["code"])\n+            data["translated"] = code in translations.keys()\n \n-            appendtourl = \'/\'.join(append_path)\n+            appendtourl = "/".join(append_path)\n \n-            if data[\'translated\']:\n+            if data["translated"]:\n                 trans, direct, has_view_permission = translations[code]\n                 if not has_view_permission:\n                     # shortcut if the user cannot see the item\n-                    non_viewable.add((data[\'code\']))\n+                    non_viewable.add(data["code"])\n                     continue\n-                data[\'url\'] = trans.absolute_url() + appendtourl\n+                data["url"] = trans.absolute_url() + appendtourl\n             else:\n-                non_viewable.add((data[\'code\']))\n+                non_viewable.add(data["code"])\n \n         # filter out non-viewable items\n-        results = [r for r in results if r[\'code\'] not in non_viewable]\n+        results = [r for r in results if r["code"] not in non_viewable]\n \n         return results\n \n     def translated_languages(self):\n         context = aq_inner(self.context)\n-        tool = getToolByName(context, \'portal_languages\', None)\n+        tool = getToolByName(context, "portal_languages", None)\n         checkPermission = getSecurityManager().checkPermission\n         translations = self.group.get_translations()\n-        translated_info =\\\n-            [dict(code=key,\n-                  info=tool.getAvailableLanguageInformation()[key],\n-                  obj=translations[key]) for key in translations]\n+        translated_info = [\n+            dict(\n+                code=key,\n+                info=tool.getAvailableLanguageInformation()[key],\n+                obj=translations[key],\n+            )\n+            for key in translations\n+        ]\n \n         default_language = tool.getDefaultLanguage()\n \n@@ -115,29 +120,24 @@ def translated_languages(self):\n \n         for lang_info in translated_info:\n             # Mark the default language as the first translation shown\n-            if lang_info[\'code\'] == default_language:\n-                lang_info[\'isDefault\'] = True\n+            if lang_info["code"] == default_language:\n+                lang_info["isDefault"] = True\n             else:\n-                lang_info[\'isDefault\'] = False\n+                lang_info["isDefault"] = False\n \n             # Remove the translation of the content currently being\n             # translated In case it\'s temporal we show as language is not\n             # already set on AT\n-            portal_factory = getToolByName(\n-                self.context,\n-                \'portal_factory\',\n-                None\n-            )\n+            portal_factory = getToolByName(self.context, "portal_factory", None)\n             context_language = ILanguage(context).get_language()\n-            if (portal_factory is None or\n-                    not portal_factory.isTemporary(self.context)) \\\n-               and lang_info[\'code\'] == context_language:\n+            if (\n+                portal_factory is None or not portal_factory.isTemporary(self.context)\n+            ) and lang_info["code"] == context_language:\n                 continue\n \n             # Remove the translation in case the translator user does not\n             # have permissions over it\n-            has_view_permission =\\\n-                bool(checkPermission(\'View\', lang_info[\'obj\']))\n+            has_view_permission = bool(checkPermission("View", lang_info["obj"]))\n             if not has_view_permission:\n                 continue\n \n@@ -145,18 +145,19 @@ def translated_languages(self):\n         return translated_shown\n \n     def current_language_name(self):\n-        """ Get the current language native name """\n+        """Get the current language native name"""\n         adapted = ILanguage(self.context)\n         lang_code = adapted.get_language()\n         util = getUtility(IContentLanguageAvailability)\n         data = util.getLanguages(True)\n         lang_info = data.get(lang_code)\n-        return lang_info.get(\'native\', None) or lang_info.get(\'name\')\n+        return lang_info.get("native", None) or lang_info.get("name")\n \n     def max_nr_of_buttons(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,\n-                                         prefix="plone")\n+        settings = registry.forInterface(\n+            IMultiLanguageExtraOptionsSchema, prefix="plone"\n+        )\n         return settings.buttons_babel_view_up_to_nr_translations\n \n \n@@ -175,7 +176,7 @@ def multilingualMoveObject(content, language):\n \n     copy_data = parent.manage_cutObjects(content.getId())\n     list_ids = target_folder.manage_pasteObjects(copy_data)\n-    new_id = list_ids[0][\'new_id\']\n+    new_id = list_ids[0]["new_id"]\n     new_object = target_folder[new_id]\n \n     new_object.reindexObject()\ndiff --git a/src/plone/app/multilingual/browser/view.py b/src/plone/app/multilingual/browser/view.py\nindex 8d32b5b5e..fb94825cf 100644\n--- a/src/plone/app/multilingual/browser/view.py\n+++ b/src/plone/app/multilingual/browser/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.browser.view import DefaultView\n from z3c.form.interfaces import IEditForm\n from zope.interface import implementer\ndiff --git a/src/plone/app/multilingual/browser/viewlets.py b/src/plone/app/multilingual/browser/viewlets.py\nindex b7ec0cd4b..f219a982f 100644\n--- a/src/plone/app/multilingual/browser/viewlets.py\n+++ b/src/plone/app/multilingual/browser/viewlets.py\n@@ -1,45 +1,43 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.interfaces import ITranslationManager\n from plone.memoize import ram\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ILanguage\n-from six.moves.urllib.parse import quote_plus\n+from urllib.parse import quote_plus\n \n \n def _cache_until_catalog_change(fun, self):\n-    catalog = getToolByName(self.context, \'portal_catalog\')\n-    key = \'{0}{1}{2}\'\n+    catalog = getToolByName(self.context, "portal_catalog")\n+    key = "{0}{1}{2}"\n     key = key.format(\n-        fun.__name__,\n-        catalog.getCounter(),\n-        \'/\'.join(self.context.getPhysicalPath())\n+        fun.__name__, catalog.getCounter(), "/".join(self.context.getPhysicalPath())\n     )\n     return key\n \n \n class OneLanguageConfiguredNoticeViewlet(ViewletBase):\n-    """ Notice the user that PAM is installed and only one language\n-        is configured.\n+    """Notice the user that PAM is installed and only one language\n+    is configured.\n     """\n+\n     available = False\n \n     def render(self):\n         if self.available:\n             return self.index()\n \n-        return u""\n+        return ""\n \n     def update(self):\n-        lt = getToolByName(self.context, \'portal_languages\')\n+        lt = getToolByName(self.context, "portal_languages")\n         supported = lt.getSupportedLanguages()\n         self.available = len(supported) <= 1\n \n \n class AddFormIsATranslationViewlet(ViewletBase):\n-    """ Notice the user that this add form is a translation\n-    """\n+    """Notice the user that this add form is a translation"""\n+\n     available = False\n \n     def language(self):\n@@ -47,42 +45,43 @@ def language(self):\n \n     def languages(self):\n         """Returns list of languages."""\n-        self.tool = getToolByName(self.context, \'portal_languages\', None)\n+        self.tool = getToolByName(self.context, "portal_languages", None)\n         if self.tool is None:\n             return []\n \n-        languages = {lang: info for (lang, info) in\n-                        self.tool.getAvailableLanguageInformation().items()\n-                        if info["selected"]}\n+        languages = {\n+            lang: info\n+            for (lang, info) in self.tool.getAvailableLanguageInformation().items()\n+            if info["selected"]\n+        }\n \n         return languages\n \n     def language_name(self, lang_code):\n-        return self.languages().get(lang_code).get(\'native\')\n+        return self.languages().get(lang_code).get("native")\n \n     def render(self):\n         if self.available:\n             return self.index()\n-        return u""\n+        return ""\n \n     def returnURL(self):\n         # Get translation info for getting the translation source\n-        translation_info = getattr(self.request, \'translation_info\', {})\n-        translation_group = translation_info.get(\'tg\')\n-        source_language = translation_info.get(\'source_language\')\n+        translation_info = getattr(self.request, "translation_info", {})\n+        translation_group = translation_info.get("tg")\n+        source_language = translation_info.get("source_language")\n \n         if not (translation_group or source_language):\n-            return \'\'\n+            return ""\n \n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        brains = catalog(Language=source_language,\n-                         TranslationGroup=translation_group)\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        brains = catalog(Language=source_language, TranslationGroup=translation_group)\n         if len(brains) != 1:\n-            return \'\'\n+            return ""\n         source = brains[0].getObject()\n \n         # Get the factory\n-        types_tool = getToolByName(source, \'portal_types\')\n+        types_tool = getToolByName(source, "portal_types")\n \n         # Note: we don\'t check \'allowed\' or \'available\' here,\n         # because these are slow. We assume the \'allowedTypes\'\n@@ -91,10 +90,10 @@ def returnURL(self):\n             object=self.context,\n             check_permissions=False,\n             check_condition=False,\n-            category=\'folder/add\',\n+            category="folder/add",\n         )\n \n-        addActionsById = dict([(a[\'id\'], a) for a in actions])\n+        addActionsById = {a["id"]: a for a in actions}\n \n         typeId = source.portal_type\n \n@@ -102,46 +101,45 @@ def returnURL(self):\n         if addAction is None:\n             url = None\n         else:\n-            url = addAction[\'url\']\n+            url = addAction["url"]\n         if not url:\n-            url = \'%s/createObject?type_name=%s\' % (\n+            url = "{}/createObject?type_name={}".format(\n                 source.absolute_url(),\n-                quote_plus(typeId)\n+                quote_plus(typeId),\n             )\n         return url\n \n     def update(self):\n         try:\n-            tg = self.request.translation_info[\'tg\']\n+            tg = self.request.translation_info["tg"]\n         except AttributeError:\n             return\n         self.available = True\n         if ITranslatable.providedBy(self.context):\n             self.lang = ILanguage(self.context).get_language()\n         else:\n-            self.lang = \'NaN\'\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        query = {\'TranslationGroup\': tg}\n+            self.lang = "NaN"\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        query = {"TranslationGroup": tg}\n         self.origin = catalog.searchResults(query)\n \n \n class AddFormATIsATranslationViewlet(AddFormIsATranslationViewlet):\n     # XXX move this class to archetypes multilingual!\n     # btw., it is not used in here.\n-    """ Notice the user that this AT add form is a translation\n-    """\n+    """Notice the user that this AT add form is a translation"""\n \n     def update(self):\n-        """ It\'s only for AT on factory so we check """\n-        factory = getToolByName(self.context, \'portal_factory\', None)\n+        """It\'s only for AT on factory so we check"""\n+        factory = getToolByName(self.context, "portal_factory", None)\n         if factory is None or not factory.isTemporary(self.context):\n             return\n         super(AddFormIsATranslationViewlet, self).update()\n \n \n class AlternateLanguagesViewlet(ViewletBase):\n-    """ Notice search engines about alternates languages of current\n-        content item\n+    """Notice search engines about alternates languages of current\n+    content item\n     """\n \n     alternatives = []\n@@ -149,25 +147,27 @@ class AlternateLanguagesViewlet(ViewletBase):\n     @ram.cache(_cache_until_catalog_change)\n     def get_alternate_languages(self):\n         """Cache relative urls only. If we have multilingual sites\n-           and multi domain site caching absolute urls will result in\n-           very inefficient caching. Build absolute url in template.\n+        and multi domain site caching absolute urls will result in\n+        very inefficient caching. Build absolute url in template.\n         """\n         tm = ITranslationManager(self.context)\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n         results = catalog(TranslationGroup=tm.query_canonical())\n \n         alternates = []\n         for item in results:\n             url = item.getURL()\n-            alternates.append({\n-                \'lang\': item.Language,\n-                \'url\': url,\n-            })\n+            alternates.append(\n+                {\n+                    "lang": item.Language,\n+                    "url": url,\n+                }\n+            )\n \n         return alternates\n \n     def update(self):\n-        super(AlternateLanguagesViewlet, self).update()\n+        super().update()\n         self.alternates = self.get_alternate_languages()\n \n     @property\n@@ -177,4 +177,4 @@ def available(self):\n     def render(self):\n         if self.available:\n             return self.index()\n-        return u""\n+        return ""\ndiff --git a/src/plone/app/multilingual/browser/vocabularies.py b/src/plone/app/multilingual/browser/vocabularies.py\nindex 2638fa162..7737f4f0b 100644\n--- a/src/plone/app/multilingual/browser/vocabularies.py\n+++ b/src/plone/app/multilingual/browser/vocabularies.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.browser.utils import is_language_independent\n from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.vocabularies.catalog import CatalogVocabularyFactory\n@@ -16,7 +15,7 @@\n \n @provider(IContextSourceBinder)\n def untranslated_languages(context):\n-    language_tool = getToolByName(context, \'portal_languages\')\n+    language_tool = getToolByName(context, "portal_languages")\n     language_infos = language_tool.getAvailableLanguages()\n     available_portal_languages = language_tool.supported_langs\n     manager = ITranslationManager(context)\n@@ -26,32 +25,30 @@ def untranslated_languages(context):\n     languages = []\n     for lang in available_portal_languages:\n         if lang not in translated_languages:\n-            native = language_infos[lang].get(\'native\', None)\n-            name = language_infos[lang].get(\'name\', lang)\n-            languages.append(\n-                SimpleVocabulary.createTerm(lang, lang, native or name))\n+            native = language_infos[lang].get("native", None)\n+            name = language_infos[lang].get("name", lang)\n+            languages.append(SimpleVocabulary.createTerm(lang, lang, native or name))\n     return SimpleVocabulary(languages)\n \n \n @provider(IContextSourceBinder)\n def translated_languages(context):\n-    language_tool = getToolByName(context, \'portal_languages\')\n+    language_tool = getToolByName(context, "portal_languages")\n     language_infos = language_tool.getAvailableLanguages()\n     manager = ITranslationManager(context)\n     # take care to filter out translated contents\n     # wich do no have supported language information\n-    translated_languages = [a\n-                            for a in manager.get_translated_languages()\n-                            if a in language_infos]\n+    translated_languages = [\n+        a for a in manager.get_translated_languages() if a in language_infos\n+    ]\n     content_language = ILanguage(context).get_language()\n     if content_language in translated_languages:\n         translated_languages.remove(content_language)\n     languages = []\n     for lang in translated_languages:\n-        native = language_infos[lang].get(\'native\', None)\n-        name = language_infos[lang].get(\'name\', lang)\n-        languages.append(\n-            SimpleVocabulary.createTerm(lang, lang, native or name))\n+        native = language_infos[lang].get("native", None)\n+        name = language_infos[lang].get("name", lang)\n+        languages.append(SimpleVocabulary.createTerm(lang, lang, native or name))\n     return SimpleVocabulary(languages)\n \n \n@@ -67,8 +64,8 @@ def translated_urls(context):\n         translation = manager.get_restricted_translation(lang)\n         if translation is not None:\n             languages.append(\n-                SimpleVocabulary.createTerm(\n-                    lang, lang, translation.absolute_url()))\n+                SimpleVocabulary.createTerm(lang, lang, translation.absolute_url())\n+            )\n     return SimpleVocabulary(languages)\n \n \n@@ -76,16 +73,15 @@ def translated_urls(context):\n def deletable_languages(context):\n     manager = ITranslationManager(context)\n     translated_languages = manager.get_translated_languages()\n-    language_tool = getToolByName(context, \'portal_languages\')\n+    language_tool = getToolByName(context, "portal_languages")\n     language_infos = language_tool.getAvailableLanguages()\n     content_language = ILanguage(context).get_language()\n     languages = []\n     for lang in translated_languages:\n         if lang not in content_language:\n-            native = language_infos[lang].get(\'native\', None)\n-            name = language_infos[lang].get(\'name\', lang)\n-            languages.append(\n-                SimpleVocabulary.createTerm(lang, lang, native or name))\n+            native = language_infos[lang].get("native", None)\n+            name = language_infos[lang].get("name", lang)\n+            languages.append(SimpleVocabulary.createTerm(lang, lang, native or name))\n     return SimpleVocabulary(languages)\n \n \n@@ -94,13 +90,12 @@ def sort_key(language):\n \n \n @implementer(IVocabularyFactory)\n-class AllContentLanguageVocabulary(object):\n-    """ Vocabulary factory for all content languages in the portal.\n-    """\n+class AllContentLanguageVocabulary:\n+    """Vocabulary factory for all content languages in the portal."""\n \n     def __call__(self, context):\n-        context = getattr(context, \'context\', context)\n-        ltool = getToolByName(context, \'portal_languages\')\n+        context = getattr(context, "context", context)\n+        ltool = getToolByName(context, "portal_languages")\n         gsm = getGlobalSiteManager()\n         util = gsm.queryUtility(ILanguageAvailability)\n         if ltool.use_combined_language_codes:\n@@ -109,7 +104,7 @@ def __call__(self, context):\n             languages = util.getLanguages()\n \n         items = [\n-            (l, languages[l].get(\'native\', languages[l].get(\'name\', l)))\n+            (l, languages[l].get("native", languages[l].get("name", l)))\n             for l in languages\n         ]\n         items.sort(key=sort_key)\n@@ -121,13 +116,12 @@ def __call__(self, context):\n \n \n @implementer(IVocabularyFactory)\n-class AllAvailableLanguageVocabulary(object):\n-    """ Vocabulary factory for all enabled languages in the portal.\n-    """\n+class AllAvailableLanguageVocabulary:\n+    """Vocabulary factory for all enabled languages in the portal."""\n \n     def __call__(self, context):\n-        context = getattr(context, \'context\', context)\n-        ltool = getToolByName(context, \'portal_languages\')\n+        context = getattr(context, "context", context)\n+        ltool = getToolByName(context, "portal_languages")\n         gsm = getGlobalSiteManager()\n         util = gsm.queryUtility(ILanguageAvailability)\n         if ltool.use_combined_language_codes:\n@@ -137,7 +131,7 @@ def __call__(self, context):\n \n         supported_languages = ltool.supported_langs\n         items = [\n-            (l, languages[l].get(\'native\', languages[l].get(\'name\', l)))\n+            (l, languages[l].get("native", languages[l].get("name", l)))\n             for l in languages\n             if l in supported_languages\n         ]\n@@ -154,6 +148,5 @@ class RootCatalogVocabularyFactory(CatalogVocabularyFactory):\n     """Catalog Vocabulary which always uses the site root"""\n \n     def __call__(self, context, query=None):\n-        portal = getToolByName(context, \'portal_url\').getPortalObject()\n-        return super(RootCatalogVocabularyFactory, self).__call__(portal,\n-                                                                  query)\n+        portal = getToolByName(context, "portal_url").getPortalObject()\n+        return super().__call__(portal, query)\ndiff --git a/src/plone/app/multilingual/content/__init__.py b/src/plone/app/multilingual/content/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/src/plone/app/multilingual/content/__init__.py\n+++ b/src/plone/app/multilingual/content/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/plone/app/multilingual/content/lif.py b/src/plone/app/multilingual/content/lif.py\nindex 3b265b4bf..c8a297355 100644\n--- a/src/plone/app/multilingual/content/lif.py\n+++ b/src/plone/app/multilingual/content/lif.py\n@@ -1,20 +1,18 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OOBTree import OOBTree\n+from plone.dexterity.content import Container\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n \n-from plone.dexterity.content import Container\n-\n \n def connect_with_others(ob, event):\n-    pc = getToolByName(getSite(), \'portal_catalog\')\n-    results = pc.unrestrictedSearchResults(portal_type=\'LIF\')\n+    pc = getToolByName(getSite(), "portal_catalog")\n+    results = pc.unrestrictedSearchResults(portal_type="LIF")\n     for result in results:\n         lif = result._unrestrictedGetObject()\n         ob._tree = lif._tree\n         ob._count = lif._count\n         ob._mt_index = lif._mt_index\n-        if not hasattr(lif, \'__annotations__\'):\n+        if not hasattr(lif, "__annotations__"):\n             lif.__annotations__ = OOBTree()\n         ob.__annotations__ = lif.__annotations__\n         break\ndiff --git a/src/plone/app/multilingual/content/lrf.py b/src/plone/app/multilingual/content/lrf.py\nindex 467a95808..6fd9e9aff 100644\n--- a/src/plone/app/multilingual/content/lrf.py\n+++ b/src/plone/app/multilingual/content/lrf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.content.namechooser import NormalizingNameChooser\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.multilingual.interfaces import ILanguageRootFolder\n@@ -21,10 +20,11 @@ class LRFNameChooser(NormalizingNameChooser):\n     in the parent folder.\n \n     """\n+\n     def chooseName(self, name, object):\n-        chosen = super(LRFNameChooser, self).chooseName(name, object)\n+        chosen = super().chooseName(name, object)\n         if chosen in self.context.objectIds():\n-            old_id = getattr(object, \'id\', None)\n+            old_id = getattr(object, "id", None)\n             object.id = chosen\n             chooser = ITranslationIdChooser(object)\n             chosen = chooser(self.context, self.context.getId())\n@@ -37,5 +37,6 @@ class LanguageRootFolder(Container):\n     """Deprecated LanguageRootFolder custom base class"""\n \n \n-deprecated(\'LanguageRootFolder\',\n-           \'LanguageRootFolders should be migrate to DexterityContainers\')\n+deprecated(\n+    "LanguageRootFolder", "LanguageRootFolders should be migrate to DexterityContainers"\n+)\ndiff --git a/src/plone/app/multilingual/dx/__init__.py b/src/plone/app/multilingual/dx/__init__.py\nindex 40a96afc6..e69de29bb 100644\n--- a/src/plone/app/multilingual/dx/__init__.py\n+++ b/src/plone/app/multilingual/dx/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/plone/app/multilingual/dx/cloner.py b/src/plone/app/multilingual/dx/cloner.py\nindex f5c489e9a..c556be9ce 100644\n--- a/src/plone/app/multilingual/dx/cloner.py\n+++ b/src/plone/app/multilingual/dx/cloner.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.multilingual.interfaces import ILanguageIndependentFieldsManager\n from plone.app.multilingual.interfaces import ITranslationCloner\n@@ -12,22 +11,14 @@\n from zope.component import getUtility\n from zope.component import queryAdapter\n from zope.interface import implementer\n+from zope.intid.interfaces import IIntIds\n \n-import pkg_resources\n-\n-\n-try:\n-    # pkg_resources.get_distribution(\'zope.initd\')\n-    from zope.intid.interfaces import IIntIds\n-except pkg_resources.DistributionNotFound:\n-    from zope.app.intid.interfaces import IIntIds\n \n _marker = object()\n \n \n @implementer(ITranslationCloner)\n-class Cloner(object):\n-\n+class Cloner:\n     def __init__(self, context):\n         self.context = context\n \n@@ -36,8 +27,7 @@ def __call__(self, obj):\n \n \n @implementer(ILanguageIndependentFieldsManager)\n-class LanguageIndependentFieldsManager(object):\n-\n+class LanguageIndependentFieldsManager:\n     def __init__(self, context):\n         self.context = context\n \n@@ -49,37 +39,44 @@ def has_independent_fields(self):\n         return False\n \n     def copy_relation(self, relation_value, target_language):\n+        if not relation_value or relation_value.isBroken():\n+            return\n+\n         obj = relation_value.to_object\n         intids = getUtility(IIntIds)\n         translation = ITranslationManager(obj).get_translation(target_language)\n         if translation:\n             return RelationValue(intids.getId(translation))\n-        else:\n-            return RelationValue(intids.getId(obj))\n+        return RelationValue(intids.getId(obj))\n \n     def copy_fields(self, translation):\n         doomed = False\n \n         target_language = queryAdapter(translation, ILanguage).get_language()\n \n-        def relation_copier(rel, lang=target_language, fun=self.copy_relation):\n-            return fun(rel, lang)\n-\n         for schema in iterSchemata(self.context):\n             for field_name in schema:\n                 if ILanguageIndependentField.providedBy(schema[field_name]):\n                     value = getattr(schema(self.context), field_name, _marker)\n-\n                     if value == _marker:\n                         continue\n                     elif IRelationValue.providedBy(value):\n                         value = self.copy_relation(value, target_language)\n                     elif IRelationList.providedBy(schema[field_name]):\n-                        value = list(map(relation_copier, value or []))\n+                        if not value:\n+                            value = []\n+                        else:\n+                            new_value = []\n+                            for relation in value:\n+                                copied_relation = self.copy_relation(\n+                                    relation, target_language\n+                                )\n+                                if copied_relation:\n+                                    new_value.append(copied_relation)\n+                            value = new_value\n \n                     doomed = True\n-                    setattr(schema(translation),\n-                            field_name, safe_unicode(value))\n+                    setattr(schema(translation), field_name, safe_unicode(value))\n \n         # If at least one field has been copied over to the translation\n         # we need to inform subscriber to trigger an ObjectModifiedEvent\ndiff --git a/src/plone/app/multilingual/dx/directives.py b/src/plone/app/multilingual/dx/directives.py\nindex befeb3d7c..553ddf2e8 100644\n--- a/src/plone/app/multilingual/dx/directives.py\n+++ b/src/plone/app/multilingual/dx/directives.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.multilingual.dx.interfaces import MULTILINGUAL_KEY\n from plone.supermodel.directives import CheckerPlugin\n@@ -12,19 +11,19 @@\n \n \n class languageindependent(MetadataListDirective):\n-    """Directive used to mark one or more fields as \'languageindependent\'\n-    """\n+    """Directive used to mark one or more fields as \'languageindependent\'"""\n \n     key = LANGUAGE_INDEPENDENT_KEY\n-    value = \'true\'\n+    value = "true"\n \n     def factory(self, *args):\n         """The languageindependent directive accepts as arguments one or more\n         fieldnames (string) of fields which should be searchable.\n         """\n         if not args:\n-            raise TypeError(\'The languageindependent directive expects at \'\n-                            \'least one argument.\')\n+            raise TypeError(\n+                "The languageindependent directive expects at " "least one argument."\n+            )\n \n         form_interface = Interface\n         if IInterface.providedBy(args[0]):\n@@ -49,4 +48,4 @@ def fieldNames(self):\n             yield taggedValue[1]\n \n \n-__all__ = (\'languageindependent\', \'LanguageIndependentFieldsPlugin\')\n+__all__ = ("languageindependent", "LanguageIndependentFieldsPlugin")\ndiff --git a/src/plone/app/multilingual/dx/form.py b/src/plone/app/multilingual/dx/form.py\nindex 781e59723..20afebeee 100644\n--- a/src/plone/app/multilingual/dx/form.py\n+++ b/src/plone/app/multilingual/dx/form.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n-from Acquisition import aq_base\n from .interfaces import ILanguageIndependentField\n+from Acquisition import aq_base\n from plone.app.multilingual.manager import TranslationManager\n from Products.CMFCore.utils import getToolByName\n from z3c.form.interfaces import DISPLAY_MODE\n@@ -13,29 +12,25 @@\n \n \n def isLanguageIndependent(field):\n-    if field.interface is None:\n-        return False\n-\n-    if ILanguageIndependentField.providedBy(field):\n-        return True\n-    else:\n-        return False\n+    return field.interface is not None and ILanguageIndependentField.providedBy(field)\n \n \n class LanguageIndependentFieldValidator(StrictSimpleFieldValidator):\n     """Override validator so we can ignore language independent fields,\n-       these will be automatically filled later on by subscriber.createdEvent\n+    these will be automatically filled later on by subscriber.createdEvent\n     """\n+\n     def validate(self, value, force=False):\n         # always pass\n         pass\n \n \n-class LanguageIndependentFieldInputTemplate(object):\n+class LanguageIndependentFieldInputTemplate:\n     """Override input template for language independent fields with\n-       display widget, because values will be automatically filled\n-       by later on by subscriber.createdEvent.\n+    display widget, because values will be automatically filled\n+    by later on by subscriber.createdEvent.\n     """\n+\n     def __init__(self, context, request, view, field, widget):\n         self.context = context\n         self.request = request\n@@ -45,14 +40,21 @@ def __init__(self, context, request, view, field, widget):\n \n     def __call__(self, widget):\n         template = getMultiAdapter(\n-            (self.context, self.request, self.view, self.field, self.widget,),\n-            IPageTemplate, name=DISPLAY_MODE)\n+            (\n+                self.context,\n+                self.request,\n+                self.view,\n+                self.field,\n+                self.widget,\n+            ),\n+            IPageTemplate,\n+            name=DISPLAY_MODE,\n+        )\n         return template(widget)\n \n \n @implementer(IValue)\n-class ValueBase(object):\n-\n+class ValueBase:\n     def __init__(self, context, request, form, field, widget):\n         self.context = context\n         self.request = request\n@@ -62,15 +64,15 @@ def __init__(self, context, request, form, field, widget):\n \n     @property\n     def catalog(self):\n-        return getToolByName(self.context, \'portal_catalog\')\n+        return getToolByName(self.context, "portal_catalog")\n \n \n class AddingLanguageIndependentValue(ValueBase):\n     # XXX Deprecated ???\n     def getTranslationUuid(self):\n-        translation_info = getattr(self.request, \'translation_info\', {})\n-        if \'tg\' in translation_info.keys():\n-            return translation_info[\'tg\']\n+        translation_info = getattr(self.request, "translation_info", {})\n+        if "tg" in translation_info.keys():\n+            return translation_info["tg"]\n \n     def get(self):\n         uuid = self.getTranslationUuid()\ndiff --git a/src/plone/app/multilingual/dx/interfaces.py b/src/plone/app/multilingual/dx/interfaces.py\nindex 12b4dc272..ccae20dbf 100644\n--- a/src/plone/app/multilingual/dx/interfaces.py\n+++ b/src/plone/app/multilingual/dx/interfaces.py\n@@ -1,17 +1,16 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import ITranslatable\n from zope.interface import Interface\n \n \n-MULTILINGUAL_KEY = u\'plone.app.multilingual.languageindependent\'\n+MULTILINGUAL_KEY = "plone.app.multilingual.languageindependent"\n \n \n class IDexterityTranslatable(ITranslatable):\n-    """ special marker for dexterity """\n+    """special marker for dexterity"""\n \n \n class ILanguageIndependentField(Interface):\n-    """ Marker interface for language independent fields """\n+    """Marker interface for language independent fields"""\n \n \n class IMultilingualAddForm(Interface):\ndiff --git a/src/plone/app/multilingual/dx/language.py b/src/plone/app/multilingual/dx/language.py\nindex 85f92ad0e..cf9f7525a 100644\n--- a/src/plone/app/multilingual/dx/language.py\n+++ b/src/plone/app/multilingual/dx/language.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.multilingual.interfaces import LANGUAGE_INDEPENDENT\n from Products.CMFPlone.interfaces import ILanguage\n@@ -10,8 +9,7 @@\n \n \n @implementer(ILanguage)\n-class Language(object):\n-\n+class Language:\n     def __init__(self, context):\n         self.context = context\n \n@@ -20,4 +18,4 @@ def get_language(self):\n \n     def set_language(self, language):\n         self.context.language = language\n-        self.context.reindexObject(idxs=[\'Language\'])\n+        self.context.reindexObject(idxs=["Language"])\ndiff --git a/src/plone/app/multilingual/dx/schemaeditor.py b/src/plone/app/multilingual/dx/schemaeditor.py\nindex a431a6fe8..f1cc984f1 100644\n--- a/src/plone/app/multilingual/dx/schemaeditor.py\n+++ b/src/plone/app/multilingual/dx/schemaeditor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.schemaeditor.interfaces import IFieldEditorExtender\n from plone.schemaeditor.interfaces import ISchemaContext\n@@ -14,22 +13,23 @@\n from zope.schema.interfaces import IField\n \n \n-PMF = MessageFactory(\'plone.app.multilingual\')\n+PMF = MessageFactory("plone.app.multilingual")\n \n \n class IFieldLanguageIndependent(Interface):\n     languageindependent = schema.Bool(\n-        title=PMF(u\'Language independent field\'),\n+        title=PMF("Language independent field"),\n         description=PMF(\n-            u\'The field is going to be copied on all \'\n-            u\'translations when you edit the content\'),\n-        required=False)\n+            "The field is going to be copied on all "\n+            "translations when you edit the content"\n+        ),\n+        required=False,\n+    )\n \n \n @implementer(IFieldLanguageIndependent)\n @adapter(interfaces.IField)\n-class FieldLanguageIndependentAdapter(object):\n-\n+class FieldLanguageIndependentAdapter:\n     def __init__(self, field):\n         self.field = field\n \n@@ -43,7 +43,8 @@ def _write_languageindependent(self, value):\n             noLongerProvides(self.field, ILanguageIndependentField)\n \n     languageindependent = property(\n-        _read_languageindependent, _write_languageindependent)\n+        _read_languageindependent, _write_languageindependent\n+    )\n \n \n # IFieldLanguageIndependent could be registered directly as a named adapter\n@@ -52,14 +53,12 @@ def _write_languageindependent(self, value):\n # additional conditions pass:\n @adapter(ISchemaContext, IField)\n def get_li_schema(schema_context, field):\n-    fti = getattr(schema_context, \'fti\', None)\n-    lang_behavior = set(\n-        (\n-            \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\',\n-            \'plone.translatable\',\n-        ),\n-    )\n-    fti_behaviors = set(getattr(fti, \'behaviors\', []))\n+    fti = getattr(schema_context, "fti", None)\n+    lang_behavior = {\n+        "plone.app.multilingual.dx.interfaces.IDexterityTranslatable",\n+        "plone.translatable",\n+    }\n+    fti_behaviors = set(getattr(fti, "behaviors", []))\n     if lang_behavior.intersection(fti_behaviors):\n         return IFieldLanguageIndependent\n \n@@ -69,10 +68,9 @@ def get_li_schema(schema_context, field):\n provideAdapter(\n     get_li_schema,\n     provides=IFieldEditorExtender,\n-    name=\'plone.schemaeditor.languageindependent\')\n+    name="plone.schemaeditor.languageindependent",\n+)\n \n \n # And the adapter for getting/setting the value.\n-provideAdapter(\n-    FieldLanguageIndependentAdapter,\n-    provides=IFieldLanguageIndependent)\n+provideAdapter(FieldLanguageIndependentAdapter, provides=IFieldLanguageIndependent)\ndiff --git a/src/plone/app/multilingual/dx/subscriber.py b/src/plone/app/multilingual/dx/subscriber.py\nindex c0a1f1a2e..377eeeab3 100644\n--- a/src/plone/app/multilingual/dx/subscriber.py\n+++ b/src/plone/app/multilingual/dx/subscriber.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n@@ -21,28 +20,30 @@\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n \n \n-class LanguageIndependentModifier(object):\n+class LanguageIndependentModifier:\n     """Class to handle dexterity editions."""\n \n     def __call__(self, content, event):\n         """Called by the event system."""\n-        request = getattr(event.object, \'REQUEST\', getRequest())\n+        request = getattr(event.object, "REQUEST", getRequest())\n \n         if not IPloneAppMultilingualInstalled.providedBy(request):\n             return\n \n-        translation_info = getattr(request, \'translation_info\', {})\n+        translation_info = getattr(request, "translation_info", {})\n \n-        if \'tg\' in translation_info.keys():\n+        if "tg" in translation_info.keys():\n             # In case it\'s a on the fly translation avoid\n             return\n \n         if IDexterityTranslatable.providedBy(content):\n             self.canonical = ITranslationManager(content).query_canonical()\n \n-            if event.descriptions \\\n-               and len(event.descriptions) > 1 \\\n-               and event.descriptions[1] == self.canonical:\n+            if (\n+                event.descriptions\n+                and len(event.descriptions) > 1\n+                and event.descriptions[1] == self.canonical\n+            ):\n                 return\n \n             if IObjectModifiedEvent.providedBy(event):\n@@ -53,8 +54,9 @@ def bypass_security_checks(self):\n \n         # BBB for lrf-branch\n         field = registry.records.get(\n-            IMultiLanguageExtraOptionsSchema.__identifier__ +\n-            \'.bypass_languageindependent_field_permission_check\')\n+            IMultiLanguageExtraOptionsSchema.__identifier__\n+            + ".bypass_languageindependent_field_permission_check"\n+        )\n \n         return field and field.value or False\n \n@@ -72,11 +74,17 @@ def handle_modified(self, content):\n                 # allow edition of all translated objects even if the\n                 # current user whould not have permission to do that.\n                 tmp_user = UnrestrictedUser(\n-                    sm.getUser().getId(), \'\', [\'Editor\', ], \'\')\n+                    sm.getUser().getId(),\n+                    "",\n+                    [\n+                        "Editor",\n+                    ],\n+                    "",\n+                )\n \n                 # Wrap the user in the acquisition context of the portal\n                 # and finally switch the user to our new editor\n-                acl_users = getToolByName(content, \'acl_users\')\n+                acl_users = getToolByName(content, "acl_users")\n                 tmp_user = tmp_user.__of__(acl_users)\n                 newSecurityManager(None, tmp_user)\n \ndiff --git a/src/plone/app/multilingual/dx/supermodel.py b/src/plone/app/multilingual/dx/supermodel.py\nindex 527d257a4..78f21c29d 100644\n--- a/src/plone/app/multilingual/dx/supermodel.py\n+++ b/src/plone/app/multilingual/dx/supermodel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.supermodel.interfaces import IFieldMetadataHandler\n from plone.supermodel.utils import ns\n@@ -7,7 +6,7 @@\n \n \n @implementer(IFieldMetadataHandler)\n-class LanguageIndependentFieldMetadataHandler(object):\n+class LanguageIndependentFieldMetadataHandler:\n     """Define the ``lingua`` namespace.\n \n     This lets you write lingua:independent="true" on a field to mark it as\n@@ -18,11 +17,16 @@ class LanguageIndependentFieldMetadataHandler(object):\n     prefix = "lingua"\n \n     def read(self, fieldNode, schema, field):\n-        independent = fieldNode.get(ns(\'independent\', self.namespace))\n-        if independent is not None and \\\n-           independent.lower() in ("true", "on", "yes", "y", "1"):\n+        independent = fieldNode.get(ns("independent", self.namespace))\n+        if independent is not None and independent.lower() in (\n+            "true",\n+            "on",\n+            "yes",\n+            "y",\n+            "1",\n+        ):\n             alsoProvides(field, ILanguageIndependentField)\n \n     def write(self, fieldNode, schema, field):\n         if ILanguageIndependentField.providedBy(field):\n-            fieldNode.set(ns(\'independent\', self.namespace), "true")\n+            fieldNode.set(ns("independent", self.namespace), "true")\ndiff --git a/src/plone/app/multilingual/events.py b/src/plone/app/multilingual/events.py\nindex f7ec2b70e..d8e16e6f8 100644\n--- a/src/plone/app/multilingual/events.py\n+++ b/src/plone/app/multilingual/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import implementer\n from zope.interface.interfaces import IObjectEvent\n@@ -53,7 +52,7 @@ class ITranslationRemovedEvent(IObjectEvent):\n \n \n @implementer(IObjectWillBeTranslatedEvent)\n-class ObjectWillBeTranslatedEvent(object):\n+class ObjectWillBeTranslatedEvent:\n     """Sent before an object is translated."""\n \n     def __init__(self, context, language):\n@@ -62,7 +61,7 @@ def __init__(self, context, language):\n \n \n @implementer(IObjectTranslatedEvent)\n-class ObjectTranslatedEvent(object):\n+class ObjectTranslatedEvent:\n     """Sent after an object was translated."""\n \n     def __init__(self, context, target, language):\n@@ -72,9 +71,8 @@ def __init__(self, context, target, language):\n \n \n @implementer(ITranslationRegisteredEvent)\n-class TranslationRegisteredEvent(object):\n-    """Sent after a new translation was registered.\n-    """\n+class TranslationRegisteredEvent:\n+    """Sent after a new translation was registered."""\n \n     def __init__(self, context, target, language):\n         self.object = context\n@@ -83,9 +81,8 @@ def __init__(self, context, target, language):\n \n \n @implementer(ITranslationUpdatedEvent)\n-class TranslationUpdatedEvent(object):\n-    """Sent after an translation was moved to point to a different object\n-    """\n+class TranslationUpdatedEvent:\n+    """Sent after an translation was moved to point to a different object"""\n \n     def __init__(self, context, old_object, language):\n         self.object = context\n@@ -94,9 +91,8 @@ def __init__(self, context, old_object, language):\n \n \n @implementer(ITranslationRemovedEvent)\n-class TranslationRemovedEvent(object):\n-    """Sent after an translation was moved to point to a different object\n-    """\n+class TranslationRemovedEvent:\n+    """Sent after an translation was moved to point to a different object"""\n \n     def __init__(self, context, old_object, language):\n         self.object = context\ndiff --git a/src/plone/app/multilingual/factory.py b/src/plone/app/multilingual/factory.py\nindex 5714668a7..c0a7a0ec9 100644\n--- a/src/plone/app/multilingual/factory.py\n+++ b/src/plone/app/multilingual/factory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from plone.app.multilingual.interfaces import ILanguageIndependentFieldsManager\n from plone.app.multilingual.interfaces import ILanguageRootFolder\n@@ -12,9 +11,8 @@\n \n \n @implementer(ILanguageIndependentFieldsManager)\n-class DefaultLanguageIndependentFieldsManager(object):\n-    """ Default language independent fields manager.\n-    """\n+class DefaultLanguageIndependentFieldsManager:\n+    """Default language independent fields manager."""\n \n     def __init__(self, context):\n         self.context = context\n@@ -27,8 +25,7 @@ def copy_fields(self, translation):\n \n \n @implementer(ITranslationLocator)\n-class DefaultTranslationLocator(object):\n-\n+class DefaultTranslationLocator:\n     def __init__(self, context):\n         self.context = context\n \n@@ -39,21 +36,23 @@ def __call__(self, language):\n         parent = aq_parent(self.context)\n         translated_parent = parent\n         found = False\n-        while not (IPloneSiteRoot.providedBy(parent) and\n-                   not ILanguageRootFolder.providedBy(parent))\\\n-                and not found:\n+        while (\n+            not (\n+                IPloneSiteRoot.providedBy(parent)\n+                and not ILanguageRootFolder.providedBy(parent)\n+            )\n+            and not found\n+        ):\n             parent_translation = ITranslationManager(parent)\n             if parent_translation.has_translation(language):\n-                translated_parent =\\\n-                    parent_translation.get_translation(language)\n+                translated_parent = parent_translation.get_translation(language)\n                 found = True\n             parent = aq_parent(parent)\n         return translated_parent\n \n \n @implementer(ITranslationCloner)\n-class DefaultTranslationCloner(object):\n-\n+class DefaultTranslationCloner:\n     def __init__(self, context):\n         self.context = context\n \n@@ -62,25 +61,23 @@ def __call__(self, obj):\n \n \n @implementer(ITranslationIdChooser)\n-class DefaultTranslationIdChooser(object):\n-\n+class DefaultTranslationIdChooser:\n     def __init__(self, context):\n         self.context = context\n \n     def __call__(self, parent, language):\n         content_id = self.context.getId()\n-        splitted = content_id.split(\'-\')\n+        splitted = content_id.split("-")\n         # ugly heuristic (searching for something like \'de\', \'en\' etc.)\n         if len(splitted) > 1 and len(splitted[-1]) == 2:\n-            content_id = \'-\'.join(splitted[:-1])\n+            content_id = "-".join(splitted[:-1])\n         while content_id in parent.objectIds():\n-            content_id = "%s-%s" % (content_id, language)\n+            content_id = f"{content_id}-{language}"\n         return content_id\n \n \n @implementer(ITranslationFactory)\n-class DefaultTranslationFactory(object):\n-\n+class DefaultTranslationFactory:\n     def __init__(self, context):\n         self.context = context\n \n@@ -94,9 +91,8 @@ def __call__(self, language):\n         content_id = name_chooser(parent, language)\n         # creating the translation\n         new_id = parent.invokeFactory(\n-            type_name=content_type,\n-            id=content_id,\n-            language=language)\n+            type_name=content_type, id=content_id, language=language\n+        )\n         new_content = getattr(parent, new_id)\n         # clone language-independent content\n         cloner = ITranslationCloner(self.context)\ndiff --git a/src/plone/app/multilingual/indexer.py b/src/plone/app/multilingual/indexer.py\nindex b43f60a82..43ab768e5 100644\n--- a/src/plone/app/multilingual/indexer.py\n+++ b/src/plone/app/multilingual/indexer.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.indexer import indexer\ndiff --git a/src/plone/app/multilingual/interfaces.py b/src/plone/app/multilingual/interfaces.py\nindex cde3ca5a6..3e94451f5 100644\n--- a/src/plone/app/multilingual/interfaces.py\n+++ b/src/plone/app/multilingual/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import _\n from plone.app.z3cform.interfaces import IPloneFormLayer\n from plone.i18n.interfaces import ILanguageSchema\n@@ -11,23 +10,21 @@\n \n \n # CONSTANTS\n-SHARED_NAME = \'shared\'\n+SHARED_NAME = "shared"\n \n-LANGUAGE_INDEPENDENT = \'\'\n+LANGUAGE_INDEPENDENT = ""\n \n-ATTRIBUTE_NAME = \'_plone.tg\'\n+ATTRIBUTE_NAME = "_plone.tg"\n \n-NOTG = \'notg\'\n+NOTG = "notg"\n \n \n class ILanguageRootFolder(Interface):\n-    """ Language Root Folder content type interface\n-    """\n+    """Language Root Folder content type interface"""\n \n \n class ILanguageIndependentFolder(Interface):\n-    """ Language Independent Folder for content shared between languages\n-    """\n+    """Language Independent Folder for content shared between languages"""\n \n \n # Marker interface\n@@ -38,18 +35,18 @@ class ITranslatable(Interface):\n # adapters\n class ITranslationFactory(Interface):\n     """Adapts ITranslated and is capable of returning\n-       a translation clone to be added.\n+    a translation clone to be added.\n     """\n \n     def __call__(language):\n         """Create a clone of the context\n-           for translation to the given language\n+        for translation to the given language\n         """\n \n \n class ITranslationLocator(Interface):\n     """Find a parent folder for a translation.\n-       Adapts ITranslated.\n+    Adapts ITranslated.\n     """\n \n     def __call__(language):\n@@ -58,17 +55,17 @@ def __call__(language):\n \n class ITranslationIdChooser(Interface):\n     """Find a valid id for a translation\n-       Adapts ITranslated.\n+    Adapts ITranslated.\n     """\n \n     def __call__(parent, language):\n-        """ Return a valid id for the translation """\n+        """Return a valid id for the translation"""\n \n \n class ITranslationCloner(Interface):\n     """Subscription adapters to perform various aspects of cloning an object.\n-       Allows componentisation of things like workflow history cloning.\n-       Adapts ITranslated.\n+    Allows componentisation of things like workflow history cloning.\n+    Adapts ITranslated.\n     """\n \n     def __call__(object):\n@@ -76,7 +73,6 @@ def __call__(object):\n \n \n class ITranslationManager(Interface):\n-\n     def add_translation(object, intid):\n         """\n         create the translated content and register the translation\n@@ -137,7 +133,7 @@ class ILanguageIndependentFieldsManager(Interface):\n     context = Attribute("context", "A translatable object")\n \n     def copy_fields(translation):\n-        """ Copy language independent fields to translation."""\n+        """Copy language independent fields to translation."""\n \n \n class IMutableTG(Interface):\n@@ -146,12 +142,12 @@ class IMutableTG(Interface):\n     Be sure of what you are doing. Translation Group (TG) is supposed to\n     be stable and widely used\n     """\n+\n     def get():\n         """Return the TG of the context"""\n \n     def set(tg):\n-        """Set the unique id of the context with the tg value.\n-        """\n+        """Set the unique id of the context with the tg value."""\n \n \n class ITG(Interface):\n@@ -163,113 +159,122 @@ class ITG(Interface):\n \n \n class IPloneAppMultilingualInstalled(IPloneFormLayer):\n-    """ layer inherits from PloneFormLayer for better LIF widget overriding """\n+    """layer inherits from PloneFormLayer for better LIF widget overriding"""\n \n \n selector_policies = SimpleVocabulary(\n-    [SimpleTerm(value=u\'closest\',\n-                title=_(u\'Search for closest translation in parent\\\'s content \'\n-                        u\'chain.\')),\n-     SimpleTerm(value=u\'dialog\',\n-                title=_(u\'Show user dialog with information about the \'\n-                        u\'available translations.\'))]\n+    [\n+        SimpleTerm(\n+            value="closest",\n+            title=_("Search for closest translation in parent\'s content " "chain."),\n+        ),\n+        SimpleTerm(\n+            value="dialog",\n+            title=_(\n+                "Show user dialog with information about the " "available translations."\n+            ),\n+        ),\n+    ]\n )\n \n \n class IMultiLanguageExtraOptionsSchema(ILanguageSchema):\n-    """ Interface for language extra options - control panel fieldset\n-    """\n+    """Interface for language extra options - control panel fieldset"""\n \n     model.fieldset(\n-        \'multilingual\',\n-        label=_(u\'Multilingual\', default=u\'Multilingual\'),\n+        "multilingual",\n+        label=_("Multilingual", default="Multilingual"),\n         fields=[\n-            \'filter_content\',\n-            \'redirect_babel_view\',\n-            \'bypass_languageindependent_field_permission_check\',\n-            \'buttons_babel_view_up_to_nr_translations\',\n-            \'google_translation_key\',\n-            \'selector_lookup_translations_policy\'\n+            "filter_content",\n+            "redirect_babel_view",\n+            "bypass_languageindependent_field_permission_check",\n+            "buttons_babel_view_up_to_nr_translations",\n+            "google_translation_key",\n+            "selector_lookup_translations_policy",\n         ],\n     )\n \n     filter_content = schema.Bool(\n-        title=_(\n-            u"heading_filter_content",\n-            default=u"Filter content by language."),\n+        title=_("heading_filter_content", default="Filter content by language."),\n         description=_(\n-            u"description_filter_content",\n-            default=u"Filter using language the content on folder_contents"),\n+            "description_filter_content",\n+            default="Filter using language the content on folder_contents",\n+        ),\n         default=True,\n         required=False,\n-        )\n+    )\n \n     redirect_babel_view = schema.Bool(\n         title=_(\n-            u"heading_redirect_babel_view",\n-            default=u"Redirect on creation to babel view."),\n+            "heading_redirect_babel_view", default="Redirect on creation to babel view."\n+        ),\n         description=_(\n-            u"description_redirect_babel_view",\n-            default=(u"After creating a new translation redirecto to babel "\n-                     u"view")),\n+            "description_redirect_babel_view",\n+            default=("After creating a new translation redirecto to babel " "view"),\n+        ),\n         default=True,\n         required=False,\n-        )\n+    )\n \n     bypass_languageindependent_field_permission_check = schema.Bool(\n         title=_(\n-            u"heading_bypass_languageindependent_field_permission_check",\n-            default=u"Bypass language independent field permission check"),\n+            "heading_bypass_languageindependent_field_permission_check",\n+            default="Bypass language independent field permission check",\n+        ),\n         description=_(\n-            u"description_bypass_languageindependent_field_permission_check",\n-            default=u"When updating an object with language independent the "\n-                    u"field will be synced to all target languages. That can "\n-                    u"produce Unauthorized error messages because if the "\n-                    u"editor of the canonical object is not allowed to update "\n-                    u"the target language objects. Enabling this bypasses "\n-                    u"this permission check. This could also be dangerous, so "\n-                    u"think about possible security issues before enabling "\n-                    u"this."),\n+            "description_bypass_languageindependent_field_permission_check",\n+            default="When updating an object with language independent the "\n+            "field will be synced to all target languages. That can "\n+            "produce Unauthorized error messages because if the "\n+            "editor of the canonical object is not allowed to update "\n+            "the target language objects. Enabling this bypasses "\n+            "this permission check. This could also be dangerous, so "\n+            "think about possible security issues before enabling "\n+            "this.",\n+        ),\n         default=False,\n         required=False,\n     )\n \n     buttons_babel_view_up_to_nr_translations = schema.Int(\n         title=_(\n-            u"heading_buttons_babel_view_up_to_nr_translations",\n-            default=u"Use buttons in the bable view for up to how many "\n-                    u"translations?"),\n+            "heading_buttons_babel_view_up_to_nr_translations",\n+            default="Use buttons in the bable view for up to how many " "translations?",\n+        ),\n         description=_(\n-            u"description_buttons_babel_view_up_to_nr_translations",\n-            default=u"When there are many translations for an item, the "\n-                    u"number of displayed buttons for them might get too "\n-                    u"large to fit inside the template. Choose here from "\n-                    u"which number onwards a drop-down menu will be displayed "\n-                    u"instead of buttons. Zero means that buttons will always "\n-                    u"be used."),\n+            "description_buttons_babel_view_up_to_nr_translations",\n+            default="When there are many translations for an item, the "\n+            "number of displayed buttons for them might get too "\n+            "large to fit inside the template. Choose here from "\n+            "which number onwards a drop-down menu will be displayed "\n+            "instead of buttons. Zero means that buttons will always "\n+            "be used.",\n+        ),\n         default=7,\n         required=False,\n     )\n \n     google_translation_key = schema.TextLine(\n-        title=_(\n-            u"heading_google_translation_key",\n-            default=u"Google Translation API Key"),\n+        title=_("heading_google_translation_key", default="Google Translation API Key"),\n         description=_(\n-            u"description_google_translation_key",\n-            default=u"Is a paying API in order to use google translation "\n-                    u"service"),\n+            "description_google_translation_key",\n+            default="Is a paying API in order to use google translation " "service",\n+        ),\n         required=False,\n     )\n \n     selector_lookup_translations_policy = schema.Choice(\n-        title=_(u"heading_selector_lookup_translations_policy",\n-                default=u"The policy used to determine how the lookup for "\n-                        u"available translations will be made by the language "\n-                        u"selector."),\n-        description=_(u"description_selector_lookup_translations_policy",\n-                      default=u"The default language used for the content "\n-                              u"and the UI of this site."),\n+        title=_(\n+            "heading_selector_lookup_translations_policy",\n+            default="The policy used to determine how the lookup for "\n+            "available translations will be made by the language "\n+            "selector.",\n+        ),\n+        description=_(\n+            "description_selector_lookup_translations_policy",\n+            default="The default language used for the content "\n+            "and the UI of this site.",\n+        ),\n         required=True,\n-        vocabulary=selector_policies\n+        vocabulary=selector_policies,\n     )\ndiff --git a/src/plone/app/multilingual/itg.py b/src/plone/app/multilingual/itg.py\nindex e0f52980e..7870ef6c9 100644\n--- a/src/plone/app/multilingual/itg.py\n+++ b/src/plone/app/multilingual/itg.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.multilingual.interfaces import ATTRIBUTE_NAME\n from plone.app.multilingual.interfaces import IMutableTG\n@@ -21,8 +20,7 @@ def attributeTG(context):\n \n @implementer(IMutableTG)\n @adapter(ITranslatable)\n-class MutableAttributeTG(object):\n-\n+class MutableAttributeTG:\n     def __init__(self, context):\n         self.context = context\n \n@@ -40,9 +38,8 @@ def set(self, tg):\n @adapter(ITranslatable, IObjectCreatedEvent)\n def addAttributeTG(obj, event):\n \n-    if (\n-        not IObjectCopiedEvent.providedBy(event)\n-        and getattr(aq_base(obj), ATTRIBUTE_NAME, None)\n+    if not IObjectCopiedEvent.providedBy(event) and getattr(\n+        aq_base(obj), ATTRIBUTE_NAME, None\n     ):\n         return  # defensive: keep existing TG on non-copy create\n \ndiff --git a/src/plone/app/multilingual/manager.py b/src/plone/app/multilingual/manager.py\nindex 8981e66b5..f8076a73b 100644\n--- a/src/plone/app/multilingual/manager.py\n+++ b/src/plone/app/multilingual/manager.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.events import ObjectTranslatedEvent\n from plone.app.multilingual.events import ObjectWillBeTranslatedEvent\n from plone.app.multilingual.events import TranslationRegisteredEvent\n@@ -12,18 +11,20 @@\n from plone.app.multilingual.interfaces import NOTG\n from plone.app.multilingual.itg import addAttributeTG\n from plone.app.uuid.utils import uuidToObject\n+from plone.protect.interfaces import IDisableCSRFProtection\n from plone.uuid.handlers import addAttributeUUID\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ILanguage\n from zope.component.hooks import getSite\n from zope.event import notify\n+from zope.globalrequest import getRequest\n+from zope.interface import alsoProvides\n from zope.interface import implementer\n \n \n @implementer(ITranslationManager)\n-class TranslationManager(object):\n-\n+class TranslationManager:\n     def __init__(self, context):\n         self.context = context\n         if isinstance(context, str):\n@@ -31,36 +32,37 @@ def __init__(self, context):\n         else:\n             self.tg = self.get_tg(context)\n         site = getSite()\n-        self.pcatalog = getToolByName(site, \'portal_catalog\', None)\n+        self.pcatalog = getToolByName(site, "portal_catalog", None)\n \n     def get_id(self, context):\n         """If an object is created via portal factory we don\'t get a id, we\n-           have to wait till the object is really created.\n-           TODO: a better check if we are in the portal factory!\n+        have to wait till the object is really created.\n+        TODO: a better check if we are in the portal factory!\n         """\n         try:\n             context_id = IUUID(context)\n         # We must ensure that this case can\'t happen, any object translatable\n         # will have an UUID (in any case we can be at the portal factory!)\n         except KeyError:\n-            context._v_safe_write = True\n+            alsoProvides(getRequest(), IDisableCSRFProtection)\n             addAttributeUUID(context, None)\n-            context.reindexObject(idxs=[\'UID\'])\n+            context.reindexObject(idxs=["UID"])\n             context_id = IUUID(context)\n         return context_id\n \n     def get_tg(self, context):\n         """If an object is created via portal factory we don\'t get a id, we\n-           have to wait till the object is really created.\n-           TODO: a better check if we are in the portal factory!\n+        have to wait till the object is really created.\n+        TODO: a better check if we are in the portal factory!\n         """\n         try:\n             context_id = ITG(context)\n         # We must ensure that this case can\'t happen, any object translatable\n-        # will have an UUID (in any case we can be at the portal factory!)\n+        # will have an TG (in any case we can be at the portal factory!)\n         except TypeError:\n+            alsoProvides(getRequest(), IDisableCSRFProtection)\n             addAttributeTG(context, None)\n-            context.reindexObject(idxs=[\'TranslationGroup\'])\n+            context.reindexObject(idxs=["TranslationGroup"])\n             context_id = ITG(context)\n         return context_id\n \n@@ -68,26 +70,27 @@ def query_canonical(self):\n         return self.tg\n \n     def register_translation(self, language, content):\n-        """ register a translation for an existing content """\n-        if not language and language != \'\':\n-            raise KeyError(\'There is no target language\')\n+        """register a translation for an existing content"""\n+        if not language and language != "":\n+            raise KeyError("There is no target language")\n \n         if type(content) == str:\n             content = uuidToObject(content)\n \n         # Check if exists and is not myself\n         brains = self.pcatalog.unrestrictedSearchResults(\n-            TranslationGroup=self.tg, Language=language)\n+            TranslationGroup=self.tg, Language=language\n+        )\n         if len(brains) > 0 and brains[0].UID != self.get_id(content):\n             raise KeyError("Translation already exists")\n \n         # register the new translation in the canonical\n         IMutableTG(content).set(self.tg)\n-        content.reindexObject(idxs=(\'Language\', \'TranslationGroup\'))\n+        content.reindexObject(idxs=("Language", "TranslationGroup"))\n         notify(TranslationRegisteredEvent(self.context, content, language))\n \n     def update(self):\n-        """ Update the adapted item.\n+        """Update the adapted item.\n \n         If unregistered, register a Translation-Grouup (TG) for it and exit.\n \n@@ -122,9 +125,9 @@ def update(self):\n         notify(TranslationUpdatedEvent(self.context, old_object, language))\n \n     def add_translation(self, language):\n-        """ see interfaces """\n-        if not language and language != \'\':\n-            raise KeyError(\'There is no target language\')\n+        """see interfaces"""\n+        if not language and language != "":\n+            raise KeyError("There is no target language")\n         # event\n         notify(ObjectWillBeTranslatedEvent(self.context, language))\n         # create the translated object\n@@ -143,8 +146,8 @@ def add_translation_delegated(self, language):\n         Creation is delegated to factory/++add++\n         Lets return the url where we are going to create the translation\n         """\n-        if not language and language != \'\':\n-            raise KeyError(\'There is no target language\')\n+        if not language and language != "":\n+            raise KeyError("There is no target language")\n         # event\n         notify(ObjectWillBeTranslatedEvent(self.context, language))\n         # localize where we need to store the new object\n@@ -153,30 +156,32 @@ def add_translation_delegated(self, language):\n         return parent\n \n     def remove_translation(self, language):\n-        """ see interfaces """\n+        """see interfaces"""\n         translation = self.get_translation(language)\n         IMutableTG(translation).set(NOTG)\n         translation.reindexObject(idxs=("TranslationGroup",))\n         notify(TranslationRemovedEvent(self.context, translation, language))\n \n     def get_translation(self, language):\n-        """ see interfaces """\n+        """see interfaces"""\n         brains = self.pcatalog.unrestrictedSearchResults(\n-            TranslationGroup=self.tg, Language=language)\n+            TranslationGroup=self.tg, Language=language\n+        )\n         if len(brains) != 1:\n             return None\n         return brains[0].getObject()\n \n     def get_restricted_translation(self, language):\n-        """ see interfaces """\n-        brains = self.pcatalog.searchResults(TranslationGroup=self.tg,\n-                                             Language=language)\n+        """see interfaces"""\n+        brains = self.pcatalog.searchResults(\n+            TranslationGroup=self.tg, Language=language\n+        )\n         if len(brains) != 1:\n             return None\n         return brains[0].getObject()\n \n     def get_translations(self):\n-        """ see interfaces """\n+        """see interfaces"""\n         translations = {}\n         brains = self.pcatalog.unrestrictedSearchResults(\n             TranslationGroup=self.tg,\n@@ -186,7 +191,7 @@ def get_translations(self):\n         return translations\n \n     def get_restricted_translations(self):\n-        """ see interfaces """\n+        """see interfaces"""\n         translations = {}\n         brains = self.pcatalog.searchResults(TranslationGroup=self.tg)\n         for brain in brains:\n@@ -194,15 +199,14 @@ def get_restricted_translations(self):\n         return translations\n \n     def get_translated_languages(self):\n-        """ see interfaces """\n+        """see interfaces"""\n         languages = []\n-        brains = self.pcatalog.unrestrictedSearchResults(\n-            TranslationGroup=self.tg)\n+        brains = self.pcatalog.unrestrictedSearchResults(TranslationGroup=self.tg)\n         for brain in brains:\n             if brain.Language not in languages:\n                 languages.append(brain.Language)\n         return languages\n \n     def has_translation(self, language):\n-        """ see interfaces """\n+        """see interfaces"""\n         return language in self.get_translated_languages()\ndiff --git a/src/plone/app/multilingual/permissions.py b/src/plone/app/multilingual/permissions.py\nindex c3e599d0d..11aab42b1 100644\n--- a/src/plone/app/multilingual/permissions.py\n+++ b/src/plone/app/multilingual/permissions.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-ManageTranslations = \'plone.app.multilingual: Manage Translations\'\n+ManageTranslations = "plone.app.multilingual: Manage Translations"\ndiff --git a/src/plone/app/multilingual/profiles/default/metadata.xml b/src/plone/app/multilingual/profiles/default/metadata.xml\nindex e732d58b8..796db6345 100644\n--- a/src/plone/app/multilingual/profiles/default/metadata.xml\n+++ b/src/plone/app/multilingual/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>4</version>\n+  <version>1000</version>\n   <dependencies>\n     <dependency>profile-plone.app.dexterity:default</dependency>\n   </dependencies>\ndiff --git a/src/plone/app/multilingual/profiles/default/registry.xml b/src/plone/app/multilingual/profiles/default/registry.xml\nindex 81372bf5a..c191098d9 100644\n--- a/src/plone/app/multilingual/profiles/default/registry.xml\n+++ b/src/plone/app/multilingual/profiles/default/registry.xml\n@@ -4,17 +4,14 @@\n   <records prefix="plone.bundles/multilingual"\n             interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n     <value key="enabled">True</value>\n-    <value key="compile">False</value>\n-    <value key="merge_with">logged-in</value>\n     <value key="csscompilation">++resource++plone.app.multilingual.stylesheet/multilingual.css</value>\n-    <value key="last_compilation">2016-10-26 00:00:00</value>\n   </records>\n \n   <records interface="Products.CMFPlone.interfaces.ITinyMCEResourceTypesSchema" prefix="plone">\n     <value key="contains_objects" purge="false"><element>LIF</element></value>\n   </records>\n \n-  <records interface="Products.CMFPlone.interfaces.ILanguageSchema" prefix="plone">\n+  <records interface="plone.i18n.interfaces.ILanguageSchema" prefix="plone">\n     <value key="use_cookie_negotiation">True</value>\n     <value key="use_request_negotiation">False</value>\n     <value key="use_content_negotiation">True</value>\ndiff --git a/src/plone/app/multilingual/profiles/default/types/LIF.xml b/src/plone/app/multilingual/profiles/default/types/LIF.xml\nindex c1a283bf1..e6aadd68e 100644\n--- a/src/plone/app/multilingual/profiles/default/types/LIF.xml\n+++ b/src/plone/app/multilingual/profiles/default/types/LIF.xml\n@@ -2,7 +2,7 @@\n <object name="LIF" meta_type="Dexterity FTI" i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n   <property name="title" i18n:translate="">Language Independent Folder</property>\n   <property name="description" i18n:translate=""></property>\n-  <property name="icon_expr"></property>\n+  <property name="icon_expr">string:contenttype/folder</property>\n   <property name="factory">LIF</property>\n   <property name="add_view_expr">string:${folder_url}/++add++LIF</property>\n   <property name="link_target"></property>\n@@ -37,12 +37,12 @@\n   <alias from="sharing" to="@@sharing"/>\n   <alias from="view" to="(selected layout)"/>\n   <action title="View" action_id="view" category="object" condition_expr=""\n-      icon_expr="" link_target="" url_expr="string:${object_url}"\n+      icon_expr="string:toolbar-action/view" link_target="" url_expr="string:${object_url}"\n       visible="True" i18n:attributes="title">\n     <permission value="View"/>\n   </action>\n   <action title="Edit" action_id="edit" category="object" condition_expr=""\n-      icon_expr="" link_target="" url_expr="string:${object_url}/edit"\n+      icon_expr="string:toolbar-action/edit" link_target="" url_expr="string:${object_url}/edit"\n       visible="True" i18n:attributes="title">\n     <permission value="Modify portal content"/>\n   </action>\ndiff --git a/src/plone/app/multilingual/profiles/default/types/LRF.xml b/src/plone/app/multilingual/profiles/default/types/LRF.xml\nindex b1e28668f..5df0a8514 100644\n--- a/src/plone/app/multilingual/profiles/default/types/LRF.xml\n+++ b/src/plone/app/multilingual/profiles/default/types/LRF.xml\n@@ -2,7 +2,7 @@\n <object name="LRF" meta_type="Dexterity FTI" i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n   <property name="title" i18n:translate="">Language Root Folder</property>\n   <property name="description" i18n:translate=""></property>\n-  <property name="icon_expr"></property>\n+  <property name="icon_expr">string:contenttype/folder</property>\n   <property name="factory">LRF</property>\n   <property name="add_view_expr">string:${folder_url}/++add++LRF</property>\n   <property name="link_target"></property>\n@@ -38,12 +38,12 @@\n   <alias from="sharing" to="@@sharing"/>\n   <alias from="view" to="(selected layout)"/>\n   <action title="View" action_id="view" category="object" condition_expr=""\n-      icon_expr="" link_target="" url_expr="string:${object_url}"\n+      icon_expr="string:toolbar-action/view" link_target="" url_expr="string:${object_url}"\n       visible="True" i18n:attributes="title">\n     <permission value="View"/>\n   </action>\n   <action title="Edit" action_id="edit" category="object" condition_expr=""\n-      icon_expr="" link_target="" url_expr="string:${object_url}/edit"\n+      icon_expr="string:toolbar-action/edit" link_target="" url_expr="string:${object_url}/edit"\n       visible="True" i18n:attributes="title">\n     <permission value="Modify portal content"/>\n   </action>\ndiff --git a/src/plone/app/multilingual/profiles/upgrades/to_1000/types/LIF.xml b/src/plone/app/multilingual/profiles/upgrades/to_1000/types/LIF.xml\nnew file mode 100644\nindex 000000000..0a678610e\n--- /dev/null\n+++ b/src/plone/app/multilingual/profiles/upgrades/to_1000/types/LIF.xml\n@@ -0,0 +1,15 @@\n+<?xml version="1.0"?>\n+<object name="LIF" meta_type="Dexterity FTI" i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+  <property name="title" i18n:translate="">Language Independent Folder</property>\n+  <property name="icon_expr">string:contenttype/folder</property>\n+  <action title="View" action_id="view" category="object" condition_expr=""\n+      icon_expr="string:toolbar-action/view" link_target="" url_expr="string:${object_url}"\n+      visible="True" i18n:attributes="title">\n+    <permission value="View"/>\n+  </action>\n+  <action title="Edit" action_id="edit" category="object" condition_expr=""\n+      icon_expr="string:toolbar-action/edit" link_target="" url_expr="string:${object_url}/edit"\n+      visible="True" i18n:attributes="title">\n+    <permission value="Modify portal content"/>\n+  </action>\n+</object>\ndiff --git a/src/plone/app/multilingual/profiles/upgrades/to_1000/types/LRF.xml b/src/plone/app/multilingual/profiles/upgrades/to_1000/types/LRF.xml\nnew file mode 100644\nindex 000000000..f411d40b9\n--- /dev/null\n+++ b/src/plone/app/multilingual/profiles/upgrades/to_1000/types/LRF.xml\n@@ -0,0 +1,15 @@\n+<?xml version="1.0"?>\n+<object name="LRF" meta_type="Dexterity FTI" i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+  <property name="title" i18n:translate="">Language Root Folder</property>\n+  <property name="icon_expr">string:contenttype/folder</property>\n+  <action title="View" action_id="view" category="object" condition_expr=""\n+      icon_expr="string:toolbar-action/view" link_target="" url_expr="string:${object_url}"\n+      visible="True" i18n:attributes="title">\n+    <permission value="View"/>\n+  </action>\n+  <action title="Edit" action_id="edit" category="object" condition_expr=""\n+      icon_expr="string:toolbar-action/edit" link_target="" url_expr="string:${object_url}/edit"\n+      visible="True" i18n:attributes="title">\n+    <permission value="Modify portal content"/>\n+  </action>\n+</object>\ndiff --git a/src/plone/app/multilingual/setuphandlers.py b/src/plone/app/multilingual/setuphandlers.py\nindex 1145a44ed..549edf77b 100644\n--- a/src/plone/app/multilingual/setuphandlers.py\n+++ b/src/plone/app/multilingual/setuphandlers.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from logging import getLogger\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n+from plone.app.multilingual.interfaces import ITranslatable\n+from plone.app.multilingual.itg import addAttributeTG\n from Products.CMFPlone.interfaces import INonInstallable\n from Products.CMFPlone.utils import getToolByName\n from zope.component.hooks import getSite\n@@ -10,7 +11,7 @@\n \n \n try:\n-    pkg_resources.get_distribution(\'plone.app.contenttypes\')\n+    pkg_resources.get_distribution("plone.app.contenttypes")\n except pkg_resources.DistributionNotFound:\n     HAS_PLONE_APP_CONTENTTYPES = False\n else:\n@@ -18,15 +19,14 @@\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n-\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):\n         """Prevents uninstall profile from showing up in the profile list\n         when creating a Plone site.\n \n         """\n         return [\n-            u\'plone.app.multilingual:uninstall\',\n+            "plone.app.multilingual:uninstall",\n         ]\n \n \n@@ -37,31 +37,39 @@ def init_pam(tool):\n \n \n def step_default_various(context):\n-    if context.readDataFile(\'plone.app.multilingual_default.txt\') is None:\n+    if context.readDataFile("plone.app.multilingual_default.txt") is None:\n         return\n     portal = context.getSite()\n     enable_translatable_behavior(portal)\n \n+    # Add the attribute to the site root now so plone.protect won\'t cry.\n+    addAttributeTG(portal, None)\n+\n \n def enable_translatable_behavior(portal):\n     types_tool = portal.portal_types\n \n-    # Iterate through all Dexterity content type\n+    # Iterate through all Dexterity content type, except the site root\n     all_ftis = types_tool.listTypeInfo()\n-    dx_ftis = [x for x in all_ftis if getattr(x, \'behaviors\', False)]\n+    dx_ftis = (\n+        fti\n+        for fti in all_ftis\n+        if getattr(fti, "behaviors", False) and fti.getId() != "Plone Site"\n+    )\n     for fti in dx_ftis:\n-\n         # Enable translatable behavior for all types\n         behaviors = list(fti.behaviors)\n-        behaviors.extend([\n-            \'plone.translatable\',\n-        ])\n+        behaviors.extend(\n+            [\n+                "plone.translatable",\n+            ]\n+        )\n         behaviors = tuple(set(behaviors))\n-        fti._updateProperty(\'behaviors\', behaviors)\n+        fti._updateProperty("behaviors", behaviors)\n \n \n def step_uninstall_various(context):\n-    if context.readDataFile(\'plone.app.multilingual_uninstall.txt\') is None:\n+    if context.readDataFile("plone.app.multilingual_uninstall.txt") is None:\n         return\n     portal = context.getSite()\n     disable_translatable_behavior(portal)\n@@ -69,31 +77,28 @@ def step_uninstall_various(context):\n \n \n def disable_translatable_behavior(portal):\n-    """Remove p.a.multilingual behaviors from p.a.contenttypes types\n-    """\n+    """Remove p.a.multilingual behaviors from p.a.contenttypes types"""\n     types_tool = portal.portal_types\n \n     # Iterate through all Dexterity content type\n     all_ftis = types_tool.listTypeInfo()\n-    dx_ftis = [x for x in all_ftis if getattr(x, \'behaviors\', False)]\n+    dx_ftis = [x for x in all_ftis if getattr(x, "behaviors", False)]\n     for fti in dx_ftis:\n \n         # Disable translatable behavior from all types\n-        behaviors = [\n-            i for i in fti.behaviors if i !=\n-            \'plone.translatable\'\n-        ]\n-        fti._updateProperty(\'behaviors\', behaviors)\n+        behaviors = [i for i in fti.behaviors if i != "plone.translatable"]\n+        fti._updateProperty("behaviors", behaviors)\n \n \n def disable_language_switcher(portal):\n     """Remove the use of language-switcher as default view for Plone Site"""\n-    tt = getToolByName(portal, \'portal_types\')\n-    site = tt[\'Plone Site\']\n-    methods = site.view_methods\n-    site.view_methods = tuple([m for m in methods if m != \'language-switcher\'])\n-    if site.default_view == \'language-switcher\':\n-        site.default_view = \'listing_view\'\n-\n-    log = getLogger(\'setuphandlers.disable_language_switcher\')\n-    log.info(\'Language switcher disabled\')\n+    tt = getToolByName(portal, "portal_types")\n+    site = tt["Plone Site"]\n+    site.view_methods = tuple(\n+        method for method in site.view_methods if method != "language-switcher"\n+    )\n+    if site.default_view == "language-switcher":\n+        site.default_view = "listing_view"\n+\n+    log = getLogger("setuphandlers.disable_language_switcher")\n+    log.info("Language switcher disabled")\ndiff --git a/src/plone/app/multilingual/shared_uuid.py b/src/plone/app/multilingual/shared_uuid.py\nindex 4b72f00e7..c12e7dabf 100644\n--- a/src/plone/app/multilingual/shared_uuid.py\n+++ b/src/plone/app/multilingual/shared_uuid.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_chain\n from plone.app.multilingual.content.lrf import ILanguageRootFolder\n@@ -30,6 +29,6 @@ def attributeUUID(context):\n         if ILanguageIndependentFolder.providedBy(element):\n             is_language_independent = True\n         if ILanguageRootFolder.providedBy(element) and is_language_independent:\n-            uid = getattr(aq_base(context), ATTRIBUTE_NAME, None) or \'\'\n-            return uid + \'-\' + element.id if uid is not None else None\n+            uid = getattr(aq_base(context), ATTRIBUTE_NAME, None) or ""\n+            return uid + "-" + element.id if uid is not None else None\n     return getattr(context, ATTRIBUTE_NAME, None)\ndiff --git a/src/plone/app/multilingual/subscriber.py b/src/plone/app/multilingual/subscriber.py\nindex 6069fb7bd..8b78ecdda 100644\n--- a/src/plone/app/multilingual/subscriber.py\n+++ b/src/plone/app/multilingual/subscriber.py\n@@ -1,13 +1,14 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_parent\n from plone.app.multilingual.browser.utils import is_language_independent\n from plone.app.multilingual.interfaces import ILanguageIndependentFieldsManager\n from plone.app.multilingual.interfaces import ILanguageIndependentFolder\n from plone.app.multilingual.interfaces import IMutableTG\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.multilingual.interfaces import LANGUAGE_INDEPENDENT\n+from plone.app.multilingual.itg import addAttributeTG\n from plone.dexterity.interfaces import IDexterityContent\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.interfaces import IFolderish\n@@ -42,26 +43,26 @@ def reindex_language_independent(ob, event):\n     if IObjectRemovedEvent.providedBy(event):\n         return\n \n-    pc = getToolByName(ob, \'portal_catalog\')\n+    pc = getToolByName(ob, "portal_catalog")\n     parent = aq_parent(ob)\n \n     # Re-index objects just below the language independent folder\n     if ILanguageIndependentFolder.providedBy(parent):\n-        brains = pc.unrestrictedSearchResults(portal_type=\'LIF\')\n+        brains = pc.unrestrictedSearchResults(portal_type="LIF")\n         for brain in brains:\n             lif = brain._unrestrictedGetObject()\n             if lif != parent:\n                 lif[ob.id].indexObject()\n     # Re-index objects deeper inside language independent folder\n     else:\n-        language_tool = getToolByName(ob, \'portal_languages\')\n+        language_tool = getToolByName(ob, "portal_languages")\n         language_codes = language_tool.supported_langs\n-        parent_uuid = IUUID(parent).split(\'-\')[0] + \'-\'\n+        parent_uuid = IUUID(parent).split("-")[0] + "-"\n         for code in language_codes:\n             results = pc.unrestrictedSearchResults(UID=parent_uuid + code)\n             # When we have results, parent has been indexed and we can reindex:\n             for brain in results:\n-                tmp = ob.unrestrictedTraverse(brain.getPath() + \'/\' + ob.id)\n+                tmp = ob.unrestrictedTraverse(brain.getPath() + "/" + ob.id)\n                 tmp.reindexObject()\n \n \n@@ -82,18 +83,18 @@ def unindex_language_independent(ob, event):\n         return\n \n     try:\n-        pc = getToolByName(ob, \'portal_catalog\')\n+        pc = getToolByName(ob, "portal_catalog")\n     except AttributeError:\n         # When we are removing the site, there is no portal_catalog:\n         return\n \n-    language_tool = getToolByName(ob, \'portal_languages\')\n+    language_tool = getToolByName(ob, "portal_languages")\n     language_codes = language_tool.supported_langs\n     portal = getSite()\n-    uuid = IUUID(ob).split(\'-\')[0]\n+    uuid = IUUID(ob).split("-")[0]\n \n     for code in language_codes:\n-        for brain in pc.unrestrictedSearchResults(UID=uuid + \'-\' + code):\n+        for brain in pc.unrestrictedSearchResults(UID=uuid + "-" + code):\n             portal.unrestrictedTraverse(brain.getPath()).unindexObject()\n         for brain in pc.unrestrictedSearchResults(UID=uuid):\n             portal.unrestrictedTraverse(brain.getPath()).unindexObject()\n@@ -116,16 +117,19 @@ def set_recursive_language(ob, language):\n \n     elif ILanguage(ob).get_language() != language:\n         ILanguage(ob).set_language(language)\n+        if ITG(ob, None) is None:\n+            addAttributeTG(ob, None)\n+            ob.reindexObject(idxs=["TranslationGroup"])\n         ITranslationManager(ob).update()\n         reindex_object(ob)\n \n-    for child in (IFolderish.providedBy(ob) and ob.items() or ()):\n+    for child in IFolderish.providedBy(ob) and ob.items() or ():\n         if ITranslatable.providedBy(child):\n             set_recursive_language(child, language)\n \n \n def createdEvent(obj, event):\n-    """ Subscriber to set language on the child folder\n+    """Subscriber to set language on the child folder\n \n     It can be a\n     - IObjectRemovedEvent - don\'t do anything\n@@ -136,7 +140,7 @@ def createdEvent(obj, event):\n     if IObjectRemovedEvent.providedBy(event):\n         return\n \n-    request = getattr(event.object, \'REQUEST\', getRequest())\n+    request = getattr(event.object, "REQUEST", getRequest())\n     if not IPloneAppMultilingualInstalled.providedBy(request):\n         return\n \n@@ -154,7 +158,7 @@ def createdEvent(obj, event):\n     language = ILanguage(parent).get_language()\n     set_recursive_language(obj, language)\n \n-    request = getattr(event.object, \'REQUEST\', getRequest())\n+    request = getattr(event.object, "REQUEST", getRequest())\n     try:\n         ti = request.translation_info\n     except AttributeError:\n@@ -162,14 +166,16 @@ def createdEvent(obj, event):\n \n     # AT check\n     portal = getSite()\n-    portal_factory = getToolByName(portal, \'portal_factory\', None)\n-    if (not IDexterityContent.providedBy(obj) and\n-            portal_factory is not None and\n-            not portal_factory.isTemporary(obj)):\n+    portal_factory = getToolByName(portal, "portal_factory", None)\n+    if (\n+        not IDexterityContent.providedBy(obj)\n+        and portal_factory is not None\n+        and not portal_factory.isTemporary(obj)\n+    ):\n         return\n \n-    IMutableTG(obj).set(ti[\'tg\'])\n+    IMutableTG(obj).set(ti["tg"])\n     modified(obj)\n     tm = ITranslationManager(obj)\n-    old_obj = tm.get_translation(ti[\'source_language\'])\n+    old_obj = tm.get_translation(ti["source_language"])\n     ILanguageIndependentFieldsManager(old_obj).copy_fields(obj)\ndiff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py\nindex c04eceede..9073d6353 100644\n--- a/src/plone/app/multilingual/testing.py\n+++ b/src/plone/app/multilingual/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from email.header import Header\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n@@ -35,6 +34,7 @@\n try:\n     from plone.app.robotframework.utils import disableCSRFProtection\n except ImportError:\n+\n     def disableCSRFProtection():\n         pass\n \n@@ -45,41 +45,44 @@ class PloneAppMultilingualLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         # Configure ZCML\n-        xmlconfig.file(\'testing.zcml\', plone.app.multilingual,\n-                       context=configurationContext)\n+        xmlconfig.file(\n+            "testing.zcml", plone.app.multilingual, context=configurationContext\n+        )\n \n-        xmlconfig.file(\'overrides.zcml\', plone.app.multilingual,\n-                       context=configurationContext)\n+        xmlconfig.file(\n+            "overrides.zcml", plone.app.multilingual, context=configurationContext\n+        )\n \n         # Enable languageindependent-field on IRelatedItems-behavior\n         from plone.app.relationfield.behavior import IRelatedItems\n-        alsoProvides(IRelatedItems[\'relatedItems\'], ILanguageIndependentField)\n+\n+        alsoProvides(IRelatedItems["relatedItems"], ILanguageIndependentField)\n \n     def setUpPloneSite(self, portal):\n         # Activate product\n-        applyProfile(portal, \'plone.app.multilingual:default\')\n+        applyProfile(portal, "plone.app.multilingual:default")\n \n         # Empower test user\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n \n         # Enable all errors\n-        error_log = getToolByName(portal, \'error_log\')\n+        error_log = getToolByName(portal, "error_log")\n         error_log._ignored_exceptions = ()\n \n         # Set default workflow\n-        wftool = getToolByName(portal, \'portal_workflow\')\n-        wftool.setDefaultChain(\'simple_publication_workflow\')\n+        wftool = getToolByName(portal, "portal_workflow")\n+        wftool.setDefaultChain("simple_publication_workflow")\n \n         # Cleanup p.a.contenttypes stuff\n-        if \'robot-test-folder\' in portal.objectIds():\n-            portal.manage_delObjects(\'robot-test-folder\')\n+        if "robot-test-folder" in portal.objectIds():\n+            portal.manage_delObjects("robot-test-folder")\n \n \n PLONE_APP_MULTILINGUAL_FIXTURE = PloneAppMultilingualLayer()\n \n PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_MULTILINGUAL_FIXTURE,),\n-    name="plone.app.multilingual:Integration")\n+    bases=(PLONE_APP_MULTILINGUAL_FIXTURE,), name="plone.app.multilingual:Integration"\n+)\n \n \n class PloneAppMultiLingualPresetLayer(PloneSandboxLayer):\n@@ -89,44 +92,47 @@ class PloneAppMultiLingualPresetLayer(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         # Configure ZCML\n-        xmlconfig.file(\'testing.zcml\', plone.app.multilingual,\n-                       context=configurationContext)\n+        xmlconfig.file(\n+            "testing.zcml", plone.app.multilingual, context=configurationContext\n+        )\n \n-        xmlconfig.file(\'overrides.zcml\', plone.app.multilingual,\n-                       context=configurationContext)\n+        xmlconfig.file(\n+            "overrides.zcml", plone.app.multilingual, context=configurationContext\n+        )\n \n         # Enable languageindependent-field on IRelatedItems-behavior\n         from plone.app.relationfield.behavior import IRelatedItems\n-        alsoProvides(IRelatedItems[\'relatedItems\'], ILanguageIndependentField)\n+\n+        alsoProvides(IRelatedItems["relatedItems"], ILanguageIndependentField)\n \n     def setUpPloneSite(self, portal):\n         # Define available languages before installing PAM\n         # This simulates the behavior of having predefined languages\n         # in GenericSetup before installing PAM\n-        language_tool = getToolByName(portal, \'portal_languages\')\n-        language_tool.addSupportedLanguage(\'ca\')\n-        language_tool.addSupportedLanguage(\'es\')\n+        language_tool = getToolByName(portal, "portal_languages")\n+        language_tool.addSupportedLanguage("ca")\n+        language_tool.addSupportedLanguage("es")\n \n         # Enable request negotiator\n         language_tool.use_request_negotiation = True\n \n         # Activate product\n-        applyProfile(portal, \'plone.app.multilingual:default\')\n+        applyProfile(portal, "plone.app.multilingual:default")\n \n         # Empower test user\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n \n         # Enable all errors\n-        error_log = getToolByName(portal, \'error_log\')\n+        error_log = getToolByName(portal, "error_log")\n         error_log._ignored_exceptions = ()\n \n         # Set default workflow\n-        wftool = getToolByName(portal, \'portal_workflow\')\n-        wftool.setDefaultChain(\'simple_publication_workflow\')\n+        wftool = getToolByName(portal, "portal_workflow")\n+        wftool.setDefaultChain("simple_publication_workflow")\n \n         # Cleanup p.a.contenttypes stuff\n-        if \'robot-test-folder\' in portal.objectIds():\n-            portal.manage_delObjects(\'robot-test-folder\')\n+        if "robot-test-folder" in portal.objectIds():\n+            portal.manage_delObjects("robot-test-folder")\n \n         # PLEASE DELETE ME!\n         # I am a ugly hack to work around\n@@ -135,17 +141,20 @@ def setUpPloneSite(self, portal):\n         from plone.app.multilingual.dx.schemaeditor import get_li_schema\n         from plone.schemaeditor.interfaces import IFieldEditorExtender\n         from zope.component import provideAdapter\n+\n         provideAdapter(\n             get_li_schema,\n             provides=IFieldEditorExtender,\n-            name=\'plone.schemaeditor.languageindependent\')\n+            name="plone.schemaeditor.languageindependent",\n+        )\n \n \n PLONE_APP_MULTILINGUAL_PRESET_FIXTURE = PloneAppMultiLingualPresetLayer()\n \n PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,),\n-    name="plone.app.multilingual:PresetIntegration")\n+    name="plone.app.multilingual:PresetIntegration",\n+)\n \n \n class MultipleLanguagesLayer(z2.Layer):\n@@ -156,21 +165,20 @@ class MultipleLanguagesLayer(z2.Layer):\n MULTIPLE_LANGUAGES_LAYER = MultipleLanguagesLayer()\n \n PLONE_APP_MULTILINGUAL_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(MULTIPLE_LANGUAGES_LAYER,),\n-    name="plone.app.multilingual:Functional")\n+    bases=(MULTIPLE_LANGUAGES_LAYER,), name="plone.app.multilingual:Functional"\n+)\n \n \n class MultiLingual(RemoteLibrary):\n-\n     def create_content_type(self, portal_type):\n         """Create dummy content type with a single custom field"""\n         disableCSRFProtection()\n         fti = DexterityFTI(str(portal_type), title=portal_type)\n         fti.behaviors = (\n-            \'plone.basic\',\n-            \'plone.translatable\',\n+            "plone.basic",\n+            "plone.translatable",\n         )\n-        fti.model_source = u"""\\\n+        fti.model_source = """\\\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n <schema>\n <field name="custom" type="zope.schema.TextLine">\n@@ -187,7 +195,7 @@ def create_content_type(self, portal_type):\n         # - Create content type\n         # - Add content type field\n \n-    def set_field_language_independent(self, portal_type, field, value=\'1\'):\n+    def set_field_language_independent(self, portal_type, field, value="1"):\n         """Set the given field in the given portal type language independent\n         or unset from being one\n         """\n@@ -196,10 +204,10 @@ def set_field_language_independent(self, portal_type, field, value=\'1\'):\n             if field in schema:\n                 ob = schema[field]\n                 if ILanguageIndependentField.providedBy(ob):\n-                    if value.lower() not in (\'true\', \'on\', \'yes\', \'y\', \'1\'):\n+                    if value.lower() not in ("true", "on", "yes", "y", "1"):\n                         noLongerProvides(schema[ob], ILanguageIndependentField)\n                 else:\n-                    if value.lower() in (\'true\', \'on\', \'yes\', \'y\', \'1\'):\n+                    if value.lower() in ("true", "on", "yes", "y", "1"):\n                         alsoProvides(ob, ILanguageIndependentField)\n \n     def create_translation(self, *args, **kwargs):\n@@ -216,13 +224,14 @@ def create_translation(self, *args, **kwargs):\n         target_language = args[1]\n \n         # BBB: Support keywords arguments with robotframework < 2.8.3\n-        kwargs.update(dict([arg.split(\'=\', 1) for arg in args[2:]]))\n+        kwargs.update(dict([arg.split("=", 1) for arg in args[2:]]))\n \n         # Look up translatable content\n         pc = getToolByName(self, "portal_catalog")\n         uid_results = pc.unrestrictedSearchResults(UID=uid_or_path)\n         path_results = pc.unrestrictedSearchResults(\n-            path={\'query\': uid_or_path.rstrip(\'/\'), \'depth\': 0})\n+            path={"query": uid_or_path.rstrip("/"), "depth": 0}\n+        )\n         obj = (uid_results or path_results)[0]._unrestrictedGetObject()\n \n         # Translate\n@@ -234,8 +243,8 @@ def create_translation(self, *args, **kwargs):\n         data = constructMessageFromSchemata(obj, iterSchemata(obj))\n         for key, value in kwargs.items():\n             del data[key]\n-            data[key] = Header(value, \'utf-8\')\n-        del data[\'language\']\n+            data[key] = Header(value, "utf-8")\n+        del data["language"]\n         initializeObjectFromSchemata(translation, iterSchemata(obj), data)\n         notify(ObjectModifiedEvent(translation))\n \n@@ -246,18 +255,16 @@ def create_translation(self, *args, **kwargs):\n REMOTE_LIBRARY_BUNDLE_FIXTURE = RemoteLibraryLayer(\n     bases=(PLONE_FIXTURE,),\n     libraries=(AutoLogin, Content, MultiLingual),\n-    name="RemoteLibraryBundle:RobotRemote"\n+    name="RemoteLibraryBundle:RobotRemote",\n )\n \n PLONE_APP_MULTILINGUAL_ROBOT_TESTING = FunctionalTesting(\n-    bases=(MULTIPLE_LANGUAGES_LAYER,\n-           REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="plone.app.multilingual:Robot")\n+    bases=(MULTIPLE_LANGUAGES_LAYER, REMOTE_LIBRARY_BUNDLE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    name="plone.app.multilingual:Robot",\n+)\n \n \n PAM_INTEGRATION_TESTING = PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING\n-PAM_INTEGRATION_PRESET_TESTING = \\\n-    PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING\n+PAM_INTEGRATION_PRESET_TESTING = PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING\n PAM_FUNCTIONAL_TESTING = PLONE_APP_MULTILINGUAL_FUNCTIONAL_TESTING\n PAM_ROBOT_TESTING = PLONE_APP_MULTILINGUAL_ROBOT_TESTING\ndiff --git a/src/plone/app/multilingual/tests/robot/test_add_translation.robot b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\nindex 01908b40d..46a5b9ac6 100644\n--- a/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n@@ -67,17 +67,20 @@ I link the document in English as a translation\n   Click Element  css=#translations-overview .connectTranslationAction\n   Wait until page contains element  css=.select2-choices\n   Wait until element is visible  css=.select2-choices\n+  Click Element  css=#formfield-form-widgets-content .pat-relateditems-container button.mode.search\n   Input Text  css=#formfield-form-widgets-content .select2-input  en\n   Wait until page contains element  xpath=(//span[contains(., \'An English Document\')])\n   Wait until element is visible  xpath=(//span[contains(., \'An English Document\')])\n   Click Element  xpath=(//span[contains(., \'An English Document\')])\n   Wait until page contains  An English Document\n-  \n-  Click Element  xpath=(//*[contains(@class, \'plone-modal-footer\')]//button[@id=\'form-buttons-connect_translation\'])\n+\n+  # We need a complicated xpath, because for some reason a button with this id is there twice.\n+  # The first one is hidden.\n+  Click Element  xpath=(//*[contains(@class, \'modal-footer\')]//button[@id=\'form-buttons-connect_translation\'])\n   Wait until page contains element  xpath=(//h3[@class="translationTitle"])\n   Sleep  5\n   Wait until element is visible  xpath=(//h3[@class="translationTitle"])\n-  Focus  xpath=(//*[@id="translations-overview"]//a[contains(@href,"a-catalan-document")])\n+  Set Focus To Element  xpath=(//*[@id="translations-overview"]//a[contains(@href,"a-catalan-document")])\n   Click Element  xpath=(//*[@id="translations-overview"]//a[contains(text(),\'/plone/ca/a-catalan-document\')])\n   Wait until page contains  A Catalan Document\n \ndiff --git a/src/plone/app/multilingual/tests/test_alternates.py b/src/plone/app/multilingual/tests/test_alternates.py\nindex 9684fe017..68c22871d 100644\n--- a/src/plone/app/multilingual/tests/test_alternates.py\n+++ b/src/plone/app/multilingual/tests/test_alternates.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import api\n from plone.app.multilingual.browser.viewlets import AlternateLanguagesViewlet\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n@@ -14,17 +13,18 @@ class TestAlternateLanguagesViewlet(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_alternates(self):\n         # Create\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         # Translate\n-        a_en = api.translate(a_ca, \'en\')\n+        a_en = api.translate(a_ca, "en")\n \n         # Get the viewlet\n         viewlet = AlternateLanguagesViewlet(a_en, self.request, None, None)\n@@ -36,8 +36,5 @@ def test_alternates(self):\n         # Check translations\n         self.assertEqual(len(viewlet.alternates), 2)\n         for item in viewlet.alternates:\n-            self.assertIn(item[\'lang\'], translations)\n-            self.assertEqual(\n-                item[\'url\'],\n-                translations[item[\'lang\']].absolute_url()\n-            )\n+            self.assertIn(item["lang"], translations)\n+            self.assertEqual(item["url"], translations[item["lang"]].absolute_url())\ndiff --git a/src/plone/app/multilingual/tests/test_api.py b/src/plone/app/multilingual/tests/test_api.py\nindex 1e1d1b57f..ee626b6e3 100644\n--- a/src/plone/app/multilingual/tests/test_api.py\n+++ b/src/plone/app/multilingual/tests/test_api.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.event import ObjectWillBeRemovedEvent\n from plone.app.multilingual import api\n from plone.app.multilingual.interfaces import ATTRIBUTE_NAME\n@@ -21,15 +20,13 @@ class TestAPI(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_get_translation_manager(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'],\n-            \'Document\',\n-            title=u"Test document"\n+            self.portal["ca"], "Document", title="Test document"\n         )\n         tm = api.get_translation_manager(a_ca)\n         self.assertTrue(ITranslationManager.providedBy(tm))\n@@ -37,33 +34,28 @@ def test_get_translation_manager(self):\n     def test_translate(self):\n         # Create\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'],\n-            \'Document\',\n-            title=u"Test document"\n+            self.portal["ca"], "Document", title="Test document"\n         )\n \n         self.assertEqual(\n-            api.get_translation_manager(a_ca).get_translations(),\n-            {\'ca\': a_ca}\n+            api.get_translation_manager(a_ca).get_translations(), {"ca": a_ca}\n         )\n \n         # Translate\n-        a_en = api.translate(a_ca, \'en\')\n+        a_en = api.translate(a_ca, "en")\n \n         # check\n         self.assertEqual(\n             api.get_translation_manager(a_ca).get_translations(),\n-            {\'ca\': a_ca, \'en\': a_en}\n+            {"ca": a_ca, "en": a_en},\n         )\n \n     def test_get_translation_group(self):\n         # Create\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'],\n-            \'Document\',\n-            title=u"Test document"\n+            self.portal["ca"], "Document", title="Test document"\n         )\n-        a_en = api.translate(a_ca, \'en\')\n+        a_en = api.translate(a_ca, "en")\n \n         # get groups\n         tg_ca = api.get_translation_group(a_en)\n@@ -77,9 +69,7 @@ def test_get_translation_group(self):\n     def test_translateable(self):\n         # Create\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'],\n-            \'Document\',\n-            title=u"Test document"\n+            self.portal["ca"], "Document", title="Test document"\n         )\n         # check\n         self.assertTrue(api.is_translatable(a_ca))\n@@ -90,140 +80,145 @@ class TestBasicAPI(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         # Create\n         self.a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n     def test_supported_languages(self):\n-        language_tool = getToolByName(self.portal, \'portal_languages\')\n-        self.assertEqual(language_tool.getSupportedLanguages(),\n-                         [\'en\', \'ca\', \'es\'])\n+        language_tool = getToolByName(self.portal, "portal_languages")\n+        self.assertEqual(language_tool.getSupportedLanguages(), ["en", "ca", "es"])\n \n     def test_get_translations(self):\n         translations = ITranslationManager(self.a_ca).get_translations()\n-        self.assertEqual(translations, {\'ca\': self.a_ca})\n+        self.assertEqual(translations, {"ca": self.a_ca})\n \n     def test_get_translation(self):\n-        a_ca = ITranslationManager(self.a_ca).get_translation(\'ca\')\n+        a_ca = ITranslationManager(self.a_ca).get_translation("ca")\n         self.assertEqual(a_ca, self.a_ca)\n \n     def test_get_translated_languages(self):\n-        translated_languages = \\\n-            ITranslationManager(self.a_ca).get_translated_languages()\n-        self.assertEqual(translated_languages, [\'ca\'])\n+        translated_languages = ITranslationManager(self.a_ca).get_translated_languages()\n+        self.assertEqual(translated_languages, ["ca"])\n \n     def test_has_translation(self):\n         translation_manager = ITranslationManager(self.a_ca)\n-        self.assertTrue(translation_manager.has_translation(\'ca\'))\n-        self.assertFalse(translation_manager.has_translation(\'es\'))\n+        self.assertTrue(translation_manager.has_translation("ca"))\n+        self.assertFalse(translation_manager.has_translation("es"))\n \n     def test_get_restricted_translation(self):\n-        restricted_translations = \\\n-            ITranslationManager(self.a_ca).get_restricted_translations()\n-        self.assertEqual(restricted_translations, {\'ca\': self.a_ca})\n+        restricted_translations = ITranslationManager(\n+            self.a_ca\n+        ).get_restricted_translations()\n+        self.assertEqual(restricted_translations, {"ca": self.a_ca})\n \n     def test_get_restricted_translation_for_anonymous(self):\n         logout()\n-        restricted_translations = \\\n-            ITranslationManager(self.a_ca).get_restricted_translations()\n+        restricted_translations = ITranslationManager(\n+            self.a_ca\n+        ).get_restricted_translations()\n         self.assertEqual(restricted_translations, {})\n \n     def test_add_translation(self):\n         # Check that document does not exists\n-        self.assertNotIn(\'test-document\', self.portal[\'es\'].objectIds())\n+        self.assertNotIn("test-document", self.portal["es"].objectIds())\n \n         # Create es translation\n-        ITranslationManager(self.a_ca).add_translation(\'es\')\n+        ITranslationManager(self.a_ca).add_translation("es")\n \n         # Check if it exists\n-        self.assertIn(\'test-document\', self.portal[\'es\'].objectIds())\n+        self.assertIn("test-document", self.portal["es"].objectIds())\n \n         # Check language\n-        language = ILanguage(self.portal[\'es\'][\'test-document\']).get_language()\n-        self.assertEqual(language, \'es\')\n+        language = ILanguage(self.portal["es"]["test-document"]).get_language()\n+        self.assertEqual(language, "es")\n \n     def test_add_translation_delegated(self):\n         # Create es translation\n-        portal_es = ITranslationManager(\n-            self.a_ca).add_translation_delegated(\'es\')\n-        self.assertEqual(portal_es, self.portal[\'es\'])\n+        portal_es = ITranslationManager(self.a_ca).add_translation_delegated("es")\n+        self.assertEqual(portal_es, self.portal["es"])\n \n     def test_register_translation(self):\n         a_es = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u"Test document")\n+            self.portal["es"], "Document", title="Test document"\n+        )\n \n-        ITranslationManager(self.a_ca).register_translation(\'es\', a_es)\n+        ITranslationManager(self.a_ca).register_translation("es", a_es)\n \n         translations = ITranslationManager(self.a_ca).get_translations()\n-        self.assertEqual(translations, {\'ca\': self.a_ca, \'es\': a_es})\n+        self.assertEqual(translations, {"ca": self.a_ca, "es": a_es})\n \n \n class TestLanguageRootFolderAPI(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_initial_language_set(self):\n         # Create\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         # Check that the content has language\n-        self.assertEqual(ILanguage(a_ca).get_language(), \'ca\')\n+        self.assertEqual(ILanguage(a_ca).get_language(), "ca")\n \n     def test_add_translation(self):\n         # Create\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         # Translate\n-        ITranslationManager(a_ca).add_translation(\'es\')\n-        a_es = ITranslationManager(a_ca).get_translation(\'es\')\n+        ITranslationManager(a_ca).add_translation("es")\n+        a_es = ITranslationManager(a_ca).get_translation("es")\n \n         # Check that translation is registered\n         self.assertEqual(\n-            ITranslationManager(a_ca).get_translations(),\n-            {\'ca\': a_ca, \'es\': a_es}\n+            ITranslationManager(a_ca).get_translations(), {"ca": a_ca, "es": a_es}\n         )\n \n         # Check that it is in the correct folder\n-        self.assertTrue(a_es.id in self.portal[\'es\'])\n+        self.assertTrue(a_es.id in self.portal["es"])\n \n         # Check that it cannot be translated again\n         translation_manager = ITranslationManager(a_ca)\n-        self.assertRaises(KeyError, translation_manager.add_translation, \'es\')\n+        self.assertRaises(KeyError, translation_manager.add_translation, "es")\n \n         # Check that language must be valid\n         self.assertRaises(KeyError, translation_manager.add_translation, None)\n \n     def test_add_translation_delegated(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         translation_manager = ITranslationManager(a_ca)\n-        portal_es = translation_manager.add_translation_delegated(\'es\')\n+        portal_es = translation_manager.add_translation_delegated("es")\n \n-        self.assertEqual(portal_es, self.portal[\'es\'])\n+        self.assertEqual(portal_es, self.portal["es"])\n \n     def test_create_destroy_link_translations(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n-        ITranslationManager(a_ca).add_translation(\'es\')\n-        a_es = ITranslationManager(a_ca).get_translation(\'es\')\n+        ITranslationManager(a_ca).add_translation("es")\n+        a_es = ITranslationManager(a_ca).get_translation("es")\n \n         # Create duplicate content\n         another_es = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u"Test another")\n+            self.portal["es"], "Document", title="Test another"\n+        )\n \n-        ITranslationManager(another_es).add_translation(\'ca\')\n-        another_ca = ITranslationManager(another_es).get_translation(\'ca\')\n+        ITranslationManager(another_es).add_translation("ca")\n+        another_ca = ITranslationManager(another_es).get_translation("ca")\n \n         # Delete original content\n         notify(ObjectWillBeRemovedEvent(a_es))\n@@ -241,7 +236,7 @@ def test_create_destroy_link_translations(self):\n         self.assertTrue(isinstance(id_a_ca, str))\n \n         # Make documents translations of each other\n-        ITranslationManager(a_ca).register_translation(\'es\', another_es)\n+        ITranslationManager(a_ca).register_translation("es", another_es)\n \n         # Check that canonical values are now the same\n         id_a_ca = ITranslationManager(a_ca).query_canonical()\n@@ -252,56 +247,60 @@ def test_create_destroy_link_translations(self):\n     def test_create_relink_translations(self):\n         """We check the update function here"""\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         b_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         b_es = createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u"Test document")\n-        ITranslationManager(b_es).add_translation(\'ca\')\n-        ITranslationManager(a_ca).register_translation(\'es\', b_es)\n+            self.portal["es"], "Document", title="Test document"\n+        )\n+        ITranslationManager(b_es).add_translation("ca")\n+        ITranslationManager(a_ca).register_translation("es", b_es)\n \n-        self.assertFalse(ITranslationManager(b_ca).has_translation(\'es\'))\n-        self.assertEqual(ITranslationManager(b_es).get_translation(\'ca\'), a_ca)\n+        self.assertFalse(ITranslationManager(b_ca).has_translation("es"))\n+        self.assertEqual(ITranslationManager(b_es).get_translation("ca"), a_ca)\n \n     def test_id_chooser(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         chooser = ITranslationIdChooser(a_ca)\n-        self.assertEqual(chooser(self.portal, \'es\'), \'test-document\')\n+        self.assertEqual(chooser(self.portal, "es"), "test-document")\n \n-        createContentInContainer(\n-            self.portal, \'Document\', title=u"Another test")\n+        createContentInContainer(self.portal, "Document", title="Another test")\n \n         b_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Another test")\n+            self.portal["ca"], "Document", title="Another test"\n+        )\n \n         chooser = ITranslationIdChooser(b_ca)\n-        self.assertEqual(chooser(self.portal, \'es\'), \'another-test-es\')\n+        self.assertEqual(chooser(self.portal, "es"), "another-test-es")\n \n     def test_locator(self):\n         folder_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Test folder")\n+            self.portal["ca"], "Folder", title="Test folder"\n+        )\n         subfolder_ca = createContentInContainer(\n-            self.portal[\'ca\'][\'test-folder\'], \'Folder\', title=u"Test folder")\n+            self.portal["ca"]["test-folder"], "Folder", title="Test folder"\n+        )\n \n         locator = ITranslationLocator(subfolder_ca)\n-        self.assertEqual(locator(\'es\'), self.portal[\'es\'])\n+        self.assertEqual(locator("es"), self.portal["es"])\n \n-        ITranslationManager(folder_ca).add_translation(\'es\')\n-        folder_es = ITranslationManager(folder_ca).get_translation(\'es\')\n+        ITranslationManager(folder_ca).add_translation("es")\n+        folder_es = ITranslationManager(folder_ca).get_translation("es")\n \n         child_locator = ITranslationLocator(subfolder_ca)\n-        self.assertEqual(child_locator(\'es\'), folder_es)\n+        self.assertEqual(child_locator("es"), folder_es)\n \n     def test_tg_view(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'],\n-            \'Document\',\n-            title=u"Test document"\n+            self.portal["ca"], "Document", title="Test document"\n         )\n         tg = getattr(a_ca, ATTRIBUTE_NAME)\n         self.assertTrue(bool(tg))\n-        self.assertEqual(a_ca.restrictedTraverse(\'@@tg\')(), tg)\n+        self.assertEqual(a_ca.restrictedTraverse("@@tg")(), tg)\ndiff --git a/src/plone/app/multilingual/tests/test_catalog.py b/src/plone/app/multilingual/tests/test_catalog.py\nindex e8d911e14..c705ad719 100644\n--- a/src/plone/app/multilingual/tests/test_catalog.py\n+++ b/src/plone/app/multilingual/tests/test_catalog.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n from plone.app.multilingual.interfaces import LANGUAGE_INDEPENDENT\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n@@ -13,47 +12,46 @@ class TestIndependentLanguageFolder(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         createContentInContainer(\n-            self.portal[\'en\'][\'assets\'], \'Document\', title=u"Test document")\n+            self.portal["en"]["assets"], "Document", title="Test document"\n+        )\n         # ^ This will be shadowed to all language independent folders\n \n-        createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+        createContentInContainer(self.portal["ca"], "Document", title="Test document")\n \n-        createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u"Test document")\n+        createContentInContainer(self.portal["es"], "Document", title="Test document")\n \n-        createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u"Test document")\n+        createContentInContainer(self.portal["en"], "Document", title="Test document")\n \n     def test_query_with_all(self):\n-        catalog = getToolByName(self.portal, \'portal_catalog\')\n+        catalog = getToolByName(self.portal, "portal_catalog")\n \n-        used_langs = \\\n-            set([x.Language for x in catalog.searchResults(self.request)])\n+        used_langs = {x.Language for x in catalog.searchResults(self.request)}\n \n         self.assertIn(LANGUAGE_INDEPENDENT, used_langs)\n-        self.assertIn(\'es\', used_langs)\n-        self.assertIn(\'ca\', used_langs)\n-        self.assertIn(\'en\', used_langs)\n+        self.assertIn("es", used_langs)\n+        self.assertIn("ca", used_langs)\n+        self.assertIn("en", used_langs)\n \n     def test_query_for_language_independent_content(self):\n-        catalog = getToolByName(self.portal, \'portal_catalog\')\n+        catalog = getToolByName(self.portal, "portal_catalog")\n \n-        kw = {\'Language\': LANGUAGE_INDEPENDENT}\n-        lang_independent = \\\n-            [x.Language for x in catalog.searchResults(self.request, **kw)]\n+        kw = {"Language": LANGUAGE_INDEPENDENT}\n+        lang_independent = [\n+            x.Language for x in catalog.searchResults(self.request, **kw)\n+        ]\n \n         self.assertIn(LANGUAGE_INDEPENDENT, lang_independent)\n         self.assertEqual(len(lang_independent), 3)\n \n     def test_query_for_one_language(self):\n-        catalog = getToolByName(self.portal, \'portal_catalog\')\n+        catalog = getToolByName(self.portal, "portal_catalog")\n \n-        kw = {\'Language\': \'ca\'}\n-        self.assertEqual([x.Language for x\n-                          in catalog.searchResults(self.request, **kw)],\n-                         [\'ca\', \'ca\', \'ca\'])\n+        kw = {"Language": "ca"}\n+        self.assertEqual(\n+            [x.Language for x in catalog.searchResults(self.request, **kw)],\n+            ["ca", "ca", "ca"],\n+        )\ndiff --git a/src/plone/app/multilingual/tests/test_directives.py b/src/plone/app/multilingual/tests/test_directives.py\nindex 07aee0fb8..2787f6825 100644\n--- a/src/plone/app/multilingual/tests/test_directives.py\n+++ b/src/plone/app/multilingual/tests/test_directives.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.dx.directives import languageindependent\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n@@ -15,20 +14,20 @@ class TestDirectives(unittest.TestCase):\n     layer = PAM_INTEGRATION_TESTING\n \n     def test_schema_directives_store_tagged_values(self):\n-        """Test, if the schema directive values are stored as tagged values.\n-        """\n+        """Test, if the schema directive values are stored as tagged values."""\n \n         class IDummy(model.Schema):\n-            """Dummy schema class.\n-            """\n-            languageindependent(\'foo\')\n-            foo = schema.TextLine(title=u\'Foo\')\n+            """Dummy schema class."""\n+\n+            languageindependent("foo")\n+            foo = schema.TextLine(title="Foo")\n \n-        self.assertEqual([(Interface, \'foo\', \'true\')],\n-                         mergedTaggedValueList(IDummy,\n-                                               languageindependent.key))\n+        self.assertEqual(\n+            [(Interface, "foo", "true")],\n+            mergedTaggedValueList(IDummy, languageindependent.key),\n+        )\n \n-        self.assertTrue(ILanguageIndependentField.providedBy(IDummy[\'foo\']))\n+        self.assertTrue(ILanguageIndependentField.providedBy(IDummy["foo"]))\n \n     def test_inherited_schema_still_has_tagged_value(self):\n         """An inherited schema should still have the tagged value information\n@@ -36,19 +35,22 @@ def test_inherited_schema_still_has_tagged_value(self):\n         """\n \n         class IFoo(model.Schema):\n-            """Class with a searchable field\n-            """\n-            languageindependent(\'baz\')\n-            baz = schema.TextLine(title=u\'baz\')\n+            """Class with a searchable field"""\n \n-        class IBar(IFoo):\n-            """Schema class which inherits a field from IFoo.\n-            """\n+            languageindependent("baz")\n+            baz = schema.TextLine(title="baz")\n \n-        self.assertEqual([(Interface, \'baz\', \'true\')],\n-                         mergedTaggedValueList(IFoo, languageindependent.key))\n-        self.assertTrue(ILanguageIndependentField.providedBy(IFoo[\'baz\']))\n-\n-        self.assertEqual([(Interface, \'baz\', \'true\')],\n-                         mergedTaggedValueList(IBar, languageindependent.key))\n-        self.assertTrue(ILanguageIndependentField.providedBy(IBar[\'baz\']))\n+        class IBar(IFoo):\n+            """Schema class which inherits a field from IFoo."""\n+\n+        self.assertEqual(\n+            [(Interface, "baz", "true")],\n+            mergedTaggedValueList(IFoo, languageindependent.key),\n+        )\n+        self.assertTrue(ILanguageIndependentField.providedBy(IFoo["baz"]))\n+\n+        self.assertEqual(\n+            [(Interface, "baz", "true")],\n+            mergedTaggedValueList(IBar, languageindependent.key),\n+        )\n+        self.assertTrue(ILanguageIndependentField.providedBy(IBar["baz"]))\ndiff --git a/src/plone/app/multilingual/tests/test_form.py b/src/plone/app/multilingual/tests/test_form.py\nindex 745f042d3..e1bb56512 100644\n--- a/src/plone/app/multilingual/tests/test_form.py\n+++ b/src/plone/app/multilingual/tests/test_form.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n@@ -16,66 +15,69 @@ class TestForm(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         # Setup test browser\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic %s:%s\' % (\n-                SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n+        )\n \n     def test_all_translation_links_are_shown(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n         self.browser.open(a_ca.absolute_url())\n-        self.assertIn(\'plone-contentmenu-multilingual\', self.browser.contents)\n-        self.assertIn(\'translate_into_es\', self.browser.contents)\n-        self.assertIn(\'translate_into_en\', self.browser.contents)\n+        self.assertIn("plone-contentmenu-multilingual", self.browser.contents)\n+        self.assertIn("translate_into_es", self.browser.contents)\n+        self.assertIn("translate_into_en", self.browser.contents)\n \n     def test_translation_form_creates_translation(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n         # Translate content\n-        self.browser.open(\n-            a_ca.absolute_url() + \'/@@create_translation?language=en\')\n+        self.browser.open(a_ca.absolute_url() + "/@@create_translation?language=en")\n \n         # Fill in translation details\n         self.browser.getControl(\n-            name="form.widgets.IDublinCore.title").value = u"Test document"\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "Test document"\n         self.browser.getControl(name="form.buttons.save").click()\n \n         self.portal._p_jar.sync()\n \n-        self.assertIn("test-document", self.portal[\'en\'].objectIds())\n+        self.assertIn("test-document", self.portal["en"].objectIds())\n \n         self.browser.open(a_ca.absolute_url())\n-        self.assertIn(\'plone-contentmenu-multilingual\', self.browser.contents)\n-        self.assertIn(\'translate_into_es\', self.browser.contents)\n-        self.assertNotIn(\'translate_into_en\', self.browser.contents)\n+        self.assertIn("plone-contentmenu-multilingual", self.browser.contents)\n+        self.assertIn("translate_into_es", self.browser.contents)\n+        self.assertNotIn("translate_into_en", self.browser.contents)\n \n     def test_translation_form_prevents_translating_twice(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n         # Translate content\n-        self.browser.open(\n-            a_ca.absolute_url() + \'/@@create_translation?language=en\')\n+        self.browser.open(a_ca.absolute_url() + "/@@create_translation?language=en")\n \n         # Save ++add++translation... URL\n         add_translation_url = self.browser.url\n \n         # Fill in translation details\n         self.browser.getControl(\n-            name="form.widgets.IDublinCore.title").value = u"Test document"\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "Test document"\n         self.browser.getControl(name="form.buttons.save").click()\n \n         self.portal._p_jar.sync()\n@@ -84,33 +86,36 @@ def test_translation_form_prevents_translating_twice(self):\n         self.browser.open(add_translation_url)\n \n         # Which should now redirect to the created translation\n-        self.assertEqual(self.portal[\'en\'][\'test-document\'].absolute_url(),\n-                         self.browser.url)\n+        self.assertEqual(\n+            self.portal["en"]["test-document"].absolute_url(), self.browser.url\n+        )\n \n     def test_translation_can_be_unregistered(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n         # Create translation\n-        self.browser.open(a_ca.absolute_url() +\n-                          \'/@@create_translation?language=en\')\n+        self.browser.open(a_ca.absolute_url() + "/@@create_translation?language=en")\n \n         # Fill in translation details\n         self.browser.getControl(\n-            name="form.widgets.IDublinCore.title").value = u"Test document"\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "Test document"\n         self.browser.getControl(name="form.buttons.save").click()\n \n         # Unregister translation\n-        self.browser.open(a_ca.absolute_url() +\n-                          \'/disconnect_translation?came_from={0}&language=en\'\n-                          .format(a_ca.UID()))\n+        self.browser.open(\n+            a_ca.absolute_url()\n+            + f"/disconnect_translation?came_from={a_ca.UID()}&language=en"\n+        )\n         self.browser.getForm(index=1).submit()\n \n         self.portal._p_jar.sync()\n \n-        self.assertNotIn(\'en\', ITranslationManager(a_ca).get_translations())\n+        self.assertNotIn("en", ITranslationManager(a_ca).get_translations())\n \n         # self.assertEqual(\n         #     self.browser.getControl(name="form.widgets.languages:list").value,\n@@ -122,14 +127,14 @@ def test_translation_can_be_unregistered(self):\n \n         # Translation is unregistered\n         self.browser.open(a_ca.absolute_url())\n-        self.assertIn(\'plone-contentmenu-multilingual\', self.browser.contents)\n-        self.assertIn(\'translate_into_es\', self.browser.contents)\n-        self.assertIn(\'translate_into_en\', self.browser.contents)\n+        self.assertIn("plone-contentmenu-multilingual", self.browser.contents)\n+        self.assertIn("translate_into_es", self.browser.contents)\n+        self.assertIn("translate_into_en", self.browser.contents)\n \n         transaction.commit()\n \n         # Content is still available\n-        self.assertIn(\'test-document\', self.portal[\'en\'].contentIds())\n+        self.assertIn("test-document", self.portal["en"].contentIds())\n \n     # Removed because its testes on robot framework with the relation pattern\n     # def test_registering_translation(self):\n@@ -171,62 +176,69 @@ def test_translation_can_be_unregistered(self):\n \n     def test_translation_can_be_removed_by_deleting(self):\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n         # Translate content\n-        self.browser.open(a_ca.absolute_url() +\n-                          \'/@@create_translation?language=en\')\n+        self.browser.open(a_ca.absolute_url() + "/@@create_translation?language=en")\n \n         # Fill in translation details\n         self.browser.getControl(\n-            name="form.widgets.IDublinCore.title").value = u"Test document"\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "Test document"\n         self.browser.getControl(name="form.buttons.save").click()\n \n         # Remove translation\n         self.browser.open(\n-            ITranslationManager(a_ca).get_translation(\'en\').absolute_url() +\n-            \'/delete_confirmation\')\n-        self.browser.getControl(name=\'form.buttons.Delete\').click()\n+            ITranslationManager(a_ca).get_translation("en").absolute_url()\n+            + "/delete_confirmation"\n+        )\n+        self.browser.getControl(name="form.buttons.Delete").click()\n \n         self.portal._p_jar.sync()\n-        self.assertNotIn(\'en\', ITranslationManager(a_ca).get_translations())\n+        self.assertNotIn("en", ITranslationManager(a_ca).get_translations())\n \n     def test_folderish_content_can_be_translated(self):\n-        createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Test folder")\n+        createContentInContainer(self.portal["ca"], "Folder", title="Test folder")\n \n         transaction.commit()\n \n-        self.browser.open(self.portal.absolute_url() +\n-                          \'/ca/test-folder/@@create_translation?language=en\')\n+        self.browser.open(\n+            self.portal.absolute_url()\n+            + "/ca/test-folder/@@create_translation?language=en"\n+        )\n \n         self.browser.getControl(\n-            name="form.widgets.IDublinCore.title").value = u"Test folder"\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "Test folder"\n         self.browser.getControl(name="form.buttons.save").click()\n \n         self.portal._p_jar.sync()\n \n-        self.assertIn(\'test-folder\', self.portal[\'en\'].objectIds())\n+        self.assertIn("test-folder", self.portal["en"].objectIds())\n \n     def test_content_in_folders_can_be_translated(self):\n         af_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Test folder")\n+            self.portal["ca"], "Folder", title="Test folder"\n+        )\n \n         b_ca = createContentInContainer(\n-            self.portal[\'ca\'][\'test-folder\'],\n-            \'Document\', title=u"Test document")\n+            self.portal["ca"]["test-folder"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n-        self.browser.open(af_ca.absolute_url() + \'/\' + b_ca.id +\n-                          \'/@@create_translation?language=en\')\n+        self.browser.open(\n+            af_ca.absolute_url() + "/" + b_ca.id + "/@@create_translation?language=en"\n+        )\n \n         self.browser.getControl(\n-            name="form.widgets.IDublinCore.title").value = u"Test folder"\n+            name="form.widgets.IDublinCore.title"\n+        ).value = "Test folder"\n         self.browser.getControl(name="form.buttons.save").click()\n \n         self.portal._p_jar.sync()\n \n-        self.assertIn(\'test-folder\', self.portal[\'en\'].objectIds())\n+        self.assertIn("test-folder", self.portal["en"].objectIds())\ndiff --git a/src/plone/app/multilingual/tests/test_helper_views.py b/src/plone/app/multilingual/tests/test_helper_views.py\nindex 9f3f07ff9..27ad53312 100644\n--- a/src/plone/app/multilingual/tests/test_helper_views.py\n+++ b/src/plone/app/multilingual/tests/test_helper_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import api\n from plone.app.multilingual.browser.utils import multilingualMoveObject\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n@@ -23,26 +22,27 @@ class PAMFuncTestHelperViews(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.browser.addHeader(\'Authorization\',\n-                               \'Basic %s:%s\' % (TEST_USER_NAME,\n-                                                TEST_USER_PASSWORD))\n+        self.browser.addHeader(\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n         self.settings = getUtility(IRegistry).forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\')\n+            ILanguageSchema, prefix="plone"\n+        )\n \n     def test_universal_link_view(self):\n         self.settings.use_request_negotiation = True\n-        self.browser.addHeader(\'Accept-Language\', \'ca\')\n+        self.browser.addHeader("Accept-Language", "ca")\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n-        a_en = api.translate(a_ca, \'en\')\n-        api.translate(a_ca, \'es\')\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n+        a_en = api.translate(a_ca, "en")\n+        api.translate(a_ca, "es")\n \n         transaction.commit()\n \n@@ -56,89 +56,96 @@ class PAMIntTestHelperViews(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_move_content_proper_language_folder(self):\n         f_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Test folder")\n+            self.portal["ca"], "Folder", title="Test folder"\n+        )\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'][\'test-folder\'],\n-            \'Document\', title=u"Test document")\n+            self.portal["ca"]["test-folder"], "Document", title="Test document"\n+        )\n \n         # Change the content language of the created folder to \'es\'\n-        multilingualMoveObject(f_ca, \'es\')\n+        multilingualMoveObject(f_ca, "es")\n \n-        self.assertIn(f_ca.id, self.portal[\'es\'].objectIds())\n-        self.assertEqual(f_ca, self.portal[\'es\'][f_ca.id])\n+        self.assertIn(f_ca.id, self.portal["es"].objectIds())\n+        self.assertEqual(f_ca, self.portal["es"][f_ca.id])\n \n-        self.assertIn(a_ca.id, self.portal[\'es\'][f_ca.id].objectIds())\n-        self.assertEqual(a_ca, self.portal[\'es\'][f_ca.id][a_ca.id])\n+        self.assertIn(a_ca.id, self.portal["es"][f_ca.id].objectIds())\n+        self.assertEqual(a_ca, self.portal["es"][f_ca.id][a_ca.id])\n \n-        adapter = ILanguage(self.portal[\'es\'][f_ca.id])\n-        self.assertEqual(adapter.get_language(), \'es\')\n+        adapter = ILanguage(self.portal["es"][f_ca.id])\n+        self.assertEqual(adapter.get_language(), "es")\n \n-        adapter = ILanguage(self.portal[\'es\'][f_ca.id][a_ca.id])\n-        self.assertEqual(adapter.get_language(), \'es\')\n+        adapter = ILanguage(self.portal["es"][f_ca.id][a_ca.id])\n+        self.assertEqual(adapter.get_language(), "es")\n \n     def test_move_content_existing_translation_inside(self):\n         f_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Test folder")\n+            self.portal["ca"], "Folder", title="Test folder"\n+        )\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'][\'test-folder\'],\n-            \'Document\', title=u"Test document")\n+            self.portal["ca"]["test-folder"], "Document", title="Test document"\n+        )\n \n-        a_en = api.translate(a_ca, \'en\')\n-        translations = ITranslationManager(self.portal[\'en\'][a_en.id])\n-        self.assertEqual(translations.get_translations(),\n-                         {\'ca\': self.portal[\'ca\'][f_ca.id][a_ca.id],\n-                          \'en\': self.portal[\'en\'][a_ca.id]})\n+        a_en = api.translate(a_ca, "en")\n+        translations = ITranslationManager(self.portal["en"][a_en.id])\n+        self.assertEqual(\n+            translations.get_translations(),\n+            {\n+                "ca": self.portal["ca"][f_ca.id][a_ca.id],\n+                "en": self.portal["en"][a_ca.id],\n+            },\n+        )\n \n-        self.assertIn(a_en.id, self.portal[\'en\'].objectIds())\n-        self.assertEqual(a_en, self.portal[\'en\'][a_en.id])\n+        self.assertIn(a_en.id, self.portal["en"].objectIds())\n+        self.assertEqual(a_en, self.portal["en"][a_en.id])\n \n         # Change the content language of the created folder to \'en\'\n-        multilingualMoveObject(f_ca, \'en\')\n+        multilingualMoveObject(f_ca, "en")\n \n-        self.assertIn(f_ca.id, self.portal[\'en\'].objectIds())\n-        self.assertEqual(f_ca, self.portal[\'en\'][f_ca.id])\n+        self.assertIn(f_ca.id, self.portal["en"].objectIds())\n+        self.assertEqual(f_ca, self.portal["en"][f_ca.id])\n \n-        self.assertIn(a_ca.id, self.portal[\'en\'][f_ca.id].objectIds())\n-        self.assertEqual(a_ca, self.portal[\'en\'][f_ca.id][a_ca.id])\n+        self.assertIn(a_ca.id, self.portal["en"][f_ca.id].objectIds())\n+        self.assertEqual(a_ca, self.portal["en"][f_ca.id][a_ca.id])\n \n-        adapter = ILanguage(self.portal[\'en\'][f_ca.id])\n-        self.assertEqual(adapter.get_language(), \'en\')\n+        adapter = ILanguage(self.portal["en"][f_ca.id])\n+        self.assertEqual(adapter.get_language(), "en")\n \n-        adapter = ILanguage(self.portal[\'en\'][f_ca.id][a_ca.id])\n-        self.assertEqual(adapter.get_language(), \'en\')\n+        adapter = ILanguage(self.portal["en"][f_ca.id][a_ca.id])\n+        self.assertEqual(adapter.get_language(), "en")\n \n-        translations = ITranslationManager(self.portal[\'en\'][f_ca.id][a_ca.id])\n-        self.assertEqual(translations.get_translations(),\n-                         {\'en\': self.portal[\'en\'][f_ca.id][a_ca.id]})\n+        translations = ITranslationManager(self.portal["en"][f_ca.id][a_ca.id])\n+        self.assertEqual(\n+            translations.get_translations(), {"en": self.portal["en"][f_ca.id][a_ca.id]}\n+        )\n \n-        translations = ITranslationManager(self.portal[\'en\'][a_en.id])\n-        self.assertEqual(translations.get_translations(),\n-                         {\'en\': self.portal[\'en\'][a_en.id]})\n+        translations = ITranslationManager(self.portal["en"][a_en.id])\n+        self.assertEqual(\n+            translations.get_translations(), {"en": self.portal["en"][a_en.id]}\n+        )\n \n     def test_modify_translations_delete(self):\n-        createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Test folder")\n+        createContentInContainer(self.portal["ca"], "Folder", title="Test folder")\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'][\'test-folder\'],\n-            \'Document\', title=u"Test document")\n+            self.portal["ca"]["test-folder"], "Document", title="Test document"\n+        )\n \n-        a_en = api.translate(a_ca, \'en\')\n+        a_en = api.translate(a_ca, "en")\n \n-        view = a_en.restrictedTraverse(\'modify_translations\')()\n+        view = a_en.restrictedTraverse("modify_translations")()\n         self.assertIn(\n             \'href="http://nohost/plone/ca/test-folder/test-document/delete_confirmation" \'  # noqa\xc2\xa7\n             \'title="Delete translated item"\',\n             view,\n-            \'modify_translations was missing delete link for translation\'\n+            "modify_translations was missing delete link for translation",\n         )\n \n         # Test https://github.com/plone/plone.app.multilingual/pull/283\n@@ -146,5 +153,5 @@ def test_modify_translations_delete(self):\n             \'href="http://nohost/plone/en/test-document/delete_confirmation" \'  # noqa\xc2\xa7\n             \'title="Delete translated item"\',\n             view,\n-            \'modify_translations contained delete link for the context\'\n+            "modify_translations contained delete link for the context",\n         )\ndiff --git a/src/plone/app/multilingual/tests/test_lif.py b/src/plone/app/multilingual/tests/test_lif.py\nindex d3faf4f04..f007c2992 100644\n--- a/src/plone/app/multilingual/tests/test_lif.py\n+++ b/src/plone/app/multilingual/tests/test_lif.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import api\n from plone.app.multilingual.dx.interfaces import ILanguageIndependentField\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n@@ -28,18 +27,18 @@ class TestLanguageIndependentFieldOnAddTranslationForm(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         alsoProvides(self.request, IDefaultBrowserLayer)\n         alsoProvides(self.request, IPloneAppMultilingualInstalled)\n \n-        fti = DexterityFTI(\'Feedback\')\n+        fti = DexterityFTI("Feedback")\n         fti.behaviors = (\n-            \'plone.basic\',\n-            \'plone.namefromtitle\',\n-            \'plone.translatable\',\n+            "plone.basic",\n+            "plone.namefromtitle",\n+            "plone.translatable",\n         )\n-        fti.model_source = u"""\\\n+        fti.model_source = """\\\n <model xmlns="http://namespaces.plone.org/supermodel/schema"\n        xmlns:lingua="http://namespaces.plone.org/supermodel/lingua">\n   <schema>\n@@ -51,28 +50,31 @@ def setUp(self):\n     </field>\n   </schema>\n </model>"""\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        portal_types._setObject(\'Feedback\', fti)\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        portal_types._setObject("Feedback", fti)\n \n         self.document = createContentInContainer(\n-            self.portal[\'en\'], \'Feedback\', checkConstraints=False,\n-            title=u\'Test feedback\', mandatory_feedback=u\'This is a test\')\n+            self.portal["en"],\n+            "Feedback",\n+            checkConstraints=False,\n+            title="Test feedback",\n+            mandatory_feedback="This is a test",\n+        )\n \n         # Call \'create_translation\' to annotate request\n-        self.request.form[\'language\'] = \'ca\'\n+        self.request.form["language"] = "ca"\n         self.redirect = getMultiAdapter(\n-            (self.document, self.request),\n-            name="create_translation"\n+            (self.document, self.request), name="create_translation"\n         )\n         self.redirect()\n \n         # Look up the ++addtranslation++ with annotated request in place\n-        self.view = self.portal[\'ca\'].restrictedTraverse(\n-            \'++addtranslation++\' + IUUID(self.document)\n+        self.view = self.portal["ca"].restrictedTraverse(\n+            "++addtranslation++" + IUUID(self.document)\n         )\n         self.view.update()\n-        self.field = self.view.form_instance.fields[\'mandatory_feedback\'].field\n-        self.widget = self.view.form_instance.widgets[\'mandatory_feedback\']\n+        self.field = self.view.form_instance.fields["mandatory_feedback"].field\n+        self.widget = self.view.form_instance.widgets["mandatory_feedback"]\n \n     def test_field_is_required(self):\n         self.assertTrue(self.field.required)\n@@ -85,29 +87,33 @@ def test_default_validator_raise_exception_on_independent_field(self):\n         noLongerProvides(self.request, IPloneAppMultilingualInstalled)\n         ###\n         validator = getMultiAdapter(\n-            (self.view.context, self.view.request,\n-             self.view.form_instance, self.field, self.widget),\n-            IValidator\n+            (\n+                self.view.context,\n+                self.view.request,\n+                self.view.form_instance,\n+                self.field,\n+                self.widget,\n+            ),\n+            IValidator,\n         )\n         self.assertNotEqual(\n-            str(validator.__class__.__name__),\n-            \'LanguageIndependentFieldValidator\'\n-        )\n-        self.assertRaises(\n-            RequiredMissing,\n-            validator.validate,\n-            None\n+            str(validator.__class__.__name__), "LanguageIndependentFieldValidator"\n         )\n+        self.assertRaises(RequiredMissing, validator.validate, None)\n \n     def test_validator_pass_on_required_independent_field(self):\n         validator = getMultiAdapter(\n-            (self.view.context, self.view.request,\n-             self.view.form_instance, self.field, self.widget),\n-            IValidator\n+            (\n+                self.view.context,\n+                self.view.request,\n+                self.view.form_instance,\n+                self.field,\n+                self.widget,\n+            ),\n+            IValidator,\n         )\n         self.assertEqual(\n-            str(validator.__class__.__name__),\n-            \'LanguageIndependentFieldValidator\'\n+            str(validator.__class__.__name__), "LanguageIndependentFieldValidator"\n         )\n         self.assertIsNone(validator.validate(None))\n \n@@ -116,21 +122,31 @@ def test_input_widget_renders_textarea(self):\n         noLongerProvides(self.request, IPloneAppMultilingualInstalled)\n         ###\n         widget_template = getMultiAdapter(\n-            (self.view.context, self.view.request,\n-             self.view.form_instance, self.field, self.widget),\n+            (\n+                self.view.context,\n+                self.view.request,\n+                self.view.form_instance,\n+                self.field,\n+                self.widget,\n+            ),\n             IPageTemplate,\n-            name=\'input\'\n+            name="input",\n         )\n-        self.assertIn(\'<textarea\', widget_template(self.widget))\n+        self.assertIn("<textarea", widget_template(self.widget))\n \n     def test_input_widget_does_not_render_textarea_but_span(self):\n         widget_template = getMultiAdapter(\n-            (self.view.context, self.view.request,\n-             self.view.form_instance, self.field, self.widget),\n+            (\n+                self.view.context,\n+                self.view.request,\n+                self.view.form_instance,\n+                self.field,\n+                self.widget,\n+            ),\n             IPageTemplate,\n-            name=\'input\'\n+            name="input",\n         )\n-        self.assertNotIn(\'<textarea\', widget_template(self.widget))\n+        self.assertNotIn("<textarea", widget_template(self.widget))\n \n \n class TestLanguageIndependentRelationField(unittest.TestCase):\n@@ -138,110 +154,91 @@ class TestLanguageIndependentRelationField(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         alsoProvides(self.request, IDefaultBrowserLayer)\n         alsoProvides(self.request, IPloneAppMultilingualInstalled)\n \n         self.a_en = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Test Document\')\n+            self.portal["en"], "Document", title="Test Document"\n+        )\n \n         self.b_en = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u\'Another Document\')\n+            self.portal["en"], "Document", title="Another Document"\n+        )\n \n         adapted = IRelatedItems(self.a_en)\n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         dm.set([self.b_en])\n \n     def test_has_relation_list(self):\n         adapted = IRelatedItems(self.a_en)\n \n-        bound = IRelatedItems[\'relatedItems\'].bind(adapted)\n+        bound = IRelatedItems["relatedItems"].bind(adapted)\n         self.assertEqual(len(bound.get(adapted)), 1)\n \n         value = bound.get(adapted)\n         self.assertEqual(type(value[0]), RelationValue)\n \n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         self.assertEqual(dm.get(), [self.b_en])\n \n     def test_relation_list_gets_copied(self):\n-        a_ca = api.translate(self.a_en, \'ca\')\n+        a_ca = api.translate(self.a_en, "ca")\n \n         adapted = IRelatedItems(a_ca)\n \n-        bound = IRelatedItems[\'relatedItems\'].bind(adapted)\n+        bound = IRelatedItems["relatedItems"].bind(adapted)\n         self.assertEqual(len(bound.get(adapted)), 1)\n \n         value = bound.get(adapted)\n         self.assertEqual(type(value[0]), RelationValue)\n \n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         self.assertEqual(dm.get(), [self.b_en])\n \n     def test_relation_list_gets_translated(self):\n-        b_ca = api.translate(self.b_en, \'ca\')\n-        a_ca = api.translate(self.a_en, \'ca\')\n+        b_ca = api.translate(self.b_en, "ca")\n+        a_ca = api.translate(self.a_en, "ca")\n \n         adapted = IRelatedItems(a_ca)\n \n-        bound = IRelatedItems[\'relatedItems\'].bind(adapted)\n+        bound = IRelatedItems["relatedItems"].bind(adapted)\n         self.assertEqual(len(bound.get(adapted)), 1)\n \n         value = bound.get(adapted)\n         self.assertEqual(type(value[0]), RelationValue)\n \n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         self.assertEqual(dm.get(), [b_ca])\n \n     def test_relation_list_gets_cleared(self):\n-        a_ca = api.translate(self.a_en, \'ca\')\n+        a_ca = api.translate(self.a_en, "ca")\n \n         adapted = IRelatedItems(self.a_en)\n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         dm.set([])\n \n         notify(ObjectModifiedEvent(self.a_en))\n \n         adapted = IRelatedItems(a_ca)\n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         self.assertEqual(dm.get(), [])\n \n     def test_copied_relation_list_gets_translated(self):\n-        a_ca = api.translate(self.a_en, \'ca\')\n-        b_ca = api.translate(self.b_en, \'ca\')\n+        a_ca = api.translate(self.a_en, "ca")\n+        b_ca = api.translate(self.b_en, "ca")\n \n         # But only after self.a_en is modified (this is a feature, not a bug):\n         notify(ObjectModifiedEvent(self.a_en))\n \n         adapted = IRelatedItems(a_ca)\n \n-        bound = IRelatedItems[\'relatedItems\'].bind(adapted)\n+        bound = IRelatedItems["relatedItems"].bind(adapted)\n         self.assertEqual(len(bound.get(adapted)), 1)\n \n         value = bound.get(adapted)\n         self.assertEqual(type(value[0]), RelationValue)\n \n-        dm = getMultiAdapter(\n-            (adapted, IRelatedItems[\'relatedItems\']),\n-            IDataManager\n-        )\n+        dm = getMultiAdapter((adapted, IRelatedItems["relatedItems"]), IDataManager)\n         self.assertEqual(dm.get(), [b_ca])\ndiff --git a/src/plone/app/multilingual/tests/test_lrf.py b/src/plone/app/multilingual/tests/test_lrf.py\nindex 205354d57..b0e9067f1 100644\n--- a/src/plone/app/multilingual/tests/test_lrf.py\n+++ b/src/plone/app/multilingual/tests/test_lrf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from OFS.event import ObjectWillBeRemovedEvent\n from plone.app.multilingual.browser.utils import is_language_independent\n from plone.app.multilingual.browser.utils import multilingualMoveObject\n@@ -18,91 +17,95 @@ class TestLanguageRootFolder(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_shared_content(self):\n         # Create shared document\n         createContentInContainer(\n-            self.portal.en.assets, \'Document\', title=u"Test document")\n+            self.portal.en.assets, "Document", title="Test document"\n+        )\n \n         # Check shared document is there\n-        self.assertEqual(self.portal.en.assets[\'test-document\'],\n-                         self.portal.ca.recursos[\'test-document\'])\n-        self.assertEqual(self.portal.en.assets[\'test-document\'],\n-                         self.portal.es.recursos[\'test-document\'])\n+        self.assertEqual(\n+            self.portal.en.assets["test-document"],\n+            self.portal.ca.recursos["test-document"],\n+        )\n+        self.assertEqual(\n+            self.portal.en.assets["test-document"],\n+            self.portal.es.recursos["test-document"],\n+        )\n \n         # Delete shared document\n-        notify(ObjectWillBeRemovedEvent(self.portal.en.assets[\'test-document\']))\n-        self.portal.en.assets.manage_delObjects(\'test-document\')\n+        notify(ObjectWillBeRemovedEvent(self.portal.en.assets["test-document"]))\n+        self.portal.en.assets.manage_delObjects("test-document")\n \n         # Check that it is not available in LRFs\n-        self.assertNotIn(\'test-document\', self.portal.ca.recursos.objectIds())\n-        self.assertNotIn(\'test-document\', self.portal.es.recursos.objectIds())\n+        self.assertNotIn("test-document", self.portal.ca.recursos.objectIds())\n+        self.assertNotIn("test-document", self.portal.es.recursos.objectIds())\n \n     def test_shared_content_indexing(self):\n         # Create shared document\n         createContentInContainer(\n-            self.portal.en.assets, \'Document\', title=u"Test document")\n+            self.portal.en.assets, "Document", title="Test document"\n+        )\n \n         # Check that shared document is indexed in all LRFs\n-        elements = self.portal.portal_catalog.searchResults(id=\'test-document\')\n+        elements = self.portal.portal_catalog.searchResults(id="test-document")\n         self.assertEqual(len(elements), 3)\n \n         # Remove shared document\n-        notify(ObjectWillBeRemovedEvent(self.portal.en.assets[\'test-document\']))\n-        self.portal.en.assets.manage_delObjects(\'test-document\')\n+        notify(ObjectWillBeRemovedEvent(self.portal.en.assets["test-document"]))\n+        self.portal.en.assets.manage_delObjects("test-document")\n \n         # Check that shared document is unindexed\n-        elements = self.portal.portal_catalog.searchResults(id=\'test-document\')\n+        elements = self.portal.portal_catalog.searchResults(id="test-document")\n         self.assertEqual(len(elements), 0)\n \n     def test_shared_content_uuid(self):\n         # Create shared document\n         createContentInContainer(\n-            self.portal, \'LIF\', title=u"Assets", checkConstraints=False)\n-        createContentInContainer(\n-            self.portal.assets, \'Document\', title=u"Test document")\n+            self.portal, "LIF", title="Assets", checkConstraints=False\n+        )\n+        createContentInContainer(self.portal.assets, "Document", title="Test document")\n \n-        root_uuid = IUUID(self.portal.assets[\'test-document\'])\n-        shared_uuid = IUUID(self.portal.ca.recursos[\'test-document\'])\n+        root_uuid = IUUID(self.portal.assets["test-document"])\n+        shared_uuid = IUUID(self.portal.ca.recursos["test-document"])\n \n-        self.assertEqual(\'{0:s}-ca\'.format(root_uuid), shared_uuid)\n+        self.assertEqual(f"{root_uuid:s}-ca", shared_uuid)\n \n     def test_moving_shared_content_to_lrf(self):\n         # Create shared document\n         createContentInContainer(\n-            self.portal, \'LIF\', title=u"Assets", checkConstraints=False)\n-        createContentInContainer(\n-            self.portal.assets, \'Document\', title=u"Test document")\n-        uuid = IUUID(self.portal.assets[\'test-document\'])\n+            self.portal, "LIF", title="Assets", checkConstraints=False\n+        )\n+        createContentInContainer(self.portal.assets, "Document", title="Test document")\n+        uuid = IUUID(self.portal.assets["test-document"])\n \n         # Check that ghost is ghost\n         self.assertTrue(\n-            is_language_independent(self.portal.ca.recursos[\'test-document\']))\n+            is_language_independent(self.portal.ca.recursos["test-document"])\n+        )\n \n         # Check is in the catalog\n         brains = self.portal.portal_catalog.searchResults(UID=uuid)\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/assets/test-document\')\n+        self.assertEqual(brains[0].getPath(), "/plone/assets/test-document")\n \n-        brains = self.portal.portal_catalog.searchResults(\n-            UID=\'{0:s}-ca\'.format(uuid))\n+        brains = self.portal.portal_catalog.searchResults(UID=f"{uuid:s}-ca")\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/ca/recursos/test-document\')\n+        self.assertEqual(brains[0].getPath(), "/plone/ca/recursos/test-document")\n \n-        brains = self.portal.portal_catalog.searchResults(\n-            UID=\'{0:s}-es\'.format(uuid))\n+        brains = self.portal.portal_catalog.searchResults(UID=f"{uuid:s}-es")\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(), \'/plone/es/recursos/test-document\')\n+        self.assertEqual(brains[0].getPath(), "/plone/es/recursos/test-document")\n \n         # MOVE!\n-        moved = multilingualMoveObject(\n-            self.portal.ca.recursos[\'test-document\'], \'ca\')\n+        moved = multilingualMoveObject(self.portal.ca.recursos["test-document"], "ca")\n \n         # Check that the old and the new uuid are the same\n-        moved_uuid = IUUID(self.portal.ca[\'test-document\'])\n+        moved_uuid = IUUID(self.portal.ca["test-document"])\n \n         self.assertEqual(uuid, moved_uuid)\n         self.assertFalse(is_language_independent(moved))\n@@ -110,25 +113,21 @@ def test_moving_shared_content_to_lrf(self):\n         # Check portal_catalog is updated after move\n         brains = self.portal.portal_catalog.searchResults(UID=uuid)\n         self.assertEqual(len(brains), 1)\n-        self.assertEqual(brains[0].getPath(),\n-                         \'/plone/ca/test-document\')\n+        self.assertEqual(brains[0].getPath(), "/plone/ca/test-document")\n \n-        brains = self.portal.portal_catalog.searchResults(\n-            UID=\'{0:s}-ca\'.format(uuid))\n+        brains = self.portal.portal_catalog.searchResults(UID=f"{uuid:s}-ca")\n         self.assertEqual(len(brains), 0)\n \n-        brains = self.portal.portal_catalog.searchResults(\n-            UID=\'{0:s}-es\'.format(uuid))\n+        brains = self.portal.portal_catalog.searchResults(UID=f"{uuid:s}-es")\n         self.assertEqual(len(brains), 0)\n \n         # Check which translations it have\n-        self.assertEqual(\n-            ITranslationManager(moved).get_translations(), {\'ca\': moved})\n-        ITranslationManager(moved).add_translation(\'es\')\n+        self.assertEqual(ITranslationManager(moved).get_translations(), {"ca": moved})\n+        ITranslationManager(moved).add_translation("es")\n         self.assertEqual(\n             ITranslationManager(moved).get_translations(),\n-            {\'ca\': moved, \'es\': self.portal.es[\'test-document\']})\n+            {"ca": moved, "es": self.portal.es["test-document"]},\n+        )\n \n         # Check that ghost is no longer ghost\n-        self.assertFalse(\n-            is_language_independent(self.portal.es[\'test-document\']))\n+        self.assertFalse(is_language_independent(self.portal.es["test-document"]))\ndiff --git a/src/plone/app/multilingual/tests/test_menu.py b/src/plone/app/multilingual/tests/test_menu.py\nindex 2a92bf99e..2dd128606 100644\n--- a/src/plone/app/multilingual/tests/test_menu.py\n+++ b/src/plone/app/multilingual/tests/test_menu.py\n@@ -1,5 +1,5 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -15,66 +15,72 @@ class TestMenu(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n         # Setup test browser\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n         self.browser.addHeader(\n-            \'Authorization\', \'Basic {0:s}:{1:s}\'.format(\n-                SITE_OWNER_NAME, SITE_OWNER_PASSWORD))\n+            "Authorization",\n+            f"Basic {SITE_OWNER_NAME:s}:{SITE_OWNER_PASSWORD:s}",\n+        )\n \n         # Create sample document in \'en\' and index it into catalog\n         self.a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u\'Test document\')\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         transaction.commit()\n \n     def test_menu_is_visible(self):\n         self.browser.open(self.a_ca.absolute_url())\n         # \'Translate\' in Catalan:\n-        self.assertIn(\'Tradueix\', self.browser.contents)\n+        self.assertIn("Tradueix", self.browser.contents)\n \n     def test_menu_contains_translatable_entries(self):\n         self.browser.open(self.a_ca.absolute_url())\n-        self.assertIn(\'translate_into_es\', self.browser.contents)\n-        self.assertIn(\'translate_into_en\', self.browser.contents)\n+        self.assertIn("translate_into_es", self.browser.contents)\n+        self.assertIn("translate_into_en", self.browser.contents)\n \n     def test_menu_does_not_contain_translated_entries(self):\n         self.browser.open(self.a_ca.absolute_url())\n-        self.assertNotIn(\'translate_into_ca\', self.browser.contents)\n+        self.assertNotIn("translate_into_ca", self.browser.contents)\n \n     def test_menu_does_not_appear_without_ITranslatable(self):\n-        self.browser.open(self.portal.absolute_url() + \'/folder_listing\')\n-        self.assertNotIn(\'Translate\', self.browser.contents)\n+        self.assertFalse(ITranslatable.providedBy(self.portal))\n+        self.browser.open(self.portal.absolute_url() + "/folder_listing")\n+        self.assertNotIn("Translate", self.browser.contents)\n \n     def test_menu_is_visible_on_folder_default_page(self):\n+        createContentInContainer(self.portal["ca"], "Folder", title="Test folder")\n         createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u\'Test folder\')\n-        createContentInContainer(\n-            self.portal[\'ca\'][\'test-folder\'], \'Document\',\n-            title=u\'Test document\')\n-        self.portal[\'ca\'][\'test-folder\'].setDefaultPage(\'test-document\')\n+            self.portal["ca"]["test-folder"], "Document", title="Test document"\n+        )\n+        self.portal["ca"]["test-folder"].setDefaultPage("test-document")\n \n         transaction.commit()\n \n-        self.browser.open(\n-            self.portal[\'ca\'][\'test-folder\'].absolute_url())\n-        self.assertIn(\n-            \'test-folder/@@create_translation\', self.browser.contents)\n-        self.assertIn(\n-            \'test-document/@@create_translation\', self.browser.contents)\n+        self.browser.open(self.portal["ca"]["test-folder"].absolute_url())\n+        self.assertIn("test-folder/@@create_translation", self.browser.contents)\n+        self.assertIn("test-document/@@create_translation", self.browser.contents)\n \n     def test_menu_is_not_visible_without_permission(self):\n         # Add a new user without Owner, Editor or Manager role on\n         # self.a_ca document\n         self.portal.portal_registration.addMember(\n-            \'a_user\', \'a_password\', [\'Reader\', \'Contributor\', \'Reviewer\', ])\n+            "a_user",\n+            "a_password",\n+            [\n+                "Reader",\n+                "Contributor",\n+                "Reviewer",\n+            ],\n+        )\n \n         transaction.commit()\n \n-        browser = Browser(self.layer[\'app\'])\n-        browser.addHeader(\'Authorization\', \'Basic a_user:a_password\')\n+        browser = Browser(self.layer["app"])\n+        browser.addHeader("Authorization", "Basic a_user:a_password")\n \n         browser.open(self.a_ca.absolute_url())\n-        self.assertNotIn(\'plone-contentmenu-multilingual\', browser.contents)\n+        self.assertNotIn("plone-contentmenu-multilingual", browser.contents)\ndiff --git a/src/plone/app/multilingual/tests/test_robot.py b/src/plone/app/multilingual/tests/test_robot.py\nindex d3b7b115f..b1514fd2f 100644\n--- a/src/plone/app/multilingual/tests/test_robot.py\n+++ b/src/plone/app/multilingual/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.testing import PAM_ROBOT_TESTING\n from plone.testing import layered\n \n@@ -15,9 +14,12 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.level = ROBOT_TEST_LEVEL\n-    suite.addTests([\n-        layered(\n-            robotsuite.RobotTestSuite(\'robot\', noncritical=[\'unstable\']),\n-            layer=PAM_ROBOT_TESTING),\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                robotsuite.RobotTestSuite("robot", noncritical=["unstable"]),\n+                layer=PAM_ROBOT_TESTING,\n+            ),\n+        ]\n+    )\n     return suite\ndiff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex e3d209bd9..eb343f1c1 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.multilingual import api\n from plone.app.multilingual.browser.helper_views import selector_view\n@@ -10,28 +9,27 @@\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n-from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n from plone.app.multilingual.testing import PAM_INTEGRATION_PRESET_TESTING\n+from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n from plone.dexterity.utils import createContentInContainer\n from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_nativestring\n-from six.moves.urllib.parse import parse_qs\n-from six.moves.urllib.parse import urlparse\n+from urllib.parse import parse_qs\n+from urllib.parse import urlparse\n from zope.component import getUtility\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectModifiedEvent\n \n import lxml\n-import six\n import transaction\n import unittest\n \n \n-class EvilObject(object):\n+class EvilObject:\n     def __str__(self):\n         raise UnicodeError\n \n@@ -39,9 +37,7 @@ def __unicode__(self):\n         raise UnicodeError\n \n \n-SELECTOR_VIEW_TEMPLATE = (\n-    \'%(url)s/@@multilingual-selector/%(tg)s/%(lang)s%(query)s\'\n-)\n+SELECTOR_VIEW_TEMPLATE = "%(url)s/@@multilingual-selector/%(tg)s/%(lang)s%(query)s"\n \n \n class TestLanguageSelectorBasics(unittest.TestCase):\n@@ -50,13 +46,13 @@ class TestLanguageSelectorBasics(unittest.TestCase):\n \n     def setUp(self):\n         # Set test variables\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n         # Setup testbrowser\n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n \n     def test_selector_viewlet_is_available(self):\n@@ -81,31 +77,27 @@ def test_selector_data_not_modified_by_viewlet(self):\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        selector_adapter = LanguageSelector(\n-            self.portal, self.request, None, None\n-        )\n+        selector_adapter = LanguageSelector(self.portal, self.request, None, None)\n         selector_adapter.update()\n         selector_adapter_languages = selector_adapter.languages()\n \n-        self.assertNotEqual(\n-            selector_adapter_languages, selector_viewlet_languages\n-        )\n+        self.assertNotEqual(selector_adapter_languages, selector_viewlet_languages)\n \n     def assertFullyTranslatedPages(self):\n         a = createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u"Test document"\n+            self.portal["en"], "Document", title="Test document"\n         )\n \n-        a_ca = api.translate(a, \'ca\')\n-        a_ca.setTitle(u"Test Document (CA)")\n+        a_ca = api.translate(a, "ca")\n+        a_ca.setTitle("Test Document (CA)")\n \n-        a_es = api.translate(a, \'es\')\n-        a_es.setTitle(u"Test Document (ES)")\n+        a_es = api.translate(a, "es")\n+        a_es.setTitle("Test Document (ES)")\n \n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(a, \'publish\')\n-        wftool.doActionFor(a_ca, \'publish\')\n-        wftool.doActionFor(a_es, \'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(a, "publish")\n+        wftool.doActionFor(a_ca, "publish")\n+        wftool.doActionFor(a_es, "publish")\n \n         notify(ObjectModifiedEvent(a))\n         notify(ObjectModifiedEvent(a_ca))\n@@ -119,72 +111,66 @@ def assertFullyTranslatedPages(self):\n             selector_viewlet_languages,\n             [\n                 {\n-                    \'code\': u\'en\',\n-                    u\'flag\': u\'countryflag/gb\',\n-                    u\'name\': u\'English\',\n-                    u\'native\': u\'English\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "en",\n+                    "flag": "countryflag/gb",\n+                    "name": "English",\n+                    "native": "English",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal_url,\n-                        \'tg\': ITG(a),\n-                        \'lang\': \'en\',\n-                        \'query\': \'?set_language=en\',\n+                        "url": self.portal_url,\n+                        "tg": ITG(a),\n+                        "lang": "en",\n+                        "query": "?set_language=en",\n                     },\n-                    \'selected\': True,\n-                    \'translated\': True,\n+                    "selected": True,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'ca\',\n-                    u\'flag\': u\'languageflag/ca\',\n-                    u\'name\': u\'Catalan\',\n-                    u\'native\': u\'Catal\\xe0\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "ca",\n+                    "flag": "languageflag/ca",\n+                    "name": "Catalan",\n+                    "native": "Catal\\xe0",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal_url,\n-                        \'tg\': ITG(a),\n-                        \'lang\': \'ca\',\n-                        \'query\': \'?set_language=ca\',\n+                        "url": self.portal_url,\n+                        "tg": ITG(a),\n+                        "lang": "ca",\n+                        "query": "?set_language=ca",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'es\',\n-                    u\'flag\': u\'countryflag/es\',\n-                    u\'name\': u\'Spanish\',\n-                    u\'native\': u\'Espa\\xf1ol\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "es",\n+                    "flag": "countryflag/es",\n+                    "name": "Spanish",\n+                    "native": "Espa\\xf1ol",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal_url,\n-                        \'tg\': ITG(a),\n-                        \'lang\': \'es\',\n-                        \'query\': \'?set_language=es\',\n+                        "url": self.portal_url,\n+                        "tg": ITG(a),\n+                        "lang": "es",\n+                        "query": "?set_language=es",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n             ],\n         )\n \n         transaction.commit()\n \n-        self.browser.open(selector_viewlet_languages[0][\'url\'])\n-        self.assertEqual(\n-            self.browser.url, a.absolute_url() + \'?set_language=en\'\n-        )\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.browser.open(selector_viewlet_languages[0]["url"])\n+        self.assertEqual(self.browser.url, a.absolute_url() + "?set_language=en")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n-        self.browser.open(selector_viewlet_languages[1][\'url\'])\n-        self.assertEqual(\n-            self.browser.url, a_ca.absolute_url() + \'?set_language=ca\'\n-        )\n+        self.browser.open(selector_viewlet_languages[1]["url"])\n+        self.assertEqual(self.browser.url, a_ca.absolute_url() + "?set_language=ca")\n \n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n-        self.browser.open(selector_viewlet_languages[2][\'url\'])\n-        self.assertEqual(\n-            self.browser.url, a_es.absolute_url() + \'?set_language=es\'\n-        )\n+        self.browser.open(selector_viewlet_languages[2]["url"])\n+        self.assertEqual(self.browser.url, a_es.absolute_url() + "?set_language=es")\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def test_languages_fully_translated_by_closest(self):\n@@ -192,7 +178,7 @@ def test_languages_fully_translated_by_closest(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n         self.assertFullyTranslatedPages()\n \n@@ -201,51 +187,47 @@ def test_languages_fully_translated_by_dialog(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'dialog\'\n+        self.settings.selector_lookup_translations_policy = "dialog"\n \n         self.assertFullyTranslatedPages()\n \n     def setUpPartiallyTranslatedContent(self):\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n \n         f_en = createContentInContainer(\n-            self.portal[\'en\'], \'Folder\', title=u"Test folder"\n+            self.portal["en"], "Folder", title="Test folder"\n         )\n-        wftool.doActionFor(f_en, \'publish\')\n+        wftool.doActionFor(f_en, "publish")\n \n         a_en = createContentInContainer(\n-            self.portal[\'en\'][\'test-folder\'],\n-            \'Document\',\n-            title=u"Test document",\n+            self.portal["en"]["test-folder"],\n+            "Document",\n+            title="Test document",\n         )\n-        wftool.doActionFor(a_en, \'publish\')\n+        wftool.doActionFor(a_en, "publish")\n \n-        f_ca = api.translate(f_en, \'ca\')\n-        f_ca.setTitle(u"Test folder CA")\n-        wftool.doActionFor(f_ca, \'publish\')\n+        f_ca = api.translate(f_en, "ca")\n+        f_ca.setTitle("Test folder CA")\n+        wftool.doActionFor(f_ca, "publish")\n \n         transaction.commit()\n \n     def setUpFullyTranslatedContent(self):\n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n \n         self.setUpPartiallyTranslatedContent()\n \n-        a_ca = api.translate(\n-            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'ca\'\n-        )\n-        a_ca.setTitle(u"Test document CA")\n-        wftool.doActionFor(a_ca, \'publish\')\n+        a_ca = api.translate(self.portal["en"]["test-folder"]["test-document"], "ca")\n+        a_ca.setTitle("Test document CA")\n+        wftool.doActionFor(a_ca, "publish")\n \n-        f_es = api.translate(self.portal[\'en\'][\'test-folder\'], \'es\')\n-        f_es.setTitle(u"Test folder ES")\n-        wftool.doActionFor(f_es, \'publish\')\n+        f_es = api.translate(self.portal["en"]["test-folder"], "es")\n+        f_es.setTitle("Test folder ES")\n+        wftool.doActionFor(f_es, "publish")\n \n-        a_es = api.translate(\n-            self.portal[\'en\'][\'test-folder\'][\'test-document\'], \'es\'\n-        )\n-        a_es.setTitle(u"Test document ES")\n-        wftool.doActionFor(a_es, \'publish\')\n+        a_es = api.translate(self.portal["en"]["test-folder"]["test-document"], "es")\n+        a_es.setTitle("Test document ES")\n+        wftool.doActionFor(a_es, "publish")\n \n         transaction.commit()\n \n@@ -255,36 +237,36 @@ def test_languages_untranslated_by_closest(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n         wftool = getToolByName(self.portal, "portal_workflow")\n \n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document"\n+            self.portal["ca"], "Document", title="Test document"\n         )\n-        a_ca.setLanguage(\'ca\')\n-        wftool.doActionFor(a_ca, \'publish\')\n+        a_ca.setLanguage("ca")\n+        wftool.doActionFor(a_ca, "publish")\n \n         view = selector_view(a_ca, self.request)\n         view.tg = ITG(a_ca)\n \n         # Check that the \'original\' language gets the created document\n-        view.lang = \'ca\'\n+        view.lang = "ca"\n         url = view.getClosestDestination()\n         self.assertEqual(url, a_ca.absolute_url())\n \n         # Check that untranslated languages get the nearest translated parent\n-        view.lang = \'es\'\n+        view.lang = "es"\n         url = view.getClosestDestination()\n-        self.assertEqual(url, self.portal[\'es\'].absolute_url())\n+        self.assertEqual(url, self.portal["es"].absolute_url())\n \n-        view.lang = \'en\'\n+        view.lang = "en"\n         url = view.getClosestDestination()\n-        self.assertEqual(url, self.portal[\'en\'].absolute_url())\n+        self.assertEqual(url, self.portal["en"].absolute_url())\n \n         # Check that translating content updates the closest destination\n-        a_es = api.translate(a_ca, \'es\')\n-        view.lang = \'es\'\n+        a_es = api.translate(a_ca, "es")\n+        view.lang = "es"\n         url = view.getClosestDestination()\n         self.assertEqual(url, a_es.absolute_url())\n \n@@ -293,40 +275,36 @@ def test_languages_partially_translated_by_closest(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n         # Setup content\n         self.setUpPartiallyTranslatedContent()\n \n-        a_en = self.portal[\'en\'][\'test-folder\'][\'test-document\']\n-        f_ca = self.portal[\'ca\'][\'test-folder\']\n+        a_en = self.portal["en"]["test-folder"]["test-document"]\n+        f_ca = self.portal["ca"]["test-folder"]\n \n         selector = LanguageSelectorViewlet(a_en, self.request, None, None)\n         selector.update()\n         selector_languages = selector.languages()\n \n         # Check that EN translation is found\n-        self.browser.open(selector_languages[0][\'url\'])\n-        self.assertEqual(\n-            self.browser.url, a_en.absolute_url() + \'?set_language=en\'\n-        )\n+        self.browser.open(selector_languages[0]["url"])\n+        self.assertEqual(self.browser.url, a_en.absolute_url() + "?set_language=en")\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         # But extra check, because English is the default?\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n         # Check that CA translation is only partial and a parent folder\n         # is found\n-        self.browser.open(selector_languages[1][\'url\'])\n-        self.assertEqual(\n-            self.browser.url, f_ca.absolute_url() + \'?set_language=ca\'\n-        )\n+        self.browser.open(selector_languages[1]["url"])\n+        self.assertEqual(self.browser.url, f_ca.absolute_url() + "?set_language=ca")\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check that ES translation is missing and only the LRF is found\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal[\'es\'].absolute_url() + \'?set_language=es\',\n+            self.portal["es"].absolute_url() + "?set_language=es",\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n@@ -335,49 +313,47 @@ def test_languages_partially_translated_by_dialog(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'dialog\'\n+        self.settings.selector_lookup_translations_policy = "dialog"\n \n         # Setup content\n         self.setUpPartiallyTranslatedContent()\n \n-        a_en = self.portal[\'en\'][\'test-folder\'][\'test-document\']\n+        a_en = self.portal["en"]["test-folder"]["test-document"]\n \n         selector = LanguageSelectorViewlet(a_en, self.request, None, None)\n         selector.update()\n         selector_languages = selector.languages()\n \n         # Check that EN translation is found\n-        self.browser.open(selector_languages[0][\'url\'])\n-        self.assertEqual(\n-            self.browser.url, a_en.absolute_url() + \'?set_language=en\'\n-        )\n+        self.browser.open(selector_languages[0]["url"])\n+        self.assertEqual(self.browser.url, a_en.absolute_url() + "?set_language=en")\n         # But extra check, because English is the default?\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n-        tgid = selector_languages[1][\'url\'].split(\'/\')[-2]\n+        tgid = selector_languages[1]["url"].split("/")[-2]\n \n         # Check that CA is not yet translated\n-        self.browser.open(selector_languages[1][\'url\'])\n+        self.browser.open(selector_languages[1]["url"])\n         self.assertEqual(\n             self.browser.url,\n             self.portal.absolute_url()\n             + NOT_TRANSLATED_YET_TEMPLATE\n-            + \'/\'\n+            + "/"\n             + tgid\n-            + \'?set_language=ca\',\n+            + "?set_language=ca",\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check that ES is not yet translated\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         self.assertEqual(\n             self.browser.url,\n             self.portal.absolute_url()\n             + NOT_TRANSLATED_YET_TEMPLATE\n-            + \'/\'\n+            + "/"\n             + tgid\n-            + \'?set_language=es\',\n+            + "?set_language=es",\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n@@ -392,34 +368,34 @@ def assertSiteRoot(self):\n \n         # Check EN root\n         self.assertEqual(\n-            selector_languages[0][\'url\'],\n+            selector_languages[0]["url"],\n             (\n                 self.portal.absolute_url()\n-                + \'/@@multilingual-selector/notg/en?set_language=en\'\n+                + "/@@multilingual-selector/notg/en?set_language=en"\n             ),\n         )\n-        self.browser.open(selector_languages[0][\'url\'])\n+        self.browser.open(selector_languages[0]["url"])\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n         # Check CA root\n         self.assertEqual(\n-            selector_languages[1][\'url\'],\n+            selector_languages[1]["url"],\n             (\n                 self.portal.absolute_url()\n-                + \'/@@multilingual-selector/notg/ca?set_language=ca\'\n+                + "/@@multilingual-selector/notg/ca?set_language=ca"\n             ),\n         )\n-        self.browser.open(selector_languages[1][\'url\'])\n+        self.browser.open(selector_languages[1]["url"])\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES root\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         self.assertEqual(\n-            selector_languages[2][\'url\'],\n+            selector_languages[2]["url"],\n             (\n                 self.portal.absolute_url()\n-                + \'/@@multilingual-selector/notg/es?set_language=es\'\n+                + "/@@multilingual-selector/notg/es?set_language=es"\n             ),\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n@@ -429,7 +405,7 @@ def test_siteroot_by_closest(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n         self.assertSiteRoot()\n \n@@ -438,92 +414,92 @@ def test_siteroot_by_dialog(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'dialog\'\n+        self.settings.selector_lookup_translations_policy = "dialog"\n \n         self.assertSiteRoot()\n \n     def assertRootFolders(self):\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal[\'en\'], self.request, None, None\n+            self.portal["en"], self.request, None, None\n         )\n         self.selector_viewlet.update()\n \n         selector_languages = self.selector_viewlet.languages()\n-        tg = ITG(self.portal[\'en\'])\n+        tg = ITG(self.portal["en"])\n \n         self.assertEqual(\n             selector_languages,\n             [\n                 {\n-                    \'code\': u\'en\',\n-                    u\'flag\': u\'countryflag/gb\',\n-                    u\'name\': u\'English\',\n-                    u\'native\': u\'English\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "en",\n+                    "flag": "countryflag/gb",\n+                    "name": "English",\n+                    "native": "English",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'en\',\n-                        \'query\': \'?set_language=en\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "en",\n+                        "query": "?set_language=en",\n                     },\n-                    \'selected\': True,\n-                    \'translated\': True,\n+                    "selected": True,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'ca\',\n-                    u\'flag\': u\'languageflag/ca\',\n-                    u\'name\': u\'Catalan\',\n-                    u\'native\': u\'Catal\\xe0\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "ca",\n+                    "flag": "languageflag/ca",\n+                    "name": "Catalan",\n+                    "native": "Catal\\xe0",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'ca\',\n-                        \'query\': \'?set_language=ca\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "ca",\n+                        "query": "?set_language=ca",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'es\',\n-                    u\'flag\': u\'countryflag/es\',\n-                    u\'name\': u\'Spanish\',\n-                    u\'native\': u\'Espa\\xf1ol\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "es",\n+                    "flag": "ountryflag/es",\n+                    "name": "Spanish",\n+                    "native": "Espa\\xf1ol",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'es\',\n-                        \'query\': \'?set_language=es\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "es",\n+                        "query": "?set_language=es",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n             ],\n         )\n \n         # Check EN\n-        self.browser.open(selector_languages[0][\'url\'])\n+        self.browser.open(selector_languages[0]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal[\'en\'].absolute_url() + \'?set_language=en\',\n+            self.portal["en"].absolute_url() + "?set_language=en",\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n-        self.browser.open(selector_languages[1][\'url\'])\n+        self.browser.open(selector_languages[1]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.ca.absolute_url() + \'?set_language=ca\',\n+            self.portal.ca.absolute_url() + "?set_language=ca",\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.es.absolute_url() + \'?set_language=es\',\n+            self.portal.es.absolute_url() + "?set_language=es",\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n@@ -532,7 +508,7 @@ def test_languages_root_folders_by_dialog(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'dialog\'\n+        self.settings.selector_lookup_translations_policy = "dialog"\n \n         self.assertRootFolders()\n \n@@ -541,7 +517,7 @@ def test_languages_root_folders_by_closest(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n         self.assertRootFolders()\n \n@@ -550,15 +526,15 @@ def test_languages_preserve_view(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n         self.setUpPartiallyTranslatedContent()\n \n-        f_en = self.portal[\'en\'][\'test-folder\']\n-        f_en = self.portal[\'en\'][\'test-folder\']\n-        f_ca = self.portal[\'ca\'][\'test-folder\']\n+        f_en = self.portal["en"]["test-folder"]\n+        f_en = self.portal["en"]["test-folder"]\n+        f_ca = self.portal["ca"]["test-folder"]\n \n-        self.request[\'PATH_INFO\'] = \'/plone/en/test-folder/contact-info\'\n+        self.request["PATH_INFO"] = "/plone/en/test-folder/contact-info"\n \n         selector = LanguageSelectorViewlet(f_en, self.request, None, None)\n         selector.update()\n@@ -567,28 +543,28 @@ def test_languages_preserve_view(self):\n         transaction.commit()\n \n         # Check EN\n-        self.browser.open(selector_languages[0][\'url\'])\n+        self.browser.open(selector_languages[0]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            f_en.absolute_url() + \'/contact-info?set_language=en\',\n+            f_en.absolute_url() + "/contact-info?set_language=en",\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n-        self.browser.open(selector_languages[1][\'url\'])\n+        self.browser.open(selector_languages[1]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            f_ca.absolute_url() + \'/contact-info?set_language=ca\',\n+            f_ca.absolute_url() + "/contact-info?set_language=ca",\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         # Here @@search isn\'t preserved because we\'ve gone up a level\n         self.assertEqual(\n             self.browser.url,\n-            self.portal.es.absolute_url() + \'?set_language=es\',\n+            self.portal.es.absolute_url() + "?set_language=es",\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n@@ -597,7 +573,7 @@ def test_languages_preserve_view(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'dialog\'\n+        self.settings.selector_lookup_translations_policy = "dialog"\n \n         selector = LanguageSelectorViewlet(f_en, self.request, None, None)\n         selector.update()\n@@ -606,96 +582,94 @@ def test_languages_preserve_view(self):\n         transaction.commit()\n \n         # Check EN\n-        self.browser.open(selector_languages[0][\'url\'])\n+        self.browser.open(selector_languages[0]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            f_en.absolute_url() + \'/contact-info?set_language=en\',\n+            f_en.absolute_url() + "/contact-info?set_language=en",\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n-        self.browser.open(selector_languages[1][\'url\'])\n+        self.browser.open(selector_languages[1]["url"])\n         self.assertEqual(\n             self.browser.url,\n-            f_ca.absolute_url() + \'/contact-info?set_language=ca\',\n+            f_ca.absolute_url() + "/contact-info?set_language=ca",\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         # Here @@search isn\'t preserved because we\'ve got the dialog\n-        tgid = selector_languages[2][\'url\'].split(\'/\')[-3]\n+        tgid = selector_languages[2]["url"].split("/")[-3]\n         self.assertEqual(\n             self.browser.url,\n             self.portal.absolute_url()\n             + NOT_TRANSLATED_YET_TEMPLATE\n-            + \'/\'\n+            + "/"\n             + tgid\n-            + \'?set_language=es\',\n+            + "?set_language=es",\n         )\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n     def assertLanguagesPreserveQuery(self, policy):\n \n         self.setUpPartiallyTranslatedContent()\n-        self.request[\'PATH_INFO\'] = \'/plone/en/test-folder/contact-info\'\n-        self.request.form[\'uni\'] = u\'pres\\xd8rved\'\n-        self.request.form[\'int\'] = \'1\'\n+        self.request["PATH_INFO"] = "/plone/en/test-folder/contact-info"\n+        self.request.form["uni"] = "pres\\xd8rved"\n+        self.request.form["int"] = "1"\n \n-        f_en = self.portal[\'en\'][\'test-folder\']\n-        f_ca = self.portal[\'ca\'][\'test-folder\']\n+        f_en = self.portal["en"]["test-folder"]\n+        f_ca = self.portal["ca"]["test-folder"]\n \n         selector = LanguageSelectorViewlet(f_en, self.request, None, None)\n         selector.update()\n         selector_languages = selector.languages()\n \n-        tgid = selector_languages[2][\'url\'].split(\'/\')[-3]\n+        tgid = selector_languages[2]["url"].split("/")[-3]\n         untranslated_url = {\n-            \'closest\': (\n-                self.portal[\'es\'].absolute_url()\n-                + \'?int=1&uni=pres%C3%98rved&set_language=es\'\n+            "closest": (\n+                self.portal["es"].absolute_url()\n+                + "?int=1&uni=pres%C3%98rved&set_language=es"\n             ),\n-            \'dialog\': (\n+            "dialog": (\n                 self.portal.absolute_url()\n                 + NOT_TRANSLATED_YET_TEMPLATE\n-                + \'/\'\n+                + "/"\n                 + tgid\n-                + \'?int=1&uni=pres%C3%98rved&set_language=es\'\n+                + "?int=1&uni=pres%C3%98rved&set_language=es"\n             ),\n         }\n \n         transaction.commit()\n \n         # Check EN\n-        self.browser.open(selector_languages[0][\'url\'])\n+        self.browser.open(selector_languages[0]["url"])\n         self.assertUrlsEqual(\n             self.browser.url,\n             (\n                 f_en.absolute_url()\n-                + \'/contact-info?int=1&uni=pres%C3%98rved&set_language=en\'\n+                + "/contact-info?int=1&uni=pres%C3%98rved&set_language=en"\n             ),\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n+        self.assertRegex(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n-        self.browser.open(selector_languages[1][\'url\'])\n+        self.browser.open(selector_languages[1]["url"])\n         self.assertUrlsEqual(\n             self.browser.url,\n             (\n                 f_ca.absolute_url()\n-                + \'/contact-info?int=1&uni=pres%C3%98rved&set_language=ca\'\n+                + "/contact-info?int=1&uni=pres%C3%98rved&set_language=ca"\n             ),\n         )\n         self.assertIn(\'lang="ca"\', self.browser.contents)\n \n         # Check ES\n-        self.browser.open(selector_languages[2][\'url\'])\n+        self.browser.open(selector_languages[2]["url"])\n         # Here @@search isn\'t preserved because we\'ve got the dialog\n         url = self.browser.url\n-        if six.PY2 and isinstance(url, six.binary_type):\n-            url = url.decode(\'utf8\')\n         self.assertUrlsEqual(url, untranslated_url[policy])\n         self.assertIn(\'lang="es"\', self.browser.contents)\n \n@@ -704,18 +678,18 @@ def test_languages_preserve_by_closest(self):\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'closest\'\n+        self.settings.selector_lookup_translations_policy = "closest"\n \n-        self.assertLanguagesPreserveQuery(\'closest\')\n+        self.assertLanguagesPreserveQuery("closest")\n \n     def test_languages_preserve_by_dialog(self):\n         self.registry = getUtility(IRegistry)\n         self.settings = self.registry.forInterface(\n             IMultiLanguageExtraOptionsSchema, prefix="plone"\n         )\n-        self.settings.selector_lookup_translations_policy = \'dialog\'\n+        self.settings.selector_lookup_translations_policy = "dialog"\n \n-        self.assertLanguagesPreserveQuery(\'dialog\')\n+        self.assertLanguagesPreserveQuery("dialog")\n \n     # XXX: this seems to me like a demented use case.\n     # If you put the VH _after_ the jail,\n@@ -798,65 +772,59 @@ class TestLanguageSelectorPostPath(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n-        self.portal = self.layer[\'portal\']\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n         self.folder = createContentInContainer(\n-            self.portal[\'ca\'], \'Folder\', title=u"Folder"\n+            self.portal["ca"], "Folder", title="Folder"\n         )\n         self.document = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Document"\n+            self.portal["ca"], "Document", title="Document"\n         )\n-        self.request = self.layer[\'request\']\n+        self.request = self.layer["request"]\n \n     def test_findpath(self):\n-        self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/whatever\'\n-        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n+        self.request["PATH_INFO"] = "/plone/ca/folder/document/whatever"\n+        self.assertEqual(getPostPath(self.document, self.request), "/whatever")\n \n     def test_findpath_match(self):\n-        self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document\'\n-        self.assertEqual(getPostPath(self.document, self.request), \'\')\n+        self.request["PATH_INFO"] = "/plone/ca/folder/document"\n+        self.assertEqual(getPostPath(self.document, self.request), "")\n \n     def test_findpath_match_slash(self):\n-        self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/\'\n-        self.assertEqual(getPostPath(self.document, self.request), \'\')\n+        self.request["PATH_INFO"] = "/plone/ca/folder/document/"\n+        self.assertEqual(getPostPath(self.document, self.request), "")\n \n     def test_findpath_template(self):\n-        self.request[\'PATH_INFO\'] = (\n-            \'/plone/ca/folder/document/\' \'whatever/foo/edit\'\n-        )\n-        self.assertEqual(\n-            getPostPath(self.document, self.request), \'/whatever/foo/edit\'\n-        )\n+        self.request["PATH_INFO"] = "/plone/ca/folder/document/" "whatever/foo/edit"\n+        self.assertEqual(getPostPath(self.document, self.request), "/whatever/foo/edit")\n \n     def test_findpath_view(self):\n-        self.request[\'PATH_INFO\'] = \'/plone/ca/folder/document/contact-info\'\n-        self.assertEqual(\n-            getPostPath(self.document, self.request), \'/contact-info\'\n-        )\n+        self.request["PATH_INFO"] = "/plone/ca/folder/document/contact-info"\n+        self.assertEqual(getPostPath(self.document, self.request), "/contact-info")\n \n     def test_findpath_vhr(self):\n-        self.request[\'PATH_INFO\'] = (\n-            \'/VirtualHostBase/http/127.0.0.1\'\n-            \'/plone/ca/folder/document/\'\n-            \'VirtualHostRoot/whatever\'\n+        self.request["PATH_INFO"] = (\n+            "/VirtualHostBase/http/127.0.0.1"\n+            "/plone/ca/folder/document/"\n+            "VirtualHostRoot/whatever"\n         )\n-        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n+        self.assertEqual(getPostPath(self.document, self.request), "/whatever")\n \n     def test_findpath_vh_marker(self):\n-        self.request[\'PATH_INFO\'] = (\n-            \'/VirtualHostBase/http/127.0.0.1\'\n-            \'/plone/ca/folder/document/\'\n-            \'VirtualHostRoot/_vh_foo/whatever\'\n+        self.request["PATH_INFO"] = (\n+            "/VirtualHostBase/http/127.0.0.1"\n+            "/plone/ca/folder/document/"\n+            "VirtualHostRoot/_vh_foo/whatever"\n         )\n-        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n+        self.assertEqual(getPostPath(self.document, self.request), "/whatever")\n \n     def test_findpath_vhr_and_traverser(self):\n-        self.request[\'PATH_INFO\'] = (\n-            \'/VirtualHostBase/http/127.0.0.1\'\n-            \'/plone/ca/folder/document/++theme++foo/\'\n-            \'VirtualHostRoot/whatever\'\n+        self.request["PATH_INFO"] = (\n+            "/VirtualHostBase/http/127.0.0.1"\n+            "/plone/ca/folder/document/++theme++foo/"\n+            "VirtualHostRoot/whatever"\n         )\n-        self.assertEqual(getPostPath(self.document, self.request), \'/whatever\')\n+        self.assertEqual(getPostPath(self.document, self.request), "/whatever")\n \n \n class TestLanguageSelectorAddQuery(unittest.TestCase):\n@@ -864,60 +832,60 @@ class TestLanguageSelectorAddQuery(unittest.TestCase):\n     layer = PAM_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n-        self.url = \'/foo/bar/\'\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        self.url = "/foo/bar/"\n \n     def test_formvariables(self):\n-        self.request.form[\'one\'] = 1\n-        self.request.form[\'two\'] = 2\n+        self.request.form["one"] = 1\n+        self.request.form["two"] = 2\n         self.assertUrlsEqual(\n-            addQuery(self.request, self.url), self.url + \'?two:int=2&one:int=1\'\n+            addQuery(self.request, self.url), self.url + "?two:int=2&one:int=1"\n         )\n \n     def test_formvariables_sequences(self):\n-        self.request.form[\'one\'] = (\'a\',)\n-        self.request.form[\'two\'] = [\'b\', 2]\n+        self.request.form["one"] = ("a",)\n+        self.request.form["two"] = ["b", 2]\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url + \'?two:list=b&two:int:list=2&one=%28%27a%27%2C%29\',\n+            self.url + "?two:list=b&two:int:list=2&one=%28%27a%27%2C%29",\n         )\n \n     def test_formvariables_unicode(self):\n-        self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n-        self.request.form[\'two\'] = u\'foo\'\n+        self.request.form["one"] = "F\xc3\xb8r"\n+        self.request.form["two"] = "foo"\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url + \'?two=foo&one=F%C3%B8r\',\n+            self.url + "?two=foo&one=F%C3%B8r",\n         )\n \n     def test_formvariables_utf8(self):\n-        self.request.form[\'one\'] = u\'F\xc3\xb8r\'\n-        self.request.form[\'two\'] = u\'foo\'\n+        self.request.form["one"] = "F\xc3\xb8r"\n+        self.request.form["two"] = "foo"\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url),\n-            self.url + \'?two=foo&one=F%C3%B8r\',\n+            self.url + "?two=foo&one=F%C3%B8r",\n         )\n \n     def test_formvariables_object(self):\n-        self.request.form[\'one\'] = \'1\'\n-        self.request.form[\'two\'] = EvilObject()\n+        self.request.form["one"] = "1"\n+        self.request.form["two"] = EvilObject()\n         self.assertUrlsEqual(addQuery(self.request, self.url), self.url)\n \n     def test_formvariables_exclude(self):\n-        self.request.form[\'one\'] = 1\n-        self.request.form[\'two\'] = 2\n+        self.request.form["one"] = 1\n+        self.request.form["two"] = 2\n         self.assertUrlsEqual(\n-            addQuery(self.request, self.url, exclude=(\'two\',)),\n-            self.url + \'?one:int=1\',\n+            addQuery(self.request, self.url, exclude=("two",)),\n+            self.url + "?one:int=1",\n         )\n \n     def test_formvariables_extras(self):\n-        self.request.form[\'one\'] = 1\n-        self.request.form[\'two\'] = 2\n+        self.request.form["one"] = 1\n+        self.request.form["two"] = 2\n         self.assertUrlsEqual(\n             addQuery(self.request, self.url, three=3),\n-            self.url + \'?one:int=1&three:int=3&two:int=2\',\n+            self.url + "?one:int=1&three:int=3&two:int=2",\n         )\n \n     def assertUrlsEqual(self, url1, url2):\n@@ -940,135 +908,135 @@ class TestLanguageSelectorSetLanguage(unittest.TestCase):\n \n     def setUp(self):\n         # Set test variables\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n         registry = getUtility(IRegistry)\n         self.settings = registry.forInterface(ILanguageSchema, prefix="plone")\n \n     def test_set_language_is_present(self):\n-        """ test the presence of set_language parameter in the urls created in the language selector"""\n+        """test the presence of set_language parameter in the urls created in the language selector"""\n \n         self.settings.set_cookie_always = False\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal[\'en\'], self.request, None, None\n+            self.portal["en"], self.request, None, None\n         )\n         self.selector_viewlet.update()\n \n         selector_languages = self.selector_viewlet.languages()\n-        tg = ITG(self.portal[\'en\'])\n+        tg = ITG(self.portal["en"])\n \n         self.assertListEqual(\n             selector_languages,\n             [\n                 {\n-                    \'code\': u\'en\',\n-                    u\'flag\': u\'countryflag/gb\',\n-                    u\'name\': u\'English\',\n-                    u\'native\': u\'English\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "en",\n+                    "flag": "countryflag/gb",\n+                    "name": "English",\n+                    "native": "English",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'en\',\n-                        \'query\': \'?set_language=en\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "en",\n+                        "query": "?set_language=en",\n                     },\n-                    \'selected\': True,\n-                    \'translated\': True,\n+                    "selected": True,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'ca\',\n-                    u\'flag\': u\'languageflag/ca\',\n-                    u\'name\': u\'Catalan\',\n-                    u\'native\': u\'Catal\\xe0\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "ca",\n+                    "flag": "languageflag/ca",\n+                    "name": "Catalan",\n+                    "native": "Catal\\xe0",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'ca\',\n-                        \'query\': \'?set_language=ca\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "ca",\n+                        "query": "?set_language=ca",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'es\',\n-                    u\'flag\': u\'countryflag/es\',\n-                    u\'name\': u\'Spanish\',\n-                    u\'native\': u\'Espa\\xf1ol\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "es",\n+                    "flag": "languageflag/es",\n+                    "name": "Spanish",\n+                    "native": "Espa\\xf1ol",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'es\',\n-                        \'query\': \'?set_language=es\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "es",\n+                        "query": "?set_language=es",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n             ],\n         )\n \n     def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n-        """ test the absence of set_language parameter in the urls created in the language selector"""\n+        """test the absence of set_language parameter in the urls created in the language selector"""\n         self.settings.set_cookie_always = True\n         self.selector_viewlet = LanguageSelectorViewlet(\n-            self.portal[\'en\'], self.request, None, None\n+            self.portal["en"], self.request, None, None\n         )\n         self.selector_viewlet.update()\n \n         selector_languages = self.selector_viewlet.languages()\n-        tg = ITG(self.portal[\'en\'])\n+        tg = ITG(self.portal["en"])\n \n         self.assertListEqual(\n             selector_languages,\n             [\n                 {\n-                    \'code\': u\'en\',\n-                    u\'flag\': u\'countryflag/gb\',\n-                    u\'name\': u\'English\',\n-                    u\'native\': u\'English\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "en",\n+                    "flag": "countryflag/gb",\n+                    "name": "English",\n+                    "native": "English",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'en\',\n-                        \'query\': \'\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "en",\n+                        "query": "",\n                     },\n-                    \'selected\': True,\n-                    \'translated\': True,\n+                    "selected": True,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'ca\',\n-                    u\'flag\': u\'languageflag/ca\',\n-                    u\'name\': u\'Catalan\',\n-                    u\'native\': u\'Catal\\xe0\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "ca",\n+                    "flag": "languageflag/ca",\n+                    "name": "Catalan",\n+                    "native": "Catal\\xe0",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'ca\',\n-                        \'query\': \'\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "ca",\n+                        "query": "",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n                 {\n-                    \'code\': u\'es\',\n-                    u\'flag\': u\'countryflag/es\',\n-                    u\'name\': u\'Spanish\',\n-                    u\'native\': u\'Espa\\xf1ol\',\n-                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    "code": "es",\n+                    "flag": "countryflag/es",\n+                    "name": "Spanish",\n+                    "native": "Espa\\xf1ol",\n+                    "url": SELECTOR_VIEW_TEMPLATE\n                     % {\n-                        \'url\': self.portal.absolute_url(),\n-                        \'tg\': tg,\n-                        \'lang\': \'es\',\n-                        \'query\': \'\',\n+                        "url": self.portal.absolute_url(),\n+                        "tg": tg,\n+                        "lang": "es",\n+                        "query": "",\n                     },\n-                    \'selected\': False,\n-                    \'translated\': True,\n+                    "selected": False,\n+                    "translated": True,\n                 },\n             ],\n         )\ndiff --git a/src/plone/app/multilingual/tests/test_setup.py b/src/plone/app/multilingual/tests/test_setup.py\nindex a288059a6..8b2a57109 100644\n--- a/src/plone/app/multilingual/tests/test_setup.py\n+++ b/src/plone/app/multilingual/tests/test_setup.py\n@@ -1,7 +1,12 @@\n-# -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n-from plone.app.multilingual.browser.vocabularies import AllContentLanguageVocabulary  # noqa: E501\n+from plone.app.multilingual.browser.vocabularies import (  # noqa: E501\n+    AllContentLanguageVocabulary,\n+)\n+from plone.app.multilingual.interfaces import ATTRIBUTE_NAME\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITG\n+from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.testing import PAM_INTEGRATION_PRESET_TESTING\n from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n@@ -17,16 +22,21 @@ class TestSetupMultilingualSite(unittest.TestCase):\n \n     def setUp(self):\n         """Setting up the test."""\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.language_tool = getToolByName(self.portal, \'portal_languages\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.language_tool = getToolByName(self.portal, "portal_languages")\n         self.languages = self.language_tool.getSupportedLanguages()\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_single_language(self):\n         """Only one language is set."""\n         self.assertEqual(len(self.languages), 1)\n \n+    def test_portal_has_tg_attribute(self):\n+        """The site root should have the TG attribute set after installing"""\n+        tg_attribute = getattr(aq_base(self.portal), ATTRIBUTE_NAME, None)\n+        self.assertIsNotNone(tg_attribute)\n+\n     def test_no_languagefolder_created(self):\n         """On a single language no folder creation is done."""\n         portal_objects = self.portal.objectIds()\n@@ -43,7 +53,7 @@ def test_all_supported_languages(self):\n             self.language_tool.addSupportedLanguage(lang.value)\n \n         workflow_tool = getToolByName(self.portal, "portal_workflow")\n-        workflow_tool.setDefaultChain(\'simple_publication_workflow\')\n+        workflow_tool.setDefaultChain("simple_publication_workflow")\n \n         setup_tool = SetupMultilingualSite()\n         setup_tool.setupSite(self.portal)\n@@ -51,8 +61,8 @@ def test_all_supported_languages(self):\n         portal_objects = self.portal.objectIds()\n \n         for lang in all_langs.by_value.keys():\n-            if lang == \'id\':\n-                self.assertIn(\'id-id\', portal_objects)\n+            if lang == "id":\n+                self.assertIn("id-id", portal_objects)\n             else:\n                 self.assertIn(lang, portal_objects)\n \n@@ -63,16 +73,16 @@ def test_type_of_language_folders(self):\n             self.language_tool.addSupportedLanguage(lang.value)\n \n         workflow_tool = getToolByName(self.portal, "portal_workflow")\n-        workflow_tool.setDefaultChain(\'simple_publication_workflow\')\n+        workflow_tool.setDefaultChain("simple_publication_workflow")\n \n         setup_tool = SetupMultilingualSite()\n         setup_tool.setupSite(self.portal)\n \n         for lang in all_langs.by_value.keys():\n-            if lang == \'id\':\n-                self.assertEqual(self.portal.get(\'id-id\').portal_type, \'LRF\')\n+            if lang == "id":\n+                self.assertEqual(self.portal.get("id-id").portal_type, "LRF")\n             else:\n-                self.assertEqual(self.portal.get(lang).portal_type, \'LRF\')\n+                self.assertEqual(self.portal.get(lang).portal_type, "LRF")\n \n \n class TestSetupMultilingualPresetSite(unittest.TestCase):\n@@ -82,11 +92,11 @@ class TestSetupMultilingualPresetSite(unittest.TestCase):\n \n     def setUp(self):\n         """Setting up the test."""\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.language_tool = getToolByName(self.portal, \'portal_languages\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.language_tool = getToolByName(self.portal, "portal_languages")\n         self.languages = self.language_tool.getSupportedLanguages()\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n     def test_language_folders_created(self):\n         """Available languages are: \'en\', \'ca\', \'es\'.\n@@ -100,4 +110,4 @@ def test_language_folders_created(self):\n     def test_type_of_language_folders(self):\n         """The created objects have to be \'Language Root Folder\'."""\n         for lang in self.languages:\n-            self.assertEqual(self.portal.get(lang).portal_type, \'LRF\')\n+            self.assertEqual(self.portal.get(lang).portal_type, "LRF")\ndiff --git a/src/plone/app/multilingual/tests/test_sitemap.py b/src/plone/app/multilingual/tests/test_sitemap.py\nindex 128b3cccf..34692817b 100644\n--- a/src/plone/app/multilingual/tests/test_sitemap.py\n+++ b/src/plone/app/multilingual/tests/test_sitemap.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from gzip import GzipFile\n+from io import BytesIO\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.dexterity.utils import createContentInContainer\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISiteSchema\n-from six import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n@@ -18,29 +17,28 @@ class TestSitemap(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n \n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n         self.site_settings.enable_sitemap = True\n \n-        self.sitemap = getMultiAdapter((self.portal, self.portal.REQUEST),\n-                                       name=\'sitemap.xml.gz\')\n+        self.sitemap = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="sitemap.xml.gz"\n+        )\n \n         createContentInContainer(\n-            self.portal[\'en\'][\'assets\'], \'Document\', title=u"Test document")\n+            self.portal["en"]["assets"], "Document", title="Test document"\n+        )\n         # ^ This will be shadowed to all language independent folders\n \n-        createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+        createContentInContainer(self.portal["ca"], "Document", title="Test document")\n \n-        createContentInContainer(\n-            self.portal[\'es\'], \'Document\', title=u"Test document")\n+        createContentInContainer(self.portal["es"], "Document", title="Test document")\n \n-        createContentInContainer(\n-            self.portal[\'en\'], \'Document\', title=u"Test document")\n+        createContentInContainer(self.portal["en"], "Document", title="Test document")\n \n     def uncompress(self, sitemapdata):\n         sio = BytesIO(sitemapdata)\n@@ -50,30 +48,37 @@ def uncompress(self, sitemapdata):\n         return xml\n \n     def test_portalroot_sitemap(self):\n-        \'\'\'\n+        """\n         Requests for the sitemap on portalroot return all languages\n-        \'\'\'\n+        """\n \n         xml = self.uncompress(self.sitemap())\n-        self.assertIn(b\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)\n-        self.assertIn(b\'<loc>http://nohost/plone/en/test-document</loc>\', xml)\n-        self.assertIn(b\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n+        self.assertIn(b"<loc>http://nohost/plone/ca/test-document</loc>", xml)\n+        self.assertIn(b"<loc>http://nohost/plone/en/test-document</loc>", xml)\n+        self.assertIn(b"<loc>http://nohost/plone/es/test-document</loc>", xml)\n \n-        self.assertIn(b\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n-        self.assertIn(b\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n-        self.assertIn(b\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n+        self.assertIn(b"<loc>http://nohost/plone/ca/recursos/test-document</loc>", xml)\n+        self.assertIn(b"<loc>http://nohost/plone/en/assets/test-document</loc>", xml)\n+        self.assertIn(b"<loc>http://nohost/plone/es/recursos/test-document</loc>", xml)\n \n     def test_navroot_sitemap(self):\n-        \'\'\'\n+        """\n         Sitemap generated from a LanguageRootFolder (an INavigationRoot)\n-        \'\'\'\n-        sitemap = getMultiAdapter((self.portal.es, self.portal.REQUEST),\n-                                  name=\'sitemap.xml.gz\')\n+        """\n+        sitemap = getMultiAdapter(\n+            (self.portal.es, self.portal.REQUEST), name="sitemap.xml.gz"\n+        )\n         xml = self.uncompress(sitemap())\n-        self.assertNotIn(b\'<loc>http://nohost/plone/ca/test-document</loc>\', xml)  # noqa\n-        self.assertNotIn(b\'<loc>http://nohost/plone/en/test-document</loc>\', xml)  # noqa\n-        self.assertIn(b\'<loc>http://nohost/plone/es/test-document</loc>\', xml)\n-\n-        self.assertNotIn(b\'<loc>http://nohost/plone/ca/recursos/test-document</loc>\', xml)\n-        self.assertNotIn(b\'<loc>http://nohost/plone/en/assets/test-document</loc>\', xml)\n-        self.assertIn(b\'<loc>http://nohost/plone/es/recursos/test-document</loc>\', xml)\n+        self.assertNotIn(\n+            b"<loc>http://nohost/plone/ca/test-document</loc>", xml\n+        )  # noqa\n+        self.assertNotIn(\n+            b"<loc>http://nohost/plone/en/test-document</loc>", xml\n+        )  # noqa\n+        self.assertIn(b"<loc>http://nohost/plone/es/test-document</loc>", xml)\n+\n+        self.assertNotIn(\n+            b"<loc>http://nohost/plone/ca/recursos/test-document</loc>", xml\n+        )\n+        self.assertNotIn(b"<loc>http://nohost/plone/en/assets/test-document</loc>", xml)\n+        self.assertIn(b"<loc>http://nohost/plone/es/recursos/test-document</loc>", xml)\ndiff --git a/src/plone/app/multilingual/tests/test_subscribers.py b/src/plone/app/multilingual/tests/test_subscribers.py\nindex b4042a36c..3f8ebd0b6 100644\n--- a/src/plone/app/multilingual/tests/test_subscribers.py\n+++ b/src/plone/app/multilingual/tests/test_subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.dexterity.utils import createContentInContainer\n@@ -17,27 +16,28 @@ class TestSubscribers(unittest.TestCase):\n     to change the language of the object from the container where\n     it has been created, moved or copied\n     """\n+\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n-        self.portal = self.layer[\'portal\']\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n \n     def test_created_event(self):\n         """When an object is created in a folder it takes its language from the\n         folder itself\n         """\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n-        self.assertEqual(ILanguage(a_ca).get_language(), \'ca\')\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n+        self.assertEqual(ILanguage(a_ca).get_language(), "ca")\n \n     def test_created_event_on_portal(self):\n         """When an object is created on portal it should be language\n         independent\n         """\n-        a_ca = createContentInContainer(\n-            self.portal, \'Document\', title=u"Test document")\n-        self.assertEqual(ILanguage(a_ca).get_language(), \'\')\n+        a_ca = createContentInContainer(self.portal, "Document", title="Test document")\n+        self.assertEqual(ILanguage(a_ca).get_language(), "")\n \n     def test_moved_event(self):\n         """When an object is moved from within one Language Root Folder into\n@@ -45,12 +45,13 @@ def test_moved_event(self):\n         folder it is copied into\n         """\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n-        id_ = self.portal[\'ca\'].manage_cutObjects(a_ca.id)\n-        self.portal[\'en\'].manage_pasteObjects(id_)\n-        a_ca_copied = self.portal[\'en\'][a_ca.id]\n-        self.assertEqual(ILanguage(a_ca_copied).get_language(), \'en\')\n+        id_ = self.portal["ca"].manage_cutObjects(a_ca.id)\n+        self.portal["en"].manage_pasteObjects(id_)\n+        a_ca_copied = self.portal["en"][a_ca.id]\n+        self.assertEqual(ILanguage(a_ca_copied).get_language(), "en")\n \n     def test_copied_event(self):\n         """When an object is copied from within one Language Root Folder into\n@@ -58,12 +59,13 @@ def test_copied_event(self):\n         folder it is copied into\n         """\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n-        id_ = self.portal[\'ca\'].manage_copyObjects(a_ca.id)\n-        self.portal[\'en\'].manage_pasteObjects(id_)\n-        a_ca_copied = self.portal[\'en\'][a_ca.id]\n-        self.assertEqual(ILanguage(a_ca_copied).get_language(), \'en\')\n+        id_ = self.portal["ca"].manage_copyObjects(a_ca.id)\n+        self.portal["en"].manage_pasteObjects(id_)\n+        a_ca_copied = self.portal["en"][a_ca.id]\n+        self.assertEqual(ILanguage(a_ca_copied).get_language(), "en")\n \n     def test_moved_to_assets_folder(self):\n         """When an object is moved from within one Language Root Folder into\n@@ -72,20 +74,22 @@ def test_moved_to_assets_folder(self):\n         from within other Language Root Folders\n         """\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         # Test a paste into a subfolder to be ultra cautious\n         ca_assets_subfolder = createContentInContainer(\n-            self.portal[\'ca\'][\'recursos\'], \'Folder\', title=u"A Folder")\n+            self.portal["ca"]["recursos"], "Folder", title="A Folder"\n+        )\n \n         subfolder_name = ca_assets_subfolder.id\n \n-        id_ = self.portal[\'ca\'].manage_cutObjects(a_ca.id)\n+        id_ = self.portal["ca"].manage_cutObjects(a_ca.id)\n         ca_assets_subfolder.manage_pasteObjects(id_)\n \n         # Get both assets folders afresh\n-        ca_assets_subfolder = self.portal[\'ca\'][\'recursos\'][subfolder_name]\n-        en_assets_subfolder = self.portal[\'en\'][\'assets\'][subfolder_name]\n+        ca_assets_subfolder = self.portal["ca"]["recursos"][subfolder_name]\n+        en_assets_subfolder = self.portal["en"]["assets"][subfolder_name]\n \n         # Check it is in both folder listings\n         self.assertTrue(a_ca.id in ca_assets_subfolder)\n@@ -93,18 +97,18 @@ def test_moved_to_assets_folder(self):\n \n         # Check it is language independent\n         copy_in_en = en_assets_subfolder[a_ca.id]\n-        self.assertEqual(ILanguage(copy_in_en).get_language(), \'\')\n+        self.assertEqual(ILanguage(copy_in_en).get_language(), "")\n         copy_in_ca = ca_assets_subfolder[a_ca.id]\n-        self.assertEqual(ILanguage(copy_in_ca).get_language(), \'\')\n+        self.assertEqual(ILanguage(copy_in_ca).get_language(), "")\n \n         # Check it is returned in catalog search\n-        catalog = getToolByName(self.portal, \'portal_catalog\')\n+        catalog = getToolByName(self.portal, "portal_catalog")\n \n-        ca_subfolder_path = \'/\'.join(ca_assets_subfolder.getPhysicalPath())\n+        ca_subfolder_path = "/".join(ca_assets_subfolder.getPhysicalPath())\n         ca_folder_contents = [r.id for r in catalog(path=ca_subfolder_path)]\n         self.assertTrue(a_ca.id in ca_folder_contents)\n \n-        en_subfolder_path = \'/\'.join(en_assets_subfolder.getPhysicalPath())\n+        en_subfolder_path = "/".join(en_assets_subfolder.getPhysicalPath())\n         en_folder_contents = [r.id for r in catalog(path=en_subfolder_path)]\n         self.assertTrue(a_ca.id in en_folder_contents)\n \n@@ -115,19 +119,21 @@ def test_copied_to_assets_folder(self):\n         from within other Language Root Folders\n         """\n         a_ca = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n         # Test a paste into a subfolder to be ultra cautious\n         ca_assets_subfolder = createContentInContainer(\n-            self.portal[\'ca\'][\'recursos\'], \'Folder\', title=u"A Folder")\n+            self.portal["ca"]["recursos"], "Folder", title="A Folder"\n+        )\n \n         subfolder_name = ca_assets_subfolder.id\n-        id_ = self.portal[\'ca\'].manage_copyObjects(a_ca.id)\n+        id_ = self.portal["ca"].manage_copyObjects(a_ca.id)\n         ca_assets_subfolder.manage_pasteObjects(id_)\n \n         # Get both assets folders afresh\n-        ca_assets_subfolder = self.portal[\'ca\'][\'recursos\'][subfolder_name]\n-        en_assets_subfolder = self.portal[\'en\'][\'assets\'][subfolder_name]\n+        ca_assets_subfolder = self.portal["ca"]["recursos"][subfolder_name]\n+        en_assets_subfolder = self.portal["en"]["assets"][subfolder_name]\n \n         # Check it is in both folder listings\n         self.assertTrue(a_ca.id in ca_assets_subfolder)\n@@ -135,17 +141,17 @@ def test_copied_to_assets_folder(self):\n \n         # Check it is language independent\n         copy_in_en = en_assets_subfolder[a_ca.id]\n-        self.assertEqual(ILanguage(copy_in_en).get_language(), \'\')\n+        self.assertEqual(ILanguage(copy_in_en).get_language(), "")\n         copy_in_ca = ca_assets_subfolder[a_ca.id]\n-        self.assertEqual(ILanguage(copy_in_ca).get_language(), \'\')\n+        self.assertEqual(ILanguage(copy_in_ca).get_language(), "")\n \n         # Check it is returned in catalog search\n-        catalog = getToolByName(self.portal, \'portal_catalog\')\n+        catalog = getToolByName(self.portal, "portal_catalog")\n \n-        ca_subfolder_path = \'/\'.join(ca_assets_subfolder.getPhysicalPath())\n+        ca_subfolder_path = "/".join(ca_assets_subfolder.getPhysicalPath())\n         ca_folder_contents = [r.id for r in catalog(path=ca_subfolder_path)]\n         self.assertTrue(a_ca.id in ca_folder_contents)\n \n-        en_subfolder_path = \'/\'.join(en_assets_subfolder.getPhysicalPath())\n+        en_subfolder_path = "/".join(en_assets_subfolder.getPhysicalPath())\n         en_folder_contents = [r.id for r in catalog(path=en_subfolder_path)]\n         self.assertTrue(a_ca.id in en_folder_contents)\ndiff --git a/src/plone/app/multilingual/tests/test_uninstall.py b/src/plone/app/multilingual/tests/test_uninstall.py\nindex 5c01a44c2..44df6b8c3 100644\n--- a/src/plone/app/multilingual/tests/test_uninstall.py\n+++ b/src/plone/app/multilingual/tests/test_uninstall.py\n@@ -1,45 +1,43 @@\n from plone import api\n+from plone.app.multilingual.testing import (  # noqa\n+    PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.app.multilingual.testing import PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING  # noqa\n from Products.CMFPlone.utils import get_installer\n \n import unittest\n \n+\n class TestUninstall(unittest.TestCase):\n \n     layer = PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         roles_before = api.user.get_roles(TEST_USER_ID)\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.installer = get_installer(self.portal)\n-        self.installer.uninstall_product(\'plone.app.multilingual\')\n+        self.installer.uninstall_product("plone.app.multilingual")\n         setRoles(self.portal, TEST_USER_ID, roles_before)\n \n     def test_product_uninstalled(self):\n         """Test if plone.app.multilingual is cleanly uninstalled."""\n-        self.assertFalse(self.installer.is_product_installed(\n-            \'plone.app.multilingual\'))\n+        self.assertFalse(self.installer.is_product_installed("plone.app.multilingual"))\n \n     def test_browserlayer_removed(self):\n         """Test that IPloneAppMultilingualInstalled is removed."""\n-        from plone.app.multilingual.interfaces import \\\n-            IPloneAppMultilingualInstalled\n+        from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n         from plone.browserlayer import utils\n-        self.assertNotIn(\n-           IPloneAppMultilingualInstalled,\n-           utils.registered_layers())\n+\n+        self.assertNotIn(IPloneAppMultilingualInstalled, utils.registered_layers())\n \n     def test_language_switcher_not_in_available_view_methods(self):\n         self.assertNotIn(\n-            \'language-switcher\',\n-            self.portal.portal_types[\'Plone Site\'].view_methods\n+            "language-switcher", self.portal.portal_types["Plone Site"].view_methods\n         )\n \n     def test_language_switcher_not_default_view_method(self):\n         self.assertNotEqual(\n-            \'language-switcher\',\n-            self.portal.portal_types[\'Plone Site\'].default_view\n+            "language-switcher", self.portal.portal_types["Plone Site"].default_view\n         )\ndiff --git a/src/plone/app/multilingual/tests/test_vocabularies.py b/src/plone/app/multilingual/tests/test_vocabularies.py\nindex 54f380247..1cb14b8c3 100644\n--- a/src/plone/app/multilingual/tests/test_vocabularies.py\n+++ b/src/plone/app/multilingual/tests/test_vocabularies.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import api\n from plone.app.multilingual.browser.vocabularies import untranslated_languages\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n@@ -13,25 +12,25 @@ class TestVocabularies(unittest.TestCase):\n     layer = PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n-        self.portal = self.layer[\'portal\']\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        self.portal = self.layer["portal"]\n \n     def test_content_is_translated_into_all_languages(self):\n         a_ac = createContentInContainer(\n-            self.portal[\'ca\'], \'Document\', title=u"Test document")\n+            self.portal["ca"], "Document", title="Test document"\n+        )\n \n-        api.translate(a_ac, \'en\')\n-        api.translate(a_ac, \'es\')\n+        api.translate(a_ac, "en")\n+        api.translate(a_ac, "es")\n \n         self.assertEqual(len(untranslated_languages(a_ac)), 0)\n \n     def test_content_is_not_translated_to_any_language(self):\n-        a_ac = createContentInContainer(\n-            self.portal, \'Document\', title=u"Test document")\n+        a_ac = createContentInContainer(self.portal, "Document", title="Test document")\n \n         languages = untranslated_languages(a_ac).by_token.keys()\n \n         self.assertEqual(len(languages), 3)\n-        self.assertIn(\'ca\', languages)\n-        self.assertIn(\'es\', languages)\n-        self.assertIn(\'en\', languages)\n+        self.assertIn("ca", languages)\n+        self.assertIn("es", languages)\n+        self.assertIn("en", languages)\ndiff --git a/src/plone/app/multilingual/upgrades.py b/src/plone/app/multilingual/upgrades.py\nindex f803770d7..b2660cadb 100644\n--- a/src/plone/app/multilingual/upgrades.py\n+++ b/src/plone/app/multilingual/upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual import logger\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -10,33 +9,36 @@\n import transaction\n \n \n-SHARED_NAME = \'shared\'  # old shared folder name\n-OLD_PREFIX = \'old_\'  # temporary prefix while migrating\n-PROFILE_ID = \'profile-plone.app.multilingual:default\'\n+SHARED_NAME = "shared"  # old shared folder name\n+OLD_PREFIX = "old_"  # temporary prefix while migrating\n+PROFILE_ID = "profile-plone.app.multilingual:default"\n \n \n def reimport_css_registry(context):\n-    setup = getToolByName(context, \'portal_setup\')\n+    setup = getToolByName(context, "portal_setup")\n     setup.runImportStepFromProfile(\n-        \'profile-plone.app.multilingual:default\', \'cssregistry\',\n-        run_dependencies=False, purge_old=False)\n+        "profile-plone.app.multilingual:default",\n+        "cssregistry",\n+        run_dependencies=False,\n+        purge_old=False,\n+    )\n \n     # Refresh css\n-    cssregistry = getToolByName(context, \'portal_css\')\n+    cssregistry = getToolByName(context, "portal_css")\n     cssregistry.cookResources()\n \n \n def migration_pam_1_to_2(context):\n     """Migration plone.app.multilingual 1.x to 2.0 by renaming existing\n-       language folders and creating new LRF containers where existing\n-       objects are moved into. Old shared content is moved to portal\n-       root."""\n+    language folders and creating new LRF containers where existing\n+    objects are moved into. Old shared content is moved to portal\n+    root."""\n \n     s1 = time()\n-    type_name = \'LRF\'\n-    ltool = getToolByName(context, \'portal_languages\')\n-    utool = getToolByName(context, \'portal_url\')\n-    wtool = getToolByName(context, \'portal_workflow\')\n+    type_name = "LRF"\n+    ltool = getToolByName(context, "portal_languages")\n+    utool = getToolByName(context, "portal_url")\n+    wtool = getToolByName(context, "portal_workflow")\n     portal = utool.getPortalObject()\n \n     logger.info("Starting migration of language folders.")\n@@ -49,51 +51,60 @@ def migration_pam_1_to_2(context):\n         older = portal[code]\n \n         if older.portal_type == type_name:\n-            logger.info("\'{0}\' is alredy a {1}, skipping.".format(\n-                code, type_name))\n+            logger.info(f"\'{code}\' is alredy a {type_name}, skipping.")\n             continue\n \n         # PHASE 1: rename old language folders\n         s2 = time()\n         old_id = OLD_PREFIX + older.id\n-        logger.info("{0} - Phase 1: Renaming to \'{1}\' ..."\n-                    .format(code, old_id))\n+        logger.info(f"{code} - Phase 1: Renaming to \'{old_id}\' ...")\n         portal.manage_renameObject(older.id, old_id)\n-        logger.info("{0} - Phase 1: Renaming to \'{1}\' took {2:.2f}s."\n-                    .format(code, old_id, time() - s2))\n+        logger.info(\n+            "{} - Phase 1: Renaming to \'{}\' took {:.2f}s.".format(\n+                code, old_id, time() - s2\n+            )\n+        )\n         transaction.savepoint()\n \n         # PHASE 2: move content to new LRF\n         s3 = time()\n         old = portal[old_id]\n-        logger.info("{0} - Phase 2: Moving objects into new LRF..."\n-                    .format(code))\n+        logger.info(f"{code} - Phase 2: Moving objects into new LRF...")\n \n         _createObjectByType(type_name, portal, code)\n         new = portal[code]\n         new.setTitle(name)\n         ILanguage(new).set_language(code)\n \n-        state = wtool.getInfoFor(new, \'review_state\', None)\n-        available_transitions = [t[\'id\'] for t in wtool.getTransitionsFor(new)]\n-        if state != \'published\' and \'publish\' in available_transitions:\n-            wtool.doActionFor(new, \'publish\')\n+        state = wtool.getInfoFor(new, "review_state", None)\n+        available_transitions = [t["id"] for t in wtool.getTransitionsFor(new)]\n+        if state != "published" and "publish" in available_transitions:\n+            wtool.doActionFor(new, "publish")\n         new.reindexObject()\n         transaction.savepoint()\n \n-        new.manage_pasteObjects(\n-            old.manage_cutObjects(ids=old.objectIds()))\n+        new.manage_pasteObjects(old.manage_cutObjects(ids=old.objectIds()))\n \n-        logger.info("{0} - Phase 2: Moving objects to LRF took in {1:.2f}s."\n-                    .format(code, time() - s3))\n+        logger.info(\n+            "{} - Phase 2: Moving objects to LRF took in {:.2f}s.".format(\n+                code, time() - s3\n+            )\n+        )\n \n         transaction.savepoint()\n \n         # PHASE 3: remove old language folders\n         s4 = time()\n-        portal.manage_delObjects(ids=[old_id, ])\n-        logger.info("{0} - Phase 3: Removing \'{1}\' took {2:.2f}s."\n-                    .format(code, old_id, time() - s4))\n+        portal.manage_delObjects(\n+            ids=[\n+                old_id,\n+            ]\n+        )\n+        logger.info(\n+            "{} - Phase 3: Removing \'{}\' took {:.2f}s.".format(\n+                code, old_id, time() - s4\n+            )\n+        )\n \n         transaction.savepoint()\n \n@@ -102,23 +113,27 @@ def migration_pam_1_to_2(context):\n \n         s5 = time()\n         shared = portal[SHARED_NAME]\n-        logger.info("{0} - Phase 4: Moving content to root..."\n-                    .format(SHARED_NAME))\n+        logger.info(f"{SHARED_NAME} - Phase 4: Moving content to root...")\n \n-        portal.manage_pasteObjects(\n-            shared.manage_cutObjects(ids=shared.objectIds()))\n+        portal.manage_pasteObjects(shared.manage_cutObjects(ids=shared.objectIds()))\n \n-        logger.info("{0} - Phase 4: Moving objects into root took {1:.2f}s."\n-                    .format(SHARED_NAME, time() - s5))\n+        logger.info(\n+            "{} - Phase 4: Moving objects into root took {:.2f}s.".format(\n+                SHARED_NAME, time() - s5\n+            )\n+        )\n \n         transaction.savepoint()\n \n         s6 = time()\n-        portal.manage_delObjects(ids=[SHARED_NAME, ])\n-        logger.info("{0} - Phase 5: Removing it took {1:.2f}s."\n-                    .format(SHARED_NAME, time() - s6))\n+        portal.manage_delObjects(\n+            ids=[\n+                SHARED_NAME,\n+            ]\n+        )\n+        logger.info(f"{SHARED_NAME} - Phase 5: Removing it took {time() - s6:.2f}s.")\n \n-    logger.info("All finished in {0}.".format(time() - s1))\n+    logger.info(f"All finished in {time() - s1}.")\n \n \n def upgrade_to_3(context):\n@@ -126,20 +141,20 @@ def upgrade_to_3(context):\n \n     # don\'t re-create if it already exists\n     key = (\n-        \'plone.app.multilingual.interfaces.IMultiLanguageExtraOptionsSchema.\'\n-        \'bypass_languageindependent_field_permission_check\'\n+        "plone.app.multilingual.interfaces.IMultiLanguageExtraOptionsSchema."\n+        "bypass_languageindependent_field_permission_check"\n     )\n     if key in registry:\n         return\n \n     context.runImportStepFromProfile(\n-        PROFILE_ID.replace(\'default\', \'to_3\'),\n-        \'plone.app.registry\',\n+        PROFILE_ID.replace("default", "to_3"),\n+        "plone.app.registry",\n     )\n \n \n def upgrade_to_4(context):\n     context.runImportStepFromProfile(\n-        PROFILE_ID.replace(\'default\', \'to_4\'),\n-        \'plone.app.registry\',\n+        PROFILE_ID.replace("default", "to_4"),\n+        "plone.app.registry",\n     )\ndiff --git a/src/plone/app/multilingual/upgrades.zcml b/src/plone/app/multilingual/upgrades.zcml\nindex 88c4005c1..adbc8be97 100644\n--- a/src/plone/app/multilingual/upgrades.zcml\n+++ b/src/plone/app/multilingual/upgrades.zcml\n@@ -52,4 +52,22 @@\n       handler=".upgrades.upgrade_to_4"\n       />\n \n+  <genericsetup:registerProfile\n+      name="to_1000"\n+      title="Update to 1000"\n+      directory="profiles/upgrades/to_1000"\n+      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      />\n+\n+  <genericsetup:upgradeSteps source="4"\n+      destination="1000"\n+      profile="plone.app.multilingual:default">\n+\n+      <genericsetup:upgradeDepends\n+        title="Add icon expressions"\n+        import_profile="plone.app.multilingual:to_1000" />\n+\n+  </genericsetup:upgradeSteps>\n+\n </configure>\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2022-05-30T18:23:06+02:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/f617e563a7f57a7c7ffc1af61ebf25ed060fea50

use json dumps with sort_keys for better comparability and fix tests

Files changed:
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex eb343f1c..3a221944 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -24,6 +24,7 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectModifiedEvent\n \n+import json\n import lxml\n import transaction\n import unittest\n@@ -107,9 +108,7 @@ def assertFullyTranslatedPages(self):\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        self.assertEqual(\n-            selector_viewlet_languages,\n-            [\n+        expected_languages = [\n                 {\n                     "code": "en",\n                     "flag": "countryflag/gb",\n@@ -155,7 +154,11 @@ def assertFullyTranslatedPages(self):\n                     "selected": False,\n                     "translated": True,\n                 },\n-            ],\n+            ]\n+\n+        self.assertEqual(\n+            json.dumps(selector_viewlet_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n         transaction.commit()\n@@ -427,55 +430,57 @@ def assertRootFolders(self):\n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal["en"])\n \n-        self.assertEqual(\n-            selector_languages,\n-            [\n-                {\n-                    "code": "en",\n-                    "flag": "countryflag/gb",\n-                    "name": "English",\n-                    "native": "English",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "en",\n-                        "query": "?set_language=en",\n-                    },\n-                    "selected": True,\n-                    "translated": True,\n+        expected_languages = [\n+            {\n+                "code": "en",\n+                "flag": "countryflag/gb",\n+                "name": "English",\n+                "native": "English",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "en",\n+                    "query": "?set_language=en",\n                 },\n-                {\n-                    "code": "ca",\n-                    "flag": "languageflag/ca",\n-                    "name": "Catalan",\n-                    "native": "Catal\\xe0",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "ca",\n-                        "query": "?set_language=ca",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": True,\n+                "translated": True,\n+            },\n+            {\n+                "code": "ca",\n+                "flag": "languageflag/ca",\n+                "name": "Catalan",\n+                "native": "Catal\\xe0",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "ca",\n+                    "query": "?set_language=ca",\n                 },\n-                {\n-                    "code": "es",\n-                    "flag": "ountryflag/es",\n-                    "name": "Spanish",\n-                    "native": "Espa\\xf1ol",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "es",\n-                        "query": "?set_language=es",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": False,\n+                "translated": True,\n+            },\n+            {\n+                "code": "es",\n+                "flag": "countryflag/es",\n+                "name": "Spanish",\n+                "native": "Espa\\xf1ol",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "es",\n+                    "query": "?set_language=es",\n                 },\n-            ],\n+                "selected": False,\n+                "translated": True,\n+            },\n+        ]\n+\n+        self.assertEqual(\n+            json.dumps(selector_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n         # Check EN\n@@ -928,55 +933,56 @@ def test_set_language_is_present(self):\n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal["en"])\n \n-        self.assertListEqual(\n-            selector_languages,\n-            [\n-                {\n-                    "code": "en",\n-                    "flag": "countryflag/gb",\n-                    "name": "English",\n-                    "native": "English",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "en",\n-                        "query": "?set_language=en",\n-                    },\n-                    "selected": True,\n-                    "translated": True,\n+        expected_languages = [\n+            {\n+                "code": "en",\n+                "flag": "countryflag/gb",\n+                "name": "English",\n+                "native": "English",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "en",\n+                    "query": "?set_language=en",\n                 },\n-                {\n-                    "code": "ca",\n-                    "flag": "languageflag/ca",\n-                    "name": "Catalan",\n-                    "native": "Catal\\xe0",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "ca",\n-                        "query": "?set_language=ca",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": True,\n+                "translated": True,\n+            },\n+            {\n+                "code": "ca",\n+                "flag": "languageflag/ca",\n+                "name": "Catalan",\n+                "native": "Catal\\xe0",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "ca",\n+                    "query": "?set_language=ca",\n                 },\n-                {\n-                    "code": "es",\n-                    "flag": "languageflag/es",\n-                    "name": "Spanish",\n-                    "native": "Espa\\xf1ol",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "es",\n-                        "query": "?set_language=es",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": False,\n+                "translated": True,\n+            },\n+            {\n+                "code": "es",\n+                "flag": "countryflag/es",\n+                "name": "Spanish",\n+                "native": "Espa\\xf1ol",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "es",\n+                    "query": "?set_language=es",\n                 },\n-            ],\n+                "selected": False,\n+                "translated": True,\n+            },\n+        ]\n+        self.assertEqual(\n+            json.dumps(selector_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n     def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n@@ -990,55 +996,57 @@ def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal["en"])\n \n-        self.assertListEqual(\n-            selector_languages,\n-            [\n-                {\n-                    "code": "en",\n-                    "flag": "countryflag/gb",\n-                    "name": "English",\n-                    "native": "English",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "en",\n-                        "query": "",\n-                    },\n-                    "selected": True,\n-                    "translated": True,\n+        expected_languages = [\n+            {\n+                "code": "en",\n+                "flag": "countryflag/gb",\n+                "name": "English",\n+                "native": "English",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "en",\n+                    "query": "",\n                 },\n-                {\n-                    "code": "ca",\n-                    "flag": "languageflag/ca",\n-                    "name": "Catalan",\n-                    "native": "Catal\\xe0",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "ca",\n-                        "query": "",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": True,\n+                "translated": True,\n+            },\n+            {\n+                "code": "ca",\n+                "flag": "languageflag/ca",\n+                "name": "Catalan",\n+                "native": "Catal\\xe0",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "ca",\n+                    "query": "",\n                 },\n-                {\n-                    "code": "es",\n-                    "flag": "countryflag/es",\n-                    "name": "Spanish",\n-                    "native": "Espa\\xf1ol",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "es",\n-                        "query": "",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": False,\n+                "translated": True,\n+            },\n+            {\n+                "code": "es",\n+                "flag": "countryflag/es",\n+                "name": "Spanish",\n+                "native": "Espa\\xf1ol",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "es",\n+                    "query": "",\n                 },\n-            ],\n+                "selected": False,\n+                "translated": True,\n+            },\n+        ]\n+\n+        self.assertEqual(\n+            json.dumps(selector_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n \n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2022-05-31T11:15:57+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/896f444191ef88b8dcd7c6daf2667135c49d045e

Merge pull request #389 from plone/1letter/svg-flag-support

1letter/svg flag support

Files changed:
A news/387.feature
M src/plone/app/multilingual/browser/templates/languageselector.pt
M src/plone/app/multilingual/tests/test_selector.py

b'diff --git a/news/387.feature b/news/387.feature\nnew file mode 100644\nindex 000000000..59eaed586\n--- /dev/null\n+++ b/news/387.feature\n@@ -0,0 +1,4 @@\n+Use SVG Flags in Language Selector\n+Update Markup in Language Selector\n+Prepare of use the Icon Resolver in Plone 6\n+[1letter]\n\\ No newline at end of file\ndiff --git a/src/plone/app/multilingual/browser/templates/languageselector.pt b/src/plone/app/multilingual/browser/templates/languageselector.pt\nindex 70a9036ac..a815e56c4 100644\n--- a/src/plone/app/multilingual/browser/templates/languageselector.pt\n+++ b/src/plone/app/multilingual/browser/templates/languageselector.pt\n@@ -1,32 +1,34 @@\n <tal:language tal:condition="view/available">\n-<ul id="portal-languageselector"\n-    tal:define="showFlags view/showFlags;\n+  <ul\n+      id="portal-languageselector"\n+      tal:define="showFlags view/showFlags;\n                 languages view/languages;\n-                portal_url view/portal_url;">\n+                portal_url view/portal_url;\n+                icons python:context.restrictedTraverse(\'@@iconresolver\');">\n     <tal:language repeat="lang languages">\n-    <li tal:define="code lang/code;\n+      <li\n+          tal:define="code lang/code;\n                     selected lang/selected;\n                     codeclass string:language-${code};\n                     current python: selected and \'currentLanguage \' or \'\';"\n-        tal:attributes="class string:${current}${codeclass}">\n-        <a href=""\n-           tal:define="flag lang/flag|nothing;\n+          tal:attributes="class string:${current}${codeclass}">\n+        <a\n+            href=""\n+            tal:define="flag lang/flag|nothing;\n                        name lang/native|lang/name;\n                        showflag python:showFlags and flag;"\n-           tal:attributes="href lang/url;\n-                           title name"\n-            ><tal:flag condition="showflag">\n-                <img width="14"\n-                     height="11"\n-                     alt=""\n-                     tal:attributes="src string:${portal_url}${flag};\n-                                     alt name;\n-                                     title name;" />\n-            </tal:flag\n-            ><tal:nonflag condition="not: showflag"\n-                          replace="name">language name</tal:nonflag\n-        ></a>\n-    </li>\n+            tal:attributes="href lang/url;\n+                           title name">\n+          <tal:flag condition="showflag">\n+            <tal:flag condition="showflag">\n+              <img tal:replace="structure python:icons.tag(flag, tag_class=\'plone-icon-flag\')" />\n+            </tal:flag>\n+          </tal:flag>\n+          <tal:nonflag\n+              condition="not: showflag"\n+              replace="name">language name</tal:nonflag>\n+        </a>\n+      </li>\n     </tal:language>\n-</ul>\n+  </ul>\n </tal:language>\n\\ No newline at end of file\ndiff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 850c08d22..3a221944e 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -24,6 +24,8 @@\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectModifiedEvent\n \n+import json\n+import lxml\n import transaction\n import unittest\n \n@@ -106,12 +108,10 @@ def assertFullyTranslatedPages(self):\n         selector_viewlet.update()\n         selector_viewlet_languages = selector_viewlet.languages()\n \n-        self.assertEqual(\n-            selector_viewlet_languages,\n-            [\n+        expected_languages = [\n                 {\n                     "code": "en",\n-                    "flag": "/++resource++country-flags/gb.gif",\n+                    "flag": "countryflag/gb",\n                     "name": "English",\n                     "native": "English",\n                     "url": SELECTOR_VIEW_TEMPLATE\n@@ -126,7 +126,7 @@ def assertFullyTranslatedPages(self):\n                 },\n                 {\n                     "code": "ca",\n-                    "flag": "/++resource++language-flags/ca.gif",\n+                    "flag": "languageflag/ca",\n                     "name": "Catalan",\n                     "native": "Catal\\xe0",\n                     "url": SELECTOR_VIEW_TEMPLATE\n@@ -141,7 +141,7 @@ def assertFullyTranslatedPages(self):\n                 },\n                 {\n                     "code": "es",\n-                    "flag": "/++resource++country-flags/es.gif",\n+                    "flag": "countryflag/es",\n                     "name": "Spanish",\n                     "native": "Espa\\xf1ol",\n                     "url": SELECTOR_VIEW_TEMPLATE\n@@ -154,7 +154,11 @@ def assertFullyTranslatedPages(self):\n                     "selected": False,\n                     "translated": True,\n                 },\n-            ],\n+            ]\n+\n+        self.assertEqual(\n+            json.dumps(selector_viewlet_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n         transaction.commit()\n@@ -426,55 +430,57 @@ def assertRootFolders(self):\n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal["en"])\n \n-        self.assertEqual(\n-            selector_languages,\n-            [\n-                {\n-                    "code": "en",\n-                    "flag": "/++resource++country-flags/gb.gif",\n-                    "name": "English",\n-                    "native": "English",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "en",\n-                        "query": "?set_language=en",\n-                    },\n-                    "selected": True,\n-                    "translated": True,\n+        expected_languages = [\n+            {\n+                "code": "en",\n+                "flag": "countryflag/gb",\n+                "name": "English",\n+                "native": "English",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "en",\n+                    "query": "?set_language=en",\n                 },\n-                {\n-                    "code": "ca",\n-                    "flag": "/++resource++language-flags/ca.gif",\n-                    "name": "Catalan",\n-                    "native": "Catal\\xe0",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "ca",\n-                        "query": "?set_language=ca",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": True,\n+                "translated": True,\n+            },\n+            {\n+                "code": "ca",\n+                "flag": "languageflag/ca",\n+                "name": "Catalan",\n+                "native": "Catal\\xe0",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "ca",\n+                    "query": "?set_language=ca",\n                 },\n-                {\n-                    "code": "es",\n-                    "flag": "/++resource++country-flags/es.gif",\n-                    "name": "Spanish",\n-                    "native": "Espa\\xf1ol",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "es",\n-                        "query": "?set_language=es",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": False,\n+                "translated": True,\n+            },\n+            {\n+                "code": "es",\n+                "flag": "countryflag/es",\n+                "name": "Spanish",\n+                "native": "Espa\\xf1ol",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "es",\n+                    "query": "?set_language=es",\n                 },\n-            ],\n+                "selected": False,\n+                "translated": True,\n+            },\n+        ]\n+\n+        self.assertEqual(\n+            json.dumps(selector_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n         # Check EN\n@@ -927,55 +933,56 @@ def test_set_language_is_present(self):\n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal["en"])\n \n-        self.assertListEqual(\n-            selector_languages,\n-            [\n-                {\n-                    "code": "en",\n-                    "flag": "/++resource++country-flags/gb.gif",\n-                    "name": "English",\n-                    "native": "English",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "en",\n-                        "query": "?set_language=en",\n-                    },\n-                    "selected": True,\n-                    "translated": True,\n+        expected_languages = [\n+            {\n+                "code": "en",\n+                "flag": "countryflag/gb",\n+                "name": "English",\n+                "native": "English",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "en",\n+                    "query": "?set_language=en",\n                 },\n-                {\n-                    "code": "ca",\n-                    "flag": "/++resource++language-flags/ca.gif",\n-                    "name": "Catalan",\n-                    "native": "Catal\\xe0",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "ca",\n-                        "query": "?set_language=ca",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": True,\n+                "translated": True,\n+            },\n+            {\n+                "code": "ca",\n+                "flag": "languageflag/ca",\n+                "name": "Catalan",\n+                "native": "Catal\\xe0",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "ca",\n+                    "query": "?set_language=ca",\n                 },\n-                {\n-                    "code": "es",\n-                    "flag": "/++resource++country-flags/es.gif",\n-                    "name": "Spanish",\n-                    "native": "Espa\\xf1ol",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "es",\n-                        "query": "?set_language=es",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": False,\n+                "translated": True,\n+            },\n+            {\n+                "code": "es",\n+                "flag": "countryflag/es",\n+                "name": "Spanish",\n+                "native": "Espa\\xf1ol",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "es",\n+                    "query": "?set_language=es",\n                 },\n-            ],\n+                "selected": False,\n+                "translated": True,\n+            },\n+        ]\n+        self.assertEqual(\n+            json.dumps(selector_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n \n     def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n@@ -989,53 +996,85 @@ def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n         selector_languages = self.selector_viewlet.languages()\n         tg = ITG(self.portal["en"])\n \n-        self.assertListEqual(\n-            selector_languages,\n-            [\n-                {\n-                    "code": "en",\n-                    "flag": "/++resource++country-flags/gb.gif",\n-                    "name": "English",\n-                    "native": "English",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "en",\n-                        "query": "",\n-                    },\n-                    "selected": True,\n-                    "translated": True,\n+        expected_languages = [\n+            {\n+                "code": "en",\n+                "flag": "countryflag/gb",\n+                "name": "English",\n+                "native": "English",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "en",\n+                    "query": "",\n                 },\n-                {\n-                    "code": "ca",\n-                    "flag": "/++resource++language-flags/ca.gif",\n-                    "name": "Catalan",\n-                    "native": "Catal\\xe0",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "ca",\n-                        "query": "",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": True,\n+                "translated": True,\n+            },\n+            {\n+                "code": "ca",\n+                "flag": "languageflag/ca",\n+                "name": "Catalan",\n+                "native": "Catal\\xe0",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "ca",\n+                    "query": "",\n                 },\n-                {\n-                    "code": "es",\n-                    "flag": "/++resource++country-flags/es.gif",\n-                    "name": "Spanish",\n-                    "native": "Espa\\xf1ol",\n-                    "url": SELECTOR_VIEW_TEMPLATE\n-                    % {\n-                        "url": self.portal.absolute_url(),\n-                        "tg": tg,\n-                        "lang": "es",\n-                        "query": "",\n-                    },\n-                    "selected": False,\n-                    "translated": True,\n+                "selected": False,\n+                "translated": True,\n+            },\n+            {\n+                "code": "es",\n+                "flag": "countryflag/es",\n+                "name": "Spanish",\n+                "native": "Espa\\xf1ol",\n+                "url": SELECTOR_VIEW_TEMPLATE\n+                % {\n+                    "url": self.portal.absolute_url(),\n+                    "tg": tg,\n+                    "lang": "es",\n+                    "query": "",\n                 },\n-            ],\n+                "selected": False,\n+                "translated": True,\n+            },\n+        ]\n+\n+        self.assertEqual(\n+            json.dumps(selector_languages, sort_keys=True),\n+            json.dumps(expected_languages, sort_keys=True),\n         )\n+\n+\n+class TestLanguageSelectorDisplayOptions(unittest.TestCase):\n+\n+    layer = PAM_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        # Set test variables\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.layer[\'request\']\n+        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+\n+        # Setup testbrowser\n+        self.browser = Browser(self.layer[\'app\'])\n+        self.browser.handleErrors = False\n+\n+    def test_language_selector_flag_is_a_svg(self):\n+\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        self.settings.display_flags = True\n+        self.settings.always_show_selector = True\n+\n+        transaction.commit()\n+\n+        self.browser.open(self.portal_url)\n+        output = lxml.html.fromstring(self.browser.contents)\n+        svgs = output.xpath(\'//svg[contains(@class, "plone-icon-flag")]\')\n+        self.assertGreater(len(svgs), 0)\n'

