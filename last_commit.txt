Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-03-30T01:22:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/7f4efc3c9c681bbe27c1cab0a4656bd6d9e5dd47

Fixed evaluating expressions on resources, and especially loading `plone.session` resources.

Fixes [`plone.session` issue 23](https://github.com/plone/plone.session/issues/23).
Main problem there was that the code could not traverse to the plone.session css resource,
resulting in a resource None, which caused a traceback, resulting in an unstyled site.

After fixing this part, I found another problem:
the `plone.session` css resource had an expression `python: member is not None`, but was still loaded for anonymous users as well.
It turned out that the expression was never checked.
More correctly said: it looks like the expression of the last resource was used for all resources,
even when this expression was empty.
To fix this, I had to pass the expression to the webresource, and move some code from `browser/resource.py` to `webresource.py`.

I added tests with a couple of resource bundles with different expressions.

Files changed:
A news/23.bugfix
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/utils.py
M Products/CMFPlone/resources/webresource.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex c8e65e019b..b345e96736 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -1,21 +1,13 @@\n from ..webresource import PloneScriptResource\n from ..webresource import PloneStyleResource\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n from App.config import getConfiguration\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.theming.interfaces import IThemeSettings\n from plone.app.theming.utils import theming_policy\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.Expression import createExprContext\n-from Products.CMFCore.Expression import Expression\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.component import queryUtility\n-from zope.ramcache.interfaces import ram\n \n import logging\n import webresource\n@@ -114,12 +106,6 @@ def update(self):\n             include = include or name in request_enabled_bundles\n             include = include and name not in request_disabled_bundles\n \n-            if include and record.expression:\n-\n-                def current_expression():\n-                    return self.eval_expression(record.expression, name)\n-\n-                include = current_expression\n             if record.jscompilation:\n                 depends = record.depends or ""\n                 if depends and depends not in js_names:\n@@ -147,6 +133,7 @@ def current_expression():\n                     resource=record.jscompilation if not external else None,\n                     compressed=record.jscompilation if not external else None,\n                     include=include,\n+                    expression=record.expression,\n                     unique=unique,\n                     group=registry_group_js,\n                     url=record.jscompilation if external else None,\n@@ -182,6 +169,7 @@ def current_expression():\n                     resource=record.csscompilation if not external else None,\n                     compressed=record.csscompilation if not external else None,\n                     include=include,\n+                    expression=record.expression,\n                     unique=unique,\n                     group=registry_group_css,\n                     url=record.csscompilation if external else None,\n@@ -267,57 +255,6 @@ def current_expression():\n             resolver_css, base_url=self.portal_state.portal_url()\n         )\n \n-    def evaluateExpression(self, expression, context):\n-        """Evaluate an object\'s TALES condition to see if it should be\n-        displayed."""\n-        try:\n-            if expression.text and context is not None:\n-                portal = getToolByName(context, "portal_url").getPortalObject()\n-\n-                # Find folder (code courtesy of CMFCore.ActionsTool)\n-                if context is None or not hasattr(context, "aq_base"):\n-                    folder = portal\n-                else:\n-                    folder = context\n-                    # Search up the containment hierarchy until we find an\n-                    # object that claims it\'s PrincipiaFolderish.\n-                    while folder is not None:\n-                        if getattr(aq_base(folder), "isPrincipiaFolderish", 0):\n-                            # found it.\n-                            break\n-                        else:\n-                            folder = aq_parent(aq_inner(folder))\n-\n-                __traceback_info__ = (folder, portal, context, expression)\n-                ec = createExprContext(folder, portal, context)\n-                # add \'context\' as an alias for \'object\'\n-                ec.setGlobal("context", context)\n-                return expression(ec)\n-            return True\n-        except AttributeError:\n-            return True\n-\n-    def eval_expression(self, expression, bundle_name):\n-        if not expression:\n-            return True\n-        cache = queryUtility(ram.IRAMCache)\n-        cooked_expression = None\n-        if cache is not None:\n-            cooked_expression = cache.query(\n-                "plone.bundles.cooked_expressions",\n-                key=dict(prefix=bundle_name),\n-                default=None,\n-            )\n-        if cooked_expression is None or cooked_expression.text != expression:\n-            cooked_expression = Expression(expression)\n-            if cache is not None:\n-                cache.set(\n-                    cooked_expression,\n-                    "plone.bundles.cooked_expressions",\n-                    key=dict(prefix=bundle_name),\n-                )\n-        return self.evaluateExpression(cooked_expression, self.context)\n-\n \n class ResourceView(ResourceBase, ViewletBase):\n     """Viewlet Information for script rendering."""\ndiff --git a/Products/CMFPlone/resources/utils.py b/Products/CMFPlone/resources/utils.py\nindex 5b7ba7ced3..ec2e7fb9e0 100644\n--- a/Products/CMFPlone/resources/utils.py\n+++ b/Products/CMFPlone/resources/utils.py\n@@ -1,6 +1,10 @@\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n+from Products.CMFCore.Expression import createExprContext\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME\n from zExceptions import NotFound\n from zope.component import queryUtility\n@@ -38,6 +42,14 @@ def get_resource(context, path):\n         if overrides.isFile(filepath):\n             return overrides.readFile(filepath)\n \n+    if "?" in path:\n+        # Example from plone.session:\n+        # "acl_users/session/refresh?session_refresh=true&type=css&minutes=5"\n+        # Traversing will not work then.  In this example we could split on "?"\n+        # and traverse to the first part, acl_users/session/refresh, but this\n+        # gives a function, and this fails when we call it below, missing a\n+        # REQUEST argument\n+        return\n     try:\n         resource = context.unrestrictedTraverse(path)\n     except (NotFound, AttributeError):\n@@ -71,3 +83,34 @@ def get_override_directory(context):\n     if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:\n         persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)\n     return persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n+\n+\n+def evaluateExpression(expression, context):\n+    """Evaluate an object\'s TALES condition to see if it should be\n+    displayed."""\n+    try:\n+        if expression.text and context is not None:\n+            portal = getToolByName(context, "portal_url").getPortalObject()\n+\n+            # Find folder (code courtesy of CMFCore.ActionsTool)\n+            if context is None or not hasattr(context, "aq_base"):\n+                folder = portal\n+            else:\n+                folder = context\n+                # Search up the containment hierarchy until we find an\n+                # object that claims it\'s PrincipiaFolderish.\n+                while folder is not None:\n+                    if getattr(aq_base(folder), "isPrincipiaFolderish", 0):\n+                        # found it.\n+                        break\n+                    else:\n+                        folder = aq_parent(aq_inner(folder))\n+\n+            __traceback_info__ = (folder, portal, context, expression)\n+            ec = createExprContext(folder, portal, context)\n+            # add \'context\' as an alias for \'object\'\n+            ec.setGlobal("context", context)\n+            return expression(ec)\n+        return True\n+    except AttributeError:\n+        return True\ndiff --git a/Products/CMFPlone/resources/webresource.py b/Products/CMFPlone/resources/webresource.py\nindex 43f2a36d32..b3d6233660 100644\n--- a/Products/CMFPlone/resources/webresource.py\n+++ b/Products/CMFPlone/resources/webresource.py\n@@ -1,6 +1,10 @@\n+from .utils import evaluateExpression\n from .utils import get_resource\n+from Products.CMFCore.Expression import Expression\n from webresource import ScriptResource\n from webresource import StyleResource\n+from zope.component import queryUtility\n+from zope.ramcache.interfaces import ram\n \n \n class PloneBaseResource:\n@@ -9,16 +13,59 @@ class PloneBaseResource:\n     def __init__(self, context, **kw):\n         """Initialize with Plone context"""\n         self.context = context\n+        self.expression = kw.pop("expression", "")\n         super().__init__(**kw)\n \n     @property\n     def file_data(self):\n         """Fetch data from using a resource via traversal"""\n         data = get_resource(self.context, self.resource)\n+        if data is None:\n+            # This happens with plone.session when trying to get a resource\n+            # with this path:\n+            # "acl_users/session/refresh?session_refresh=true&type=css&minutes=5"\n+            # We could \'return b""\', but let\'s take the resource path instead.\n+            data = self.resource\n         if isinstance(data, str):\n             data = data.encode("utf8")\n         return data\n \n+    @property\n+    def include(self):\n+        if callable(self._include):\n+            # Note: at time of writing, this is not used in core Plone.\n+            # But upstream webresource has it, so let\'s keep it.\n+            return self._include()\n+        if not self._include:\n+            return False\n+        # We want to include the resource, but must evaluate the expression first.\n+        return self.eval_expression()\n+\n+    @include.setter\n+    def include(self, include):\n+        self._include = include\n+\n+    def eval_expression(self):\n+        if not self.expression:\n+            return True\n+        cache = queryUtility(ram.IRAMCache)\n+        cooked_expression = None\n+        if cache is not None:\n+            cooked_expression = cache.query(\n+                "plone.bundles.cooked_expressions",\n+                key=dict(prefix=self.name),\n+                default=None,\n+            )\n+        if cooked_expression is None or cooked_expression.text != self.expression:\n+            cooked_expression = Expression(self.expression)\n+            if cache is not None:\n+                cache.set(\n+                    cooked_expression,\n+                    "plone.bundles.cooked_expressions",\n+                    key=dict(prefix=self.name),\n+                )\n+        return evaluateExpression(cooked_expression, self.context)\n+\n \n class PloneScriptResource(PloneBaseResource, ScriptResource):\n     """Webresource based ScriptResource for Plone"""\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 5c26f0fca7..37ad8d13a1 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -247,3 +247,103 @@ def test_remove_bundle_on_request_with_subrequest(self):\n         scripts.update()\n         result = scripts.render()\n         self.assertNotIn("http://test.foo/test.min.js", result)\n+\n+\n+class TestExpressions(PloneTestCase.PloneTestCase):\n+\n+    def setUp(self):\n+        # Add three bundles with three different expressions.\n+        registry = getUtility(IRegistry)\n+        data = {\n+            "jscompilation": ("http://test.foo/test.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test.foo/test.css", regfield.TextLine()),\n+            "expression": ("python: False", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle.{key}"] = record\n+\n+        data = {\n+            "jscompilation": ("http://test2.foo/member.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test2.foo/member.css", regfield.TextLine()),\n+            "expression": ("python: member is not None", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle2.{key}"] = record\n+\n+        data = {\n+            "jscompilation": ("http://test3.foo/test.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test3.foo/test.css", regfield.TextLine()),\n+            "expression": ("python: True", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle3.{key}"] = record\n+\n+    def test_styles_authenticated(self):\n+        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++theme++barceloneta/css/barceloneta.min.css", results)\n+        self.assertIn("http://nohost/plone/++webresource++", results)\n+        # Test our additional bundles.\n+        # self.assertNotIn("http://test.foo/test.css", results)\n+        self.assertIn("http://test2.foo/member.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n+    def test_styles_anonymous(self):\n+        logout()\n+        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++theme++barceloneta/css/barceloneta.min.css", results)\n+        self.assertIn("http://nohost/plone/++webresource++", results)\n+        # Test our additional bundles.\n+        # self.assertNotIn("http://test.foo/test.css", results)\n+        self.assertNotIn("http://test2.foo/member.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n+    def test_scripts_authenticated(self):\n+        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++plone++static/bundle-plone/bundle.min.js", results)\n+        # The first one should be included, the second one not.\n+        # self.assertNotIn("http://test.foo/test.min.js", results)\n+        self.assertIn("http://test2.foo/member.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\n+\n+    def test_scripts_anonymous(self):\n+        logout()\n+        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++plone++static/bundle-plone/bundle.min.js", results)\n+        # The first one should be included, the second one not.\n+        # self.assertNotIn("http://test.foo/test.min.js", results)\n+        self.assertNotIn("http://test2.foo/member.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\ndiff --git a/news/23.bugfix b/news/23.bugfix\nnew file mode 100644\nindex 0000000000..9fdeac6cb1\n--- /dev/null\n+++ b/news/23.bugfix\n@@ -0,0 +1,3 @@\n+Fixed evaluating expressions on resources, and especially loading ``plone.session`` resources.\n+Fixes `plone.session` issue 23 <https://github.com/plone/plone.session/issues/23>_.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-03-30T08:28:04+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3a98bcf8feb990c836ee41bf4bbd0c42dc303e17

Merge pull request #3470 from plone/maurits-fix-plone-session-resources-and-expressions

Fixed plone.session resource, and evaluating expressions on resources

Files changed:
A news/23.bugfix
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/utils.py
M Products/CMFPlone/resources/webresource.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex c8e65e019b..b345e96736 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -1,21 +1,13 @@\n from ..webresource import PloneScriptResource\n from ..webresource import PloneStyleResource\n-from Acquisition import aq_base\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n from App.config import getConfiguration\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.theming.interfaces import IThemeSettings\n from plone.app.theming.utils import theming_policy\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.Expression import createExprContext\n-from Products.CMFCore.Expression import Expression\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.component import queryUtility\n-from zope.ramcache.interfaces import ram\n \n import logging\n import webresource\n@@ -114,12 +106,6 @@ def update(self):\n             include = include or name in request_enabled_bundles\n             include = include and name not in request_disabled_bundles\n \n-            if include and record.expression:\n-\n-                def current_expression():\n-                    return self.eval_expression(record.expression, name)\n-\n-                include = current_expression\n             if record.jscompilation:\n                 depends = record.depends or ""\n                 if depends and depends not in js_names:\n@@ -147,6 +133,7 @@ def current_expression():\n                     resource=record.jscompilation if not external else None,\n                     compressed=record.jscompilation if not external else None,\n                     include=include,\n+                    expression=record.expression,\n                     unique=unique,\n                     group=registry_group_js,\n                     url=record.jscompilation if external else None,\n@@ -182,6 +169,7 @@ def current_expression():\n                     resource=record.csscompilation if not external else None,\n                     compressed=record.csscompilation if not external else None,\n                     include=include,\n+                    expression=record.expression,\n                     unique=unique,\n                     group=registry_group_css,\n                     url=record.csscompilation if external else None,\n@@ -267,57 +255,6 @@ def current_expression():\n             resolver_css, base_url=self.portal_state.portal_url()\n         )\n \n-    def evaluateExpression(self, expression, context):\n-        """Evaluate an object\'s TALES condition to see if it should be\n-        displayed."""\n-        try:\n-            if expression.text and context is not None:\n-                portal = getToolByName(context, "portal_url").getPortalObject()\n-\n-                # Find folder (code courtesy of CMFCore.ActionsTool)\n-                if context is None or not hasattr(context, "aq_base"):\n-                    folder = portal\n-                else:\n-                    folder = context\n-                    # Search up the containment hierarchy until we find an\n-                    # object that claims it\'s PrincipiaFolderish.\n-                    while folder is not None:\n-                        if getattr(aq_base(folder), "isPrincipiaFolderish", 0):\n-                            # found it.\n-                            break\n-                        else:\n-                            folder = aq_parent(aq_inner(folder))\n-\n-                __traceback_info__ = (folder, portal, context, expression)\n-                ec = createExprContext(folder, portal, context)\n-                # add \'context\' as an alias for \'object\'\n-                ec.setGlobal("context", context)\n-                return expression(ec)\n-            return True\n-        except AttributeError:\n-            return True\n-\n-    def eval_expression(self, expression, bundle_name):\n-        if not expression:\n-            return True\n-        cache = queryUtility(ram.IRAMCache)\n-        cooked_expression = None\n-        if cache is not None:\n-            cooked_expression = cache.query(\n-                "plone.bundles.cooked_expressions",\n-                key=dict(prefix=bundle_name),\n-                default=None,\n-            )\n-        if cooked_expression is None or cooked_expression.text != expression:\n-            cooked_expression = Expression(expression)\n-            if cache is not None:\n-                cache.set(\n-                    cooked_expression,\n-                    "plone.bundles.cooked_expressions",\n-                    key=dict(prefix=bundle_name),\n-                )\n-        return self.evaluateExpression(cooked_expression, self.context)\n-\n \n class ResourceView(ResourceBase, ViewletBase):\n     """Viewlet Information for script rendering."""\ndiff --git a/Products/CMFPlone/resources/utils.py b/Products/CMFPlone/resources/utils.py\nindex 5b7ba7ced3..ec2e7fb9e0 100644\n--- a/Products/CMFPlone/resources/utils.py\n+++ b/Products/CMFPlone/resources/utils.py\n@@ -1,6 +1,10 @@\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n+from Products.CMFCore.Expression import createExprContext\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME\n from zExceptions import NotFound\n from zope.component import queryUtility\n@@ -38,6 +42,14 @@ def get_resource(context, path):\n         if overrides.isFile(filepath):\n             return overrides.readFile(filepath)\n \n+    if "?" in path:\n+        # Example from plone.session:\n+        # "acl_users/session/refresh?session_refresh=true&type=css&minutes=5"\n+        # Traversing will not work then.  In this example we could split on "?"\n+        # and traverse to the first part, acl_users/session/refresh, but this\n+        # gives a function, and this fails when we call it below, missing a\n+        # REQUEST argument\n+        return\n     try:\n         resource = context.unrestrictedTraverse(path)\n     except (NotFound, AttributeError):\n@@ -71,3 +83,34 @@ def get_override_directory(context):\n     if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:\n         persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)\n     return persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n+\n+\n+def evaluateExpression(expression, context):\n+    """Evaluate an object\'s TALES condition to see if it should be\n+    displayed."""\n+    try:\n+        if expression.text and context is not None:\n+            portal = getToolByName(context, "portal_url").getPortalObject()\n+\n+            # Find folder (code courtesy of CMFCore.ActionsTool)\n+            if context is None or not hasattr(context, "aq_base"):\n+                folder = portal\n+            else:\n+                folder = context\n+                # Search up the containment hierarchy until we find an\n+                # object that claims it\'s PrincipiaFolderish.\n+                while folder is not None:\n+                    if getattr(aq_base(folder), "isPrincipiaFolderish", 0):\n+                        # found it.\n+                        break\n+                    else:\n+                        folder = aq_parent(aq_inner(folder))\n+\n+            __traceback_info__ = (folder, portal, context, expression)\n+            ec = createExprContext(folder, portal, context)\n+            # add \'context\' as an alias for \'object\'\n+            ec.setGlobal("context", context)\n+            return expression(ec)\n+        return True\n+    except AttributeError:\n+        return True\ndiff --git a/Products/CMFPlone/resources/webresource.py b/Products/CMFPlone/resources/webresource.py\nindex 43f2a36d32..b3d6233660 100644\n--- a/Products/CMFPlone/resources/webresource.py\n+++ b/Products/CMFPlone/resources/webresource.py\n@@ -1,6 +1,10 @@\n+from .utils import evaluateExpression\n from .utils import get_resource\n+from Products.CMFCore.Expression import Expression\n from webresource import ScriptResource\n from webresource import StyleResource\n+from zope.component import queryUtility\n+from zope.ramcache.interfaces import ram\n \n \n class PloneBaseResource:\n@@ -9,16 +13,59 @@ class PloneBaseResource:\n     def __init__(self, context, **kw):\n         """Initialize with Plone context"""\n         self.context = context\n+        self.expression = kw.pop("expression", "")\n         super().__init__(**kw)\n \n     @property\n     def file_data(self):\n         """Fetch data from using a resource via traversal"""\n         data = get_resource(self.context, self.resource)\n+        if data is None:\n+            # This happens with plone.session when trying to get a resource\n+            # with this path:\n+            # "acl_users/session/refresh?session_refresh=true&type=css&minutes=5"\n+            # We could \'return b""\', but let\'s take the resource path instead.\n+            data = self.resource\n         if isinstance(data, str):\n             data = data.encode("utf8")\n         return data\n \n+    @property\n+    def include(self):\n+        if callable(self._include):\n+            # Note: at time of writing, this is not used in core Plone.\n+            # But upstream webresource has it, so let\'s keep it.\n+            return self._include()\n+        if not self._include:\n+            return False\n+        # We want to include the resource, but must evaluate the expression first.\n+        return self.eval_expression()\n+\n+    @include.setter\n+    def include(self, include):\n+        self._include = include\n+\n+    def eval_expression(self):\n+        if not self.expression:\n+            return True\n+        cache = queryUtility(ram.IRAMCache)\n+        cooked_expression = None\n+        if cache is not None:\n+            cooked_expression = cache.query(\n+                "plone.bundles.cooked_expressions",\n+                key=dict(prefix=self.name),\n+                default=None,\n+            )\n+        if cooked_expression is None or cooked_expression.text != self.expression:\n+            cooked_expression = Expression(self.expression)\n+            if cache is not None:\n+                cache.set(\n+                    cooked_expression,\n+                    "plone.bundles.cooked_expressions",\n+                    key=dict(prefix=self.name),\n+                )\n+        return evaluateExpression(cooked_expression, self.context)\n+\n \n class PloneScriptResource(PloneBaseResource, ScriptResource):\n     """Webresource based ScriptResource for Plone"""\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 5c26f0fca7..37ad8d13a1 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -247,3 +247,103 @@ def test_remove_bundle_on_request_with_subrequest(self):\n         scripts.update()\n         result = scripts.render()\n         self.assertNotIn("http://test.foo/test.min.js", result)\n+\n+\n+class TestExpressions(PloneTestCase.PloneTestCase):\n+\n+    def setUp(self):\n+        # Add three bundles with three different expressions.\n+        registry = getUtility(IRegistry)\n+        data = {\n+            "jscompilation": ("http://test.foo/test.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test.foo/test.css", regfield.TextLine()),\n+            "expression": ("python: False", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle.{key}"] = record\n+\n+        data = {\n+            "jscompilation": ("http://test2.foo/member.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test2.foo/member.css", regfield.TextLine()),\n+            "expression": ("python: member is not None", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle2.{key}"] = record\n+\n+        data = {\n+            "jscompilation": ("http://test3.foo/test.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test3.foo/test.css", regfield.TextLine()),\n+            "expression": ("python: True", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle3.{key}"] = record\n+\n+    def test_styles_authenticated(self):\n+        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++theme++barceloneta/css/barceloneta.min.css", results)\n+        self.assertIn("http://nohost/plone/++webresource++", results)\n+        # Test our additional bundles.\n+        # self.assertNotIn("http://test.foo/test.css", results)\n+        self.assertIn("http://test2.foo/member.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n+    def test_styles_anonymous(self):\n+        logout()\n+        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++theme++barceloneta/css/barceloneta.min.css", results)\n+        self.assertIn("http://nohost/plone/++webresource++", results)\n+        # Test our additional bundles.\n+        # self.assertNotIn("http://test.foo/test.css", results)\n+        self.assertNotIn("http://test2.foo/member.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n+    def test_scripts_authenticated(self):\n+        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++plone++static/bundle-plone/bundle.min.js", results)\n+        # The first one should be included, the second one not.\n+        # self.assertNotIn("http://test.foo/test.min.js", results)\n+        self.assertIn("http://test2.foo/member.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\n+\n+    def test_scripts_anonymous(self):\n+        logout()\n+        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that standard resources are still there, signalling that\n+        # rendering works without throwing an exception.\n+        self.assertIn("++plone++static/bundle-plone/bundle.min.js", results)\n+        # The first one should be included, the second one not.\n+        # self.assertNotIn("http://test.foo/test.min.js", results)\n+        self.assertNotIn("http://test2.foo/member.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\ndiff --git a/news/23.bugfix b/news/23.bugfix\nnew file mode 100644\nindex 0000000000..9fdeac6cb1\n--- /dev/null\n+++ b/news/23.bugfix\n@@ -0,0 +1,3 @@\n+Fixed evaluating expressions on resources, and especially loading ``plone.session`` resources.\n+Fixes `plone.session` issue 23 <https://github.com/plone/plone.session/issues/23>_.\n+[maurits]\n'

