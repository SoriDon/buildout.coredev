Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-10-21T14:16:32+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/27286107515e0f473734aadd745a06d3cd380d4a

replace standard_error_message with an exception view

Files changed:
A Products/CMFPlone/browser/exceptions.py
A Products/CMFPlone/browser/templates/basic_error_message.pt
A Products/CMFPlone/browser/templates/error_message.pt
M Products/CMFPlone/browser/configure.zcml
D Products/CMFPlone/skins/plone_templates/default_error_message.pt
D Products/CMFPlone/skins/plone_templates/default_error_message.pt.metadata
D Products/CMFPlone/skins/plone_templates/standard_error_message.py

diff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml
index 01065f2ca..de4ced57f 100644
--- a/Products/CMFPlone/browser/configure.zcml
+++ b/Products/CMFPlone/browser/configure.zcml
@@ -277,4 +277,12 @@
       permission="zope2.ViewManagementScreens"
       />
 
+  <browser:page
+      name="index.html"
+      for="Exception"
+      class=".exceptions.ExceptionView"
+      template="templates/error_message.pt"
+      permission="zope.Public"
+      />
+
 </configure>
diff --git a/Products/CMFPlone/browser/exceptions.py b/Products/CMFPlone/browser/exceptions.py
new file mode 100644
index 000000000..f723d1348
--- /dev/null
+++ b/Products/CMFPlone/browser/exceptions.py
@@ -0,0 +1,61 @@
+from AccessControl import getSecurityManager
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from six import reraise
+from zExceptions.ExceptionFormatter import format_exception
+from zope.security.interfaces import IUnauthorized
+import json
+import sys
+
+
+class ExceptionView(BrowserView):
+    basic_template = ViewPageTemplateFile('templates/basic_error_message.pt')
+
+    def is_manager(self):
+        return getSecurityManager().checkPermission(
+            'Manage portal', self.context)
+
+    def __call__(self):
+        exception = self.context
+        self.context = self.__parent__
+
+        # If running in the testbrowser with handleErrors=False,
+        # avoid rendering exception view
+        if not self.request.environ.get('wsgi.handleErrors', True):
+            reraise(*sys.exc_info())
+
+        error_type = exception.__class__.__name__
+        error_tb = ''.join(format_exception(*sys.exc_info(), as_html=True))
+
+        request = self.request
+        response = self.request.response
+
+        # Call PAS _unauthorized hook for Unauthorized exceptions
+        is_unauthorized = IUnauthorized.providedBy(exception)
+        if is_unauthorized and hasattr(response, '_unauthorized'):
+            response._unauthorized()
+
+        # Indicate exception as JSON
+        if "text/html" not in request.getHeader('Accept', ''):
+            request.response.setHeader("Content-Type", "application/json")
+            return json.dumps({
+                'error_type': error_type,
+            })
+
+        # Use a simplified template if main_template is not available
+        try:
+            self.context.unrestrictedTraverse('main_template')
+        except:
+            template = self.basic_template
+        else:
+            template = self.index
+
+        # Render page with user-facing error notice
+        request.set('disable_border', True)
+        request.set('disable_plone.leftcolumn', True)
+        request.set('disable_plone.rightcolumn', True)
+
+        return template(
+            error_type=error_type,
+            error_tb=error_tb,
+        )
diff --git a/Products/CMFPlone/browser/templates/basic_error_message.pt b/Products/CMFPlone/browser/templates/basic_error_message.pt
new file mode 100644
index 000000000..3eb3a9f3e
--- /dev/null
+++ b/Products/CMFPlone/browser/templates/basic_error_message.pt
@@ -0,0 +1,19 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
+      xmlns:tal="http://xml.zope.org/namespaces/tal"
+      xmlns:metal="http://xml.zope.org/namespaces/metal"
+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
+      lang="en"
+      i18n:domain="plone">
+
+<head>
+  <title>${options/error_type}</title>
+</head>
+
+<body>
+  <p>We're sorry, but there seems to be an error.</p>
+
+  <tal:block condition="view/is_manager"
+             replace="structure options/error_tb" />
+</body>
+
+</html>
diff --git a/Products/CMFPlone/skins/plone_templates/default_error_message.pt b/Products/CMFPlone/browser/templates/error_message.pt
similarity index 67%
rename from Products/CMFPlone/skins/plone_templates/default_error_message.pt
rename to Products/CMFPlone/browser/templates/error_message.pt
index 90a251be6..7d09b29c5 100644
--- a/Products/CMFPlone/skins/plone_templates/default_error_message.pt
+++ b/Products/CMFPlone/browser/templates/error_message.pt
@@ -6,26 +6,13 @@
       metal:use-macro="context/main_template/macros/master"
       i18n:domain="plone">
 
-<head>
-    <metal:block fill-slot="top_slot"
-                 tal:define="dummy python:request.set('disable_border',1);
-                             disable_column_one python:request.set('disable_plone.leftcolumn',1);
-                             disable_column_two python:request.set('disable_plone.rightcolumn',1);" />
-</head>
-
 <body>
 <metal:main fill-slot="main"
      tal:define="err_type options/error_type|nothing;
-                 err_message options/error_message|nothing;
                  err_tb options/error_tb|nothing;
-                 err_value options/error_value|nothing;
-                 err_traceback options/error_traceback|nothing;
-                 err_log_url options/error_log_url|nothing;
-                 err_log_id options/error_log_id|nothing;
-                 isAnon context/@@plone_portal_state/anonymous;
-                 toLocalizedTime nocall: context/@@plone/toLocalizedTime;">
+                 err_log_id options/error_log_id|nothing">
 
-        <metal:notfound tal:condition="python:err_type=='NotFound'">
+        <metal:notfound tal:condition="python:err_type == 'NotFound'">
 
             <tal:redirect define="redirection_view context/@@plone_redirector_view">
 
@@ -102,9 +89,8 @@
 
         </metal:notfound>
 
-        <metal:othererror tal:condition="python: err_type!='NotFound'"
-             tal:define="checkPermission nocall: context/portal_membership/checkPermission;
-                         isManager python: checkPermission('Manage portal', here)">
+        <metal:othererror tal:condition="python: err_type != 'NotFound'"
+             tal:define="isManager view/is_manager">
 
             <h1 class="documentFirstHeading"
                 i18n:translate="heading_site_error_sorry">
@@ -112,38 +98,15 @@
             </h1>
 
             <div id="content-core">
-                <tal:hasentry condition="err_log_id">
-                    <p tal:condition="not: isManager"
-                       i18n:translate="description_error_has_been_logged">
-                    The error has been logged as entry number
-                    <code i18n:name="entryid" tal:content="err_log_id">1174791474.310.489098092344</code>.
-                    </p>
-
-                    <p tal:condition="not: isManager"
-                       i18n:translate="description_include_error_in_admin_message">
-                    If you need to report this to the
-                    <span i18n:name="site_admin">
-                    <a href="#"
-                       i18n:translate="label_site_admin"
-                       tal:attributes="href string:${context/portal_url}/contact-info">site administration</a></span>,
-                    please include this entry number in your message.
-                    </p>
-
-                    <div tal:condition="isManager">
-                       <p i18n:translate="description_site_admin_full_error">
-                       Here is the full error message:
-                       </p>
-
-                       <p ><a href="" tal:attributes="href
-                                      string:error_log/getLogEntryAsText?id=${err_log_id}"
-                                      i18n:translate="label_traceback_as_text">Display traceback as text</a></p>
+                <div tal:condition="isManager">
+                   <p i18n:translate="description_site_admin_full_error">
+                   Here is the full error message:
+                   </p>
 
-                       <div tal:replace="structure err_tb"/>
-                    </div>
-
-                </tal:hasentry>
+                   <div tal:replace="structure err_tb"/>
+                </div>
 
-                <tal:noentry condition="not:err_log_id">
+                <tal:noentry condition="not:isManager">
                     <p i18n:translate="description_site_error_mail_site_admin">
                     If you are certain you have the correct web address but are encountering an error, please
                     contact the <span i18n:name="site_admin">
@@ -155,9 +118,6 @@
             </div>
 
         </metal:othererror>
-        <tal:ksserrors
-                tal:define="kss_view kss_view | context/@@kss_view | nothing;
-                            dummy python: kss_view and kss_view.attach_error(err_type, err_value);"/>
 
 </metal:main>
 </body>
diff --git a/Products/CMFPlone/skins/plone_templates/default_error_message.pt.metadata b/Products/CMFPlone/skins/plone_templates/default_error_message.pt.metadata
deleted file mode 100644
index 08eeb24ab..000000000
--- a/Products/CMFPlone/skins/plone_templates/default_error_message.pt.metadata
+++ /dev/null
@@ -1,2 +0,0 @@
-[default]
-title=Error Message
diff --git a/Products/CMFPlone/skins/plone_templates/standard_error_message.py b/Products/CMFPlone/skins/plone_templates/standard_error_message.py
deleted file mode 100644
index fe6e3e178..000000000
--- a/Products/CMFPlone/skins/plone_templates/standard_error_message.py
+++ /dev/null
@@ -1,53 +0,0 @@
-## Script (Python) "standard_error_message"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=**kwargs
-##title=Dispatches to relevant error view
-
-## by default we handle everything in 1 PageTemplate.
-#  you could easily check for the error_type and
-#  dispatch to an appropriate PageTemplate.
-
-# Check if the object is traversable, if not it might be a view, get its parent
-# because we need to render the error on an actual content object
-from AccessControl import Unauthorized
-try:
-    while not hasattr(context.aq_explicit, 'restrictedTraverse'):
-        context = context.aq_parent
-except (Unauthorized, AttributeError):
-    context = context.portal_url.getPortalObject()
-
-error_type = kwargs.get('error_type', None)
-error_message = kwargs.get('error_message', None)
-error_log_url = kwargs.get('error_log_url', None)
-error_tb = kwargs.get('error_tb', None)
-error_traceback = kwargs.get('error_traceback', None)
-error_value = kwargs.get('error_value', None)
-
-if "text/html" not in context.REQUEST.getHeader('Accept', ''):
-    context.REQUEST.RESPONSE.setHeader("Content-Type", "application/json")
-    # Note: using %s instead of .format to avoid possibly expensive guarded
-    # attribute check.
-    return '{{"error_type": "%s"}}' % error_type
-
-if error_log_url:
-    error_log_id = error_log_url.split('?id=')[1]
-else:
-    error_log_id = None
-
-
-no_actions = {'folder': [], 'user': [], 'global': [], 'workflow': []}
-error_page = context.default_error_message(
-                                error_type=error_type,
-                                error_message=error_message,
-                                error_tb=error_tb,
-                                error_value=error_value,
-                                error_log_url=error_log_url,
-                                error_log_id=error_log_id,
-                                no_portlets=True,
-                                actions=no_actions)
-
-return error_page


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2017-10-21T14:20:30+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3abf5f822eeeffc1963b874366607aa37a842ddb

Render error responses using exception view

Files changed:
M CHANGES_ZOPE4.rst
M Products/CMFPlone/browser/exceptions.py

diff --git a/CHANGES_ZOPE4.rst b/CHANGES_ZOPE4.rst
index 4237422a5..113a33ae9 100644
--- a/CHANGES_ZOPE4.rst
+++ b/CHANGES_ZOPE4.rst
@@ -18,3 +18,6 @@ When merging changes to master move them to CHANGES.txt!
 
 - Changes for Zope 4 compatibility in maintenance controlpanel.
   [thet]
+
+- Render exceptions using an exception view instead of standard_error_message.
+  [davisagli]
diff --git a/Products/CMFPlone/browser/exceptions.py b/Products/CMFPlone/browser/exceptions.py
index f723d1348..2e59d5962 100644
--- a/Products/CMFPlone/browser/exceptions.py
+++ b/Products/CMFPlone/browser/exceptions.py
@@ -1,9 +1,7 @@
 from AccessControl import getSecurityManager
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from six import reraise
 from zExceptions.ExceptionFormatter import format_exception
-from zope.security.interfaces import IUnauthorized
 import json
 import sys
 
@@ -18,23 +16,11 @@ def is_manager(self):
     def __call__(self):
         exception = self.context
         self.context = self.__parent__
-
-        # If running in the testbrowser with handleErrors=False,
-        # avoid rendering exception view
-        if not self.request.environ.get('wsgi.handleErrors', True):
-            reraise(*sys.exc_info())
+        request = self.request
 
         error_type = exception.__class__.__name__
         error_tb = ''.join(format_exception(*sys.exc_info(), as_html=True))
 
-        request = self.request
-        response = self.request.response
-
-        # Call PAS _unauthorized hook for Unauthorized exceptions
-        is_unauthorized = IUnauthorized.providedBy(exception)
-        if is_unauthorized and hasattr(response, '_unauthorized'):
-            response._unauthorized()
-
         # Indicate exception as JSON
         if "text/html" not in request.getHeader('Accept', ''):
             request.response.setHeader("Content-Type", "application/json")


