Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-12-05T07:23:21+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/fef9f8b7ad4971ea81951e3a6bb8c2fc1e76e6c1

code and test cleanup

Files changed:
A pyproject.toml
M CHANGES.rst
M plone/i18n/interfaces.py
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/interfaces.py
M plone/i18n/locales/languages.py
M plone/i18n/locales/tests/base.py
M plone/i18n/locales/tests/test_cctlds.py
M plone/i18n/locales/tests/test_countries.py
M plone/i18n/locales/tests/test_languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/normalizer/adapters.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/normalizer/pl.py
M plone/i18n/normalizer/pt.py
M plone/i18n/normalizer/ru.py
M plone/i18n/normalizer/tests/base.py
M plone/i18n/normalizer/tests/test_adapters.py
M plone/i18n/normalizer/tests/test_normalizer.py
M plone/i18n/normalizer/tr.py
M plone/i18n/normalizer/uk.py
M plone/i18n/tests/base.py
M plone/i18n/tests/test_languageutility.py
M plone/i18n/tests/test_negotiation.py
M plone/i18n/utility.py
M setup.cfg

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1604036..47ba18e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Code and test cleanuo.\n+  [jensens]\n \n \n 4.0.1 (2018-10-31)\ndiff --git a/plone/i18n/interfaces.py b/plone/i18n/interfaces.py\nindex 259c443..eddc393 100644\n--- a/plone/i18n/interfaces.py\n+++ b/plone/i18n/interfaces.py\n@@ -11,6 +11,7 @@ class ILanguageUtility(Interface):\n class INegotiateLanguage(Interface):\n     """Result of language negotiation\n     """\n+\n     language = Attribute(\'Language to use\')\n     default_language = Attribute(\'Default language\')\n     language_list = Attribute(\'List of language preferences in order\')\ndiff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 96b602a..7d8ee90 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -31,278 +31,279 @@ def getLanguagesForTLD(self, tld):\n         """\n         return _tld_to_language[tld]\n \n+\n ccTLDInformation = CcTLDInformation()\n \n _tld_to_language = {\n-    u"ac"        : [],\n-    u"ad"        : [],\n-    u"ae"        : [],\n-    u"aero"      : [],\n-    u"af"        : [],\n-    u"ag"        : [],\n-    u"ai"        : [],\n-    u"al"        : [],\n-    u"am"        : [],\n-    u"an"        : [],\n-    u"ao"        : [],\n-    u"aq"        : [u"en"],\n-    u"ar"        : [u"pt"],\n-    u"arpa"      : [u"en"],\n-    u"as"        : [u"en"],\n-    u"asia"      : [],\n-    u"at"        : [u"de"],\n-    u"au"        : [u"en"],\n-    u"aw"        : [],\n-    u"ax"        : [],\n-    u"az"        : [],\n-    u"ba"        : [u"bs"],\n-    u"bb"        : [],\n-    u"bd"        : [],\n-    u"be"        : [u"nl", u"fr"],\n-    u"bf"        : [],\n-    u"bg"        : [],\n-    u"bh"        : [],\n-    u"bi"        : [],\n-    u"biz"       : [],\n-    u"bj"        : [],\n-    u"bm"        : [],\n-    u"bn"        : [],\n-    u"bo"        : [],\n-    u"br"        : [u"pt"],\n-    u"bs"        : [],\n-    u"bt"        : [],\n-    u"bv"        : [],\n-    u"bw"        : [],\n-    u"by"        : [],\n-    u"bz"        : [],\n-    u"ca"        : [u"en"],\n-    u"cat"       : [u"ca"],\n-    u"cc"        : [],\n-    u"cd"        : [],\n-    u"cf"        : [],\n-    u"cg"        : [],\n-    u"ch"        : [u"de"],\n-    u"ci"        : [],\n-    u"ck"        : [],\n-    u"cl"        : [],\n-    u"cm"        : [],\n-    u"cn"        : [u"zh"],\n-    u"co"        : [],\n-    u"com"       : [],\n-    u"coop"      : [],\n-    u"cr"        : [u"es"],\n-    u"cu"        : [],\n-    u"cv"        : [],\n-    u"cx"        : [],\n-    u"cy"        : [],\n-    u"cz"        : [],\n-    u"de"        : [u"de"],\n-    u"dj"        : [],\n-    u"dk"        : [u"da"],\n-    u"dm"        : [],\n-    u"do"        : [],\n-    u"dz"        : [],\n-    u"ec"        : [],\n-    u"edu"       : [u"en"],\n-    u"ee"        : [u"et"],\n-    u"eg"        : [],\n-    u"er"        : [],\n-    u"es"        : [u"es"],\n-    u"et"        : [],\n-    u"eu"        : [],\n-    u"fi"        : [u"fi"],\n-    u"fj"        : [],\n-    u"fk"        : [],\n-    u"fm"        : [],\n-    u"fo"        : [u"fo"],\n-    u"fr"        : [u"fr"],\n-    u"ga"        : [],\n-    u"gb"        : [u"en"],\n-    u"gd"        : [],\n-    u"ge"        : [u"ka"],\n-    u"gf"        : [],\n-    u"gg"        : [],\n-    u"gh"        : [],\n-    u"gi"        : [],\n-    u"gl"        : [],\n-    u"gm"        : [],\n-    u"gn"        : [],\n-    u"gov"       : [u"en"],\n-    u"gp"        : [],\n-    u"gq"        : [],\n-    u"gr"        : [u"gr"],\n-    u"gs"        : [],\n-    u"gt"        : [],\n-    u"gu"        : [],\n-    u"gw"        : [],\n-    u"gy"        : [],\n-    u"hk"        : [],\n-    u"hm"        : [],\n-    u"hn"        : [],\n-    u"hr"        : [u"hr"],\n-    u"ht"        : [],\n-    u"hu"        : [u"hu"],\n-    u"id"        : [],\n-    u"ie"        : [],\n-    u"il"        : [u"he"],\n-    u"im"        : [u"en"],\n-    u"in"        : [u"hi"],\n-    u"info"      : [],\n-    u"int"       : [],\n-    u"io"        : [u"en"],\n-    u"iq"        : [u"ar"],\n-    u"ir"        : [u"ar"],\n-    u"is"        : [u"is"],\n-    u"it"        : [u"it"],\n-    u"je"        : [u"en"],\n-    u"jm"        : [],\n-    u"jo"        : [],\n-    u"jobs"      : [],\n-    u"jp"        : [u"ja"],\n-    u"ke"        : [],\n-    u"kg"        : [],\n-    u"kh"        : [],\n-    u"ki"        : [],\n-    u"km"        : [],\n-    u"kn"        : [],\n-    u"kp"        : [u"ko"],\n-    u"kr"        : [u"ko"],\n-    u"kw"        : [],\n-    u"ky"        : [],\n-    u"kz"        : [u"kk"],\n-    u"la"        : [],\n-    u"lb"        : [],\n-    u"lc"        : [],\n-    u"li"        : [],\n-    u"lk"        : [],\n-    u"lr"        : [],\n-    u"ls"        : [],\n-    u"lt"        : [],\n-    u"lu"        : [u"lb"],\n-    u"lv"        : [u"lv"],\n-    u"ly"        : [],\n-    u"ma"        : [],\n-    u"mc"        : [],\n-    u"md"        : [u"mo"],\n-    u"me"        : [],\n-    u"mg"        : [u"mg"],\n-    u"mh"        : [],\n-    u"mil"       : [u"en"],\n-    u"mk"        : [],\n-    u"ml"        : [],\n-    u"mm"        : [],\n-    u"mn"        : [u"mn"],\n-    u"mo"        : [],\n-    u"mobi"      : [],\n-    u"mp"        : [],\n-    u"mq"        : [],\n-    u"mr"        : [],\n-    u"ms"        : [],\n-    u"mt"        : [u"mt"],\n-    u"mu"        : [],\n-    u"museum"    : [],\n-    u"mv"        : [],\n-    u"mw"        : [],\n-    u"mx"        : [],\n-    u"my"        : [],\n-    u"mz"        : [],\n-    u"na"        : [],\n-    u"name"      : [],\n-    u"nc"        : [],\n-    u"ne"        : [],\n-    u"net"       : [],\n-    u"nf"        : [],\n-    u"ng"        : [],\n-    u"ni"        : [],\n-    u"nl"        : [u"nl"],\n-    u"no"        : [u"no"],\n-    u"np"        : [],\n-    u"nr"        : [],\n-    u"nu"        : [],\n-    u"nz"        : [],\n-    u"om"        : [u"en"],\n-    u"org"       : [],\n-    u"pa"        : [],\n-    u"pe"        : [],\n-    u"pf"        : [],\n-    u"pg"        : [],\n-    u"ph"        : [],\n-    u"pk"        : [],\n-    u"pl"        : [u"pl"],\n-    u"pm"        : [],\n-    u"pn"        : [],\n-    u"pr"        : [u"es"],\n-    u"pro"       : [],\n-    u"ps"        : [u"ar"],\n-    u"pt"        : [u"pt"],\n-    u"pw"        : [],\n-    u"py"        : [],\n-    u"qa"        : [],\n-    u"re"        : [],\n-    u"ro"        : [u"ro"],\n-    u"rs"        : [],\n-    u"ru"        : [u"ru"],\n-    u"rw"        : [],\n-    u"sa"        : [u"ar"],\n-    u"sb"        : [],\n-    u"sc"        : [],\n-    u"sd"        : [u"su"],\n-    u"se"        : [u"sv"],\n-    u"sg"        : [u"si"],\n-    u"sh"        : [],\n-    u"si"        : [u"sl"],\n-    u"sj"        : [],\n-    u"sk"        : [u"sk"],\n-    u"sl"        : [],\n-    u"sm"        : [],\n-    u"sn"        : [u"fr"],\n-    u"so"        : [u"so"],\n-    u"sr"        : [u"nl"],\n-    u"ss"        : [],\n-    u"st"        : [],\n-    u"su"        : [u"ru"],\n-    u"sv"        : [],\n-    u"sy"        : [],\n-    u"sz"        : [],\n-    u"tc"        : [u"tr"],\n-    u"td"        : [],\n-    u"tel"       : [],\n-    u"tf"        : [],\n-    u"tg"        : [u"to"],\n-    u"th"        : [u"th"],\n-    u"tj"        : [u"fa"],\n-    u"tk"        : [u"tk"],\n-    u"tl"        : [u"pt"],\n-    u"tm"        : [u"tk"],\n-    u"tn"        : [],\n-    u"to"        : [],\n-    u"tp"        : [u"pt"],\n-    u"tr"        : [],\n-    u"travel"    : [],\n-    u"tt"        : [],\n-    u"tv"        : [],\n-    u"tw"        : [u"zh"],\n-    u"tz"        : [],\n-    u"ua"        : [],\n-    u"ug"        : [],\n-    u"uk"        : [u"en"],\n-    u"us"        : [u"en"],\n-    u"uy"        : [],\n-    u"uz"        : [],\n-    u"va"        : [u"it"],\n-    u"vc"        : [],\n-    u"ve"        : [],\n-    u"vg"        : [],\n-    u"vi"        : [u"en"],\n-    u"vn"        : [u"vi"],\n-    u"vu"        : [],\n-    u"wf"        : [],\n-    u"ws"        : [u"sm"],\n-    u"xxx"       : [],\n-    u"ye"        : [],\n-    u"yt"        : [],\n-    u"yu"        : [u"sh"],\n-    u"za"        : [u"af"],\n-    u"zm"        : [],\n-    u"zw"        : [],\n+    u"ac": [],\n+    u"ad": [],\n+    u"ae": [],\n+    u"aero": [],\n+    u"af": [],\n+    u"ag": [],\n+    u"ai": [],\n+    u"al": [],\n+    u"am": [],\n+    u"an": [],\n+    u"ao": [],\n+    u"aq": [u"en"],\n+    u"ar": [u"pt"],\n+    u"arpa": [u"en"],\n+    u"as": [u"en"],\n+    u"asia": [],\n+    u"at": [u"de"],\n+    u"au": [u"en"],\n+    u"aw": [],\n+    u"ax": [],\n+    u"az": [],\n+    u"ba": [u"bs"],\n+    u"bb": [],\n+    u"bd": [],\n+    u"be": [u"nl", u"fr"],\n+    u"bf": [],\n+    u"bg": [],\n+    u"bh": [],\n+    u"bi": [],\n+    u"biz": [],\n+    u"bj": [],\n+    u"bm": [],\n+    u"bn": [],\n+    u"bo": [],\n+    u"br": [u"pt"],\n+    u"bs": [],\n+    u"bt": [],\n+    u"bv": [],\n+    u"bw": [],\n+    u"by": [],\n+    u"bz": [],\n+    u"ca": [u"en"],\n+    u"cat": [u"ca"],\n+    u"cc": [],\n+    u"cd": [],\n+    u"cf": [],\n+    u"cg": [],\n+    u"ch": [u"de"],\n+    u"ci": [],\n+    u"ck": [],\n+    u"cl": [],\n+    u"cm": [],\n+    u"cn": [u"zh"],\n+    u"co": [],\n+    u"com": [],\n+    u"coop": [],\n+    u"cr": [u"es"],\n+    u"cu": [],\n+    u"cv": [],\n+    u"cx": [],\n+    u"cy": [],\n+    u"cz": [],\n+    u"de": [u"de"],\n+    u"dj": [],\n+    u"dk": [u"da"],\n+    u"dm": [],\n+    u"do": [],\n+    u"dz": [],\n+    u"ec": [],\n+    u"edu": [u"en"],\n+    u"ee": [u"et"],\n+    u"eg": [],\n+    u"er": [],\n+    u"es": [u"es"],\n+    u"et": [],\n+    u"eu": [],\n+    u"fi": [u"fi"],\n+    u"fj": [],\n+    u"fk": [],\n+    u"fm": [],\n+    u"fo": [u"fo"],\n+    u"fr": [u"fr"],\n+    u"ga": [],\n+    u"gb": [u"en"],\n+    u"gd": [],\n+    u"ge": [u"ka"],\n+    u"gf": [],\n+    u"gg": [],\n+    u"gh": [],\n+    u"gi": [],\n+    u"gl": [],\n+    u"gm": [],\n+    u"gn": [],\n+    u"gov": [u"en"],\n+    u"gp": [],\n+    u"gq": [],\n+    u"gr": [u"gr"],\n+    u"gs": [],\n+    u"gt": [],\n+    u"gu": [],\n+    u"gw": [],\n+    u"gy": [],\n+    u"hk": [],\n+    u"hm": [],\n+    u"hn": [],\n+    u"hr": [u"hr"],\n+    u"ht": [],\n+    u"hu": [u"hu"],\n+    u"id": [],\n+    u"ie": [],\n+    u"il": [u"he"],\n+    u"im": [u"en"],\n+    u"in": [u"hi"],\n+    u"info": [],\n+    u"int": [],\n+    u"io": [u"en"],\n+    u"iq": [u"ar"],\n+    u"ir": [u"ar"],\n+    u"is": [u"is"],\n+    u"it": [u"it"],\n+    u"je": [u"en"],\n+    u"jm": [],\n+    u"jo": [],\n+    u"jobs": [],\n+    u"jp": [u"ja"],\n+    u"ke": [],\n+    u"kg": [],\n+    u"kh": [],\n+    u"ki": [],\n+    u"km": [],\n+    u"kn": [],\n+    u"kp": [u"ko"],\n+    u"kr": [u"ko"],\n+    u"kw": [],\n+    u"ky": [],\n+    u"kz": [u"kk"],\n+    u"la": [],\n+    u"lb": [],\n+    u"lc": [],\n+    u"li": [],\n+    u"lk": [],\n+    u"lr": [],\n+    u"ls": [],\n+    u"lt": [],\n+    u"lu": [u"lb"],\n+    u"lv": [u"lv"],\n+    u"ly": [],\n+    u"ma": [],\n+    u"mc": [],\n+    u"md": [u"mo"],\n+    u"me": [],\n+    u"mg": [u"mg"],\n+    u"mh": [],\n+    u"mil": [u"en"],\n+    u"mk": [],\n+    u"ml": [],\n+    u"mm": [],\n+    u"mn": [u"mn"],\n+    u"mo": [],\n+    u"mobi": [],\n+    u"mp": [],\n+    u"mq": [],\n+    u"mr": [],\n+    u"ms": [],\n+    u"mt": [u"mt"],\n+    u"mu": [],\n+    u"museum": [],\n+    u"mv": [],\n+    u"mw": [],\n+    u"mx": [],\n+    u"my": [],\n+    u"mz": [],\n+    u"na": [],\n+    u"name": [],\n+    u"nc": [],\n+    u"ne": [],\n+    u"net": [],\n+    u"nf": [],\n+    u"ng": [],\n+    u"ni": [],\n+    u"nl": [u"nl"],\n+    u"no": [u"no"],\n+    u"np": [],\n+    u"nr": [],\n+    u"nu": [],\n+    u"nz": [],\n+    u"om": [u"en"],\n+    u"org": [],\n+    u"pa": [],\n+    u"pe": [],\n+    u"pf": [],\n+    u"pg": [],\n+    u"ph": [],\n+    u"pk": [],\n+    u"pl": [u"pl"],\n+    u"pm": [],\n+    u"pn": [],\n+    u"pr": [u"es"],\n+    u"pro": [],\n+    u"ps": [u"ar"],\n+    u"pt": [u"pt"],\n+    u"pw": [],\n+    u"py": [],\n+    u"qa": [],\n+    u"re": [],\n+    u"ro": [u"ro"],\n+    u"rs": [],\n+    u"ru": [u"ru"],\n+    u"rw": [],\n+    u"sa": [u"ar"],\n+    u"sb": [],\n+    u"sc": [],\n+    u"sd": [u"su"],\n+    u"se": [u"sv"],\n+    u"sg": [u"si"],\n+    u"sh": [],\n+    u"si": [u"sl"],\n+    u"sj": [],\n+    u"sk": [u"sk"],\n+    u"sl": [],\n+    u"sm": [],\n+    u"sn": [u"fr"],\n+    u"so": [u"so"],\n+    u"sr": [u"nl"],\n+    u"ss": [],\n+    u"st": [],\n+    u"su": [u"ru"],\n+    u"sv": [],\n+    u"sy": [],\n+    u"sz": [],\n+    u"tc": [u"tr"],\n+    u"td": [],\n+    u"tel": [],\n+    u"tf": [],\n+    u"tg": [u"to"],\n+    u"th": [u"th"],\n+    u"tj": [u"fa"],\n+    u"tk": [u"tk"],\n+    u"tl": [u"pt"],\n+    u"tm": [u"tk"],\n+    u"tn": [],\n+    u"to": [],\n+    u"tp": [u"pt"],\n+    u"tr": [],\n+    u"travel": [],\n+    u"tt": [],\n+    u"tv": [],\n+    u"tw": [u"zh"],\n+    u"tz": [],\n+    u"ua": [],\n+    u"ug": [],\n+    u"uk": [u"en"],\n+    u"us": [u"en"],\n+    u"uy": [],\n+    u"uz": [],\n+    u"va": [u"it"],\n+    u"vc": [],\n+    u"ve": [],\n+    u"vg": [],\n+    u"vi": [u"en"],\n+    u"vn": [u"vi"],\n+    u"vu": [],\n+    u"wf": [],\n+    u"ws": [u"sm"],\n+    u"xxx": [],\n+    u"ye": [],\n+    u"yt": [],\n+    u"yu": [u"sh"],\n+    u"za": [u"af"],\n+    u"zm": [],\n+    u"zw": [],\n }\ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex 22e39fe..fd11fa2 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -26,268 +26,698 @@ def getCountryListing(self):\n         """\n         return [(code, _countrylist[code][u\'name\']) for code in _countrylist]\n \n+\n countries = CountryAvailability()\n \n # This is a dictionary of dictonaries:\n #\n-# \'country-code\' : {u\'name\' : \'English name\', u\'flag\' : u\'/++resource++country-flags/*.gif\'}\n+# \'country-code\' : {\n+#     u\'name\' : \'English name\',\n+#     u\'flag\' : u\'/++resource++country-flags/*.gif\',\n+# }\n #\n # This list follows ISO 3166-1. In addition the following reservations are\n # part of the list for historical reasons: an\n \n _countrylist = {\n-u\'ad\' : {u\'name\' : \'Andorra\', u\'flag\' : u\'/++resource++country-flags/ad.gif\'},\n-u\'ae\' : {u\'name\' : \'United Arab Emirates\', u\'flag\' : u\'/++resource++country-flags/ae.gif\'},\n-u\'af\' : {u\'name\' : \'Afghanistan\', u\'flag\' : u\'/++resource++country-flags/af.gif\'},\n-u\'ag\' : {u\'name\' : \'Antigua and Barbuda\', u\'flag\' : u\'/++resource++country-flags/ag.gif\'},\n-u\'ai\' : {u\'name\' : \'Anguilla\', u\'flag\' : u\'/++resource++country-flags/ai.gif\'},\n-u\'al\' : {u\'name\' : \'Albania\', u\'flag\' : u\'/++resource++country-flags/al.gif\'},\n-u\'am\' : {u\'name\' : \'Armenia\', u\'flag\' : u\'/++resource++country-flags/am.gif\'},\n-u\'an\' : {u\'name\' : \'Netherlands Antilles\', u\'flag\' : u\'/++resource++country-flags/an.gif\'},\n-u\'ao\' : {u\'name\' : \'Angola\', u\'flag\' : u\'/++resource++country-flags/ao.gif\'},\n-u\'aq\' : {u\'name\' : \'Antarctica\', u\'flag\' : u\'/++resource++country-flags/aq.gif\'},\n-u\'ar\' : {u\'name\' : \'Argentina\', u\'flag\' : u\'/++resource++country-flags/ar.gif\'},\n-u\'as\' : {u\'name\' : \'American Samoa\', u\'flag\' : u\'/++resource++country-flags/as.gif\'},\n-u\'at\' : {u\'name\' : \'Austria\', u\'flag\' : u\'/++resource++country-flags/at.gif\'},\n-u\'au\' : {u\'name\' : \'Australia\', u\'flag\' : u\'/++resource++country-flags/au.gif\'},\n-u\'aw\' : {u\'name\' : \'Aruba\', u\'flag\' : u\'/++resource++country-flags/aw.gif\'},\n-u\'ax\' : {u\'name\' : \'Oland Islands\', u\'flag\' : u\'/++resource++country-flags/ax.gif\'},\n-u\'az\' : {u\'name\' : \'Azerbaijan\', u\'flag\' : u\'/++resource++country-flags/az.gif\'},\n-u\'ba\' : {u\'name\' : \'Bosnia and Herzegovina\', u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'bb\' : {u\'name\' : \'Barbados\', u\'flag\' : u\'/++resource++country-flags/bb.gif\'},\n-u\'bd\' : {u\'name\' : \'Bangladesh\', u\'flag\' : u\'/++resource++country-flags/bd.gif\'},\n-u\'be\' : {u\'name\' : \'Belgium\', u\'flag\' : u\'/++resource++country-flags/be.gif\'},\n-u\'bf\' : {u\'name\' : \'Burkina Faso\', u\'flag\' : u\'/++resource++country-flags/bf.gif\'},\n-u\'bg\' : {u\'name\' : \'Bulgaria\', u\'flag\' : u\'/++resource++country-flags/bg.gif\'},\n-u\'bh\' : {u\'name\' : \'Bahrain\', u\'flag\' : u\'/++resource++country-flags/bh.gif\'},\n-u\'bi\' : {u\'name\' : \'Burundi\', u\'flag\' : u\'/++resource++country-flags/bi.gif\'},\n-u\'bj\' : {u\'name\' : \'Benin\', u\'flag\' : u\'/++resource++country-flags/bj.gif\'},\n-u\'bl\' : {u\'name\' : \'Saint Barth\xc3\xa9lemy\', u\'flag\' : u\'/++resource++country-flags/bl.gif\'},\n-u\'bm\' : {u\'name\' : \'Bermuda\', u\'flag\' : u\'/++resource++country-flags/bm.gif\'},\n-u\'bn\' : {u\'name\' : \'Brunei Darussalam\', u\'flag\' : u\'/++resource++country-flags/bn.gif\'},\n-u\'bo\' : {u\'name\' : \'Bolivia\', u\'flag\' : u\'/++resource++country-flags/bo.gif\'},\n-u\'bq\' : {u\'name\' : \'Bonaire, Sint Eustatius and Saba\', u\'flag\' : u\'/++resource++country-flags/bq.gif\'},\n-u\'br\' : {u\'name\' : \'Brazil\', u\'flag\' : u\'/++resource++country-flags/br.gif\'},\n-u\'bs\' : {u\'name\' : \'Bahamas\', u\'flag\' : u\'/++resource++country-flags/bs.gif\'},\n-u\'bt\' : {u\'name\' : \'Bhutan\', u\'flag\' : u\'/++resource++country-flags/bt.gif\'},\n-u\'bv\' : {u\'name\' : \'Bouvet Island\', u\'flag\' : u\'/++resource++country-flags/bv.gif\'},\n-u\'bw\' : {u\'name\' : \'Botswana\', u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'by\' : {u\'name\' : \'Belarus\', u\'flag\' : u\'/++resource++country-flags/by.gif\'},\n-u\'bz\' : {u\'name\' : \'Belize\', u\'flag\' : u\'/++resource++country-flags/bz.gif\'},\n-u\'ca\' : {u\'name\' : \'Canada\', u\'flag\' : u\'/++resource++country-flags/ca.gif\'},\n-u\'cc\' : {u\'name\' : \'Cocos (Keeling) Islands\', u\'flag\' : u\'/++resource++country-flags/cc.gif\'},\n-u\'cd\' : {u\'name\' : \'Congo The Democratic Republic of\', u\'flag\' : u\'/++resource++country-flags/cd.gif\'},\n-u\'cf\' : {u\'name\' : \'Central African Republic\', u\'flag\' : u\'/++resource++country-flags/cf.gif\'},\n-u\'cg\' : {u\'name\' : \'Congo\', u\'flag\' : u\'/++resource++country-flags/cg.gif\'},\n-u\'ch\' : {u\'name\' : \'Switzerland\', u\'flag\' : u\'/++resource++country-flags/ch.gif\'},\n-u\'ci\' : {u\'name\' : "Cote d\'Ivoire", u\'flag\' : u\'/++resource++country-flags/ci.gif\'},\n-u\'ck\' : {u\'name\' : \'Cook Islands\', u\'flag\' : u\'/++resource++country-flags/ck.gif\'},\n-u\'cl\' : {u\'name\' : \'Chile\', u\'flag\' : u\'/++resource++country-flags/cl.gif\'},\n-u\'cm\' : {u\'name\' : \'Cameroon\', u\'flag\' : u\'/++resource++country-flags/cm.gif\'},\n-u\'cn\' : {u\'name\' : \'China\', u\'flag\' : u\'/++resource++country-flags/cn.gif\'},\n-u\'co\' : {u\'name\' : \'Colombia\', u\'flag\' : u\'/++resource++country-flags/co.gif\'},\n-u\'cr\' : {u\'name\' : \'Costa Rica\', u\'flag\' : u\'/++resource++country-flags/cr.gif\'},\n-u\'cs\' : {u\'name\' : \'Serbia and Montenegro\', u\'flag\' : u\'/++resource++country-flags/cs.gif\'},\n-u\'cu\' : {u\'name\' : \'Cuba\', u\'flag\' : u\'/++resource++country-flags/cu.gif\'},\n-u\'cv\' : {u\'name\' : \'Cape Verde\', u\'flag\' : u\'/++resource++country-flags/cv.gif\'},\n-u\'cw\' : {u\'name\' : \'Cura\xc3\xa7ao\', u\'flag\' : u\'/++resource++country-flags/cw.png\'},\n-u\'cx\' : {u\'name\' : \'Christmas Island\', u\'flag\' : u\'/++resource++country-flags/cx.gif\'},\n-u\'cy\' : {u\'name\' : \'Cyprus\', u\'flag\' : u\'/++resource++country-flags/cy.gif\'},\n-u\'cz\' : {u\'name\' : \'Czech Republic\', u\'flag\' : u\'/++resource++country-flags/cz.gif\'},\n-u\'de\' : {u\'name\' : \'Germany\', u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'dj\' : {u\'name\' : \'Djibouti\', u\'flag\' : u\'/++resource++country-flags/dj.gif\'},\n-u\'dk\' : {u\'name\' : \'Denmark\', u\'flag\' : u\'/++resource++country-flags/dk.gif\'},\n-u\'dm\' : {u\'name\' : \'Dominica\', u\'flag\' : u\'/++resource++country-flags/dm.gif\'},\n-u\'do\' : {u\'name\' : \'Dominican Republic\', u\'flag\' : u\'/++resource++country-flags/do.gif\'},\n-u\'dz\' : {u\'name\' : \'Algeria\', u\'flag\' : u\'/++resource++country-flags/dz.gif\'},\n-u\'ec\' : {u\'name\' : \'Ecuador\', u\'flag\' : u\'/++resource++country-flags/ec.gif\'},\n-u\'ee\' : {u\'name\' : \'Estonia\', u\'flag\' : u\'/++resource++country-flags/ee.gif\'},\n-u\'eg\' : {u\'name\' : \'Egypt\', u\'flag\' : u\'/++resource++country-flags/eg.gif\'},\n-u\'eh\' : {u\'name\' : \'Western Sahara\', u\'flag\' : u\'/++resource++country-flags/eh.gif\'},\n-u\'er\' : {u\'name\' : \'Eritrea\', u\'flag\' : u\'/++resource++country-flags/er.gif\'},\n-u\'es\' : {u\'name\' : \'Spain\', u\'flag\' : u\'/++resource++country-flags/es.gif\'},\n-u\'et\' : {u\'name\' : \'Ethiopia\', u\'flag\' : u\'/++resource++country-flags/et.gif\'},\n-u\'fi\' : {u\'name\' : \'Finland\', u\'flag\' : u\'/++resource++country-flags/fi.gif\'},\n-u\'fj\' : {u\'name\' : \'Fiji\', u\'flag\' : u\'/++resource++country-flags/fj.gif\'},\n-u\'fk\' : {u\'name\' : \'Falkland Islands (Malvinas)\', u\'flag\' : u\'/++resource++country-flags/fk.gif\'},\n-u\'fm\' : {u\'name\' : \'Micronesia Federated States of\', u\'flag\' : u\'/++resource++country-flags/fm.gif\'},\n-u\'fo\' : {u\'name\' : \'Faroe Islands\', u\'flag\' : u\'/++resource++country-flags/fo.gif\'},\n-u\'fr\' : {u\'name\' : \'France\', u\'flag\' : u\'/++resource++country-flags/fr.gif\'},\n-u\'ga\' : {u\'name\' : \'Gabon\', u\'flag\' : u\'/++resource++country-flags/ga.gif\'},\n-u\'gb\' : {u\'name\' : \'United Kingdom\', u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'gd\' : {u\'name\' : \'Grenada\', u\'flag\' : u\'/++resource++country-flags/gd.gif\'},\n-u\'ge\' : {u\'name\' : \'Georgia\', u\'flag\' : u\'/++resource++country-flags/ge.gif\'},\n-u\'gf\' : {u\'name\' : \'French Guiana\', u\'flag\' : u\'/++resource++country-flags/gf.gif\'},\n-u\'gg\' : {u\'name\' : \'Guernsey\', u\'flag\' : u\'/++resource++country-flags/gg.gif\'},\n-u\'gh\' : {u\'name\' : \'Ghana\', u\'flag\' : u\'/++resource++country-flags/gh.gif\'},\n-u\'gi\' : {u\'name\' : \'Gibraltar\', u\'flag\' : u\'/++resource++country-flags/gi.gif\'},\n-u\'gl\' : {u\'name\' : \'Greenland\', u\'flag\' : u\'/++resource++country-flags/gl.gif\'},\n-u\'gm\' : {u\'name\' : \'Gambia\', u\'flag\' : u\'/++resource++country-flags/gm.gif\'},\n-u\'gn\' : {u\'name\' : \'Guinea\', u\'flag\' : u\'/++resource++country-flags/gn.gif\'},\n-u\'gp\' : {u\'name\' : \'Guadeloupe\', u\'flag\' : u\'/++resource++country-flags/gp.gif\'},\n-u\'gq\' : {u\'name\' : \'Equatorial Guinea\', u\'flag\' : u\'/++resource++country-flags/gq.gif\'},\n-u\'gr\' : {u\'name\' : \'Greece\', u\'flag\' : u\'/++resource++country-flags/gr.gif\'},\n-u\'gs\' : {u\'name\' : \'South Georgia and the South Sandwich Islands\', u\'flag\' : u\'/++resource++country-flags/gs.gif\'},\n-u\'gt\' : {u\'name\' : \'Guatemala\', u\'flag\' : u\'/++resource++country-flags/gt.gif\'},\n-u\'gu\' : {u\'name\' : \'Guam\', u\'flag\' : u\'/++resource++country-flags/gu.gif\'},\n-u\'gw\' : {u\'name\' : \'Guinea-Bissau\', u\'flag\' : u\'/++resource++country-flags/gw.gif\'},\n-u\'gy\' : {u\'name\' : \'Guyana\', u\'flag\' : u\'/++resource++country-flags/gy.gif\'},\n-u\'hk\' : {u\'name\' : \'Hong Kong\', u\'flag\' : u\'/++resource++country-flags/hk.gif\'},\n-u\'hm\' : {u\'name\' : \'Heard Island and McDonald Islands\', u\'flag\' : u\'/++resource++country-flags/hm.gif\'},\n-u\'hn\' : {u\'name\' : \'Honduras\', u\'flag\' : u\'/++resource++country-flags/hn.gif\'},\n-u\'hr\' : {u\'name\' : \'Croatia\', u\'flag\' : u\'/++resource++country-flags/hr.gif\'},\n-u\'ht\' : {u\'name\' : \'Haiti\', u\'flag\' : u\'/++resource++country-flags/ht.gif\'},\n-u\'hu\' : {u\'name\' : \'Hungary\', u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'id\' : {u\'name\' : \'Indonesia\', u\'flag\' : u\'/++resource++country-flags/id.gif\'},\n-u\'ie\' : {u\'name\' : \'Ireland\', u\'flag\' : u\'/++resource++country-flags/ie.gif\'},\n-u\'il\' : {u\'name\' : \'Israel\', u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'im\' : {u\'name\' : \'Isle of Man\', u\'flag\' : u\'/++resource++country-flags/im.gif\'},\n-u\'in\' : {u\'name\' : \'India\', u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'io\' : {u\'name\' : \'British Indian Ocean Territory\', u\'flag\' : u\'/++resource++country-flags/io.gif\'},\n-u\'iq\' : {u\'name\' : \'Iraq\', u\'flag\' : u\'/++resource++country-flags/iq.gif\'},\n-u\'ir\' : {u\'name\' : \'Iran Islamic Republic of\', u\'flag\' : u\'/++resource++country-flags/ir.gif\'},\n-u\'is\' : {u\'name\' : \'Iceland\', u\'flag\' : u\'/++resource++country-flags/is.gif\'},\n-u\'it\' : {u\'name\' : \'Italy\', u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'je\' : {u\'name\' : \'Jersey\', u\'flag\' : u\'/++resource++country-flags/je.gif\'},\n-u\'jm\' : {u\'name\' : \'Jamaica\', u\'flag\' : u\'/++resource++country-flags/jm.gif\'},\n-u\'jo\' : {u\'name\' : \'Jordan\', u\'flag\' : u\'/++resource++country-flags/jo.gif\'},\n-u\'jp\' : {u\'name\' : \'Japan\', u\'flag\' : u\'/++resource++country-flags/jp.gif\'},\n-u\'ke\' : {u\'name\' : \'Kenya\', u\'flag\' : u\'/++resource++country-flags/ke.gif\'},\n-u\'kg\' : {u\'name\' : \'Kyrgyzstan\', u\'flag\' : u\'/++resource++country-flags/kg.gif\'},\n-u\'kh\' : {u\'name\' : \'Cambodia\', u\'flag\' : u\'/++resource++country-flags/kh.gif\'},\n-u\'ki\' : {u\'name\' : \'Kiribati\', u\'flag\' : u\'/++resource++country-flags/ki.gif\'},\n-u\'km\' : {u\'name\' : \'Comoros\', u\'flag\' : u\'/++resource++country-flags/km.gif\'},\n-u\'kn\' : {u\'name\' : \'Saint Kitts and Nevis\', u\'flag\' : u\'/++resource++country-flags/kn.gif\'},\n-u\'kp\' : {u\'name\' : "Korea Democratic People\'s Republic of", u\'flag\' : u\'/++resource++country-flags/kp.gif\'},\n-u\'kr\' : {u\'name\' : \'Korea Republic of\', u\'flag\' : u\'/++resource++country-flags/kr.gif\'},\n-u\'kw\' : {u\'name\' : \'Kuwait\', u\'flag\' : u\'/++resource++country-flags/kw.gif\'},\n-u\'ky\' : {u\'name\' : \'Cayman Islands\', u\'flag\' : u\'/++resource++country-flags/ky.gif\'},\n-u\'kz\' : {u\'name\' : \'Kazakhstan\', u\'flag\' : u\'/++resource++country-flags/kz.gif\'},\n-u\'la\' : {u\'name\' : "Lao People\'s Democratic Republic", u\'flag\' : u\'/++resource++country-flags/la.gif\'},\n-u\'lb\' : {u\'name\' : \'Lebanon\', u\'flag\' : u\'/++resource++country-flags/lb.gif\'},\n-u\'lc\' : {u\'name\' : \'Saint Lucia\', u\'flag\' : u\'/++resource++country-flags/lc.gif\'},\n-u\'li\' : {u\'name\' : \'Liechtenstein\', u\'flag\' : u\'/++resource++country-flags/li.gif\'},\n-u\'lk\' : {u\'name\' : \'Sri Lanka\', u\'flag\' : u\'/++resource++country-flags/lk.gif\'},\n-u\'lr\' : {u\'name\' : \'Liberia\', u\'flag\' : u\'/++resource++country-flags/lr.gif\'},\n-u\'ls\' : {u\'name\' : \'Lesotho\', u\'flag\' : u\'/++resource++country-flags/ls.gif\'},\n-u\'lt\' : {u\'name\' : \'Lithuania\', u\'flag\' : u\'/++resource++country-flags/lt.gif\'},\n-u\'lu\' : {u\'name\' : \'Luxembourg\', u\'flag\' : u\'/++resource++country-flags/lu.gif\'},\n-u\'lv\' : {u\'name\' : \'Latvia\', u\'flag\' : u\'/++resource++country-flags/lv.gif\'},\n-u\'ly\' : {u\'name\' : \'Libyan Arab Jamahiriya\', u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ma\' : {u\'name\' : \'Morocco\', u\'flag\' : u\'/++resource++country-flags/ma.gif\'},\n-u\'mc\' : {u\'name\' : \'Monaco\', u\'flag\' : u\'/++resource++country-flags/mc.gif\'},\n-u\'md\' : {u\'name\' : \'Moldova Republic of\', u\'flag\' : u\'/++resource++country-flags/md.gif\'},\n-u\'me\' : {u\'name\' : \'Montenegro\', u\'flag\' : u\'/++resource++country-flags/me.gif\'},\n-u\'mf\' : {u\'name\' : \'Saint Martin (French part)\', u\'flag\' : u\'/++resource++country-flags/mf.png\'},\n-u\'mg\' : {u\'name\' : \'Madagascar\', u\'flag\' : u\'/++resource++country-flags/mg.gif\'},\n-u\'mh\' : {u\'name\' : \'Marshall Islands\', u\'flag\' : u\'/++resource++country-flags/mh.gif\'},\n-u\'mk\' : {u\'name\' : \'Macedonia the former Yugoslavian Republic of\', u\'flag\' : u\'/++resource++country-flags/mk.gif\'},\n-u\'ml\' : {u\'name\' : \'Mali\', u\'flag\' : u\'/++resource++country-flags/ml.gif\'},\n-u\'mm\' : {u\'name\' : \'Myanmar\', u\'flag\' : u\'/++resource++country-flags/mm.gif\'},\n-u\'mn\' : {u\'name\' : \'Mongolia\', u\'flag\' : u\'/++resource++country-flags/mn.gif\'},\n-u\'mo\' : {u\'name\' : \'Macao\', u\'flag\' : u\'/++resource++country-flags/mo.gif\'},\n-u\'mp\' : {u\'name\' : \'Northern Mariana Islands\', u\'flag\' : u\'/++resource++country-flags/mp.gif\'},\n-u\'mq\' : {u\'name\' : \'Martinique\', u\'flag\' : u\'/++resource++country-flags/mq.gif\'},\n-u\'mr\' : {u\'name\' : \'Mauritania\', u\'flag\' : u\'/++resource++country-flags/mr.gif\'},\n-u\'ms\' : {u\'name\' : \'Montserrat\', u\'flag\' : u\'/++resource++country-flags/ms.gif\'},\n-u\'mt\' : {u\'name\' : \'Malta\', u\'flag\' : u\'/++resource++country-flags/mt.gif\'},\n-u\'mu\' : {u\'name\' : \'Mauritius\', u\'flag\' : u\'/++resource++country-flags/mu.gif\'},\n-u\'mv\' : {u\'name\' : \'Maldives\', u\'flag\' : u\'/++resource++country-flags/mv.gif\'},\n-u\'mw\' : {u\'name\' : \'Malawi\', u\'flag\' : u\'/++resource++country-flags/mw.gif\'},\n-u\'mx\' : {u\'name\' : \'Mexico\', u\'flag\' : u\'/++resource++country-flags/mx.gif\'},\n-u\'my\' : {u\'name\' : \'Malaysia\', u\'flag\' : u\'/++resource++country-flags/my.gif\'},\n-u\'mz\' : {u\'name\' : \'Mozambique\', u\'flag\' : u\'/++resource++country-flags/mz.gif\'},\n-u\'na\' : {u\'name\' : \'Namibia\', u\'flag\' : u\'/++resource++country-flags/na.gif\'},\n-u\'nc\' : {u\'name\' : \'New Caledonia\', u\'flag\' : u\'/++resource++country-flags/nc.gif\'},\n-u\'ne\' : {u\'name\' : \'Niger\', u\'flag\' : u\'/++resource++country-flags/ne.gif\'},\n-u\'nf\' : {u\'name\' : \'Norfolk Island\', u\'flag\' : u\'/++resource++country-flags/nf.gif\'},\n-u\'ng\' : {u\'name\' : \'Nigeria\', u\'flag\' : u\'/++resource++country-flags/ng.gif\'},\n-u\'ni\' : {u\'name\' : \'Nicaragua\', u\'flag\' : u\'/++resource++country-flags/ni.gif\'},\n-u\'nl\' : {u\'name\' : \'Netherlands\', u\'flag\' : u\'/++resource++country-flags/nl.gif\'},\n-u\'no\' : {u\'name\' : \'Norway\', u\'flag\' : u\'/++resource++country-flags/no.gif\'},\n-u\'np\' : {u\'name\' : \'Nepal\', u\'flag\' : u\'/++resource++country-flags/np.gif\'},\n-u\'nr\' : {u\'name\' : \'Nauru\', u\'flag\' : u\'/++resource++country-flags/nr.gif\'},\n-u\'nu\' : {u\'name\' : \'Niue\', u\'flag\' : u\'/++resource++country-flags/nu.gif\'},\n-u\'nz\' : {u\'name\' : \'New Zealand\', u\'flag\' : u\'/++resource++country-flags/nz.gif\'},\n-u\'om\' : {u\'name\' : \'Oman\', u\'flag\' : u\'/++resource++country-flags/om.gif\'},\n-u\'pa\' : {u\'name\' : \'Panama\', u\'flag\' : u\'/++resource++country-flags/pa.gif\'},\n-u\'pe\' : {u\'name\' : \'Peru\', u\'flag\' : u\'/++resource++country-flags/pe.gif\'},\n-u\'pf\' : {u\'name\' : \'French Polynesia\', u\'flag\' : u\'/++resource++country-flags/pf.gif\'},\n-u\'pg\' : {u\'name\' : \'Papua New Guinea\', u\'flag\' : u\'/++resource++country-flags/pg.gif\'},\n-u\'ph\' : {u\'name\' : \'Philippines\', u\'flag\' : u\'/++resource++country-flags/ph.gif\'},\n-u\'pk\' : {u\'name\' : \'Pakistan\', u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'pl\' : {u\'name\' : \'Poland\', u\'flag\' : u\'/++resource++country-flags/pl.gif\'},\n-u\'pm\' : {u\'name\' : \'Saint Pierre and Miquelon\', u\'flag\' : u\'/++resource++country-flags/pm.gif\'},\n-u\'pn\' : {u\'name\' : \'Pitcairn\', u\'flag\' : u\'/++resource++country-flags/pn.gif\'},\n-u\'pr\' : {u\'name\' : \'Puerto Rico\', u\'flag\' : u\'/++resource++country-flags/pr.gif\'},\n-u\'ps\' : {u\'name\' : \'Palestinian Territory occupied\', u\'flag\' : u\'/++resource++country-flags/ps.gif\'},\n-u\'pt\' : {u\'name\' : \'Portugal\', u\'flag\' : u\'/++resource++country-flags/pt.gif\'},\n-u\'pw\' : {u\'name\' : \'Palau\', u\'flag\' : u\'/++resource++country-flags/pw.gif\'},\n-u\'py\' : {u\'name\' : \'Paraguay\', u\'flag\' : u\'/++resource++country-flags/py.gif\'},\n-u\'qa\' : {u\'name\' : \'Qatar\', u\'flag\' : u\'/++resource++country-flags/qa.gif\'},\n-u\'re\' : {u\'name\' : \'Reunion\', u\'flag\' : u\'/++resource++country-flags/re.gif\'},\n-u\'ro\' : {u\'name\' : \'Romania\', u\'flag\' : u\'/++resource++country-flags/ro.gif\'},\n-u\'rs\' : {u\'name\' : \'Serbia\', u\'flag\' : u\'/++resource++country-flags/rs.gif\'},\n-u\'ru\' : {u\'name\' : \'Russian Federation\', u\'flag\' : u\'/++resource++country-flags/ru.gif\'},\n-u\'rw\' : {u\'name\' : \'Rwanda\', u\'flag\' : u\'/++resource++country-flags/rw.gif\'},\n-u\'sa\' : {u\'name\' : \'Saudi Arabia\', u\'flag\' : u\'/++resource++country-flags/sa.gif\'},\n-u\'sb\' : {u\'name\' : \'Solomon Islands\', u\'flag\' : u\'/++resource++country-flags/sb.gif\'},\n-u\'sc\' : {u\'name\' : \'Seychelles\', u\'flag\' : u\'/++resource++country-flags/sc.gif\'},\n-u\'sd\' : {u\'name\' : \'Sudan\', u\'flag\' : u\'/++resource++country-flags/sd.gif\'},\n-u\'se\' : {u\'name\' : \'Sweden\', u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sg\' : {u\'name\' : \'Singapore\', u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'sh\' : {u\'name\' : \'Saint Helena\', u\'flag\' : u\'/++resource++country-flags/sh.gif\'},\n-u\'si\' : {u\'name\' : \'Slovenia\', u\'flag\' : u\'/++resource++country-flags/si.gif\'},\n-u\'sj\' : {u\'name\' : \'Svalbard and Jan Mayen\', u\'flag\' : u\'/++resource++country-flags/sj.gif\'},\n-u\'sk\' : {u\'name\' : \'Slovakia\', u\'flag\' : u\'/++resource++country-flags/sk.gif\'},\n-u\'sl\' : {u\'name\' : \'Sierra Leone\', u\'flag\' : u\'/++resource++country-flags/sl.gif\'},\n-u\'sm\' : {u\'name\' : \'San Marino\', u\'flag\' : u\'/++resource++country-flags/sm.gif\'},\n-u\'sn\' : {u\'name\' : \'Senegal\', u\'flag\' : u\'/++resource++country-flags/sn.gif\'},\n-u\'so\' : {u\'name\' : \'Somalia\', u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'sr\' : {u\'name\' : \'Suriname\', u\'flag\' : u\'/++resource++country-flags/sr.gif\'},\n-u\'ss\' : {u\'name\' : \'South Sudan\', u\'flag\' : u\'/++resource++country-flags/ss.png\'},\n-u\'st\' : {u\'name\' : \'Sao Tome and Principe\', u\'flag\' : u\'/++resource++country-flags/st.gif\'},\n-u\'sv\' : {u\'name\' : \'El Salvador\', u\'flag\' : u\'/++resource++country-flags/sv.gif\'},\n-u\'sx\' : {u\'name\' : \'Sint Maarten (Dutch part)\', u\'flag\' : u\'/++resource++country-flags/sx.png\'},\n-u\'sy\' : {u\'name\' : \'Syrian Arab Republic\', u\'flag\' : u\'/++resource++country-flags/sy.gif\'},\n-u\'sz\' : {u\'name\' : \'Swaziland\', u\'flag\' : u\'/++resource++country-flags/sz.gif\'},\n-u\'tc\' : {u\'name\' : \'Turks and Caicos Islands\', u\'flag\' : u\'/++resource++country-flags/tc.gif\'},\n-u\'td\' : {u\'name\' : \'Chad\', u\'flag\' : u\'/++resource++country-flags/td.gif\'},\n-u\'tf\' : {u\'name\' : \'French Southern Territories\', u\'flag\' : u\'/++resource++country-flags/tf.gif\'},\n-u\'tg\' : {u\'name\' : \'Togo\', u\'flag\' : u\'/++resource++country-flags/tg.gif\'},\n-u\'th\' : {u\'name\' : \'Thailand\', u\'flag\' : u\'/++resource++country-flags/th.gif\'},\n-u\'tj\' : {u\'name\' : \'Tajikistan\', u\'flag\' : u\'/++resource++country-flags/tj.gif\'},\n-u\'tk\' : {u\'name\' : \'Tokelau\', u\'flag\' : u\'/++resource++country-flags/tk.gif\'},\n-u\'tl\' : {u\'name\' : \'Timor-Leste\', u\'flag\' : u\'/++resource++country-flags/tl.gif\'},\n-u\'tm\' : {u\'name\' : \'Turkmenistan\', u\'flag\' : u\'/++resource++country-flags/tm.gif\'},\n-u\'tn\' : {u\'name\' : \'Tunisia\', u\'flag\' : u\'/++resource++country-flags/tn.gif\'},\n-u\'to\' : {u\'name\' : \'Tonga\', u\'flag\' : u\'/++resource++country-flags/to.gif\'},\n-u\'tr\' : {u\'name\' : \'Turkey\', u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'tt\' : {u\'name\' : \'Trinidad and Tobago\', u\'flag\' : u\'/++resource++country-flags/tt.gif\'},\n-u\'tv\' : {u\'name\' : \'Tuvalu\', u\'flag\' : u\'/++resource++country-flags/tv.gif\'},\n-u\'tw\' : {u\'name\' : \'Taiwan\', u\'flag\' : u\'/++resource++country-flags/tw.gif\'},\n-u\'tz\' : {u\'name\' : \'Tanzania United Republic of\', u\'flag\' : u\'/++resource++country-flags/tz.gif\'},\n-u\'ua\' : {u\'name\' : \'Ukraine\', u\'flag\' : u\'/++resource++country-flags/ua.gif\'},\n-u\'ug\' : {u\'name\' : \'Uganda\', u\'flag\' : u\'/++resource++country-flags/ug.gif\'},\n-u\'um\' : {u\'name\' : \'United States Minor Outlying Islands\', u\'flag\' : u\'/++resource++country-flags/um.gif\'},\n-u\'us\' : {u\'name\' : \'United States\', u\'flag\' : u\'/++resource++country-flags/us.gif\'},\n-u\'uy\' : {u\'name\' : \'Uruguay\', u\'flag\' : u\'/++resource++country-flags/uy.gif\'},\n-u\'uz\' : {u\'name\' : \'Uzbekistan\', u\'flag\' : u\'/++resource++country-flags/uz.gif\'},\n-u\'va\' : {u\'name\' : \'Holy See (Vatican City State)\', u\'flag\' : u\'/++resource++country-flags/va.gif\'},\n-u\'vc\' : {u\'name\' : \'Saint Vincent and the Grenadines\', u\'flag\' : u\'/++resource++country-flags/vc.gif\'},\n-u\'ve\' : {u\'name\' : \'Venezuela\', u\'flag\' : u\'/++resource++country-flags/ve.gif\'},\n-u\'vg\' : {u\'name\' : \'Virgin Islands British\', u\'flag\' : u\'/++resource++country-flags/vg.gif\'},\n-u\'vi\' : {u\'name\' : \'Virgin Islands U.S.\', u\'flag\' : u\'/++resource++country-flags/vi.gif\'},\n-u\'vn\' : {u\'name\' : \'Viet Nam\', u\'flag\' : u\'/++resource++country-flags/vn.gif\'},\n-u\'vu\' : {u\'name\' : \'Vanuatu\', u\'flag\' : u\'/++resource++country-flags/vu.gif\'},\n-u\'wf\' : {u\'name\' : \'Wallis and Futuna\', u\'flag\' : u\'/++resource++country-flags/wf.gif\'},\n-u\'ws\' : {u\'name\' : \'Samoa\', u\'flag\' : u\'/++resource++country-flags/ws.gif\'},\n-u\'ye\' : {u\'name\' : \'Yemen\', u\'flag\' : u\'/++resource++country-flags/ye.gif\'},\n-u\'yt\' : {u\'name\' : \'Mayotte\', u\'flag\' : u\'/++resource++country-flags/yt.gif\'},\n-u\'za\' : {u\'name\' : \'South Africa\', u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'zm\' : {u\'name\' : \'Zambia\', u\'flag\' : u\'/++resource++country-flags/zm.gif\'},\n-u\'zw\' : {u\'name\' : \'Zimbabwe\', u\'flag\' : u\'/++resource++country-flags/zw.gif\'},\n-u\'xk\' : {u\'name\' : \'Kosovo\', u\'flag\' : u\'/++resource++country-flags/xk.gif\'},\n+    u\'ad\': {u\'name\': \'Andorra\', u\'flag\': u\'/++resource++country-flags/ad.gif\'},\n+    u\'ae\': {\n+        u\'name\': \'United Arab Emirates\',\n+        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n+    },\n+    u\'af\': {\n+        u\'name\': \'Afghanistan\',\n+        u\'flag\': u\'/++resource++country-flags/af.gif\',\n+    },\n+    u\'ag\': {\n+        u\'name\': \'Antigua and Barbuda\',\n+        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n+    },\n+    u\'ai\': {\n+        u\'name\': \'Anguilla\',\n+        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n+    },\n+    u\'al\': {u\'name\': \'Albania\', u\'flag\': u\'/++resource++country-flags/al.gif\'},\n+    u\'am\': {u\'name\': \'Armenia\', u\'flag\': u\'/++resource++country-flags/am.gif\'},\n+    u\'an\': {\n+        u\'name\': \'Netherlands Antilles\',\n+        u\'flag\': u\'/++resource++country-flags/an.gif\',\n+    },\n+    u\'ao\': {u\'name\': \'Angola\', u\'flag\': u\'/++resource++country-flags/ao.gif\'},\n+    u\'aq\': {\n+        u\'name\': \'Antarctica\',\n+        u\'flag\': u\'/++resource++country-flags/aq.gif\',\n+    },\n+    u\'ar\': {\n+        u\'name\': \'Argentina\',\n+        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n+    },\n+    u\'as\': {\n+        u\'name\': \'American Samoa\',\n+        u\'flag\': u\'/++resource++country-flags/as.gif\',\n+    },\n+    u\'at\': {u\'name\': \'Austria\', u\'flag\': u\'/++resource++country-flags/at.gif\'},\n+    u\'au\': {\n+        u\'name\': \'Australia\',\n+        u\'flag\': u\'/++resource++country-flags/au.gif\',\n+    },\n+    u\'aw\': {u\'name\': \'Aruba\', u\'flag\': u\'/++resource++country-flags/aw.gif\'},\n+    u\'ax\': {\n+        u\'name\': \'Oland Islands\',\n+        u\'flag\': u\'/++resource++country-flags/ax.gif\',\n+    },\n+    u\'az\': {\n+        u\'name\': \'Azerbaijan\',\n+        u\'flag\': u\'/++resource++country-flags/az.gif\',\n+    },\n+    u\'ba\': {\n+        u\'name\': \'Bosnia and Herzegovina\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'bb\': {\n+        u\'name\': \'Barbados\',\n+        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n+    },\n+    u\'bd\': {\n+        u\'name\': \'Bangladesh\',\n+        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n+    },\n+    u\'be\': {u\'name\': \'Belgium\', u\'flag\': u\'/++resource++country-flags/be.gif\'},\n+    u\'bf\': {\n+        u\'name\': \'Burkina Faso\',\n+        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n+    },\n+    u\'bg\': {\n+        u\'name\': \'Bulgaria\',\n+        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n+    },\n+    u\'bh\': {u\'name\': \'Bahrain\', u\'flag\': u\'/++resource++country-flags/bh.gif\'},\n+    u\'bi\': {u\'name\': \'Burundi\', u\'flag\': u\'/++resource++country-flags/bi.gif\'},\n+    u\'bj\': {u\'name\': \'Benin\', u\'flag\': u\'/++resource++country-flags/bj.gif\'},\n+    u\'bl\': {\n+        u\'name\': \'Saint Barth\xc3\xa9lemy\',\n+        u\'flag\': u\'/++resource++country-flags/bl.gif\',\n+    },\n+    u\'bm\': {u\'name\': \'Bermuda\', u\'flag\': u\'/++resource++country-flags/bm.gif\'},\n+    u\'bn\': {\n+        u\'name\': \'Brunei Darussalam\',\n+        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    },\n+    u\'bo\': {u\'name\': \'Bolivia\', u\'flag\': u\'/++resource++country-flags/bo.gif\'},\n+    u\'bq\': {\n+        u\'name\': \'Bonaire, Sint Eustatius and Saba\',\n+        u\'flag\': u\'/++resource++country-flags/bq.gif\',\n+    },\n+    u\'br\': {u\'name\': \'Brazil\', u\'flag\': u\'/++resource++country-flags/br.gif\'},\n+    u\'bs\': {u\'name\': \'Bahamas\', u\'flag\': u\'/++resource++country-flags/bs.gif\'},\n+    u\'bt\': {u\'name\': \'Bhutan\', u\'flag\': u\'/++resource++country-flags/bt.gif\'},\n+    u\'bv\': {\n+        u\'name\': \'Bouvet Island\',\n+        u\'flag\': u\'/++resource++country-flags/bv.gif\',\n+    },\n+    u\'bw\': {\n+        u\'name\': \'Botswana\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'by\': {u\'name\': \'Belarus\', u\'flag\': u\'/++resource++country-flags/by.gif\'},\n+    u\'bz\': {u\'name\': \'Belize\', u\'flag\': u\'/++resource++country-flags/bz.gif\'},\n+    u\'ca\': {u\'name\': \'Canada\', u\'flag\': u\'/++resource++country-flags/ca.gif\'},\n+    u\'cc\': {\n+        u\'name\': \'Cocos (Keeling) Islands\',\n+        u\'flag\': u\'/++resource++country-flags/cc.gif\',\n+    },\n+    u\'cd\': {\n+        u\'name\': \'Congo The Democratic Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    },\n+    u\'cf\': {\n+        u\'name\': \'Central African Republic\',\n+        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    },\n+    u\'cg\': {u\'name\': \'Congo\', u\'flag\': u\'/++resource++country-flags/cg.gif\'},\n+    u\'ch\': {\n+        u\'name\': \'Switzerland\',\n+        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    },\n+    u\'ci\': {\n+        u\'name\': "Cote d\'Ivoire",\n+        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n+    },\n+    u\'ck\': {\n+        u\'name\': \'Cook Islands\',\n+        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n+    },\n+    u\'cl\': {u\'name\': \'Chile\', u\'flag\': u\'/++resource++country-flags/cl.gif\'},\n+    u\'cm\': {\n+        u\'name\': \'Cameroon\',\n+        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    },\n+    u\'cn\': {u\'name\': \'China\', u\'flag\': u\'/++resource++country-flags/cn.gif\'},\n+    u\'co\': {\n+        u\'name\': \'Colombia\',\n+        u\'flag\': u\'/++resource++country-flags/co.gif\',\n+    },\n+    u\'cr\': {\n+        u\'name\': \'Costa Rica\',\n+        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n+    },\n+    u\'cs\': {\n+        u\'name\': \'Serbia and Montenegro\',\n+        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n+    },\n+    u\'cu\': {u\'name\': \'Cuba\', u\'flag\': u\'/++resource++country-flags/cu.gif\'},\n+    u\'cv\': {\n+        u\'name\': \'Cape Verde\',\n+        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n+    },\n+    u\'cw\': {u\'name\': \'Cura\xc3\xa7ao\', u\'flag\': u\'/++resource++country-flags/cw.png\'},\n+    u\'cx\': {\n+        u\'name\': \'Christmas Island\',\n+        u\'flag\': u\'/++resource++country-flags/cx.gif\',\n+    },\n+    u\'cy\': {u\'name\': \'Cyprus\', u\'flag\': u\'/++resource++country-flags/cy.gif\'},\n+    u\'cz\': {\n+        u\'name\': \'Czech Republic\',\n+        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n+    },\n+    u\'de\': {u\'name\': \'Germany\', u\'flag\': u\'/++resource++country-flags/de.gif\'},\n+    u\'dj\': {\n+        u\'name\': \'Djibouti\',\n+        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    },\n+    u\'dk\': {u\'name\': \'Denmark\', u\'flag\': u\'/++resource++country-flags/dk.gif\'},\n+    u\'dm\': {\n+        u\'name\': \'Dominica\',\n+        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n+    },\n+    u\'do\': {\n+        u\'name\': \'Dominican Republic\',\n+        u\'flag\': u\'/++resource++country-flags/do.gif\',\n+    },\n+    u\'dz\': {u\'name\': \'Algeria\', u\'flag\': u\'/++resource++country-flags/dz.gif\'},\n+    u\'ec\': {u\'name\': \'Ecuador\', u\'flag\': u\'/++resource++country-flags/ec.gif\'},\n+    u\'ee\': {u\'name\': \'Estonia\', u\'flag\': u\'/++resource++country-flags/ee.gif\'},\n+    u\'eg\': {u\'name\': \'Egypt\', u\'flag\': u\'/++resource++country-flags/eg.gif\'},\n+    u\'eh\': {\n+        u\'name\': \'Western Sahara\',\n+        u\'flag\': u\'/++resource++country-flags/eh.gif\',\n+    },\n+    u\'er\': {u\'name\': \'Eritrea\', u\'flag\': u\'/++resource++country-flags/er.gif\'},\n+    u\'es\': {u\'name\': \'Spain\', u\'flag\': u\'/++resource++country-flags/es.gif\'},\n+    u\'et\': {\n+        u\'name\': \'Ethiopia\',\n+        u\'flag\': u\'/++resource++country-flags/et.gif\',\n+    },\n+    u\'fi\': {u\'name\': \'Finland\', u\'flag\': u\'/++resource++country-flags/fi.gif\'},\n+    u\'fj\': {u\'name\': \'Fiji\', u\'flag\': u\'/++resource++country-flags/fj.gif\'},\n+    u\'fk\': {\n+        u\'name\': \'Falkland Islands (Malvinas)\',\n+        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n+    },\n+    u\'fm\': {\n+        u\'name\': \'Micronesia Federated States of\',\n+        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n+    },\n+    u\'fo\': {\n+        u\'name\': \'Faroe Islands\',\n+        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n+    },\n+    u\'fr\': {u\'name\': \'France\', u\'flag\': u\'/++resource++country-flags/fr.gif\'},\n+    u\'ga\': {u\'name\': \'Gabon\', u\'flag\': u\'/++resource++country-flags/ga.gif\'},\n+    u\'gb\': {\n+        u\'name\': \'United Kingdom\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'gd\': {u\'name\': \'Grenada\', u\'flag\': u\'/++resource++country-flags/gd.gif\'},\n+    u\'ge\': {u\'name\': \'Georgia\', u\'flag\': u\'/++resource++country-flags/ge.gif\'},\n+    u\'gf\': {\n+        u\'name\': \'French Guiana\',\n+        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n+    },\n+    u\'gg\': {\n+        u\'name\': \'Guernsey\',\n+        u\'flag\': u\'/++resource++country-flags/gg.gif\',\n+    },\n+    u\'gh\': {u\'name\': \'Ghana\', u\'flag\': u\'/++resource++country-flags/gh.gif\'},\n+    u\'gi\': {\n+        u\'name\': \'Gibraltar\',\n+        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n+    },\n+    u\'gl\': {\n+        u\'name\': \'Greenland\',\n+        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n+    },\n+    u\'gm\': {u\'name\': \'Gambia\', u\'flag\': u\'/++resource++country-flags/gm.gif\'},\n+    u\'gn\': {u\'name\': \'Guinea\', u\'flag\': u\'/++resource++country-flags/gn.gif\'},\n+    u\'gp\': {\n+        u\'name\': \'Guadeloupe\',\n+        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n+    },\n+    u\'gq\': {\n+        u\'name\': \'Equatorial Guinea\',\n+        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n+    },\n+    u\'gr\': {u\'name\': \'Greece\', u\'flag\': u\'/++resource++country-flags/gr.gif\'},\n+    u\'gs\': {\n+        u\'name\': \'South Georgia and the South Sandwich Islands\',\n+        u\'flag\': u\'/++resource++country-flags/gs.gif\',\n+    },\n+    u\'gt\': {\n+        u\'name\': \'Guatemala\',\n+        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n+    },\n+    u\'gu\': {u\'name\': \'Guam\', u\'flag\': u\'/++resource++country-flags/gu.gif\'},\n+    u\'gw\': {\n+        u\'name\': \'Guinea-Bissau\',\n+        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n+    },\n+    u\'gy\': {u\'name\': \'Guyana\', u\'flag\': u\'/++resource++country-flags/gy.gif\'},\n+    u\'hk\': {\n+        u\'name\': \'Hong Kong\',\n+        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n+    },\n+    u\'hm\': {\n+        u\'name\': \'Heard Island and McDonald Islands\',\n+        u\'flag\': u\'/++resource++country-flags/hm.gif\',\n+    },\n+    u\'hn\': {\n+        u\'name\': \'Honduras\',\n+        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n+    },\n+    u\'hr\': {u\'name\': \'Croatia\', u\'flag\': u\'/++resource++country-flags/hr.gif\'},\n+    u\'ht\': {u\'name\': \'Haiti\', u\'flag\': u\'/++resource++country-flags/ht.gif\'},\n+    u\'hu\': {u\'name\': \'Hungary\', u\'flag\': u\'/++resource++country-flags/hu.gif\'},\n+    u\'id\': {\n+        u\'name\': \'Indonesia\',\n+        u\'flag\': u\'/++resource++country-flags/id.gif\',\n+    },\n+    u\'ie\': {u\'name\': \'Ireland\', u\'flag\': u\'/++resource++country-flags/ie.gif\'},\n+    u\'il\': {u\'name\': \'Israel\', u\'flag\': u\'/++resource++country-flags/il.gif\'},\n+    u\'im\': {\n+        u\'name\': \'Isle of Man\',\n+        u\'flag\': u\'/++resource++country-flags/im.gif\',\n+    },\n+    u\'in\': {u\'name\': \'India\', u\'flag\': u\'/++resource++country-flags/in.gif\'},\n+    u\'io\': {\n+        u\'name\': \'British Indian Ocean Territory\',\n+        u\'flag\': u\'/++resource++country-flags/io.gif\',\n+    },\n+    u\'iq\': {u\'name\': \'Iraq\', u\'flag\': u\'/++resource++country-flags/iq.gif\'},\n+    u\'ir\': {\n+        u\'name\': \'Iran Islamic Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/ir.gif\',\n+    },\n+    u\'is\': {u\'name\': \'Iceland\', u\'flag\': u\'/++resource++country-flags/is.gif\'},\n+    u\'it\': {u\'name\': \'Italy\', u\'flag\': u\'/++resource++country-flags/it.gif\'},\n+    u\'je\': {u\'name\': \'Jersey\', u\'flag\': u\'/++resource++country-flags/je.gif\'},\n+    u\'jm\': {u\'name\': \'Jamaica\', u\'flag\': u\'/++resource++country-flags/jm.gif\'},\n+    u\'jo\': {u\'name\': \'Jordan\', u\'flag\': u\'/++resource++country-flags/jo.gif\'},\n+    u\'jp\': {u\'name\': \'Japan\', u\'flag\': u\'/++resource++country-flags/jp.gif\'},\n+    u\'ke\': {u\'name\': \'Kenya\', u\'flag\': u\'/++resource++country-flags/ke.gif\'},\n+    u\'kg\': {\n+        u\'name\': \'Kyrgyzstan\',\n+        u\'flag\': u\'/++resource++country-flags/kg.gif\',\n+    },\n+    u\'kh\': {\n+        u\'name\': \'Cambodia\',\n+        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n+    },\n+    u\'ki\': {\n+        u\'name\': \'Kiribati\',\n+        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n+    },\n+    u\'km\': {u\'name\': \'Comoros\', u\'flag\': u\'/++resource++country-flags/km.gif\'},\n+    u\'kn\': {\n+        u\'name\': \'Saint Kitts and Nevis\',\n+        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n+    },\n+    u\'kp\': {\n+        u\'name\': "Korea Democratic People\'s Republic of",\n+        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n+    },\n+    u\'kr\': {\n+        u\'name\': \'Korea Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n+    },\n+    u\'kw\': {u\'name\': \'Kuwait\', u\'flag\': u\'/++resource++country-flags/kw.gif\'},\n+    u\'ky\': {\n+        u\'name\': \'Cayman Islands\',\n+        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n+    },\n+    u\'kz\': {\n+        u\'name\': \'Kazakhstan\',\n+        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n+    },\n+    u\'la\': {\n+        u\'name\': "Lao People\'s Democratic Republic",\n+        u\'flag\': u\'/++resource++country-flags/la.gif\',\n+    },\n+    u\'lb\': {u\'name\': \'Lebanon\', u\'flag\': u\'/++resource++country-flags/lb.gif\'},\n+    u\'lc\': {\n+        u\'name\': \'Saint Lucia\',\n+        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n+    },\n+    u\'li\': {\n+        u\'name\': \'Liechtenstein\',\n+        u\'flag\': u\'/++resource++country-flags/li.gif\',\n+    },\n+    u\'lk\': {\n+        u\'name\': \'Sri Lanka\',\n+        u\'flag\': u\'/++resource++country-flags/lk.gif\',\n+    },\n+    u\'lr\': {u\'name\': \'Liberia\', u\'flag\': u\'/++resource++country-flags/lr.gif\'},\n+    u\'ls\': {u\'name\': \'Lesotho\', u\'flag\': u\'/++resource++country-flags/ls.gif\'},\n+    u\'lt\': {\n+        u\'name\': \'Lithuania\',\n+        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n+    },\n+    u\'lu\': {\n+        u\'name\': \'Luxembourg\',\n+        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    },\n+    u\'lv\': {u\'name\': \'Latvia\', u\'flag\': u\'/++resource++country-flags/lv.gif\'},\n+    u\'ly\': {\n+        u\'name\': \'Libyan Arab Jamahiriya\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ma\': {u\'name\': \'Morocco\', u\'flag\': u\'/++resource++country-flags/ma.gif\'},\n+    u\'mc\': {u\'name\': \'Monaco\', u\'flag\': u\'/++resource++country-flags/mc.gif\'},\n+    u\'md\': {\n+        u\'name\': \'Moldova Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/md.gif\',\n+    },\n+    u\'me\': {\n+        u\'name\': \'Montenegro\',\n+        u\'flag\': u\'/++resource++country-flags/me.gif\',\n+    },\n+    u\'mf\': {\n+        u\'name\': \'Saint Martin (French part)\',\n+        u\'flag\': u\'/++resource++country-flags/mf.png\',\n+    },\n+    u\'mg\': {\n+        u\'name\': \'Madagascar\',\n+        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    },\n+    u\'mh\': {\n+        u\'name\': \'Marshall Islands\',\n+        u\'flag\': u\'/++resource++country-flags/mh.gif\',\n+    },\n+    u\'mk\': {\n+        u\'name\': \'Macedonia the former Yugoslavian Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n+    },\n+    u\'ml\': {u\'name\': \'Mali\', u\'flag\': u\'/++resource++country-flags/ml.gif\'},\n+    u\'mm\': {u\'name\': \'Myanmar\', u\'flag\': u\'/++resource++country-flags/mm.gif\'},\n+    u\'mn\': {\n+        u\'name\': \'Mongolia\',\n+        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n+    },\n+    u\'mo\': {u\'name\': \'Macao\', u\'flag\': u\'/++resource++country-flags/mo.gif\'},\n+    u\'mp\': {\n+        u\'name\': \'Northern Mariana Islands\',\n+        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    },\n+    u\'mq\': {\n+        u\'name\': \'Martinique\',\n+        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n+    },\n+    u\'mr\': {\n+        u\'name\': \'Mauritania\',\n+        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n+    },\n+    u\'ms\': {\n+        u\'name\': \'Montserrat\',\n+        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n+    },\n+    u\'mt\': {u\'name\': \'Malta\', u\'flag\': u\'/++resource++country-flags/mt.gif\'},\n+    u\'mu\': {\n+        u\'name\': \'Mauritius\',\n+        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n+    },\n+    u\'mv\': {\n+        u\'name\': \'Maldives\',\n+        u\'flag\': u\'/++resource++country-flags/mv.gif\',\n+    },\n+    u\'mw\': {u\'name\': \'Malawi\', u\'flag\': u\'/++resource++country-flags/mw.gif\'},\n+    u\'mx\': {u\'name\': \'Mexico\', u\'flag\': u\'/++resource++country-flags/mx.gif\'},\n+    u\'my\': {\n+        u\'name\': \'Malaysia\',\n+        u\'flag\': u\'/++resource++country-flags/my.gif\',\n+    },\n+    u\'mz\': {\n+        u\'name\': \'Mozambique\',\n+        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n+    },\n+    u\'na\': {u\'name\': \'Namibia\', u\'flag\': u\'/++resource++country-flags/na.gif\'},\n+    u\'nc\': {\n+        u\'name\': \'New Caledonia\',\n+        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n+    },\n+    u\'ne\': {u\'name\': \'Niger\', u\'flag\': u\'/++resource++country-flags/ne.gif\'},\n+    u\'nf\': {\n+        u\'name\': \'Norfolk Island\',\n+        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n+    },\n+    u\'ng\': {u\'name\': \'Nigeria\', u\'flag\': u\'/++resource++country-flags/ng.gif\'},\n+    u\'ni\': {\n+        u\'name\': \'Nicaragua\',\n+        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n+    },\n+    u\'nl\': {\n+        u\'name\': \'Netherlands\',\n+        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n+    },\n+    u\'no\': {u\'name\': \'Norway\', u\'flag\': u\'/++resource++country-flags/no.gif\'},\n+    u\'np\': {u\'name\': \'Nepal\', u\'flag\': u\'/++resource++country-flags/np.gif\'},\n+    u\'nr\': {u\'name\': \'Nauru\', u\'flag\': u\'/++resource++country-flags/nr.gif\'},\n+    u\'nu\': {u\'name\': \'Niue\', u\'flag\': u\'/++resource++country-flags/nu.gif\'},\n+    u\'nz\': {\n+        u\'name\': \'New Zealand\',\n+        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n+    },\n+    u\'om\': {u\'name\': \'Oman\', u\'flag\': u\'/++resource++country-flags/om.gif\'},\n+    u\'pa\': {u\'name\': \'Panama\', u\'flag\': u\'/++resource++country-flags/pa.gif\'},\n+    u\'pe\': {u\'name\': \'Peru\', u\'flag\': u\'/++resource++country-flags/pe.gif\'},\n+    u\'pf\': {\n+        u\'name\': \'French Polynesia\',\n+        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n+    },\n+    u\'pg\': {\n+        u\'name\': \'Papua New Guinea\',\n+        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n+    },\n+    u\'ph\': {\n+        u\'name\': \'Philippines\',\n+        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n+    },\n+    u\'pk\': {\n+        u\'name\': \'Pakistan\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'pl\': {u\'name\': \'Poland\', u\'flag\': u\'/++resource++country-flags/pl.gif\'},\n+    u\'pm\': {\n+        u\'name\': \'Saint Pierre and Miquelon\',\n+        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n+    },\n+    u\'pn\': {\n+        u\'name\': \'Pitcairn\',\n+        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n+    },\n+    u\'pr\': {\n+        u\'name\': \'Puerto Rico\',\n+        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    },\n+    u\'ps\': {\n+        u\'name\': \'Palestinian Territory occupied\',\n+        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n+    },\n+    u\'pt\': {\n+        u\'name\': \'Portugal\',\n+        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n+    },\n+    u\'pw\': {u\'name\': \'Palau\', u\'flag\': u\'/++resource++country-flags/pw.gif\'},\n+    u\'py\': {\n+        u\'name\': \'Paraguay\',\n+        u\'flag\': u\'/++resource++country-flags/py.gif\',\n+    },\n+    u\'qa\': {u\'name\': \'Qatar\', u\'flag\': u\'/++resource++country-flags/qa.gif\'},\n+    u\'re\': {u\'name\': \'Reunion\', u\'flag\': u\'/++resource++country-flags/re.gif\'},\n+    u\'ro\': {u\'name\': \'Romania\', u\'flag\': u\'/++resource++country-flags/ro.gif\'},\n+    u\'rs\': {u\'name\': \'Serbia\', u\'flag\': u\'/++resource++country-flags/rs.gif\'},\n+    u\'ru\': {\n+        u\'name\': \'Russian Federation\',\n+        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n+    },\n+    u\'rw\': {u\'name\': \'Rwanda\', u\'flag\': u\'/++resource++country-flags/rw.gif\'},\n+    u\'sa\': {\n+        u\'name\': \'Saudi Arabia\',\n+        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n+    },\n+    u\'sb\': {\n+        u\'name\': \'Solomon Islands\',\n+        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n+    },\n+    u\'sc\': {\n+        u\'name\': \'Seychelles\',\n+        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    },\n+    u\'sd\': {u\'name\': \'Sudan\', u\'flag\': u\'/++resource++country-flags/sd.gif\'},\n+    u\'se\': {u\'name\': \'Sweden\', u\'flag\': u\'/++resource++country-flags/se.gif\'},\n+    u\'sg\': {\n+        u\'name\': \'Singapore\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'sh\': {\n+        u\'name\': \'Saint Helena\',\n+        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n+    },\n+    u\'si\': {\n+        u\'name\': \'Slovenia\',\n+        u\'flag\': u\'/++resource++country-flags/si.gif\',\n+    },\n+    u\'sj\': {\n+        u\'name\': \'Svalbard and Jan Mayen\',\n+        u\'flag\': u\'/++resource++country-flags/sj.gif\',\n+    },\n+    u\'sk\': {\n+        u\'name\': \'Slovakia\',\n+        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n+    },\n+    u\'sl\': {\n+        u\'name\': \'Sierra Leone\',\n+        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n+    },\n+    u\'sm\': {\n+        u\'name\': \'San Marino\',\n+        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n+    },\n+    u\'sn\': {u\'name\': \'Senegal\', u\'flag\': u\'/++resource++country-flags/sn.gif\'},\n+    u\'so\': {u\'name\': \'Somalia\', u\'flag\': u\'/++resource++country-flags/so.gif\'},\n+    u\'sr\': {\n+        u\'name\': \'Suriname\',\n+        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n+    },\n+    u\'ss\': {\n+        u\'name\': \'South Sudan\',\n+        u\'flag\': u\'/++resource++country-flags/ss.png\',\n+    },\n+    u\'st\': {\n+        u\'name\': \'Sao Tome and Principe\',\n+        u\'flag\': u\'/++resource++country-flags/st.gif\',\n+    },\n+    u\'sv\': {\n+        u\'name\': \'El Salvador\',\n+        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n+    },\n+    u\'sx\': {\n+        u\'name\': \'Sint Maarten (Dutch part)\',\n+        u\'flag\': u\'/++resource++country-flags/sx.png\',\n+    },\n+    u\'sy\': {\n+        u\'name\': \'Syrian Arab Republic\',\n+        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n+    },\n+    u\'sz\': {\n+        u\'name\': \'Swaziland\',\n+        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    },\n+    u\'tc\': {\n+        u\'name\': \'Turks and Caicos Islands\',\n+        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n+    },\n+    u\'td\': {u\'name\': \'Chad\', u\'flag\': u\'/++resource++country-flags/td.gif\'},\n+    u\'tf\': {\n+        u\'name\': \'French Southern Territories\',\n+        u\'flag\': u\'/++resource++country-flags/tf.gif\',\n+    },\n+    u\'tg\': {u\'name\': \'Togo\', u\'flag\': u\'/++resource++country-flags/tg.gif\'},\n+    u\'th\': {\n+        u\'name\': \'Thailand\',\n+        u\'flag\': u\'/++resource++country-flags/th.gif\',\n+    },\n+    u\'tj\': {\n+        u\'name\': \'Tajikistan\',\n+        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n+    },\n+    u\'tk\': {u\'name\': \'Tokelau\', u\'flag\': u\'/++resource++country-flags/tk.gif\'},\n+    u\'tl\': {\n+        u\'name\': \'Timor-Leste\',\n+        u\'flag\': u\'/++resource++country-flags/tl.gif\',\n+    },\n+    u\'tm\': {\n+        u\'name\': \'Turkmenistan\',\n+        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n+    },\n+    u\'tn\': {u\'name\': \'Tunisia\', u\'flag\': u\'/++resource++country-flags/tn.gif\'},\n+    u\'to\': {u\'name\': \'Tonga\', u\'flag\': u\'/++resource++country-flags/to.gif\'},\n+    u\'tr\': {u\'name\': \'Turkey\', u\'flag\': u\'/++resource++country-flags/tr.gif\'},\n+    u\'tt\': {\n+        u\'name\': \'Trinidad and Tobago\',\n+        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n+    },\n+    u\'tv\': {u\'name\': \'Tuvalu\', u\'flag\': u\'/++resource++country-flags/tv.gif\'},\n+    u\'tw\': {u\'name\': \'Taiwan\', u\'flag\': u\'/++resource++country-flags/tw.gif\'},\n+    u\'tz\': {\n+        u\'name\': \'Tanzania United Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n+    },\n+    u\'ua\': {u\'name\': \'Ukraine\', u\'flag\': u\'/++resource++country-flags/ua.gif\'},\n+    u\'ug\': {u\'name\': \'Uganda\', u\'flag\': u\'/++resource++country-flags/ug.gif\'},\n+    u\'um\': {\n+        u\'name\': \'United States Minor Outlying Islands\',\n+        u\'flag\': u\'/++resource++country-flags/um.gif\',\n+    },\n+    u\'us\': {\n+        u\'name\': \'United States\',\n+        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    },\n+    u\'uy\': {u\'name\': \'Uruguay\', u\'flag\': u\'/++resource++country-flags/uy.gif\'},\n+    u\'uz\': {\n+        u\'name\': \'Uzbekistan\',\n+        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n+    },\n+    u\'va\': {\n+        u\'name\': \'Holy See (Vatican City State)\',\n+        u\'flag\': u\'/++resource++country-flags/va.gif\',\n+    },\n+    u\'vc\': {\n+        u\'name\': \'Saint Vincent and the Grenadines\',\n+        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n+    },\n+    u\'ve\': {\n+        u\'name\': \'Venezuela\',\n+        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n+    },\n+    u\'vg\': {\n+        u\'name\': \'Virgin Islands British\',\n+        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n+    },\n+    u\'vi\': {\n+        u\'name\': \'Virgin Islands U.S.\',\n+        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n+    },\n+    u\'vn\': {\n+        u\'name\': \'Viet Nam\',\n+        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n+    },\n+    u\'vu\': {u\'name\': \'Vanuatu\', u\'flag\': u\'/++resource++country-flags/vu.gif\'},\n+    u\'wf\': {\n+        u\'name\': \'Wallis and Futuna\',\n+        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n+    },\n+    u\'ws\': {u\'name\': \'Samoa\', u\'flag\': u\'/++resource++country-flags/ws.gif\'},\n+    u\'ye\': {u\'name\': \'Yemen\', u\'flag\': u\'/++resource++country-flags/ye.gif\'},\n+    u\'yt\': {u\'name\': \'Mayotte\', u\'flag\': u\'/++resource++country-flags/yt.gif\'},\n+    u\'za\': {\n+        u\'name\': \'South Africa\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'zm\': {u\'name\': \'Zambia\', u\'flag\': u\'/++resource++country-flags/zm.gif\'},\n+    u\'zw\': {\n+        u\'name\': \'Zimbabwe\',\n+        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n+    },\n+    u\'xk\': {u\'name\': \'Kosovo\', u\'flag\': u\'/++resource++country-flags/xk.gif\'},\n }\n \n # convert the utf-8 encoded values to unicode\ndiff --git a/plone/i18n/locales/interfaces.py b/plone/i18n/locales/interfaces.py\nindex cd5c9b4..f1f58b2 100644\n--- a/plone/i18n/locales/interfaces.py\n+++ b/plone/i18n/locales/interfaces.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from zope.i18n.interfaces import ILanguageAvailability as IBaseLanguageAvailability\n+from zope.i18n.interfaces import (\n+    ILanguageAvailability as IBaseLanguageAvailability,\n+)\n from zope.interface import Interface\n \n \n@@ -18,6 +20,7 @@ def getLanguagesForTLD(tld):\n         """Return the relevant languages for a top level domain.\n         """\n \n+\n class ICountryAvailability(Interface):\n     """A list of available coutries."""\n \n@@ -33,6 +36,7 @@ def getCountryListing():\n         """Return a sequence of country code and country name tuples.\n         """\n \n+\n class ILanguageAvailability(IBaseLanguageAvailability):\n     """A list of available languages."""\n \n@@ -44,12 +48,15 @@ def getLanguageListing(combined=False):\n         """Return a sequence of language code and language name tuples.\n         """\n \n+\n class IContentLanguageAvailability(ILanguageAvailability):\n     """A list of available content languages."""\n \n+\n class IMetadataLanguageAvailability(ILanguageAvailability):\n     """A list of available metadata languages."""\n \n+\n class IModifiableLanguageAvailability(ILanguageAvailability):\n     """A modifiable list of available languages."""\n \n@@ -57,6 +64,7 @@ def setAvailableLanguages(languages, combined=False):\n         """Set a list of available language tags.\n         """\n \n+\n class IModifiableCountryAvailability(ICountryAvailability):\n     """A modifiable list of available countries."""\n \ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex 7dc38d4..4e6032c 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -42,6 +42,7 @@ class ContentLanguageAvailability(LanguageAvailability):\n     """A list of available content languages.\n     """\n \n+\n contentlanguages = ContentLanguageAvailability()\n \n \n@@ -50,202 +51,515 @@ class MetadataLanguageAvailability(LanguageAvailability):\n     """A list of available metadata languages.\n     """\n \n+\n metadatalanguages = MetadataLanguageAvailability()\n \n # This is a dictionary of dictonaries:\n #\n-# \'langcode-variation\' : {u\'native\' : \'Native name\', u\'name\' : \'English name\', u\'flag\' : u\'/++resource++country-flags/*.gif\'}\n+# \'langcode-variation\' : {\n+#     u\'native\' : \'Native name\',\n+#     u\'name\' : \'English name\',\n+#     u\'flag\' : u\'/++resource++country-flags/*.gif\'\n+# }\n #\n # This list follows ISO-639-1. The list retains entries for mo and sh,\n # even tough these have later been deprecated from the standard.\n \n _languagelist = {\n-u\'aa\' : {u\'native\' : \'\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I\', u\'name\' : \'Afar\',                         u\'flag\' : u\'/++resource++country-flags/dj.gif\'},\n-u\'ab\' : {u\'native\' : \'\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0\', u\'name\' : \'Abkhazian\',                           u\'flag\' : u\'/++resource++country-flags/ge.gif\'},\n-u\'ae\' : {u\'native\' : \'avesta\', u\'name\' : \'Avestan\'},\n-u\'af\' : {u\'native\' : \'Afrikaans\', u\'name\' : \'Afrikaans\'},\n-u\'ak\' : {u\'native\' : \'Akan\', u\'name\' : \'Akan\'},\n-u\'am\' : {u\'native\' : \'\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b\', u\'name\' : \'Amharic\'},\n-u\'an\' : {u\'native\' : \'aragon\xc3\xa9s\', u\'name\' : \'Aragonese\'},\n-u\'ar\' : {u\'native\' : \'\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\', u\'name\' : \'Arabic\',                             u\'flag\' : \'/++resource++language-flags/ar.gif\'},\n-u\'as\' : {u\'native\' : \'\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe\', u\'name\' : \'Assamese\'},\n-u\'ay\' : {u\'native\' : \'Aymara\', u\'name\' : \'Aymara\'},\n-u\'az\' : {u\'native\' : \'Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si\', u\'name\' : \'Azerbaijani\',                 u\'flag\' : u\'/++resource++country-flags/az.gif\'},\n-u\'ba\' : {u\'native\' : \'Bashkir\', u\'name\' : \'Bashkir\'},\n-u\'be\' : {u\'native\' : \'\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96\', u\'name\' : \'Belarussian\',                      u\'flag\' : u\'/++resource++country-flags/by.gif\'},\n-u\'bg\' : {u\'native\' : \'\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\', u\'name\' : \'Bulgarian\',                        u\'flag\' : u\'/++resource++country-flags/bg.gif\'},\n-u\'bh\' : {u\'native\' : \'Bihari\', u\'name\' : \'Bihari\'},\n-u\'bi\' : {u\'native\' : \'Bislama\', u\'name\' : \'Bislama\'},\n-u\'bm\' : {u\'native\' : \'bamanankan\', u\'name\' : \'Bambara\'},\n-u\'bn\' : {u\'native\' : \'\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\', u\'name\' : \'Bengali\',                              u\'flag\' : u\'/++resource++country-flags/bd.gif\'},\n-u\'bo\' : {u\'native\' : \'\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b\', u\'name\' : \'Tibetan\'},\n-u\'br\' : {u\'native\' : \'brezhoneg\', u\'name\' : \'Breton\'},\n-u\'bs\' : {u\'native\' : \'Bosanski\', u\'name\' : \'Bosnian\',                           u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'ca\' : {u\'native\' : \'Catal\xc3\xa0\', u\'name\' : \'Catalan\',                             u\'flag\' : u\'/++resource++language-flags/ca.gif\'},\n-u\'ce\' : {u\'native\' : \'\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82\', u\'name\' : \'Chechen\'},\n-u\'ch\' : {u\'native\' : \'Chamoru\', u\'name\' : \'Chamorro\'},\n-u\'co\' : {u\'native\' : \'Corsu\', u\'name\' : \'Corsican\'},\n-u\'cr\' : {u\'native\' : \'\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3\', u\'name\' : \'Cree\'},\n-u\'cs\' : {u\'native\' : \'\xc4\x8ce\xc5\xa1tina\', u\'name\' : \'Czech\',                              u\'flag\' : u\'/++resource++country-flags/cz.gif\'},\n-u\'cu\' : {u\'native\' : \'\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a\', u\'name\' : \'Old Church Slavonic\'},\n-u\'cv\' : {u\'native\' : \'\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8\', u\'name\' : \'Chuvash\'},\n-u\'cy\' : {u\'native\' : \'Cymraeg\', u\'name\' : \'Welsh\',                              u\'flag\' : \'/++resource++language-flags/cy.gif\'},\n-u\'da\' : {u\'native\' : \'Dansk\', u\'name\' : \'Danish\',                               u\'flag\' : u\'/++resource++country-flags/dk.gif\'},\n-u\'de\' : {u\'native\' : \'Deutsch\', u\'name\' : \'German\',                             u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'dv\' : {u\'native\' : \'Divehi\', u\'name\' : \'Maldivian\'},\n-u\'dz\' : {u\'native\' : \'Bhutani\', u\'name\' : \'Indian Bhutani\'},\n-u\'ee\' : {u\'native\' : \'E\xca\x8begbe\', u\'name\' : \'Ewe\'},\n-u\'el\' : {u\'native\' : \'\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\', u\'name\' : \'Greek\',                             u\'flag\' : u\'/++resource++country-flags/gr.gif\'},\n-u\'en\' : {u\'native\' : \'English\', u\'name\' : \'English\',                            u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'eo\' : {u\'native\' : \'Esperanto\', u\'name\' : \'Esperanto\',                        u\'flag\' : \'/++resource++language-flags/eo.gif\'},\n-u\'es\' : {u\'native\' : \'Espa\xc3\xb1ol\', u\'name\' : \'Spanish\',                            u\'flag\' : u\'/++resource++country-flags/es.gif\'},\n-u\'et\' : {u\'native\' : \'Eesti\', u\'name\' : \'Estonian\',                             u\'flag\' : u\'/++resource++country-flags/ee.gif\'},\n-u\'eu\' : {u\'native\' : \'Euskara\', u\'name\' : \'Basque\',                             u\'flag\' : \'/++resource++language-flags/eu.gif\'},\n-u\'fa\' : {u\'native\' : \'\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\', u\'name\' : \'Persian\'},\n-u\'ff\' : {u\'native\' : \'Fulfulde\', u\'name\' : \'Fula\'},\n-u\'fi\' : {u\'native\' : \'Suomi\', u\'name\' : \'Finnish\',                              u\'flag\' : u\'/++resource++country-flags/fi.gif\'},\n-u\'fj\' : {u\'native\' : \'Fiji\', u\'name\' : \'Fiji\',                                  u\'flag\' : u\'/++resource++country-flags/fj.gif\'},\n-u\'fo\' : {u\'native\' : \'F\xc3\xb8royska\', u\'name\' : \'Faroese\',                           u\'flag\' : u\'/++resource++country-flags/fo.gif\'},\n-u\'fr\' : {u\'native\' : \'Fran\xc3\xa7ais\', u\'name\' : \'French\',                            u\'flag\' : u\'/++resource++country-flags/fr.gif\'},\n-u\'fy\' : {u\'native\' : \'Frysk\', u\'name\' : \'Frisian\'},\n-u\'ga\' : {u\'native\' : \'Gaeilge\', u\'name\' : \'Irish Gaelic\'},\n-u\'gd\' : {u\'native\' : \'G\xc3\xa0idhlig\', u\'name\' : \'Scottish Gaelic\'},\n-u\'gl\' : {u\'native\' : \'Galego\', u\'name\' : \'Galician\'},\n-u\'gn\' : {u\'native\' : \'Guarani\', u\'name\' : \'Guarani\'},\n-u\'gu\' : {u\'native\' : \'\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\', u\'name\' : \'Gujarati\'},\n-u\'gv\' : {u\'native\' : \'Gaelg\', u\'name\' : \'Manx Gaelic\'},\n-u\'ha\' : {u\'native\' : \'\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3\', u\'name\' : \'Hausa\'},\n-u\'he\' : {u\'native\' : \'\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\', u\'name\' : \'Hebrew\',                               u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'hi\' : {u\'native\' : \'\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80\', u\'name\' : \'Hindi\',                                u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ho\' : {u\'native\' : \'Hiri Motu\', u\'name\' : \'Hiri Motu\'},\n-u\'hr\' : {u\'native\' : \'Hrvatski\', u\'name\' : \'Croatian\',                          u\'flag\' : u\'/++resource++country-flags/hr.gif\'},\n-u\'ht\' : {u\'native\' : \'Krey\xc3\xb2l ayisyen\', u\'name\' : \'Haitian\'},\n-u\'hu\' : {u\'native\' : \'Magyar\', u\'name\' : \'Hungarian\',                           u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'hy\' : {u\'native\' : \'\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6\', u\'name\' : \'Armenian\',                           u\'flag\' : u\'/++resource++country-flags/am.gif\'},\n-u\'hz\' : {u\'native\' : \'Otjiherero\', u\'name\' : \'Herero\'},\n-u\'ia\' : {u\'native\' : \'Interlingua\', u\'name\' : \'Interlingua\'},\n-u\'id\' : {u\'native\' : \'Bahasa Indonesia\', u\'name\' : \'Indonesian\',                u\'flag\' : u\'/++resource++country-flags/id.gif\'},\n-u\'ie\' : {u\'native\' : \'Interlingue\', u\'name\' : \'Interlingue\'},\n-u\'ig\' : {u\'native\' : \'As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo\', u\'name\' : \'Igbo\'},\n-u\'ii\' : {u\'native\' : \'Nuosu\', u\'name\' : \'Nuosu\'},\n-u\'ik\' : {u\'native\' : \'I\xc3\xb1upiaq\', u\'name\' : \'Inupiak\'},\n-u\'io\' : {u\'native\' : \'Ido\', u\'name\' : \'Ido\'},\n-u\'is\' : {u\'native\' : \'\xc3\x8dslenska\', u\'name\' : \'Icelandic\',                         u\'flag\' : u\'/++resource++country-flags/is.gif\'},\n-u\'it\' : {u\'native\' : \'Italiano\', u\'name\' : \'Italian\',                           u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'iu\' : {u\'native\' : \'\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6\', u\'name\' : \'Inuktitut\'},\n-u\'ja\' : {u\'native\' : \'\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\', u\'name\' : \'Japanese\',                               u\'flag\' : u\'/++resource++country-flags/jp.gif\'},\n-u\'jv\' : {u\'native\' : \'Javanese\', u\'name\' : \'basa Jawa\'},\n-u\'ka\' : {u\'native\' : \'\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\', u\'name\' : \'Georgian\',                           u\'flag\' : u\'/++resource++country-flags/ge.gif\'},\n-u\'kg\' : {u\'native\' : \'KiKongo\', u\'name\' : \'Kongo\'},\n-u\'ki\' : {u\'native\' : \'G\xc4\xa9k\xc5\xa9y\xc5\xa9\', u\'name\' : \'Kikuyu\'},\n-u\'kj\' : {u\'native\' : \'Kuanyama\', u\'name\' : \'Kwanyama\'},\n-u\'kk\' : {u\'native\' : \'\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e\', u\'name\' : \'Kazakh\',                             u\'flag\' : u\'/++resource++country-flags/kz.gif\'},\n-u\'kl\' : {u\'native\' : \'Greenlandic\', u\'name\' : \'Greenlandic\',                    u\'flag\' : u\'/++resource++country-flags/gl.gif\'},\n-u\'km\' : {u\'native\' : \'\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\', u\'name\' : \'Cambodian/Khmer\',                      u\'flag\' : u\'/++resource++country-flags/kh.gif\'},\n-u\'kn\' : {u\'native\' : \'\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1\', u\'name\' : \'Kannada\',                              u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ko\' : {u\'native\' : \'\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\', u\'name\' : \'Korean\',                                 u\'flag\' : u\'/++resource++country-flags/kr.gif\'},\n-u\'kr\' : {u\'native\' : \'Kanuri\', u\'name\' : \'Kanuri\'},\n-u\'ks\' : {u\'native\' : \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0\', u\'name\' : \'Kashmiri\',                            u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ku\' : {u\'native\' : \'Kurd\xc3\xad\', u\'name\' : \'Kurdish\'},\n-u\'kv\' : {u\'native\' : \'\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2\', u\'name\' : \'Komi\'},\n-u\'kw\' : {u\'native\' : \'Kernewek\', u\'name\' : \'Cornish\'},\n-u\'ky\' : {u\'native\' : \'\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\', u\'name\' : \'Kirghiz\'},\n-u\'la\' : {u\'native\' : \'Latin\', u\'name\' : \'Latin\',                                u\'flag\' : u\'/++resource++country-flags/va.gif\'},\n-u\'lb\' : {u\'native\' : \'L\xc3\xabtzebuergesch\', u\'name\' : \'Luxemburgish\',                u\'flag\' : u\'/++resource++country-flags/lu.gif\'},\n-u\'lg\' : {u\'native\' : \'Luganda\', u\'name\' : \'Ganda\'},\n-u\'li\' : {u\'native\' : \'Limburgs\', u\'name\' : \'Limburgish\'},\n-u\'ln\' : {u\'native\' : \'Lingala\', u\'name\' : \'Lingala\'},\n-u\'lo\' : {u\'native\' : \'\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7\', u\'name\' : \'Laotian\',                            u\'flag\' : u\'/++resource++country-flags/la.gif\'},\n-u\'lt\' : {u\'native\' : \'Lietuviskai\', u\'name\' : \'Lithuanian\',                     u\'flag\' : u\'/++resource++country-flags/lt.gif\'},\n-u\'lu\' : {u\'native\' : \'Tshiluba\', u\'name\' : \'Luba-Katanga\'},\n-u\'lv\' : {u\'native\' : \'Latvie\xc5\xa1u\', u\'name\' : \'Latvian\',                           u\'flag\' : u\'/++resource++country-flags/lv.gif\'},\n-u\'mg\' : {u\'native\' : \'Malagasy\', u\'name\' : \'Madagascarian\',                     u\'flag\' : u\'/++resource++country-flags/mg.gif\'},\n-u\'mh\' : {u\'native\' : \'Kajin M\xcc\xa7aje\xc4\xbc\', u\'name\' : \'Marshallese\'},\n-u\'mi\' : {u\'native\' : \'Maori\', u\'name\' : \'Maori\'},\n-u\'mk\' : {u\'native\' : \'\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\', u\'name\' : \'Macedonian\',                      u\'flag\' : u\'/++resource++country-flags/mk.gif\'},\n-u\'ml\' : {u\'native\' : \'\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\', u\'name\' : \'Malayalam\'},\n-u\'mn\' : {u\'native\' : \'\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\', u\'name\' : \'Mongolian\',                           u\'flag\' : u\'/++resource++country-flags/mn.gif\'},\n-u\'mo\' : {u\'native\' : \'Moldavian\', u\'name\' : \'Moldavian\',                        u\'flag\' : u\'/++resource++country-flags/md.gif\'},\n-u\'mr\' : {u\'native\' : \'\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\', u\'name\' : \'Marathi\'},\n-u\'ms\' : {u\'native\' : \'Bahasa Melayu\', u\'name\' : \'Malay\'},\n-u\'mt\' : {u\'native\' : \'Malti\', u\'name\' : \'Maltese\',                              u\'flag\' : u\'/++resource++country-flags/mt.gif\'},\n-u\'my\' : {u\'native\' : \'Burmese\', u\'name\' : \'Burmese\'},\n-u\'na\' : {u\'native\' : \'Nauru\', u\'name\' : \'Nauruan\',                              u\'flag\' : u\'/++resource++country-flags/nr.gif\'},\n-u\'nb\' : {u\'native\' : \'Norsk bokm\xc3\xa5l\', u\'name\' : \'Norwegian Bokm\xc3\xa5l\'},\n-u\'nd\' : {u\'native\' : \'Ndebele (North)\', u\'name\' : \'Ndebele (North)\'},\n-u\'ne\' : {u\'native\' : \'\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\', u\'name\' : \'Nepali\'},\n-u\'ng\' : {u\'native\' : \'Owambo\', u\'name\' : \'Ndonga\'},\n-u\'nl\' : {u\'native\' : \'Nederlands\', u\'name\' : \'Dutch\',                           u\'flag\' : u\'/++resource++country-flags/nl.gif\'},\n-u\'nn\' : {u\'native\' : \'Nynorsk\', u\'name\' : \'Nynorsk\',                            u\'flag\' : u\'/++resource++country-flags/no.gif\'},\n-u\'no\' : {u\'native\' : \'Norsk\', u\'name\' : \'Norwegian\',                            u\'flag\' : u\'/++resource++country-flags/no.gif\'},\n-u\'nr\' : {u\'native\' : \'IsiNdebele\', u\'name\' : \'Ndebele (South)\'},\n-u\'nv\' : {u\'native\' : \'Din\xc3\xa9 bizaad\', u\'name\' : \'Navajo\'},\n-u\'ny\' : {u\'native\' : \'chiChe\xc5\xb5a\', u\'name\' : \'Chichewa\'},\n-u\'oc\' : {u\'native\' : \'Occitan\', u\'name\' : \'Occitan\'},\n-u\'oj\' : {u\'native\' : \'\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90\', u\'name\' : \'Ojibwe\'},\n-u\'om\' : {u\'native\' : \'Oromo\', u\'name\' : \'Oromo\'},\n-u\'or\' : {u\'native\' : \'\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86\', u\'name\' : \'Oriya\'},\n-u\'os\' : {u\'native\' : \'\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3\', u\'name\' : \'Ossetian\'},\n-u\'pa\' : {u\'native\' : \'\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80\', u\'name\' : \'Punjabi\'},\n-u\'pi\' : {u\'native\' : \'\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf\', u\'name\' : \'P\xc4\x81li\'},\n-u\'pl\' : {u\'native\' : \'Polski\', u\'name\' : \'Polish\',                              u\'flag\' : u\'/++resource++country-flags/pl.gif\'},\n-u\'ps\' : {u\'native\' : \'\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88\', u\'name\' : \'Pashto\'},\n-u\'pt\' : {u\'native\' : \'Portugu\xc3\xaas\', u\'name\' : \'Portuguese\',                       u\'flag\' : u\'/++resource++country-flags/pt.gif\'},\n-u\'qu\' : {u\'native\' : \'Quechua\', u\'name\' : \'Quechua\'},\n-u\'rm\' : {u\'native\' : \'Rhaeto-Romance\', u\'name\' : \'Rhaeto-Romance\'},\n-u\'rn\' : {u\'native\' : \'Kirundi\', u\'name\' : \'Kirundi\'},\n-u\'ro\' : {u\'native\' : \'Rom\xc3\xa2n\xc4\x83\', u\'name\' : \'Romanian\',                            u\'flag\' : u\'/++resource++country-flags/ro.gif\'},\n-u\'ru\' : {u\'native\' : \'\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\', u\'name\' : \'Russian\',                            u\'flag\' : u\'/++resource++country-flags/ru.gif\'},\n-u\'rw\' : {u\'native\' : \'Kinyarwanda\', u\'name\' : \'Kinyarwanda\'},\n-u\'sa\' : {u\'native\' : \'\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4\', u\'name\' : \'Sanskrit\'},\n-u\'sc\' : {u\'native\' : \'sardu\', u\'name\' : \'Sardinian\'},\n-u\'sd\' : {u\'native\' : \'Sindhi\', u\'name\' : \'Sindhi\',                              u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'se\' : {u\'native\' : \'Northern S\xc3\xa1mi\', u\'name\' : \'Northern S\xc3\xa1mi\'},\n-u\'sg\' : {u\'native\' : \'Sangho\', u\'name\' : \'Sangho\',                              u\'flag\' : u\'/++resource++country-flags/cf.gif\'},\n-u\'sh\' : {u\'native\' : \'Serbo-Croatian\', u\'name\' : \'Serbo-Croatian\'},\n-u\'si\' : {u\'native\' : \'Singhalese\', u\'name\' : \'Singhalese\'},\n-u\'sk\' : {u\'native\' : \'Sloven\xc4\x8dina\', u\'name\' : \'Slovak\',                          u\'flag\' : u\'/++resource++country-flags/sk.gif\'},\n-u\'sl\' : {u\'native\' : \'Sloven\xc5\xa1\xc4\x8dina\', u\'name\' : \'Slovenian\',                      u\'flag\' : u\'/++resource++country-flags/si.gif\'},\n-u\'sm\' : {u\'native\' : \'Samoan\', u\'name\' : \'Samoan\'},\n-u\'sn\' : {u\'native\' : \'Shona\', u\'name\' : \'Shona\'},\n-u\'so\' : {u\'native\' : \'Somali\', u\'name\' : \'Somali\',                              u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'sq\' : {u\'native\' : \'Shqip\', u\'name\' : \'Albanian\',                             u\'flag\' : u\'/++resource++country-flags/al.gif\'},\n-u\'sr\' : {u\'native\' : \'\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8\', u\'name\' : \'Serbian\',                             u\'flag\' : u\'/++resource++country-flags/cs.gif\'},\n-u\'ss\' : {u\'native\' : \'SiSwati\', u\'name\' : \'Swati\'},\n-u\'st\' : {u\'native\' : \'Sesotho\', u\'name\' : \'Southern Sotho\'},\n-u\'su\' : {u\'native\' : \'Sudanese\', u\'name\' : \'Sudanese\',                          u\'flag\' : u\'/++resource++country-flags/sd.gif\'},\n-u\'sv\' : {u\'native\' : \'Svenska\', u\'name\' : \'Swedish\',                            u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sw\' : {u\'native\' : \'Kiswahili\', u\'name\' : \'Swahili\'},\n-u\'ta\' : {u\'native\' : \'\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\', u\'name\' : \'Tamil\'},\n-u\'te\' : {u\'native\' : \'\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\', u\'name\' : \'Telugu\'},\n-u\'tg\' : {u\'native\' : \'\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8\', u\'name\' : \'Tadjik\',                              u\'flag\' : u\'/++resource++country-flags/tj.gif\'},\n-u\'th\' : {u\'native\' : \'\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\', u\'name\' : \'Thai\',                                   u\'flag\' : u\'/++resource++country-flags/th.gif\'},\n-u\'ti\' : {u\'native\' : \'\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b\', u\'name\' : \'Tigrinya\'},\n-u\'tk\' : {u\'native\' : \'\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5\', u\'name\' : \'Turkmen\',                          u\'flag\' : u\'/++resource++country-flags/tm.gif\'},\n-u\'tl\' : {u\'native\' : \'Tagalog\', u\'name\' : \'Tagalog\'},\n-u\'tn\' : {u\'native\' : \'Setswana\', u\'name\' : \'Tswana\',                            u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'to\' : {u\'native\' : \'Tonga\', u\'name\' : \'Tonga\'},\n-u\'tr\' : {u\'native\' : \'T\xc3\xbcrk\xc3\xa7e\', u\'name\' : \'Turkish\',                             u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'ts\' : {u\'native\' : \'Xitsonga\', u\'name\' : \'Tsonga\'},\n-u\'tt\' : {u\'native\' : \'\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0\', u\'name\' : \'Tatar\'},\n-u\'tw\' : {u\'native\' : \'Twi\', u\'name\' : \'Twi\'},\n-u\'ty\' : {u\'native\' : \'Reo Tahiti\', u\'name\' : \'Tahitian\'},\n-u\'ug\' : {u\'native\' : \'Uigur\', u\'name\' : \'Uigur\'},\n-u\'uk\' : {u\'native\' : \'\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\', u\'name\' : \'Ukrainian\',                       u\'flag\' : u\'/++resource++country-flags/ua.gif\'},\n-u\'ur\' : {u\'native\' : \'\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\', u\'name\' : \'Urdu\'},\n-u\'uz\' : {u\'native\' : \'\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\', u\'name\' : \'Uzbek\',                              u\'flag\' : u\'/++resource++country-flags/uz.gif\'},\n-u\'ve\' : {u\'native\' : \'Tshiven\xe1\xb8\x93a\', u\'name\' : \'Venda\'},\n-u\'vi\' : {u\'native\' : \'Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t\', u\'name\' : \'Vietnamese\',                      u\'flag\' : u\'/++resource++country-flags/vn.gif\'},\n-u\'vk\' : {u\'native\' : \'Ovalingo\', u\'name\' : \'Viking\'},\n-u\'vo\' : {u\'native\' : \'Volap\xc3\xbck\', u\'name\' : \'Volap\xc3\xbck\'},\n-u\'wa\' : {u\'native\' : \'Walon\', u\'name\' : \'Walloon\'},\n-u\'wo\' : {u\'native\' : \'Wolof\', u\'name\' : \'Wolof\'},\n-u\'xh\' : {u\'native\' : \'IsiXhosa\', u\'name\' : \'Xhosa\'},\n-u\'yi\' : {u\'native\' : \'\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9\', u\'name\' : \'Yiddish\',                              u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'yo\' : {u\'native\' : \'Yor\xc3\xb9b\xc3\xa1\', u\'name\' : \'Yorouba\'},\n-u\'za\' : {u\'native\' : \'Zhuang\', u\'name\' : \'Zhuang\'},\n-u\'zh\' : {u\'native\' : \'\xe4\xb8\xad\xe6\x96\x87\', u\'name\' : \'Chinese\',                                 u\'flag\' : u\'/++resource++country-flags/cn.gif\'},\n-u\'zu\' : {u\'native\' : \'IsiZulu\', u\'name\' : \'Zulu\',                               u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n+    u\'aa\': {\n+        u\'native\': \'\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I\',\n+        u\'name\': \'Afar\',\n+        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    },\n+    u\'ab\': {\n+        u\'native\': \'\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0\',\n+        u\'name\': \'Abkhazian\',\n+        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n+    },\n+    u\'ae\': {u\'native\': \'avesta\', u\'name\': \'Avestan\'},\n+    u\'af\': {u\'native\': \'Afrikaans\', u\'name\': \'Afrikaans\'},\n+    u\'ak\': {u\'native\': \'Akan\', u\'name\': \'Akan\'},\n+    u\'am\': {u\'native\': \'\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Amharic\'},\n+    u\'an\': {u\'native\': \'aragon\xc3\xa9s\', u\'name\': \'Aragonese\'},\n+    u\'ar\': {\n+        u\'native\': \'\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\',\n+        u\'name\': \'Arabic\',\n+        u\'flag\': \'/++resource++language-flags/ar.gif\',\n+    },\n+    u\'as\': {u\'native\': \'\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe\', u\'name\': \'Assamese\'},\n+    u\'ay\': {u\'native\': \'Aymara\', u\'name\': \'Aymara\'},\n+    u\'az\': {\n+        u\'native\': \'Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si\',\n+        u\'name\': \'Azerbaijani\',\n+        u\'flag\': u\'/++resource++country-flags/az.gif\',\n+    },\n+    u\'ba\': {u\'native\': \'Bashkir\', u\'name\': \'Bashkir\'},\n+    u\'be\': {\n+        u\'native\': \'\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96\',\n+        u\'name\': \'Belarussian\',\n+        u\'flag\': u\'/++resource++country-flags/by.gif\',\n+    },\n+    u\'bg\': {\n+        u\'native\': \'\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Bulgarian\',\n+        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n+    },\n+    u\'bh\': {u\'native\': \'Bihari\', u\'name\': \'Bihari\'},\n+    u\'bi\': {u\'native\': \'Bislama\', u\'name\': \'Bislama\'},\n+    u\'bm\': {u\'native\': \'bamanankan\', u\'name\': \'Bambara\'},\n+    u\'bn\': {\n+        u\'native\': \'\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\',\n+        u\'name\': \'Bengali\',\n+        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n+    },\n+    u\'bo\': {u\'native\': \'\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b\', u\'name\': \'Tibetan\'},\n+    u\'br\': {u\'native\': \'brezhoneg\', u\'name\': \'Breton\'},\n+    u\'bs\': {\n+        u\'native\': \'Bosanski\',\n+        u\'name\': \'Bosnian\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'ca\': {\n+        u\'native\': \'Catal\xc3\xa0\',\n+        u\'name\': \'Catalan\',\n+        u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+    },\n+    u\'ce\': {u\'native\': \'\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82\', u\'name\': \'Chechen\'},\n+    u\'ch\': {u\'native\': \'Chamoru\', u\'name\': \'Chamorro\'},\n+    u\'co\': {u\'native\': \'Corsu\', u\'name\': \'Corsican\'},\n+    u\'cr\': {u\'native\': \'\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3\', u\'name\': \'Cree\'},\n+    u\'cs\': {\n+        u\'native\': \'\xc4\x8ce\xc5\xa1tina\',\n+        u\'name\': \'Czech\',\n+        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n+    },\n+    u\'cu\': {u\'native\': \'\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a\', u\'name\': \'Old Church Slavonic\'},\n+    u\'cv\': {u\'native\': \'\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8\', u\'name\': \'Chuvash\'},\n+    u\'cy\': {\n+        u\'native\': \'Cymraeg\',\n+        u\'name\': \'Welsh\',\n+        u\'flag\': \'/++resource++language-flags/cy.gif\',\n+    },\n+    u\'da\': {\n+        u\'native\': \'Dansk\',\n+        u\'name\': \'Danish\',\n+        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n+    },\n+    u\'de\': {\n+        u\'native\': \'Deutsch\',\n+        u\'name\': \'German\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'dv\': {u\'native\': \'Divehi\', u\'name\': \'Maldivian\'},\n+    u\'dz\': {u\'native\': \'Bhutani\', u\'name\': \'Indian Bhutani\'},\n+    u\'ee\': {u\'native\': \'E\xca\x8begbe\', u\'name\': \'Ewe\'},\n+    u\'el\': {\n+        u\'native\': \'\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\',\n+        u\'name\': \'Greek\',\n+        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n+    },\n+    u\'en\': {\n+        u\'native\': \'English\',\n+        u\'name\': \'English\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'eo\': {\n+        u\'native\': \'Esperanto\',\n+        u\'name\': \'Esperanto\',\n+        u\'flag\': \'/++resource++language-flags/eo.gif\',\n+    },\n+    u\'es\': {\n+        u\'native\': \'Espa\xc3\xb1ol\',\n+        u\'name\': \'Spanish\',\n+        u\'flag\': u\'/++resource++country-flags/es.gif\',\n+    },\n+    u\'et\': {\n+        u\'native\': \'Eesti\',\n+        u\'name\': \'Estonian\',\n+        u\'flag\': u\'/++resource++country-flags/ee.gif\',\n+    },\n+    u\'eu\': {\n+        u\'native\': \'Euskara\',\n+        u\'name\': \'Basque\',\n+        u\'flag\': \'/++resource++language-flags/eu.gif\',\n+    },\n+    u\'fa\': {u\'native\': \'\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\', u\'name\': \'Persian\'},\n+    u\'ff\': {u\'native\': \'Fulfulde\', u\'name\': \'Fula\'},\n+    u\'fi\': {\n+        u\'native\': \'Suomi\',\n+        u\'name\': \'Finnish\',\n+        u\'flag\': u\'/++resource++country-flags/fi.gif\',\n+    },\n+    u\'fj\': {\n+        u\'native\': \'Fiji\',\n+        u\'name\': \'Fiji\',\n+        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n+    },\n+    u\'fo\': {\n+        u\'native\': \'F\xc3\xb8royska\',\n+        u\'name\': \'Faroese\',\n+        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n+    },\n+    u\'fr\': {\n+        u\'native\': \'Fran\xc3\xa7ais\',\n+        u\'name\': \'French\',\n+        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n+    },\n+    u\'fy\': {u\'native\': \'Frysk\', u\'name\': \'Frisian\'},\n+    u\'ga\': {u\'native\': \'Gaeilge\', u\'name\': \'Irish Gaelic\'},\n+    u\'gd\': {u\'native\': \'G\xc3\xa0idhlig\', u\'name\': \'Scottish Gaelic\'},\n+    u\'gl\': {u\'native\': \'Galego\', u\'name\': \'Galician\'},\n+    u\'gn\': {u\'native\': \'Guarani\', u\'name\': \'Guarani\'},\n+    u\'gu\': {u\'native\': \'\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\', u\'name\': \'Gujarati\'},\n+    u\'gv\': {u\'native\': \'Gaelg\', u\'name\': \'Manx Gaelic\'},\n+    u\'ha\': {u\'native\': \'\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3\', u\'name\': \'Hausa\'},\n+    u\'he\': {\n+        u\'native\': \'\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\',\n+        u\'name\': \'Hebrew\',\n+        u\'flag\': u\'/++resource++country-flags/il.gif\',\n+    },\n+    u\'hi\': {\n+        u\'native\': \'\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80\',\n+        u\'name\': \'Hindi\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ho\': {u\'native\': \'Hiri Motu\', u\'name\': \'Hiri Motu\'},\n+    u\'hr\': {\n+        u\'native\': \'Hrvatski\',\n+        u\'name\': \'Croatian\',\n+        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n+    },\n+    u\'ht\': {u\'native\': \'Krey\xc3\xb2l ayisyen\', u\'name\': \'Haitian\'},\n+    u\'hu\': {\n+        u\'native\': \'Magyar\',\n+        u\'name\': \'Hungarian\',\n+        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n+    },\n+    u\'hy\': {\n+        u\'native\': \'\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6\',\n+        u\'name\': \'Armenian\',\n+        u\'flag\': u\'/++resource++country-flags/am.gif\',\n+    },\n+    u\'hz\': {u\'native\': \'Otjiherero\', u\'name\': \'Herero\'},\n+    u\'ia\': {u\'native\': \'Interlingua\', u\'name\': \'Interlingua\'},\n+    u\'id\': {\n+        u\'native\': \'Bahasa Indonesia\',\n+        u\'name\': \'Indonesian\',\n+        u\'flag\': u\'/++resource++country-flags/id.gif\',\n+    },\n+    u\'ie\': {u\'native\': \'Interlingue\', u\'name\': \'Interlingue\'},\n+    u\'ig\': {u\'native\': \'As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo\', u\'name\': \'Igbo\'},\n+    u\'ii\': {u\'native\': \'Nuosu\', u\'name\': \'Nuosu\'},\n+    u\'ik\': {u\'native\': \'I\xc3\xb1upiaq\', u\'name\': \'Inupiak\'},\n+    u\'io\': {u\'native\': \'Ido\', u\'name\': \'Ido\'},\n+    u\'is\': {\n+        u\'native\': \'\xc3\x8dslenska\',\n+        u\'name\': \'Icelandic\',\n+        u\'flag\': u\'/++resource++country-flags/is.gif\',\n+    },\n+    u\'it\': {\n+        u\'native\': \'Italiano\',\n+        u\'name\': \'Italian\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'iu\': {u\'native\': \'\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6\', u\'name\': \'Inuktitut\'},\n+    u\'ja\': {\n+        u\'native\': \'\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\',\n+        u\'name\': \'Japanese\',\n+        u\'flag\': u\'/++resource++country-flags/jp.gif\',\n+    },\n+    u\'jv\': {u\'native\': \'Javanese\', u\'name\': \'basa Jawa\'},\n+    u\'ka\': {\n+        u\'native\': \'\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\',\n+        u\'name\': \'Georgian\',\n+        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n+    },\n+    u\'kg\': {u\'native\': \'KiKongo\', u\'name\': \'Kongo\'},\n+    u\'ki\': {u\'native\': \'G\xc4\xa9k\xc5\xa9y\xc5\xa9\', u\'name\': \'Kikuyu\'},\n+    u\'kj\': {u\'native\': \'Kuanyama\', u\'name\': \'Kwanyama\'},\n+    u\'kk\': {\n+        u\'native\': \'\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e\',\n+        u\'name\': \'Kazakh\',\n+        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n+    },\n+    u\'kl\': {\n+        u\'native\': \'Greenlandic\',\n+        u\'name\': \'Greenlandic\',\n+        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n+    },\n+    u\'km\': {\n+        u\'native\': \'\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\',\n+        u\'name\': \'Cambodian/Khmer\',\n+        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n+    },\n+    u\'kn\': {\n+        u\'native\': \'\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1\',\n+        u\'name\': \'Kannada\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ko\': {\n+        u\'native\': \'\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\',\n+        u\'name\': \'Korean\',\n+        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n+    },\n+    u\'kr\': {u\'native\': \'Kanuri\', u\'name\': \'Kanuri\'},\n+    u\'ks\': {\n+        u\'native\': \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0\',\n+        u\'name\': \'Kashmiri\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ku\': {u\'native\': \'Kurd\xc3\xad\', u\'name\': \'Kurdish\'},\n+    u\'kv\': {u\'native\': \'\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2\', u\'name\': \'Komi\'},\n+    u\'kw\': {u\'native\': \'Kernewek\', u\'name\': \'Cornish\'},\n+    u\'ky\': {u\'native\': \'\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\', u\'name\': \'Kirghiz\'},\n+    u\'la\': {\n+        u\'native\': \'Latin\',\n+        u\'name\': \'Latin\',\n+        u\'flag\': u\'/++resource++country-flags/va.gif\',\n+    },\n+    u\'lb\': {\n+        u\'native\': \'L\xc3\xabtzebuergesch\',\n+        u\'name\': \'Luxemburgish\',\n+        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    },\n+    u\'lg\': {u\'native\': \'Luganda\', u\'name\': \'Ganda\'},\n+    u\'li\': {u\'native\': \'Limburgs\', u\'name\': \'Limburgish\'},\n+    u\'ln\': {u\'native\': \'Lingala\', u\'name\': \'Lingala\'},\n+    u\'lo\': {\n+        u\'native\': \'\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7\',\n+        u\'name\': \'Laotian\',\n+        u\'flag\': u\'/++resource++country-flags/la.gif\',\n+    },\n+    u\'lt\': {\n+        u\'native\': \'Lietuviskai\',\n+        u\'name\': \'Lithuanian\',\n+        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n+    },\n+    u\'lu\': {u\'native\': \'Tshiluba\', u\'name\': \'Luba-Katanga\'},\n+    u\'lv\': {\n+        u\'native\': \'Latvie\xc5\xa1u\',\n+        u\'name\': \'Latvian\',\n+        u\'flag\': u\'/++resource++country-flags/lv.gif\',\n+    },\n+    u\'mg\': {\n+        u\'native\': \'Malagasy\',\n+        u\'name\': \'Madagascarian\',\n+        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    },\n+    u\'mh\': {u\'native\': \'Kajin M\xcc\xa7aje\xc4\xbc\', u\'name\': \'Marshallese\'},\n+    u\'mi\': {u\'native\': \'Maori\', u\'name\': \'Maori\'},\n+    u\'mk\': {\n+        u\'native\': \'\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Macedonian\',\n+        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n+    },\n+    u\'ml\': {u\'native\': \'\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\', u\'name\': \'Malayalam\'},\n+    u\'mn\': {\n+        u\'native\': \'\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\',\n+        u\'name\': \'Mongolian\',\n+        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n+    },\n+    u\'mo\': {\n+        u\'native\': \'Moldavian\',\n+        u\'name\': \'Moldavian\',\n+        u\'flag\': u\'/++resource++country-flags/md.gif\',\n+    },\n+    u\'mr\': {u\'native\': \'\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\', u\'name\': \'Marathi\'},\n+    u\'ms\': {u\'native\': \'Bahasa Melayu\', u\'name\': \'Malay\'},\n+    u\'mt\': {\n+        u\'native\': \'Malti\',\n+        u\'name\': \'Maltese\',\n+        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n+    },\n+    u\'my\': {u\'native\': \'Burmese\', u\'name\': \'Burmese\'},\n+    u\'na\': {\n+        u\'native\': \'Nauru\',\n+        u\'name\': \'Nauruan\',\n+        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n+    },\n+    u\'nb\': {u\'native\': \'Norsk bokm\xc3\xa5l\', u\'name\': \'Norwegian Bokm\xc3\xa5l\'},\n+    u\'nd\': {u\'native\': \'Ndebele (North)\', u\'name\': \'Ndebele (North)\'},\n+    u\'ne\': {u\'native\': \'\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\', u\'name\': \'Nepali\'},\n+    u\'ng\': {u\'native\': \'Owambo\', u\'name\': \'Ndonga\'},\n+    u\'nl\': {\n+        u\'native\': \'Nederlands\',\n+        u\'name\': \'Dutch\',\n+        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n+    },\n+    u\'nn\': {\n+        u\'native\': \'Nynorsk\',\n+        u\'name\': \'Nynorsk\',\n+        u\'flag\': u\'/++resource++country-flags/no.gif\',\n+    },\n+    u\'no\': {\n+        u\'native\': \'Norsk\',\n+        u\'name\': \'Norwegian\',\n+        u\'flag\': u\'/++resource++country-flags/no.gif\',\n+    },\n+    u\'nr\': {u\'native\': \'IsiNdebele\', u\'name\': \'Ndebele (South)\'},\n+    u\'nv\': {u\'native\': \'Din\xc3\xa9 bizaad\', u\'name\': \'Navajo\'},\n+    u\'ny\': {u\'native\': \'chiChe\xc5\xb5a\', u\'name\': \'Chichewa\'},\n+    u\'oc\': {u\'native\': \'Occitan\', u\'name\': \'Occitan\'},\n+    u\'oj\': {u\'native\': \'\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90\', u\'name\': \'Ojibwe\'},\n+    u\'om\': {u\'native\': \'Oromo\', u\'name\': \'Oromo\'},\n+    u\'or\': {u\'native\': \'\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86\', u\'name\': \'Oriya\'},\n+    u\'os\': {u\'native\': \'\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3\', u\'name\': \'Ossetian\'},\n+    u\'pa\': {u\'native\': \'\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80\', u\'name\': \'Punjabi\'},\n+    u\'pi\': {u\'native\': \'\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf\', u\'name\': \'P\xc4\x81li\'},\n+    u\'pl\': {\n+        u\'native\': \'Polski\',\n+        u\'name\': \'Polish\',\n+        u\'flag\': u\'/++resource++country-flags/pl.gif\',\n+    },\n+    u\'ps\': {u\'native\': \'\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88\', u\'name\': \'Pashto\'},\n+    u\'pt\': {\n+        u\'native\': \'Portugu\xc3\xaas\',\n+        u\'name\': \'Portuguese\',\n+        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n+    },\n+    u\'qu\': {u\'native\': \'Quechua\', u\'name\': \'Quechua\'},\n+    u\'rm\': {u\'native\': \'Rhaeto-Romance\', u\'name\': \'Rhaeto-Romance\'},\n+    u\'rn\': {u\'native\': \'Kirundi\', u\'name\': \'Kirundi\'},\n+    u\'ro\': {\n+        u\'native\': \'Rom\xc3\xa2n\xc4\x83\',\n+        u\'name\': \'Romanian\',\n+        u\'flag\': u\'/++resource++country-flags/ro.gif\',\n+    },\n+    u\'ru\': {\n+        u\'native\': \'\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\',\n+        u\'name\': \'Russian\',\n+        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n+    },\n+    u\'rw\': {u\'native\': \'Kinyarwanda\', u\'name\': \'Kinyarwanda\'},\n+    u\'sa\': {u\'native\': \'\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4\', u\'name\': \'Sanskrit\'},\n+    u\'sc\': {u\'native\': \'sardu\', u\'name\': \'Sardinian\'},\n+    u\'sd\': {\n+        u\'native\': \'Sindhi\',\n+        u\'name\': \'Sindhi\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'se\': {u\'native\': \'Northern S\xc3\xa1mi\', u\'name\': \'Northern S\xc3\xa1mi\'},\n+    u\'sg\': {\n+        u\'native\': \'Sangho\',\n+        u\'name\': \'Sangho\',\n+        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    },\n+    u\'sh\': {u\'native\': \'Serbo-Croatian\', u\'name\': \'Serbo-Croatian\'},\n+    u\'si\': {u\'native\': \'Singhalese\', u\'name\': \'Singhalese\'},\n+    u\'sk\': {\n+        u\'native\': \'Sloven\xc4\x8dina\',\n+        u\'name\': \'Slovak\',\n+        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n+    },\n+    u\'sl\': {\n+        u\'native\': \'Sloven\xc5\xa1\xc4\x8dina\',\n+        u\'name\': \'Slovenian\',\n+        u\'flag\': u\'/++resource++country-flags/si.gif\',\n+    },\n+    u\'sm\': {u\'native\': \'Samoan\', u\'name\': \'Samoan\'},\n+    u\'sn\': {u\'native\': \'Shona\', u\'name\': \'Shona\'},\n+    u\'so\': {\n+        u\'native\': \'Somali\',\n+        u\'name\': \'Somali\',\n+        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    },\n+    u\'sq\': {\n+        u\'native\': \'Shqip\',\n+        u\'name\': \'Albanian\',\n+        u\'flag\': u\'/++resource++country-flags/al.gif\',\n+    },\n+    u\'sr\': {\n+        u\'native\': \'\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Serbian\',\n+        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n+    },\n+    u\'ss\': {u\'native\': \'SiSwati\', u\'name\': \'Swati\'},\n+    u\'st\': {u\'native\': \'Sesotho\', u\'name\': \'Southern Sotho\'},\n+    u\'su\': {\n+        u\'native\': \'Sudanese\',\n+        u\'name\': \'Sudanese\',\n+        u\'flag\': u\'/++resource++country-flags/sd.gif\',\n+    },\n+    u\'sv\': {\n+        u\'native\': \'Svenska\',\n+        u\'name\': \'Swedish\',\n+        u\'flag\': u\'/++resource++country-flags/se.gif\',\n+    },\n+    u\'sw\': {u\'native\': \'Kiswahili\', u\'name\': \'Swahili\'},\n+    u\'ta\': {u\'native\': \'\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\', u\'name\': \'Tamil\'},\n+    u\'te\': {u\'native\': \'\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\', u\'name\': \'Telugu\'},\n+    u\'tg\': {\n+        u\'native\': \'\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Tadjik\',\n+        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n+    },\n+    u\'th\': {\n+        u\'native\': \'\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\',\n+        u\'name\': \'Thai\',\n+        u\'flag\': u\'/++resource++country-flags/th.gif\',\n+    },\n+    u\'ti\': {u\'native\': \'\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Tigrinya\'},\n+    u\'tk\': {\n+        u\'native\': \'\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5\',\n+        u\'name\': \'Turkmen\',\n+        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n+    },\n+    u\'tl\': {u\'native\': \'Tagalog\', u\'name\': \'Tagalog\'},\n+    u\'tn\': {\n+        u\'native\': \'Setswana\',\n+        u\'name\': \'Tswana\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'to\': {u\'native\': \'Tonga\', u\'name\': \'Tonga\'},\n+    u\'tr\': {\n+        u\'native\': \'T\xc3\xbcrk\xc3\xa7e\',\n+        u\'name\': \'Turkish\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'ts\': {u\'native\': \'Xitsonga\', u\'name\': \'Tsonga\'},\n+    u\'tt\': {u\'native\': \'\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0\', u\'name\': \'Tatar\'},\n+    u\'tw\': {u\'native\': \'Twi\', u\'name\': \'Twi\'},\n+    u\'ty\': {u\'native\': \'Reo Tahiti\', u\'name\': \'Tahitian\'},\n+    u\'ug\': {u\'native\': \'Uigur\', u\'name\': \'Uigur\'},\n+    u\'uk\': {\n+        u\'native\': \'\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\',\n+        u\'name\': \'Ukrainian\',\n+        u\'flag\': u\'/++resource++country-flags/ua.gif\',\n+    },\n+    u\'ur\': {u\'native\': \'\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\', u\'name\': \'Urdu\'},\n+    u\'uz\': {\n+        u\'native\': \'\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\',\n+        u\'name\': \'Uzbek\',\n+        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n+    },\n+    u\'ve\': {u\'native\': \'Tshiven\xe1\xb8\x93a\', u\'name\': \'Venda\'},\n+    u\'vi\': {\n+        u\'native\': \'Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t\',\n+        u\'name\': \'Vietnamese\',\n+        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n+    },\n+    u\'vk\': {u\'native\': \'Ovalingo\', u\'name\': \'Viking\'},\n+    u\'vo\': {u\'native\': \'Volap\xc3\xbck\', u\'name\': \'Volap\xc3\xbck\'},\n+    u\'wa\': {u\'native\': \'Walon\', u\'name\': \'Walloon\'},\n+    u\'wo\': {u\'native\': \'Wolof\', u\'name\': \'Wolof\'},\n+    u\'xh\': {u\'native\': \'IsiXhosa\', u\'name\': \'Xhosa\'},\n+    u\'yi\': {\n+        u\'native\': \'\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9\',\n+        u\'name\': \'Yiddish\',\n+        u\'flag\': u\'/++resource++country-flags/il.gif\',\n+    },\n+    u\'yo\': {u\'native\': \'Yor\xc3\xb9b\xc3\xa1\', u\'name\': \'Yorouba\'},\n+    u\'za\': {u\'native\': \'Zhuang\', u\'name\': \'Zhuang\'},\n+    u\'zh\': {\n+        u\'native\': \'\xe4\xb8\xad\xe6\x96\x87\',\n+        u\'name\': \'Chinese\',\n+        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n+    },\n+    u\'zu\': {\n+        u\'native\': \'IsiZulu\',\n+        u\'name\': \'Zulu\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n }\n \n # convert the utf-8 encoded values to unicode\n@@ -263,232 +577,923 @@ class MetadataLanguageAvailability(LanguageAvailability):\n             value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n \n _combinedlanguagelist = {\n-u\'ar-ae\' : {u\'name\' : \'Arabic (United Arab Emirates)\',                          u\'flag\' : u\'/++resource++country-flags/ae.gif\'},\n-u\'ar-bh\' : {u\'name\' : \'Arabic (Bahrain)\',                                       u\'flag\' : u\'/++resource++country-flags/bh.gif\'},\n-u\'ar-dz\' : {u\'name\' : \'Arabic (Algeria)\',                                       u\'flag\' : u\'/++resource++country-flags/dz.gif\'},\n-u\'ar-eg\' : {u\'name\' : \'Arabic (Egypt)\',                                         u\'flag\' : u\'/++resource++country-flags/eg.gif\'},\n-u\'ar-il\' : {u\'name\' : \'Arabic (Israel)\',                                        u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'ar-iq\' : {u\'name\' : \'Arabic (Iraq)\',                                          u\'flag\' : u\'/++resource++country-flags/iq.gif\'},\n-u\'ar-jo\' : {u\'name\' : \'Arabic (Jordan)\',                                        u\'flag\' : u\'/++resource++country-flags/jo.gif\'},\n-u\'ar-kw\' : {u\'name\' : \'Arabic (Kuwait)\',                                        u\'flag\' : u\'/++resource++country-flags/kw.gif\'},\n-u\'ar-lb\' : {u\'name\' : \'Arabic (Lebanon)\',                                       u\'flag\' : u\'/++resource++country-flags/lb.gif\'},\n-u\'ar-ly\' : {u\'name\' : \'Arabic (Libya)\',                                         u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ar-ma\' : {u\'name\' : \'Arabic (Morocco)\',                                       u\'flag\' : u\'/++resource++country-flags/ma.gif\'},\n-u\'ar-mr\' : {u\'name\' : \'Arabic (Mauritania)\',                                    u\'flag\' : u\'/++resource++country-flags/mr.gif\'},\n-u\'ar-om\' : {u\'name\' : \'Arabic (Oman)\',                                          u\'flag\' : u\'/++resource++country-flags/om.gif\'},\n-u\'ar-ps\' : {u\'name\' : \'Arabic (Palestinian West Bank and Gaza)\',                u\'flag\' : u\'/++resource++country-flags/ps.gif\'},\n-u\'ar-qa\' : {u\'name\' : \'Arabic (Qatar)\',                                         u\'flag\' : u\'/++resource++country-flags/qa.gif\'},\n-u\'ar-sa\' : {u\'name\' : \'Arabic (Saudi Arabia)\',                                  u\'flag\' : u\'/++resource++country-flags/sa.gif\'},\n-u\'ar-sd\' : {u\'name\' : \'Arabic (Sudan)\',                                         u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ar-so\' : {u\'name\' : \'Arabic (Somalia)\',                                       u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'ar-sy\' : {u\'name\' : \'Arabic (Syria)\',                                         u\'flag\' : u\'/++resource++country-flags/sy.gif\'},\n-u\'ar-td\' : {u\'name\' : \'Arabic (Chad)\',                                          u\'flag\' : u\'/++resource++country-flags/td.gif\'},\n-u\'ar-tn\' : {u\'name\' : \'Arabic (Tunisia)\',                                       u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ar-ye\' : {u\'name\' : \'Arabic (Yemen)\',                                         u\'flag\' : u\'/++resource++country-flags/ye.gif\'},\n-u\'bn-bd\' : {u\'name\' : \'Bengali (Bangladesh)\',                                   u\'flag\' : u\'/++resource++country-flags/bd.gif\'},\n-u\'bn-in\' : {u\'name\' : \'Bengali (India)\',                                        u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'bn-sg\' : {u\'name\' : \'Bengali (Singapore)\',                                    u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'ch-gu\' : {u\'name\' : \'Chamorro (Guam)\',                                        u\'flag\' : u\'/++resource++country-flags/gu.gif\'},\n-u\'ch-mp\' : {u\'name\' : \'Chamorro (Northern Mariana Islands)\',                    u\'flag\' : u\'/++resource++country-flags/mp.gif\'},\n-u\'cs-cz\' : {u\'name\' : \'Czech (Czech republic)\', u\'native\': \'\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)\', u\'flag\' : u\'/++resource++country-flags/cz.gif\'},\n-u\'da-dk\' : {u\'name\' : \'Danish (Denmark)\',                                       u\'flag\' : u\'/++resource++country-flags/dk.gif\'},\n-u\'da-gl\' : {u\'name\' : \'Danish (Greenland)\',                                     u\'flag\' : u\'/++resource++country-flags/gl.gif\'},\n-u\'de-at\' : {u\'name\' : \'German (Austria)\', u\'native\' : \'Deutsch (\xc3\x96sterreich)\',   u\'flag\' : u\'/++resource++country-flags/at.gif\'},\n-u\'de-be\' : {u\'name\' : \'German (Belgium)\',                                       u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'de-ch\' : {u\'name\' : \'German (Switzerland)\',                                   u\'flag\' : u\'/++resource++country-flags/ch.gif\'},\n-u\'de-de\' : {u\'name\' : \'German (Germany)\',                                       u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'de-dk\' : {u\'name\' : \'German (Denmark)\',                                       u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'de-li\' : {u\'name\' : \'German (Liechtenstein)\',                                 u\'flag\' : u\'/++resource++country-flags/li.gif\'},\n-u\'de-lu\' : {u\'name\' : \'German (Luxembourg)\',                                    u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'el-cy\' : {u\'name\' : \'Greek (Cyprus)\',                                         u\'flag\' : u\'/++resource++country-flags/cy.gif\'},\n-u\'el-gr\' : {u\'name\' : \'Greek (Greece)\',                                         u\'flag\' : u\'/++resource++country-flags/gr.gif\'},\n-u\'en-ag\' : {u\'name\' : \'English (Antigua and Barbuda)\',                          u\'flag\' : u\'/++resource++country-flags/ag.gif\'},\n-u\'en-ai\' : {u\'name\' : \'English (Anguilla)\',                                     u\'flag\' : u\'/++resource++country-flags/ai.gif\'},\n-u\'en-as\' : {u\'name\' : \'English (American Samoa)\',                               u\'flag\' : u\'/++resource++country-flags/as.gif\'},\n-u\'en-au\' : {u\'name\' : \'English (Australia)\',                                    u\'flag\' : u\'/++resource++country-flags/au.gif\'},\n-u\'en-bb\' : {u\'name\' : \'English (Barbados)\',                                     u\'flag\' : u\'/++resource++country-flags/bb.gif\'},\n-u\'en-bm\' : {u\'name\' : \'English (Bermuda)\',                                      u\'flag\' : u\'/++resource++country-flags/bm.gif\'},\n-u\'en-bn\' : {u\'name\' : \'English (Brunei)\',                                       u\'flag\' : u\'/++resource++country-flags/bn.gif\'},\n-u\'en-bs\' : {u\'name\' : \'English (Bahamas)\',                                      u\'flag\' : u\'/++resource++country-flags/bs.gif\'},\n-u\'en-bw\' : {u\'name\' : \'English (Botswana)\',                                     u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'en-bz\' : {u\'name\' : \'English (Belize)\',                                       u\'flag\' : u\'/++resource++country-flags/bz.gif\'},\n-u\'en-ca\' : {u\'name\' : \'English (Canada)\',                                       u\'flag\' : u\'/++resource++country-flags/ca.gif\'},\n-u\'en-ck\' : {u\'name\' : \'English (Cook Islands)\',                                 u\'flag\' : u\'/++resource++country-flags/ck.gif\'},\n-u\'en-cm\' : {u\'name\' : \'English (Cameroon)\',                                     u\'flag\' : u\'/++resource++country-flags/cm.gif\'},\n-u\'en-dm\' : {u\'name\' : \'English (Dominica)\',                                     u\'flag\' : u\'/++resource++country-flags/dm.gif\'},\n-u\'en-er\' : {u\'name\' : \'English (Eritrea)\',                                      u\'flag\' : u\'/++resource++country-flags/er.gif\'},\n-u\'en-et\' : {u\'name\' : \'English (Ethiopia)\',                                     u\'flag\' : u\'/++resource++country-flags/et.gif\'},\n-u\'en-fj\' : {u\'name\' : \'English (Fiji)\',                                         u\'flag\' : u\'/++resource++country-flags/fj.gif\'},\n-u\'en-fk\' : {u\'name\' : \'English (Falkland Islands)\',                             u\'flag\' : u\'/++resource++country-flags/fk.gif\'},\n-u\'en-fm\' : {u\'name\' : \'English (Micronesia)\',                                   u\'flag\' : u\'/++resource++country-flags/fm.gif\'},\n-u\'en-gb\' : {u\'name\' : \'English (United Kingdom)\',                               u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'en-gd\' : {u\'name\' : \'English (Grenada)\',                                      u\'flag\' : u\'/++resource++country-flags/gd.gif\'},\n-u\'en-gh\' : {u\'name\' : \'English (Ghana)\',                                        u\'flag\' : u\'/++resource++country-flags/gh.gif\'},\n-u\'en-gi\' : {u\'name\' : \'English (Gibraltar)\',                                    u\'flag\' : u\'/++resource++country-flags/gi.gif\'},\n-u\'en-gm\' : {u\'name\' : \'English (Gambia)\',                                       u\'flag\' : u\'/++resource++country-flags/gm.gif\'},\n-u\'en-gu\' : {u\'name\' : \'English (Guam)\',                                         u\'flag\' : u\'/++resource++country-flags/gu.gif\'},\n-u\'en-gy\' : {u\'name\' : \'English (Guyana)\',                                       u\'flag\' : u\'/++resource++country-flags/gy.gif\'},\n-u\'en-ie\' : {u\'name\' : \'English (Ireland)\',                                      u\'flag\' : u\'/++resource++country-flags/ie.gif\'},\n-u\'en-il\' : {u\'name\' : \'English (Israel)\',                                       u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'en-io\' : {u\'name\' : \'English (British Indian Ocean Territory)\',               u\'flag\' : u\'/++resource++country-flags/io.gif\'},\n-u\'en-jm\' : {u\'name\' : \'English (Jamaica)\',                                      u\'flag\' : u\'/++resource++country-flags/jm.gif\'},\n-u\'en-ke\' : {u\'name\' : \'English (Kenya)\',                                        u\'flag\' : u\'/++resource++country-flags/ke.gif\'},\n-u\'en-ki\' : {u\'name\' : \'English (Kiribati)\',                                     u\'flag\' : u\'/++resource++country-flags/ki.gif\'},\n-u\'en-kn\' : {u\'name\' : \'English (St. Kitts-Nevis)\',                              u\'flag\' : u\'/++resource++country-flags/kn.gif\'},\n-u\'en-ky\' : {u\'name\' : \'English (Cayman Islands)\',                               u\'flag\' : u\'/++resource++country-flags/ky.gif\'},\n-u\'en-lc\' : {u\'name\' : \'English (St. Lucia)\',                                    u\'flag\' : u\'/++resource++country-flags/lc.gif\'},\n-u\'en-lr\' : {u\'name\' : \'English (Liberia)\',                                      u\'flag\' : u\'/++resource++country-flags/lr.gif\'},\n-u\'en-ls\' : {u\'name\' : \'English (Lesotho)\',                                      u\'flag\' : u\'/++resource++country-flags/ls.gif\'},\n-u\'en-mp\' : {u\'name\' : \'English (Northern Mariana Islands)\',                     u\'flag\' : u\'/++resource++country-flags/mp.gif\'},\n-u\'en-ms\' : {u\'name\' : \'English (Montserrat)\',                                   u\'flag\' : u\'/++resource++country-flags/ms.gif\'},\n-u\'en-mt\' : {u\'name\' : \'English (Malta)\',                                        u\'flag\' : u\'/++resource++country-flags/mt.gif\'},\n-u\'en-mu\' : {u\'name\' : \'English (Mauritius)\',                                    u\'flag\' : u\'/++resource++country-flags/mu.gif\'},\n-u\'en-mw\' : {u\'name\' : \'English (Malawi)\',                                       u\'flag\' : u\'/++resource++country-flags/mw.gif\'},\n-u\'en-na\' : {u\'name\' : \'English (Namibia)\',                                      u\'flag\' : u\'/++resource++country-flags/na.gif\'},\n-u\'en-nf\' : {u\'name\' : \'English (Norfolk Island)\',                               u\'flag\' : u\'/++resource++country-flags/nf.gif\'},\n-u\'en-ng\' : {u\'name\' : \'English (Nigeria)\',                                      u\'flag\' : u\'/++resource++country-flags/ng.gif\'},\n-u\'en-nr\' : {u\'name\' : \'English (Nauru)\',                                        u\'flag\' : u\'/++resource++country-flags/nr.gif\'},\n-u\'en-nu\' : {u\'name\' : \'English (Niue)\',                                         u\'flag\' : u\'/++resource++country-flags/nu.gif\'},\n-u\'en-nz\' : {u\'name\' : \'English (New Zealand)\',                                  u\'flag\' : u\'/++resource++country-flags/nz.gif\'},\n-u\'en-pg\' : {u\'name\' : \'English (Papua New Guinea)\',                             u\'flag\' : u\'/++resource++country-flags/pg.gif\'},\n-u\'en-ph\' : {u\'name\' : \'English (Philippines)\',                                  u\'flag\' : u\'/++resource++country-flags/ph.gif\'},\n-u\'en-pk\' : {u\'name\' : \'English (Pakistan)\',                                     u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'en-pn\' : {u\'name\' : \'English (Pitcairn)\',                                     u\'flag\' : u\'/++resource++country-flags/pn.gif\'},\n-u\'en-pr\' : {u\'name\' : \'English (Puerto Rico)\',                                  u\'flag\' : u\'/++resource++country-flags/pr.gif\'},\n-u\'en-pw\' : {u\'name\' : \'English (Palau)\',                                        u\'flag\' : u\'/++resource++country-flags/pw.gif\'},\n-u\'en-rw\' : {u\'name\' : \'English (Rwanda)\',                                       u\'flag\' : u\'/++resource++country-flags/rw.gif\'},\n-u\'en-sb\' : {u\'name\' : \'English (Solomon Islands)\',                              u\'flag\' : u\'/++resource++country-flags/sb.gif\'},\n-u\'en-sc\' : {u\'name\' : \'English (Seychelles)\',                                   u\'flag\' : u\'/++resource++country-flags/sc.gif\'},\n-u\'en-sg\' : {u\'name\' : \'English (Singapore)\',                                    u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'en-sh\' : {u\'name\' : \'English (St. Helena)\',                                   u\'flag\' : u\'/++resource++country-flags/sh.gif\'},\n-u\'en-sl\' : {u\'name\' : \'English (Sierra Leone)\',                                 u\'flag\' : u\'/++resource++country-flags/sl.gif\'},\n-u\'en-so\' : {u\'name\' : \'English (Somalia)\',                                      u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'en-sz\' : {u\'name\' : \'English (Swaziland)\',                                    u\'flag\' : u\'/++resource++country-flags/sz.gif\'},\n-u\'en-tc\' : {u\'name\' : \'English (Turks and Caicos Islands)\',                     u\'flag\' : u\'/++resource++country-flags/tc.gif\'},\n-u\'en-tk\' : {u\'name\' : \'English (Tokelau)\',                                      u\'flag\' : u\'/++resource++country-flags/tk.gif\'},\n-u\'en-to\' : {u\'name\' : \'English (Tonga)\',                                        u\'flag\' : u\'/++resource++country-flags/to.gif\'},\n-u\'en-tt\' : {u\'name\' : \'English (Trinidad and Tobago)\',                          u\'flag\' : u\'/++resource++country-flags/tt.gif\'},\n-u\'en-ug\' : {u\'name\' : \'English (Uganda)\',                                       u\'flag\' : u\'/++resource++country-flags/ug.gif\'},\n-u\'en-us\' : {u\'name\' : \'English (USA)\',                                          u\'flag\' : u\'/++resource++country-flags/us.gif\'},\n-u\'en-vc\' : {u\'name\' : \'English (St. Vincent and the Grenadi)\',                  u\'flag\' : u\'/++resource++country-flags/vc.gif\'},\n-u\'en-vg\' : {u\'name\' : \'English (British Virgin Islands)\',                       u\'flag\' : u\'/++resource++country-flags/vg.gif\'},\n-u\'en-vi\' : {u\'name\' : \'English (U.S. Virgin Islands)\',                          u\'flag\' : u\'/++resource++country-flags/vi.gif\'},\n-u\'en-vu\' : {u\'name\' : \'English (Vanuatu)\',                                      u\'flag\' : u\'/++resource++country-flags/vu.gif\'},\n-u\'en-ws\' : {u\'name\' : \'English (Western Samoa)\',                                u\'flag\' : u\'/++resource++country-flags/ws.gif\'},\n-u\'en-za\' : {u\'name\' : \'English (South Africa)\',                                 u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'en-zm\' : {u\'name\' : \'English (Zambia)\',                                       u\'flag\' : u\'/++resource++country-flags/zm.gif\'},\n-u\'en-zw\' : {u\'name\' : \'English (Zimbabwe)\',                                     u\'flag\' : u\'/++resource++country-flags/zw.gif\'},\n-u\'es-ar\' : {u\'name\' : \'Spanish (Argentina)\',                                    u\'flag\' : u\'/++resource++country-flags/ar.gif\'},\n-u\'es-bo\' : {u\'name\' : \'Spanish (Bolivia)\',                                      u\'flag\' : u\'/++resource++country-flags/bo.gif\'},\n-u\'es-cl\' : {u\'name\' : \'Spanish (Chile)\',                                        u\'flag\' : u\'/++resource++country-flags/cl.gif\'},\n-u\'es-co\' : {u\'name\' : \'Spanish (Colombia)\',                                     u\'flag\' : u\'/++resource++country-flags/co.gif\'},\n-u\'es-cr\' : {u\'name\' : \'Spanish (Costa Rica)\',                                   u\'flag\' : u\'/++resource++country-flags/cr.gif\'},\n-u\'es-cu\' : {u\'name\' : \'Spanish (Cuba)\',                                         u\'flag\' : u\'/++resource++country-flags/cu.gif\'},\n-u\'es-do\' : {u\'name\' : \'Spanish (Dominican Republic)\',                           u\'flag\' : u\'/++resource++country-flags/do.gif\'},\n-u\'es-ec\' : {u\'name\' : \'Spanish (Ecuador)\',                                      u\'flag\' : u\'/++resource++country-flags/ec.gif\'},\n-u\'es-es\' : {u\'name\' : \'Spanish (Spain)\',                                        u\'flag\' : u\'/++resource++country-flags/es.gif\'},\n-u\'es-gq\' : {u\'name\' : \'Spanish (Equatorial Guinea)\',                            u\'flag\' : u\'/++resource++country-flags/gq.gif\'},\n-u\'es-gt\' : {u\'name\' : \'Spanish (Guatemala)\',                                    u\'flag\' : u\'/++resource++country-flags/gt.gif\'},\n-u\'es-hn\' : {u\'name\' : \'Spanish (Honduras)\',                                     u\'flag\' : u\'/++resource++country-flags/hn.gif\'},\n-u\'es-mx\' : {u\'name\' : \'Spanish (Mexico)\',                                       u\'flag\' : u\'/++resource++country-flags/mx.gif\'},\n-u\'es-ni\' : {u\'name\' : \'Spanish (Nicaragua)\',                                    u\'flag\' : u\'/++resource++country-flags/ni.gif\'},\n-u\'es-pa\' : {u\'name\' : \'Spanish (Panama)\',                                       u\'flag\' : u\'/++resource++country-flags/pa.gif\'},\n-u\'es-pe\' : {u\'name\' : \'Spanish (Peru)\',                                         u\'flag\' : u\'/++resource++country-flags/pe.gif\'},\n-u\'es-pr\' : {u\'name\' : \'Spanish (Puerto Rico)\',                                  u\'flag\' : u\'/++resource++country-flags/pr.gif\'},\n-u\'es-py\' : {u\'name\' : \'Spanish (Paraguay)\',                                     u\'flag\' : u\'/++resource++country-flags/py.gif\'},\n-u\'es-sv\' : {u\'name\' : \'Spanish (El Salvador)\',                                  u\'flag\' : u\'/++resource++country-flags/sv.gif\'},\n-u\'es-us\' : {u\'name\' : \'Spanish (USA)\',                                          u\'flag\' : u\'/++resource++country-flags/us.gif\'},\n-u\'es-uy\' : {u\'name\' : \'Spanish (Uruguay)\',                                      u\'flag\' : u\'/++resource++country-flags/uy.gif\'},\n-u\'es-ve\' : {u\'name\' : \'Spanish (Venezuela)\',                                    u\'flag\' : u\'/++resource++country-flags/ve.gif\'},\n-u\'fr-ad\' : {u\'name\' : \'French (Andorra)\',                                       u\'flag\' : u\'/++resource++country-flags/ad.gif\'},\n-u\'fr-be\' : {u\'name\' : \'French (Belgium)\',                                       u\'flag\' : u\'/++resource++country-flags/be.gif\'},\n-u\'fr-bf\' : {u\'name\' : \'French (Burkina Faso)\',                                  u\'flag\' : u\'/++resource++country-flags/bf.gif\'},\n-u\'fr-bi\' : {u\'name\' : \'French (Burundi)\',                                       u\'flag\' : u\'/++resource++country-flags/bi.gif\'},\n-u\'fr-bj\' : {u\'name\' : \'French (Benin)\',                                         u\'flag\' : u\'/++resource++country-flags/bj.gif\'},\n-u\'fr-ca\' : {u\'name\' : \'French (Canada)\',                                        u\'flag\' : u\'/++resource++country-flags/ca.gif\'},\n-u\'fr-cd\' : {u\'name\' : \'French (Democratic Republic of Congo)\',                  u\'flag\' : u\'/++resource++country-flags/cd.gif\'},\n-u\'fr-cf\' : {u\'name\' : \'French (Central African Republic)\',                      u\'flag\' : u\'/++resource++country-flags/cf.gif\'},\n-u\'fr-cg\' : {u\'name\' : \'French (Congo)\',                                         u\'flag\' : u\'/++resource++country-flags/cg.gif\'},\n-u\'fr-ch\' : {u\'name\' : \'French (Switzerland)\',                                   u\'flag\' : u\'/++resource++country-flags/ch.gif\'},\n-u\'fr-ci\' : {u\'name\' : \'French (Cote d\\\'Ivoire)\',                                u\'flag\' : u\'/++resource++country-flags/ci.gif\'},\n-u\'fr-cm\' : {u\'name\' : \'French (Cameroon)\',                                      u\'flag\' : u\'/++resource++country-flags/cm.gif\'},\n-u\'fr-dj\' : {u\'name\' : \'French (Djibouti)\',                                      u\'flag\' : u\'/++resource++country-flags/dj.gif\'},\n-u\'fr-fr\' : {u\'name\' : \'French (France)\',                                        u\'flag\' : u\'/++resource++country-flags/fr.gif\'},\n-u\'fr-ga\' : {u\'name\' : \'French (Gabon)\',                                         u\'flag\' : u\'/++resource++country-flags/ga.gif\'},\n-u\'fr-gb\' : {u\'name\' : \'French (United Kingdom)\',                                u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'fr-gf\' : {u\'name\' : \'French (French Guiana)\',                                 u\'flag\' : u\'/++resource++country-flags/gf.gif\'},\n-u\'fr-gn\' : {u\'name\' : \'French (Guinea)\',                                        u\'flag\' : u\'/++resource++country-flags/gn.gif\'},\n-u\'fr-gp\' : {u\'name\' : \'French (Guadeloupe)\',                                    u\'flag\' : u\'/++resource++country-flags/gp.gif\'},\n-u\'fr-ht\' : {u\'name\' : \'French (Haiti)\',                                         u\'flag\' : u\'/++resource++country-flags/ht.gif\'},\n-u\'fr-it\' : {u\'name\' : \'French (Italy)\',                                         u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'fr-km\' : {u\'name\' : \'French (Comoros Islands)\',                               u\'flag\' : u\'/++resource++country-flags/km.gif\'},\n-u\'fr-lb\' : {u\'name\' : \'French (Lebanon)\',                                       u\'flag\' : u\'/++resource++country-flags/lb.gif\'},\n-u\'fr-lu\' : {u\'name\' : \'French (Luxembourg)\',                                    u\'flag\' : u\'/++resource++country-flags/lu.gif\'},\n-u\'fr-mc\' : {u\'name\' : \'French (Monaco)\',                                        u\'flag\' : u\'/++resource++country-flags/mc.gif\'},\n-u\'fr-mg\' : {u\'name\' : \'French (Madagascar)\',                                    u\'flag\' : u\'/++resource++country-flags/mg.gif\'},\n-u\'fr-ml\' : {u\'name\' : \'French (Mali)\',                                          u\'flag\' : u\'/++resource++country-flags/ml.gif\'},\n-u\'fr-mq\' : {u\'name\' : \'French (Martinique)\',                                    u\'flag\' : u\'/++resource++country-flags/mq.gif\'},\n-u\'fr-nc\' : {u\'name\' : \'French (New Caledonia)\',                                 u\'flag\' : u\'/++resource++country-flags/nc.gif\'},\n-u\'fr-pf\' : {u\'name\' : \'French (French Polynesia)\',                              u\'flag\' : u\'/++resource++country-flags/pf.gif\'},\n-u\'fr-pm\' : {u\'name\' : \'French (St. Pierre and Miquelon)\',                       u\'flag\' : u\'/++resource++country-flags/pm.gif\'},\n-u\'fr-re\' : {u\'name\' : \'French (Reunion)\',                                       u\'flag\' : u\'/++resource++country-flags/re.gif\'},\n-u\'fr-rw\' : {u\'name\' : \'French (Rwanda)\',                                        u\'flag\' : u\'/++resource++country-flags/rw.gif\'},\n-u\'fr-sc\' : {u\'name\' : \'French (Seychelles)\',                                    u\'flag\' : u\'/++resource++country-flags/sc.gif\'},\n-u\'fr-td\' : {u\'name\' : \'French (Chad)\',                                          u\'flag\' : u\'/++resource++country-flags/td.gif\'},\n-u\'fr-tg\' : {u\'name\' : \'French (Togo)\',                                          u\'flag\' : u\'/++resource++country-flags/tg.gif\'},\n-u\'fr-vu\' : {u\'name\' : \'French (Vanuatu)\',                                       u\'flag\' : u\'/++resource++country-flags/vu.gif\'},\n-u\'fr-wf\' : {u\'name\' : \'French (Wallis and Futuna)\',                             u\'flag\' : u\'/++resource++country-flags/wf.gif\'},\n-u\'fr-yt\' : {u\'name\' : \'French (Mayotte)\',                                       u\'flag\' : u\'/++resource++country-flags/yt.gif\'},\n-u\'hr-ba\' : {u\'name\' : \'Croatian (Bosnia-Herzegovina)\',                          u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'hr-hr\' : {u\'name\' : \'Croatian (Croatia)\',                                     u\'flag\' : u\'/++resource++country-flags/hr.gif\'},\n-u\'hu-hu\' : {u\'name\' : \'Hungarian (Hungary)\',                                    u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'hu-si\' : {u\'name\' : \'Hungarian (Slovenia)\',                                   u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'it-ch\' : {u\'name\' : \'Italian (Switzerland)\',                                  u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-hr\' : {u\'name\' : \'Italian (Croatia)\',                                      u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-it\' : {u\'name\' : \'Italian (Italy)\',                                        u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-si\' : {u\'name\' : \'Italian (Slovenia)\',                                     u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-sm\' : {u\'name\' : \'Italian (San Marino)\',                                   u\'flag\' : u\'/++resource++country-flags/sm.gif\'},\n-u\'ko-kp\' : {u\'name\' : \'Korean (Korea, North)\',                                  u\'flag\' : u\'/++resource++country-flags/kp.gif\'},\n-u\'ko-kr\' : {u\'name\' : \'Korean (Korea, South)\',                                  u\'flag\' : u\'/++resource++country-flags/kr.gif\'},\n-u\'ln-cd\' : {u\'name\' : \'Lingala (Democratic Republic of Congo)\',                 u\'flag\' : u\'/++resource++country-flags/cd.gif\'},\n-u\'ln-cg\' : {u\'name\' : \'Lingala (Congo)\',                                        u\'flag\' : u\'/++resource++country-flags/cg.gif\'},\n-u\'ms-bn\' : {u\'name\' : \'Malay (Brunei)\',                                         u\'flag\' : u\'/++resource++country-flags/bn.gif\'},\n-u\'ms-my\' : {u\'name\' : \'Malay (Malaysia)\',                                       u\'flag\' : u\'/++resource++country-flags/my.gif\'},\n-u\'ms-sg\' : {u\'name\' : \'Malay (Singapore)\',                                      u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'nl-an\' : {u\'name\' : \'Dutch (Netherlands Antilles)\',                           u\'flag\' : u\'/++resource++country-flags/an.gif\'},\n-u\'nl-aw\' : {u\'name\' : \'Dutch (Aruba)\',                                          u\'flag\' : u\'/++resource++country-flags/aw.gif\'},\n-u\'nl-be\' : {u\'name\' : \'Dutch (Belgium)\',                                        u\'flag\' : u\'/++resource++country-flags/be.gif\'},\n-u\'nl-nl\' : {u\'name\' : \'Dutch (Netherlands)\',                                    u\'flag\' : u\'/++resource++country-flags/nl.gif\'},\n-u\'nl-sr\' : {u\'name\' : \'Dutch (Suriname)\',                                       u\'flag\' : u\'/++resource++country-flags/sr.gif\'},\n-u\'pt-ao\' : {u\'name\' : \'Portuguese (Angola)\', u\'native\': \'Portugu\xc3\xaas (Angola)\',   u\'flag\' : u\'/++resource++country-flags/ao.gif\'},\n-u\'pt-br\' : {u\'name\' : \'Portuguese (Brazil)\', u\'native\' : \'Portugu\xc3\xaas (Brasil)\',  u\'flag\' : u\'/++resource++country-flags/br.gif\'},\n-u\'pt-cv\' : {u\'name\' : \'Portuguese (Ilhas Cabo Verde)\', u\'native\': \'Portugu\xc3\xaas (Cabo Verde)\', u\'flag\' : u\'/++resource++country-flags/cv.gif\'},\n-u\'pt-gw\' : {u\'name\' : \'Portuguese (Guin\xc3\xa9-Bissau)\', u\'native\': \'Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)\', u\'flag\' : u\'/++resource++country-flags/gw.gif\'},\n-u\'pt-mz\' : {u\'name\' : \'Portuguese (Mo\xc3\xa7ambique)\', u\'native\': \'Portugu\xc3\xaas (Mo\xc3\xa7ambique)\', u\'flag\' : u\'/++resource++country-flags/mz.gif\'},\n-u\'pt-pt\' : {u\'name\' : \'Portuguese (Portugal)\', u\'native\': \'Portugu\xc3\xaas (Portugal)\', u\'flag\' : u\'/++resource++country-flags/pt.gif\'},\n-u\'pt-st\' : {u\'name\' : \'Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\', u\'native\': \'Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\', u\'flag\' : u\'/++resource++country-flags/st.gif\'},\n-u\'sd-in\' : {u\'name\' : \'Sindhi (India)\',                                         u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'sd-pk\' : {u\'name\' : \'Sindhi (Pakistan)\',                                      u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'sr-ba\' : {u\'name\' : \'Serbian (Bosnia-Herzegovina)\',                           u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'ss-sz\' : {u\'name\' : \'Swati (Swaziland)\',                                      u\'flag\' : u\'/++resource++country-flags/sz.gif\'},\n-u\'ss-za\' : {u\'name\' : \'Swati (South Africa)\',                                   u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'sv-fi\' : {u\'name\' : \'Swedish (Finland)\',                                      u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sv-se\' : {u\'name\' : \'Swedish (Sweden)\',                                       u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sw-ke\' : {u\'name\' : \'Swahili (Kenya)\',                                        u\'flag\' : u\'/++resource++country-flags/ke.gif\'},\n-u\'sw-tz\' : {u\'name\' : \'Swahili (Tanzania)\',                                     u\'flag\' : u\'/++resource++country-flags/tz.gif\'},\n-u\'ta-in\' : {u\'name\' : \'Tamil (India)\',                                          u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ta-sg\' : {u\'name\' : \'Tamil (Singapore)\',                                      u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'tn-bw\' : {u\'name\' : \'Tswana (Botswana)\',                                      u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'tn-za\' : {u\'name\' : \'Tswana (South Africa)\',                                  u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'tr-bg\' : {u\'name\' : \'Turkish (Bulgaria)\',                                     u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'tr-cy\' : {u\'name\' : \'Turkish (Cyprus)\',                                       u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'tr-tr\' : {u\'name\' : \'Turkish (Turkey)\',                                       u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'ur-in\' : {u\'name\' : \'Urdu (India)\',                                           u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ur-pk\' : {u\'name\' : \'Urdu (Pakistan)\',                                        u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'zh-cn\' : {u\'name\' : \'Chinese (China)\', u\'native\' : \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)\',                u\'flag\' : u\'/++resource++country-flags/cn.gif\'},\n-u\'zh-hk\' : {u\'name\' : \'Chinese (Hongkong)\', u\'native\' : \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)\',             u\'flag\' : u\'/++resource++country-flags/hk.gif\'},\n-u\'zh-sg\' : {u\'name\' : \'Chinese (Singapore)\', u\'native\' : \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)\',           u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'zh-tw\' : {u\'name\' : \'Chinese (Taiwan)\', u\'native\' : \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)\',               u\'flag\' : u\'/++resource++country-flags/tw.gif\'},\n+    u\'ar-ae\': {\n+        u\'name\': \'Arabic (United Arab Emirates)\',\n+        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n+    },\n+    u\'ar-bh\': {\n+        u\'name\': \'Arabic (Bahrain)\',\n+        u\'flag\': u\'/++resource++country-flags/bh.gif\',\n+    },\n+    u\'ar-dz\': {\n+        u\'name\': \'Arabic (Algeria)\',\n+        u\'flag\': u\'/++resource++country-flags/dz.gif\',\n+    },\n+    u\'ar-eg\': {\n+        u\'name\': \'Arabic (Egypt)\',\n+        u\'flag\': u\'/++resource++country-flags/eg.gif\',\n+    },\n+    u\'ar-il\': {\n+        u\'name\': \'Arabic (Israel)\',\n+        u\'flag\': u\'/++resource++country-flags/il.gif\',\n+    },\n+    u\'ar-iq\': {\n+        u\'name\': \'Arabic (Iraq)\',\n+        u\'flag\': u\'/++resource++country-flags/iq.gif\',\n+    },\n+    u\'ar-jo\': {\n+        u\'name\': \'Arabic (Jordan)\',\n+        u\'flag\': u\'/++resource++country-flags/jo.gif\',\n+    },\n+    u\'ar-kw\': {\n+        u\'name\': \'Arabic (Kuwait)\',\n+        u\'flag\': u\'/++resource++country-flags/kw.gif\',\n+    },\n+    u\'ar-lb\': {\n+        u\'name\': \'Arabic (Lebanon)\',\n+        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n+    },\n+    u\'ar-ly\': {\n+        u\'name\': \'Arabic (Libya)\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ar-ma\': {\n+        u\'name\': \'Arabic (Morocco)\',\n+        u\'flag\': u\'/++resource++country-flags/ma.gif\',\n+    },\n+    u\'ar-mr\': {\n+        u\'name\': \'Arabic (Mauritania)\',\n+        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n+    },\n+    u\'ar-om\': {\n+        u\'name\': \'Arabic (Oman)\',\n+        u\'flag\': u\'/++resource++country-flags/om.gif\',\n+    },\n+    u\'ar-ps\': {\n+        u\'name\': \'Arabic (Palestinian West Bank and Gaza)\',\n+        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n+    },\n+    u\'ar-qa\': {\n+        u\'name\': \'Arabic (Qatar)\',\n+        u\'flag\': u\'/++resource++country-flags/qa.gif\',\n+    },\n+    u\'ar-sa\': {\n+        u\'name\': \'Arabic (Saudi Arabia)\',\n+        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n+    },\n+    u\'ar-sd\': {\n+        u\'name\': \'Arabic (Sudan)\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ar-so\': {\n+        u\'name\': \'Arabic (Somalia)\',\n+        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    },\n+    u\'ar-sy\': {\n+        u\'name\': \'Arabic (Syria)\',\n+        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n+    },\n+    u\'ar-td\': {\n+        u\'name\': \'Arabic (Chad)\',\n+        u\'flag\': u\'/++resource++country-flags/td.gif\',\n+    },\n+    u\'ar-tn\': {\n+        u\'name\': \'Arabic (Tunisia)\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ar-ye\': {\n+        u\'name\': \'Arabic (Yemen)\',\n+        u\'flag\': u\'/++resource++country-flags/ye.gif\',\n+    },\n+    u\'bn-bd\': {\n+        u\'name\': \'Bengali (Bangladesh)\',\n+        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n+    },\n+    u\'bn-in\': {\n+        u\'name\': \'Bengali (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'bn-sg\': {\n+        u\'name\': \'Bengali (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'ch-gu\': {\n+        u\'name\': \'Chamorro (Guam)\',\n+        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    },\n+    u\'ch-mp\': {\n+        u\'name\': \'Chamorro (Northern Mariana Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    },\n+    u\'cs-cz\': {\n+        u\'name\': \'Czech (Czech republic)\',\n+        u\'native\': \'\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)\',\n+        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n+    },\n+    u\'da-dk\': {\n+        u\'name\': \'Danish (Denmark)\',\n+        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n+    },\n+    u\'da-gl\': {\n+        u\'name\': \'Danish (Greenland)\',\n+        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n+    },\n+    u\'de-at\': {\n+        u\'name\': \'German (Austria)\',\n+        u\'native\': \'Deutsch (\xc3\x96sterreich)\',\n+        u\'flag\': u\'/++resource++country-flags/at.gif\',\n+    },\n+    u\'de-be\': {\n+        u\'name\': \'German (Belgium)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'de-ch\': {\n+        u\'name\': \'German (Switzerland)\',\n+        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    },\n+    u\'de-de\': {\n+        u\'name\': \'German (Germany)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'de-dk\': {\n+        u\'name\': \'German (Denmark)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'de-li\': {\n+        u\'name\': \'German (Liechtenstein)\',\n+        u\'flag\': u\'/++resource++country-flags/li.gif\',\n+    },\n+    u\'de-lu\': {\n+        u\'name\': \'German (Luxembourg)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'el-cy\': {\n+        u\'name\': \'Greek (Cyprus)\',\n+        u\'flag\': u\'/++resource++country-flags/cy.gif\',\n+    },\n+    u\'el-gr\': {\n+        u\'name\': \'Greek (Greece)\',\n+        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n+    },\n+    u\'en-ag\': {\n+        u\'name\': \'English (Antigua and Barbuda)\',\n+        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n+    },\n+    u\'en-ai\': {\n+        u\'name\': \'English (Anguilla)\',\n+        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n+    },\n+    u\'en-as\': {\n+        u\'name\': \'English (American Samoa)\',\n+        u\'flag\': u\'/++resource++country-flags/as.gif\',\n+    },\n+    u\'en-au\': {\n+        u\'name\': \'English (Australia)\',\n+        u\'flag\': u\'/++resource++country-flags/au.gif\',\n+    },\n+    u\'en-bb\': {\n+        u\'name\': \'English (Barbados)\',\n+        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n+    },\n+    u\'en-bm\': {\n+        u\'name\': \'English (Bermuda)\',\n+        u\'flag\': u\'/++resource++country-flags/bm.gif\',\n+    },\n+    u\'en-bn\': {\n+        u\'name\': \'English (Brunei)\',\n+        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    },\n+    u\'en-bs\': {\n+        u\'name\': \'English (Bahamas)\',\n+        u\'flag\': u\'/++resource++country-flags/bs.gif\',\n+    },\n+    u\'en-bw\': {\n+        u\'name\': \'English (Botswana)\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'en-bz\': {\n+        u\'name\': \'English (Belize)\',\n+        u\'flag\': u\'/++resource++country-flags/bz.gif\',\n+    },\n+    u\'en-ca\': {\n+        u\'name\': \'English (Canada)\',\n+        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    },\n+    u\'en-ck\': {\n+        u\'name\': \'English (Cook Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n+    },\n+    u\'en-cm\': {\n+        u\'name\': \'English (Cameroon)\',\n+        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    },\n+    u\'en-dm\': {\n+        u\'name\': \'English (Dominica)\',\n+        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n+    },\n+    u\'en-er\': {\n+        u\'name\': \'English (Eritrea)\',\n+        u\'flag\': u\'/++resource++country-flags/er.gif\',\n+    },\n+    u\'en-et\': {\n+        u\'name\': \'English (Ethiopia)\',\n+        u\'flag\': u\'/++resource++country-flags/et.gif\',\n+    },\n+    u\'en-fj\': {\n+        u\'name\': \'English (Fiji)\',\n+        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n+    },\n+    u\'en-fk\': {\n+        u\'name\': \'English (Falkland Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n+    },\n+    u\'en-fm\': {\n+        u\'name\': \'English (Micronesia)\',\n+        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n+    },\n+    u\'en-gb\': {\n+        u\'name\': \'English (United Kingdom)\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'en-gd\': {\n+        u\'name\': \'English (Grenada)\',\n+        u\'flag\': u\'/++resource++country-flags/gd.gif\',\n+    },\n+    u\'en-gh\': {\n+        u\'name\': \'English (Ghana)\',\n+        u\'flag\': u\'/++resource++country-flags/gh.gif\',\n+    },\n+    u\'en-gi\': {\n+        u\'name\': \'English (Gibraltar)\',\n+        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n+    },\n+    u\'en-gm\': {\n+        u\'name\': \'English (Gambia)\',\n+        u\'flag\': u\'/++resource++country-flags/gm.gif\',\n+    },\n+    u\'en-gu\': {\n+        u\'name\': \'English (Guam)\',\n+        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    },\n+    u\'en-gy\': {\n+        u\'name\': \'English (Guyana)\',\n+        u\'flag\': u\'/++resource++country-flags/gy.gif\',\n+    },\n+    u\'en-ie\': {\n+        u\'name\': \'English (Ireland)\',\n+        u\'flag\': u\'/++resource++country-flags/ie.gif\',\n+    },\n+    u\'en-il\': {\n+        u\'name\': \'English (Israel)\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'en-io\': {\n+        u\'name\': \'English (British Indian Ocean Territory)\',\n+        u\'flag\': u\'/++resource++country-flags/io.gif\',\n+    },\n+    u\'en-jm\': {\n+        u\'name\': \'English (Jamaica)\',\n+        u\'flag\': u\'/++resource++country-flags/jm.gif\',\n+    },\n+    u\'en-ke\': {\n+        u\'name\': \'English (Kenya)\',\n+        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n+    },\n+    u\'en-ki\': {\n+        u\'name\': \'English (Kiribati)\',\n+        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n+    },\n+    u\'en-kn\': {\n+        u\'name\': \'English (St. Kitts-Nevis)\',\n+        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n+    },\n+    u\'en-ky\': {\n+        u\'name\': \'English (Cayman Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n+    },\n+    u\'en-lc\': {\n+        u\'name\': \'English (St. Lucia)\',\n+        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n+    },\n+    u\'en-lr\': {\n+        u\'name\': \'English (Liberia)\',\n+        u\'flag\': u\'/++resource++country-flags/lr.gif\',\n+    },\n+    u\'en-ls\': {\n+        u\'name\': \'English (Lesotho)\',\n+        u\'flag\': u\'/++resource++country-flags/ls.gif\',\n+    },\n+    u\'en-mp\': {\n+        u\'name\': \'English (Northern Mariana Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    },\n+    u\'en-ms\': {\n+        u\'name\': \'English (Montserrat)\',\n+        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n+    },\n+    u\'en-mt\': {\n+        u\'name\': \'English (Malta)\',\n+        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n+    },\n+    u\'en-mu\': {\n+        u\'name\': \'English (Mauritius)\',\n+        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n+    },\n+    u\'en-mw\': {\n+        u\'name\': \'English (Malawi)\',\n+        u\'flag\': u\'/++resource++country-flags/mw.gif\',\n+    },\n+    u\'en-na\': {\n+        u\'name\': \'English (Namibia)\',\n+        u\'flag\': u\'/++resource++country-flags/na.gif\',\n+    },\n+    u\'en-nf\': {\n+        u\'name\': \'English (Norfolk Island)\',\n+        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n+    },\n+    u\'en-ng\': {\n+        u\'name\': \'English (Nigeria)\',\n+        u\'flag\': u\'/++resource++country-flags/ng.gif\',\n+    },\n+    u\'en-nr\': {\n+        u\'name\': \'English (Nauru)\',\n+        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n+    },\n+    u\'en-nu\': {\n+        u\'name\': \'English (Niue)\',\n+        u\'flag\': u\'/++resource++country-flags/nu.gif\',\n+    },\n+    u\'en-nz\': {\n+        u\'name\': \'English (New Zealand)\',\n+        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n+    },\n+    u\'en-pg\': {\n+        u\'name\': \'English (Papua New Guinea)\',\n+        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n+    },\n+    u\'en-ph\': {\n+        u\'name\': \'English (Philippines)\',\n+        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n+    },\n+    u\'en-pk\': {\n+        u\'name\': \'English (Pakistan)\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'en-pn\': {\n+        u\'name\': \'English (Pitcairn)\',\n+        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n+    },\n+    u\'en-pr\': {\n+        u\'name\': \'English (Puerto Rico)\',\n+        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    },\n+    u\'en-pw\': {\n+        u\'name\': \'English (Palau)\',\n+        u\'flag\': u\'/++resource++country-flags/pw.gif\',\n+    },\n+    u\'en-rw\': {\n+        u\'name\': \'English (Rwanda)\',\n+        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    },\n+    u\'en-sb\': {\n+        u\'name\': \'English (Solomon Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n+    },\n+    u\'en-sc\': {\n+        u\'name\': \'English (Seychelles)\',\n+        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    },\n+    u\'en-sg\': {\n+        u\'name\': \'English (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'en-sh\': {\n+        u\'name\': \'English (St. Helena)\',\n+        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n+    },\n+    u\'en-sl\': {\n+        u\'name\': \'English (Sierra Leone)\',\n+        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n+    },\n+    u\'en-so\': {\n+        u\'name\': \'English (Somalia)\',\n+        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    },\n+    u\'en-sz\': {\n+        u\'name\': \'English (Swaziland)\',\n+        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    },\n+    u\'en-tc\': {\n+        u\'name\': \'English (Turks and Caicos Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n+    },\n+    u\'en-tk\': {\n+        u\'name\': \'English (Tokelau)\',\n+        u\'flag\': u\'/++resource++country-flags/tk.gif\',\n+    },\n+    u\'en-to\': {\n+        u\'name\': \'English (Tonga)\',\n+        u\'flag\': u\'/++resource++country-flags/to.gif\',\n+    },\n+    u\'en-tt\': {\n+        u\'name\': \'English (Trinidad and Tobago)\',\n+        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n+    },\n+    u\'en-ug\': {\n+        u\'name\': \'English (Uganda)\',\n+        u\'flag\': u\'/++resource++country-flags/ug.gif\',\n+    },\n+    u\'en-us\': {\n+        u\'name\': \'English (USA)\',\n+        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    },\n+    u\'en-vc\': {\n+        u\'name\': \'English (St. Vincent and the Grenadi)\',\n+        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n+    },\n+    u\'en-vg\': {\n+        u\'name\': \'English (British Virgin Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n+    },\n+    u\'en-vi\': {\n+        u\'name\': \'English (U.S. Virgin Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n+    },\n+    u\'en-vu\': {\n+        u\'name\': \'English (Vanuatu)\',\n+        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    },\n+    u\'en-ws\': {\n+        u\'name\': \'English (Western Samoa)\',\n+        u\'flag\': u\'/++resource++country-flags/ws.gif\',\n+    },\n+    u\'en-za\': {\n+        u\'name\': \'English (South Africa)\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'en-zm\': {\n+        u\'name\': \'English (Zambia)\',\n+        u\'flag\': u\'/++resource++country-flags/zm.gif\',\n+    },\n+    u\'en-zw\': {\n+        u\'name\': \'English (Zimbabwe)\',\n+        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n+    },\n+    u\'es-ar\': {\n+        u\'name\': \'Spanish (Argentina)\',\n+        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n+    },\n+    u\'es-bo\': {\n+        u\'name\': \'Spanish (Bolivia)\',\n+        u\'flag\': u\'/++resource++country-flags/bo.gif\',\n+    },\n+    u\'es-cl\': {\n+        u\'name\': \'Spanish (Chile)\',\n+        u\'flag\': u\'/++resource++country-flags/cl.gif\',\n+    },\n+    u\'es-co\': {\n+        u\'name\': \'Spanish (Colombia)\',\n+        u\'flag\': u\'/++resource++country-flags/co.gif\',\n+    },\n+    u\'es-cr\': {\n+        u\'name\': \'Spanish (Costa Rica)\',\n+        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n+    },\n+    u\'es-cu\': {\n+        u\'name\': \'Spanish (Cuba)\',\n+        u\'flag\': u\'/++resource++country-flags/cu.gif\',\n+    },\n+    u\'es-do\': {\n+        u\'name\': \'Spanish (Dominican Republic)\',\n+        u\'flag\': u\'/++resource++country-flags/do.gif\',\n+    },\n+    u\'es-ec\': {\n+        u\'name\': \'Spanish (Ecuador)\',\n+        u\'flag\': u\'/++resource++country-flags/ec.gif\',\n+    },\n+    u\'es-es\': {\n+        u\'name\': \'Spanish (Spain)\',\n+        u\'flag\': u\'/++resource++country-flags/es.gif\',\n+    },\n+    u\'es-gq\': {\n+        u\'name\': \'Spanish (Equatorial Guinea)\',\n+        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n+    },\n+    u\'es-gt\': {\n+        u\'name\': \'Spanish (Guatemala)\',\n+        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n+    },\n+    u\'es-hn\': {\n+        u\'name\': \'Spanish (Honduras)\',\n+        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n+    },\n+    u\'es-mx\': {\n+        u\'name\': \'Spanish (Mexico)\',\n+        u\'flag\': u\'/++resource++country-flags/mx.gif\',\n+    },\n+    u\'es-ni\': {\n+        u\'name\': \'Spanish (Nicaragua)\',\n+        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n+    },\n+    u\'es-pa\': {\n+        u\'name\': \'Spanish (Panama)\',\n+        u\'flag\': u\'/++resource++country-flags/pa.gif\',\n+    },\n+    u\'es-pe\': {\n+        u\'name\': \'Spanish (Peru)\',\n+        u\'flag\': u\'/++resource++country-flags/pe.gif\',\n+    },\n+    u\'es-pr\': {\n+        u\'name\': \'Spanish (Puerto Rico)\',\n+        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    },\n+    u\'es-py\': {\n+        u\'name\': \'Spanish (Paraguay)\',\n+        u\'flag\': u\'/++resource++country-flags/py.gif\',\n+    },\n+    u\'es-sv\': {\n+        u\'name\': \'Spanish (El Salvador)\',\n+        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n+    },\n+    u\'es-us\': {\n+        u\'name\': \'Spanish (USA)\',\n+        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    },\n+    u\'es-uy\': {\n+        u\'name\': \'Spanish (Uruguay)\',\n+        u\'flag\': u\'/++resource++country-flags/uy.gif\',\n+    },\n+    u\'es-ve\': {\n+        u\'name\': \'Spanish (Venezuela)\',\n+        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n+    },\n+    u\'fr-ad\': {\n+        u\'name\': \'French (Andorra)\',\n+        u\'flag\': u\'/++resource++country-flags/ad.gif\',\n+    },\n+    u\'fr-be\': {\n+        u\'name\': \'French (Belgium)\',\n+        u\'flag\': u\'/++resource++country-flags/be.gif\',\n+    },\n+    u\'fr-bf\': {\n+        u\'name\': \'French (Burkina Faso)\',\n+        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n+    },\n+    u\'fr-bi\': {\n+        u\'name\': \'French (Burundi)\',\n+        u\'flag\': u\'/++resource++country-flags/bi.gif\',\n+    },\n+    u\'fr-bj\': {\n+        u\'name\': \'French (Benin)\',\n+        u\'flag\': u\'/++resource++country-flags/bj.gif\',\n+    },\n+    u\'fr-ca\': {\n+        u\'name\': \'French (Canada)\',\n+        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    },\n+    u\'fr-cd\': {\n+        u\'name\': \'French (Democratic Republic of Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    },\n+    u\'fr-cf\': {\n+        u\'name\': \'French (Central African Republic)\',\n+        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    },\n+    u\'fr-cg\': {\n+        u\'name\': \'French (Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n+    },\n+    u\'fr-ch\': {\n+        u\'name\': \'French (Switzerland)\',\n+        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    },\n+    u\'fr-ci\': {\n+        u\'name\': \'French (Cote d\\\'Ivoire)\',\n+        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n+    },\n+    u\'fr-cm\': {\n+        u\'name\': \'French (Cameroon)\',\n+        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    },\n+    u\'fr-dj\': {\n+        u\'name\': \'French (Djibouti)\',\n+        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    },\n+    u\'fr-fr\': {\n+        u\'name\': \'French (France)\',\n+        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n+    },\n+    u\'fr-ga\': {\n+        u\'name\': \'French (Gabon)\',\n+        u\'flag\': u\'/++resource++country-flags/ga.gif\',\n+    },\n+    u\'fr-gb\': {\n+        u\'name\': \'French (United Kingdom)\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'fr-gf\': {\n+        u\'name\': \'French (French Guiana)\',\n+        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n+    },\n+    u\'fr-gn\': {\n+        u\'name\': \'French (Guinea)\',\n+        u\'flag\': u\'/++resource++country-flags/gn.gif\',\n+    },\n+    u\'fr-gp\': {\n+        u\'name\': \'French (Guadeloupe)\',\n+        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n+    },\n+    u\'fr-ht\': {\n+        u\'name\': \'French (Haiti)\',\n+        u\'flag\': u\'/++resource++country-flags/ht.gif\',\n+    },\n+    u\'fr-it\': {\n+        u\'name\': \'French (Italy)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'fr-km\': {\n+        u\'name\': \'French (Comoros Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/km.gif\',\n+    },\n+    u\'fr-lb\': {\n+        u\'name\': \'French (Lebanon)\',\n+        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n+    },\n+    u\'fr-lu\': {\n+        u\'name\': \'French (Luxembourg)\',\n+        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    },\n+    u\'fr-mc\': {\n+        u\'name\': \'French (Monaco)\',\n+        u\'flag\': u\'/++resource++country-flags/mc.gif\',\n+    },\n+    u\'fr-mg\': {\n+        u\'name\': \'French (Madagascar)\',\n+        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    },\n+    u\'fr-ml\': {\n+        u\'name\': \'French (Mali)\',\n+        u\'flag\': u\'/++resource++country-flags/ml.gif\',\n+    },\n+    u\'fr-mq\': {\n+        u\'name\': \'French (Martinique)\',\n+        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n+    },\n+    u\'fr-nc\': {\n+        u\'name\': \'French (New Caledonia)\',\n+        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n+    },\n+    u\'fr-pf\': {\n+        u\'name\': \'French (French Polynesia)\',\n+        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n+    },\n+    u\'fr-pm\': {\n+        u\'name\': \'French (St. Pierre and Miquelon)\',\n+        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n+    },\n+    u\'fr-re\': {\n+        u\'name\': \'French (Reunion)\',\n+        u\'flag\': u\'/++resource++country-flags/re.gif\',\n+    },\n+    u\'fr-rw\': {\n+        u\'name\': \'French (Rwanda)\',\n+        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    },\n+    u\'fr-sc\': {\n+        u\'name\': \'French (Seychelles)\',\n+        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    },\n+    u\'fr-td\': {\n+        u\'name\': \'French (Chad)\',\n+        u\'flag\': u\'/++resource++country-flags/td.gif\',\n+    },\n+    u\'fr-tg\': {\n+        u\'name\': \'French (Togo)\',\n+        u\'flag\': u\'/++resource++country-flags/tg.gif\',\n+    },\n+    u\'fr-vu\': {\n+        u\'name\': \'French (Vanuatu)\',\n+        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    },\n+    u\'fr-wf\': {\n+        u\'name\': \'French (Wallis and Futuna)\',\n+        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n+    },\n+    u\'fr-yt\': {\n+        u\'name\': \'French (Mayotte)\',\n+        u\'flag\': u\'/++resource++country-flags/yt.gif\',\n+    },\n+    u\'hr-ba\': {\n+        u\'name\': \'Croatian (Bosnia-Herzegovina)\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'hr-hr\': {\n+        u\'name\': \'Croatian (Croatia)\',\n+        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n+    },\n+    u\'hu-hu\': {\n+        u\'name\': \'Hungarian (Hungary)\',\n+        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n+    },\n+    u\'hu-si\': {\n+        u\'name\': \'Hungarian (Slovenia)\',\n+        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n+    },\n+    u\'it-ch\': {\n+        u\'name\': \'Italian (Switzerland)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-hr\': {\n+        u\'name\': \'Italian (Croatia)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-it\': {\n+        u\'name\': \'Italian (Italy)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-si\': {\n+        u\'name\': \'Italian (Slovenia)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-sm\': {\n+        u\'name\': \'Italian (San Marino)\',\n+        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n+    },\n+    u\'ko-kp\': {\n+        u\'name\': \'Korean (Korea, North)\',\n+        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n+    },\n+    u\'ko-kr\': {\n+        u\'name\': \'Korean (Korea, South)\',\n+        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n+    },\n+    u\'ln-cd\': {\n+        u\'name\': \'Lingala (Democratic Republic of Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    },\n+    u\'ln-cg\': {\n+        u\'name\': \'Lingala (Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n+    },\n+    u\'ms-bn\': {\n+        u\'name\': \'Malay (Brunei)\',\n+        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    },\n+    u\'ms-my\': {\n+        u\'name\': \'Malay (Malaysia)\',\n+        u\'flag\': u\'/++resource++country-flags/my.gif\',\n+    },\n+    u\'ms-sg\': {\n+        u\'name\': \'Malay (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'nl-an\': {\n+        u\'name\': \'Dutch (Netherlands Antilles)\',\n+        u\'flag\': u\'/++resource++country-flags/an.gif\',\n+    },\n+    u\'nl-aw\': {\n+        u\'name\': \'Dutch (Aruba)\',\n+        u\'flag\': u\'/++resource++country-flags/aw.gif\',\n+    },\n+    u\'nl-be\': {\n+        u\'name\': \'Dutch (Belgium)\',\n+        u\'flag\': u\'/++resource++country-flags/be.gif\',\n+    },\n+    u\'nl-nl\': {\n+        u\'name\': \'Dutch (Netherlands)\',\n+        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n+    },\n+    u\'nl-sr\': {\n+        u\'name\': \'Dutch (Suriname)\',\n+        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n+    },\n+    u\'pt-ao\': {\n+        u\'name\': \'Portuguese (Angola)\',\n+        u\'native\': \'Portugu\xc3\xaas (Angola)\',\n+        u\'flag\': u\'/++resource++country-flags/ao.gif\',\n+    },\n+    u\'pt-br\': {\n+        u\'name\': \'Portuguese (Brazil)\',\n+        u\'native\': \'Portugu\xc3\xaas (Brasil)\',\n+        u\'flag\': u\'/++resource++country-flags/br.gif\',\n+    },\n+    u\'pt-cv\': {\n+        u\'name\': \'Portuguese (Ilhas Cabo Verde)\',\n+        u\'native\': \'Portugu\xc3\xaas (Cabo Verde)\',\n+        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n+    },\n+    u\'pt-gw\': {\n+        u\'name\': \'Portuguese (Guin\xc3\xa9-Bissau)\',\n+        u\'native\': \'Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)\',\n+        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n+    },\n+    u\'pt-mz\': {\n+        u\'name\': \'Portuguese (Mo\xc3\xa7ambique)\',\n+        u\'native\': \'Portugu\xc3\xaas (Mo\xc3\xa7ambique)\',\n+        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n+    },\n+    u\'pt-pt\': {\n+        u\'name\': \'Portuguese (Portugal)\',\n+        u\'native\': \'Portugu\xc3\xaas (Portugal)\',\n+        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n+    },\n+    u\'pt-st\': {\n+        u\'name\': \'Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n+        u\'native\': \'Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n+        u\'flag\': u\'/++resource++country-flags/st.gif\',\n+    },\n+    u\'sd-in\': {\n+        u\'name\': \'Sindhi (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'sd-pk\': {\n+        u\'name\': \'Sindhi (Pakistan)\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'sr-ba\': {\n+        u\'name\': \'Serbian (Bosnia-Herzegovina)\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'ss-sz\': {\n+        u\'name\': \'Swati (Swaziland)\',\n+        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    },\n+    u\'ss-za\': {\n+        u\'name\': \'Swati (South Africa)\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'sv-fi\': {\n+        u\'name\': \'Swedish (Finland)\',\n+        u\'flag\': u\'/++resource++country-flags/se.gif\',\n+    },\n+    u\'sv-se\': {\n+        u\'name\': \'Swedish (Sweden)\',\n+        u\'flag\': u\'/++resource++country-flags/se.gif\',\n+    },\n+    u\'sw-ke\': {\n+        u\'name\': \'Swahili (Kenya)\',\n+        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n+    },\n+    u\'sw-tz\': {\n+        u\'name\': \'Swahili (Tanzania)\',\n+        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n+    },\n+    u\'ta-in\': {\n+        u\'name\': \'Tamil (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ta-sg\': {\n+        u\'name\': \'Tamil (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'tn-bw\': {\n+        u\'name\': \'Tswana (Botswana)\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'tn-za\': {\n+        u\'name\': \'Tswana (South Africa)\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'tr-bg\': {\n+        u\'name\': \'Turkish (Bulgaria)\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'tr-cy\': {\n+        u\'name\': \'Turkish (Cyprus)\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'tr-tr\': {\n+        u\'name\': \'Turkish (Turkey)\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'ur-in\': {\n+        u\'name\': \'Urdu (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ur-pk\': {\n+        u\'name\': \'Urdu (Pakistan)\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'zh-cn\': {\n+        u\'name\': \'Chinese (China)\',\n+        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)\',\n+        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n+    },\n+    u\'zh-hk\': {\n+        u\'name\': \'Chinese (Hongkong)\',\n+        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)\',\n+        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n+    },\n+    u\'zh-sg\': {\n+        u\'name\': \'Chinese (Singapore)\',\n+        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'zh-tw\': {\n+        u\'name\': \'Chinese (Taiwan)\',\n+        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)\',\n+        u\'flag\': u\'/++resource++country-flags/tw.gif\',\n+    },\n }\n \n # convert the utf-8 encoded values to unicode\ndiff --git a/plone/i18n/locales/tests/base.py b/plone/i18n/locales/tests/base.py\nindex bb0f287..2523647 100644\n--- a/plone/i18n/locales/tests/base.py\n+++ b/plone/i18n/locales/tests/base.py\n@@ -4,17 +4,22 @@\n \n def setUp():\n     from zope.component.testing import setUp\n+\n     setUp()\n     import zope.component\n+\n     XMLConfig(\'meta.zcml\', zope.component)()\n \n     import zope.browserresource\n+\n     XMLConfig(\'meta.zcml\', zope.browserresource)()\n \n     import plone.i18n.locales\n+\n     XMLConfig(\'configure.zcml\', plone.i18n.locales)()\n \n \n def tearDown():\n     from zope.component.testing import tearDown\n+\n     tearDown()\ndiff --git a/plone/i18n/locales/tests/test_cctlds.py b/plone/i18n/locales/tests/test_cctlds.py\nindex eb2167b..1a38f86 100644\n--- a/plone/i18n/locales/tests/test_cctlds.py\n+++ b/plone/i18n/locales/tests/test_cctlds.py\n@@ -4,31 +4,34 @@\n \n \n class TestCCTLD(unittest.TestCase):\n-\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _makeOne(self):\n         from plone.i18n.locales.interfaces import ICcTLDInformation\n         from zope.component import queryUtility\n+\n         return queryUtility(ICcTLDInformation)\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ICcTLDInformation\n         from plone.i18n.locales.cctld import CcTLDInformation\n-        self.assert_(verifyClass(ICcTLDInformation, CcTLDInformation))\n+\n+        self.assertTrue(verifyClass(ICcTLDInformation, CcTLDInformation))\n \n     def test_get_available(self):\n         util = self._makeOne()\n         tlds = util.getAvailableTLDs()\n         self.assertTrue(len(tlds) > 200)\n-        self.assert_(u\'nl\' in tlds)\n+        self.assertIn(u"nl", tlds)\n \n     def test_get(self):\n         util = self._makeOne()\n@@ -37,5 +40,5 @@ def test_get(self):\n \n     def test_get_languages_for(self):\n         util = self._makeOne()\n-        self.assertEquals(util.getLanguagesForTLD(u\'nl\'), [u\'nl\'])\n-        self.assertEquals(util.getLanguagesForTLD(u\'be\'), [u\'nl\', u\'fr\'])\n+        self.assertEqual(util.getLanguagesForTLD(u"nl"), [u"nl"])\n+        self.assertEqual(util.getLanguagesForTLD(u"be"), [u"nl", u"fr"])\ndiff --git a/plone/i18n/locales/tests/test_countries.py b/plone/i18n/locales/tests/test_countries.py\nindex c0d58ff..12ac5ef 100644\n--- a/plone/i18n/locales/tests/test_countries.py\n+++ b/plone/i18n/locales/tests/test_countries.py\n@@ -4,51 +4,55 @@\n \n \n class TestAvailableCountries(unittest.TestCase):\n-\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _makeOne(self):\n         from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import ICountryAvailability\n+\n         return queryUtility(ICountryAvailability)\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ICountryAvailability\n         from plone.i18n.locales.countries import CountryAvailability\n-        self.assert_(verifyClass(ICountryAvailability, CountryAvailability))\n+\n+        self.assertTrue(verifyClass(ICountryAvailability, CountryAvailability))\n \n     def test_get_available(self):\n         util = self._makeOne()\n         countrycodes = util.getAvailableCountries()\n         self.assertTrue(len(countrycodes) > 200)\n-        self.assert_(u\'de\' in countrycodes)\n+        self.assertIn(u"de", countrycodes)\n \n     def test_get_countries(self):\n         util = self._makeOne()\n         countries = util.getCountries()\n         self.assertTrue(len(countries) > 200)\n-        self.assert_(u\'de\' in countries)\n-        de = countries[u\'de\']\n-        self.assertEquals(de[u\'name\'], u\'Germany\')\n-        self.assertEquals(de[u\'flag\'], u\'/++resource++country-flags/de.gif\')\n+        self.assert_(u"de" in countries)\n+        de = countries[u"de"]\n+        self.assertEqual(de[u"name"], u"Germany")\n+        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n \n     def test_get_country_listing(self):\n         util = self._makeOne()\n         countries = util.getCountryListing()\n         self.assertTrue(len(countries) > 200)\n-        self.assertTrue((u\'de\', u\'Germany\') in countries)\n+        self.assertIn((u"de", u"Germany"), countries)\n \n     def test_reservations(self):\n         # our list has historically contained some reservations, which\n         # aren\'t part of the official list. We retain those, to avoid\n         # breaking content based on these\n         from plone.i18n.locales.countries import _countrylist\n-        self.assertTrue(u\'an\' in _countrylist)\n-        self.assertTrue(u\'cs\' in _countrylist)\n+\n+        self.assertIn(u"an", _countrylist)\n+        self.assertIn(u"cs", _countrylist)\ndiff --git a/plone/i18n/locales/tests/test_languages.py b/plone/i18n/locales/tests/test_languages.py\nindex c9704e3..0d2fafe 100644\n--- a/plone/i18n/locales/tests/test_languages.py\n+++ b/plone/i18n/locales/tests/test_languages.py\n@@ -4,32 +4,33 @@\n \n \n class TestInterfaces(unittest.TestCase):\n-\n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ILanguageAvailability\n         from plone.i18n.locales.languages import LanguageAvailability\n+\n         self.assert_(verifyClass(ILanguageAvailability, LanguageAvailability))\n \n \n class TestDeprecatedLanguages(unittest.TestCase):\n-\n     def test_deprecated(self):\n         # make sure we retain deprecated language codes, as we don\'t\n         # want to break existing content based on it\n         from plone.i18n.locales.languages import _languagelist\n-        self.assertTrue(u\'mo\' in _languagelist)\n-        self.assertTrue(u\'sh\' in _languagelist)\n \n+        self.assertIn(u"mo", _languagelist)\n+        self.assertIn(u"sh", _languagelist)\n \n-class BaseTestCase(object):\n \n+class BaseTestCase(object):\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _makeOne(self):\n@@ -37,72 +38,81 @@ def _makeOne(self):\n \n     def _verify(self, interface, klass):\n         from zope.interface.verify import verifyClass\n+\n         return verifyClass(interface, klass)\n \n     def test_get_available(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages()\n         self.assertTrue(len(languagecodes) > 100)\n-        self.assertTrue(u\'de\' in languagecodes)\n-        self.assertFalse(u\'pt-br\' in languagecodes)\n+        self.assertIn(u"de", languagecodes)\n+        self.assertNotIn(u"pt-br", languagecodes)\n \n     def test_get_available_combined(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages(combined=True)\n         self.assertTrue(len(languagecodes) > 300)\n-        self.assertTrue(u\'de\' in languagecodes)\n-        self.assertTrue(u\'pt-br\' in languagecodes)\n+        self.assertIn(u"de", languagecodes)\n+        self.assertIn(u"pt-br", languagecodes)\n \n     def test_get_languages(self):\n         util = self._makeOne()\n         languages = util.getLanguages()\n         self.assertTrue(len(languages) > 100)\n-        self.assertTrue(u\'de\' in languages)\n-        self.assertFalse(u\'pt-br\' in languages)\n-        de = languages[u\'de\']\n-        self.assertEquals(de[u\'name\'], u\'German\')\n-        self.assertEquals(de[u\'native\'], u\'Deutsch\')\n-        self.assertEquals(de[u\'flag\'], u\'/++resource++country-flags/de.gif\')\n+        self.assertIn(u"de", languages)\n+        self.assertNotIn(u"pt-br", languages)\n+        de = languages[u"de"]\n+        self.assertEqual(de[u"name"], u"German")\n+        self.assertEqual(de[u"native"], u"Deutsch")\n+        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n \n     def test_get_languages_combined(self):\n         util = self._makeOne()\n         languages = util.getLanguages(combined=True)\n         self.assertTrue(len(languages) > 300)\n-        self.assertTrue(u\'de\' in languages)\n-        self.assertTrue(u\'pt-br\' in languages)\n-        self.assertEquals(languages[u\'de\'][u\'name\'], u\'German\')\n-        self.assertEquals(languages[u\'pt-br\'][u\'name\'], u\'Portuguese (Brazil)\')\n+        self.assertIn(u"de", languages)\n+        self.assertIn(u"pt-br", languages)\n+        self.assertEqual(languages[u"de"][u"name"], u"German")\n+        self.assertEqual(languages[u"pt-br"][u"name"], u"Portuguese (Brazil)")\n \n     def test_get_language_listing(self):\n         util = self._makeOne()\n         languages = util.getLanguageListing()\n         self.assertTrue(len(languages) > 100)\n-        self.assertTrue((u\'de\', u\'German\') in languages)\n+        self.assertIn((u"de", u"German"), languages)\n \n \n class TestContentLanguageAvailability(BaseTestCase, unittest.TestCase):\n-\n     def _makeOne(self):\n         from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IContentLanguageAvailability\n+\n         return queryUtility(IContentLanguageAvailability)\n \n     def test_interface(self):\n         from plone.i18n.locales.interfaces import IContentLanguageAvailability\n         from plone.i18n.locales.languages import ContentLanguageAvailability\n-        self.assert_(self._verify(IContentLanguageAvailability,\n-                                  ContentLanguageAvailability))\n \n+        self.assertTrue(\n+            self._verify(\n+                IContentLanguageAvailability, ContentLanguageAvailability\n+            )\n+        )\n \n-class TestMetadataLanguageAvailability(BaseTestCase, unittest.TestCase):\n \n+class TestMetadataLanguageAvailability(BaseTestCase, unittest.TestCase):\n     def _makeOne(self):\n         from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n+\n         return queryUtility(IMetadataLanguageAvailability)\n \n     def test_interface(self):\n         from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n         from plone.i18n.locales.languages import MetadataLanguageAvailability\n-        self.assert_(self._verify(IMetadataLanguageAvailability,\n-                                  MetadataLanguageAvailability))\n+\n+        self.assertTrue(\n+            self._verify(\n+                IMetadataLanguageAvailability, MetadataLanguageAvailability\n+            )\n+        )\ndiff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py\nindex a74d986..74ee6b2 100644\n--- a/plone/i18n/negotiate/negotiate.py\n+++ b/plone/i18n/negotiate/negotiate.py\n@@ -36,8 +36,7 @@ def __init__(self, site, request):\n             set_language = request.get(\'set_language\', None)\n             if set_language:\n                 langsCookie = tool.setLanguageCookie(\n-                    set_language,\n-                    request=request\n+                    set_language, request=request\n                 )\n             else:\n                 # Get from cookie\n@@ -66,6 +65,7 @@ def __init__(self, site, request):\n             # We need to make sure its not a subrequest otherwise we are going\n             # To change the language of the main request\n             from plone.subrequest import ISubRequest\n+\n             if not ISubRequest.providedBy(request):\n                 tool.setLanguageCookie(langs[0], noredir=True, request=request)\n \ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 4bb3ac7..8c4f17a 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -31,7 +31,8 @@ def registerLangPrefsMethod(prefs, kind=\'language\'):\n     _langPrefsRegistry[kind].append(prefs)\n     # sort by priority\n     _langPrefsRegistry[kind].sort(\n-        key=operator.itemgetter(\'priority\'), reverse=True)\n+        key=operator.itemgetter(\'priority\'), reverse=True\n+    )\n \n \n def getLangPrefs(env, kind=\'language\'):\n@@ -98,9 +99,9 @@ def getAccepted(self, request, kind=\'content-type\'):\n         http_accepts = request.get(header_name, \'\')\n \n         if (\n-            user_accepts and\n-            http_accepts and\n-            user_accepts == request.cookies.get(\'custom_name\')\n+            user_accepts\n+            and http_accepts\n+            and user_accepts == request.cookies.get(\'custom_name\')\n         ):\n             user_accepts = [a.strip() for a in user_accepts.split(\',\')]\n             http_accepts = [a.strip() for a in http_accepts.split(\',\')]\n@@ -194,26 +195,16 @@ def setCookieLanguage(request, lang, REQUEST=None):\n # higher number = higher priority\n # if a acceptor returns a false value (() or None) then the next acceptor\n # in the chain is queried\n+registerLangPrefsMethod({\'klass\': BrowserAccept, \'priority\': 10}, \'language\')\n+registerLangPrefsMethod({\'klass\': CookieAccept, \'priority\': 40}, \'language\')\n registerLangPrefsMethod(\n-    {\'klass\': BrowserAccept, \'priority\': 10},\n-    \'language\'\n-)\n-registerLangPrefsMethod(\n-    {\'klass\': CookieAccept, \'priority\': 40},\n-    \'language\'\n-)\n-registerLangPrefsMethod(\n-    {\'klass\': BrowserAccept, \'priority\': 10},\n-    \'content-type\'\n+    {\'klass\': BrowserAccept, \'priority\': 10}, \'content-type\'\n )\n \n \n class Negotiator(object):\n \n-    tests = {\n-        \'content-type\': type_accepted,\n-        \'language\': lang_accepted,\n-    }\n+    tests = {\'content-type\': type_accepted, \'language\': lang_accepted}\n \n     def negotiate(self, choices, request, kind=\'content-type\'):\n         choices = tuple(choices)\ndiff --git a/plone/i18n/normalizer/adapters.py b/plone/i18n/normalizer/adapters.py\nindex 58960ec..14010ce 100644\n--- a/plone/i18n/normalizer/adapters.py\n+++ b/plone/i18n/normalizer/adapters.py\n@@ -51,7 +51,7 @@ class UserPreferredURLNormalizer(object):\n     """\n \n     def __init__(self, context):\n-        self.context = context # the context must be the request\n+        self.context = context  # the context must be the request\n \n     def normalize(self, text):\n         """Returns a normalized Unicode string."""\ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 0bc232b..09c8ca3 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -9,7 +9,9 @@\n # On OpenBSD string.whitespace has a non-standard implementation\n # See http://dev.plone.org/plone/ticket/4704 for details\n whitespace = \'\'.join([c for c in string.whitespace if ord(c) < 128])\n-allowed = string.ascii_letters + string.digits + string.punctuation + whitespace\n+allowed = (\n+    string.ascii_letters + string.digits + string.punctuation + whitespace\n+)\n \n CHAR = {}\n NULLMAP = [\'\' * 0x100]\n@@ -68,13 +70,15 @@ def baseNormalize(text):\n             ordinal = ord(ch)\n             if ordinal < UNIDECODE_LIMIT:\n                 h = ordinal >> 8\n-                l = ordinal & 0xff\n+                l = ordinal & 0xFF\n \n                 c = CHAR.get(h, None)\n \n                 if c == None:\n                     try:\n-                        mod = __import__(\'unidecode.x%02x\'%(h), [], [], [\'data\'])\n+                        mod = __import__(\n+                            \'unidecode.x%02x\' % (h), [], [], [\'data\']\n+                        )\n                     except ImportError:\n                         CHAR[h] = NULLMAP\n                         res.append(\'\')\n@@ -83,12 +87,12 @@ def baseNormalize(text):\n                     CHAR[h] = mod.data\n \n                     try:\n-                        res.append( mod.data[l] )\n+                        res.append(mod.data[l])\n                     except IndexError:\n                         res.append(\'\')\n                 else:\n                     try:\n-                        res.append( c[l] )\n+                        res.append(c[l])\n                     except IndexError:\n                         res.append(\'\')\n \ndiff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py\nindex 893e104..c1bfd10 100644\n--- a/plone/i18n/normalizer/bg.py\n+++ b/plone/i18n/normalizer/bg.py\n@@ -6,17 +6,68 @@\n \n \n # Bulgarian character mapping\n-mapping = {1040: \'A\', 1041: \'B\', 1042: \'V\', 1043: \'G\', 1044: \'D\', 1045: \'E\',\n-           1046: \'ZH\', 1047: \'Z\', 1048: \'I\', 1049: \'Y\', 1050: \'K\', 1051: \'L\',\n-           1052: \'M\', 1053: \'N\', 1054: \'O\', 1055: \'P\', 1056: \'R\', 1057: \'S\',\n-           1058: \'T\', 1059: \'U\', 1060: \'F\', 1061: \'H\', 1062: \'TS\', 1063: \'CH\',\n-           1064: \'SH\', 1065: \'SHT\', 1066: \'A\', 1068: \'Y\', 1070: \'YU\',\n-           1071: \'YA\', 1072: \'a\', 1073: \'b\', 1074: \'v\', 1075: \'g\', 1076: \'d\',\n-           1077: \'e\', 1078: \'zh\', 1079: \'z\', 1080: \'i\', 1081: \'y\', 1082: \'k\',\n-           1083: \'l\', 1084: \'m\', 1085: \'n\', 1086: \'o\', 1087: \'p\', 1088: \'r\',\n-           1089: \'s\', 1090: \'t\', 1091: \'u\', 1092: \'f\', 1093: \'h\', 1094: \'ts\',\n-           1095: \'ch\', 1096: \'sh\', 1097: \'sht\', 1098: \'a\', 1100: \'y\',\n-           1102: \'yu\', 1103: \'ya\'}\n+mapping = {\n+    1040: \'A\',\n+    1041: \'B\',\n+    1042: \'V\',\n+    1043: \'G\',\n+    1044: \'D\',\n+    1045: \'E\',\n+    1046: \'ZH\',\n+    1047: \'Z\',\n+    1048: \'I\',\n+    1049: \'Y\',\n+    1050: \'K\',\n+    1051: \'L\',\n+    1052: \'M\',\n+    1053: \'N\',\n+    1054: \'O\',\n+    1055: \'P\',\n+    1056: \'R\',\n+    1057: \'S\',\n+    1058: \'T\',\n+    1059: \'U\',\n+    1060: \'F\',\n+    1061: \'H\',\n+    1062: \'TS\',\n+    1063: \'CH\',\n+    1064: \'SH\',\n+    1065: \'SHT\',\n+    1066: \'A\',\n+    1068: \'Y\',\n+    1070: \'YU\',\n+    1071: \'YA\',\n+    1072: \'a\',\n+    1073: \'b\',\n+    1074: \'v\',\n+    1075: \'g\',\n+    1076: \'d\',\n+    1077: \'e\',\n+    1078: \'zh\',\n+    1079: \'z\',\n+    1080: \'i\',\n+    1081: \'y\',\n+    1082: \'k\',\n+    1083: \'l\',\n+    1084: \'m\',\n+    1085: \'n\',\n+    1086: \'o\',\n+    1087: \'p\',\n+    1088: \'r\',\n+    1089: \'s\',\n+    1090: \'t\',\n+    1091: \'u\',\n+    1092: \'f\',\n+    1093: \'h\',\n+    1094: \'ts\',\n+    1095: \'ch\',\n+    1096: \'sh\',\n+    1097: \'sht\',\n+    1098: \'a\',\n+    1100: \'y\',\n+    1102: \'yu\',\n+    1103: \'ya\',\n+}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py\nindex 6042264..43c87a8 100644\n--- a/plone/i18n/normalizer/de.py\n+++ b/plone/i18n/normalizer/de.py\n@@ -33,7 +33,7 @@\n     8216: \'-\',\n     8211: \'-\',\n     167: \'-\',\n-    8364: \'euro\'\n+    8364: \'euro\',\n }\n \n \ndiff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py\nindex 3f97ea6..b280419 100644\n--- a/plone/i18n/normalizer/el.py\n+++ b/plone/i18n/normalizer/el.py\n@@ -7,16 +7,75 @@\n \n # Greek character mapping\n mapping = {\n-    902: \'A\', 904: \'E\', 905: \'H\', 906: \'I\', 908: \'O\', 910: \'Y\', 911: \'O\',\n-    912: \'i\', 913: \'A\', 914: \'B\', 915: \'G\', 916: \'D\', 917: \'E\', 918: \'Z\',\n-    919: \'I\', 920: \'Th\', 921: \'I\', 922: \'K\', 923: \'L\', 924: \'M\', 925: \'N\',\n-    926: \'Ks\', 927: \'O\', 928: \'P\', 929: \'R\', 931: \'S\', 932: \'T\', 933: \'Y\',\n-    934: \'F\', 935: \'Ch\', 936: \'Ps\', 937: \'O\', 938: \'I\', 939: \'Y\', 940: \'a\',\n-    941: \'e\', 942: \'i\', 943: \'i\', 944: \'y\', 945: \'a\', 946: \'b\', 947: \'g\',\n-    948: \'d\', 949: \'e\', 950: \'z\', 951: \'i\', 952: \'th\', 953: \'i\', 954: \'k\',\n-    955: \'l\', 956: \'m\', 957: \'n\', 958: \'ks\', 959: \'o\', 960: \'p\', 961: \'r\',\n-    962: \'s\', 963: \'s\', 964: \'t\', 965: \'y\', 966: \'f\', 967: \'ch\', 968: \'ps\',\n-    969: \'o\', 970: \'i\', 971: \'y\', 972: \'o\', 973: \'y\', 974: \'o\',\n+    902: \'A\',\n+    904: \'E\',\n+    905: \'H\',\n+    906: \'I\',\n+    908: \'O\',\n+    910: \'Y\',\n+    911: \'O\',\n+    912: \'i\',\n+    913: \'A\',\n+    914: \'B\',\n+    915: \'G\',\n+    916: \'D\',\n+    917: \'E\',\n+    918: \'Z\',\n+    919: \'I\',\n+    920: \'Th\',\n+    921: \'I\',\n+    922: \'K\',\n+    923: \'L\',\n+    924: \'M\',\n+    925: \'N\',\n+    926: \'Ks\',\n+    927: \'O\',\n+    928: \'P\',\n+    929: \'R\',\n+    931: \'S\',\n+    932: \'T\',\n+    933: \'Y\',\n+    934: \'F\',\n+    935: \'Ch\',\n+    936: \'Ps\',\n+    937: \'O\',\n+    938: \'I\',\n+    939: \'Y\',\n+    940: \'a\',\n+    941: \'e\',\n+    942: \'i\',\n+    943: \'i\',\n+    944: \'y\',\n+    945: \'a\',\n+    946: \'b\',\n+    947: \'g\',\n+    948: \'d\',\n+    949: \'e\',\n+    950: \'z\',\n+    951: \'i\',\n+    952: \'th\',\n+    953: \'i\',\n+    954: \'k\',\n+    955: \'l\',\n+    956: \'m\',\n+    957: \'n\',\n+    958: \'ks\',\n+    959: \'o\',\n+    960: \'p\',\n+    961: \'r\',\n+    962: \'s\',\n+    963: \'s\',\n+    964: \'t\',\n+    965: \'y\',\n+    966: \'f\',\n+    967: \'ch\',\n+    968: \'ps\',\n+    969: \'o\',\n+    970: \'i\',\n+    971: \'y\',\n+    972: \'o\',\n+    973: \'y\',\n+    974: \'o\',\n }\n \n \ndiff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py\nindex fefa3f4..9ccf4c1 100644\n--- a/plone/i18n/normalizer/es.py\n+++ b/plone/i18n/normalizer/es.py\n@@ -7,18 +7,29 @@\n \n # Spanish character mapping\n mapping = {\n-    192: u\'A\', 193: u\'A\',\n-    200: u\'E\', 201: u\'E\',\n-    204: u\'I\', 205: u\'I\',\n-    210: u\'O\', 211: u\'O\',\n-    217: u\'U\', 218: u\'U\', 220: u\'U\',\n+    192: u\'A\',\n+    193: u\'A\',\n+    200: u\'E\',\n+    201: u\'E\',\n+    204: u\'I\',\n+    205: u\'I\',\n+    210: u\'O\',\n+    211: u\'O\',\n+    217: u\'U\',\n+    218: u\'U\',\n+    220: u\'U\',\n     209: u\'N\',\n     199: u\'C\',\n-    224: u\'a\', 225: u\'a\',\n-    232: u\'e\', 233: u\'e\',\n-    236: u\'i\', 237: u\'i\',\n-    242: u\'o\', 243: u\'o\',\n-    249: u\'u\', 250: u\'u\',\n+    224: u\'a\',\n+    225: u\'a\',\n+    232: u\'e\',\n+    233: u\'e\',\n+    236: u\'i\',\n+    237: u\'i\',\n+    242: u\'o\',\n+    243: u\'o\',\n+    249: u\'u\',\n+    250: u\'u\',\n     241: u\'n\',\n     231: u\'c\',\n }\ndiff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py\nindex ef3caa3..006a385 100644\n--- a/plone/i18n/normalizer/fr.py\n+++ b/plone/i18n/normalizer/fr.py\n@@ -6,9 +6,7 @@\n \n \n # French character mapping\n-mapping = {\n-    339: \'oe\'\n-}\n+mapping = {339: \'oe\'}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/pl.py b/plone/i18n/normalizer/pl.py\nindex 73695ad..b5c72d1 100644\n--- a/plone/i18n/normalizer/pl.py\n+++ b/plone/i18n/normalizer/pl.py\n@@ -5,9 +5,7 @@\n \n \n # Polish character mapping\n-mapping = {\n-    321: \'L\', 322: \'l\',\n-}\n+mapping = {321: \'L\', 322: \'l\'}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/pt.py b/plone/i18n/normalizer/pt.py\nindex 851202c..14006d0 100644\n--- a/plone/i18n/normalizer/pt.py\n+++ b/plone/i18n/normalizer/pt.py\n@@ -6,17 +6,31 @@\n \n # Portuguese character mapping\n mapping = {\n-    192: u\'A\', 193: u\'A\', 194: u\'A\', 195: u\'A\',\n-    201: u\'E\', 202: u\'E\',\n+    192: u\'A\',\n+    193: u\'A\',\n+    194: u\'A\',\n+    195: u\'A\',\n+    201: u\'E\',\n+    202: u\'E\',\n     205: u\'I\',\n-    211: u\'O\', 212: u\'O\', 213: u\'O\',\n-    218: u\'U\', 220: u\'U\',\n+    211: u\'O\',\n+    212: u\'O\',\n+    213: u\'O\',\n+    218: u\'U\',\n+    220: u\'U\',\n     199: u\'C\',\n-    224: u\'a\', 225: u\'a\', 226: u\'a\', 227: u\'a\',\n-    233: u\'e\', 234: u\'e\',\n+    224: u\'a\',\n+    225: u\'a\',\n+    226: u\'a\',\n+    227: u\'a\',\n+    233: u\'e\',\n+    234: u\'e\',\n     237: u\'i\',\n-    243: u\'o\', 244: u\'o\', 245: u\'o\',\n-    250: u\'u\', 252: u\'u\',\n+    243: u\'o\',\n+    244: u\'o\',\n+    245: u\'o\',\n+    250: u\'u\',\n+    252: u\'u\',\n     231: u\'c\',\n }\n \ndiff --git a/plone/i18n/normalizer/ru.py b/plone/i18n/normalizer/ru.py\nindex 74cac2a..1d35782 100644\n--- a/plone/i18n/normalizer/ru.py\n+++ b/plone/i18n/normalizer/ru.py\n@@ -6,23 +6,72 @@\n \n # Russian character mapping\n mapping = {\n-    1081: \'i\', 1049: \'I\', 1094: \'c\', 1062: \'C\',\n-    1091: \'u\', 1059: \'U\', 1082: \'k\', 1050: \'K\',\n-    1077: \'e\', 1045: \'E\', 1085: \'n\', 1053: \'N\',\n-    1075: \'g\', 1043: \'G\', 1096: \'sh\', 1064: \'SH\',\n-    1097: \'sch\', 1065: \'SCH\', 1079: \'z\', 1047: \'Z\',\n-    1093: \'h\', 1061: \'H\', 1098: \'\', 1066: \'\',\n-    1092: \'f\', 1060: \'F\', 1099: \'y\', 1067: \'Y\',\n-    1074: \'v\', 1042: \'V\', 1072: \'a\', 1040: \'A\',\n-    1087: \'p\', 1055: \'P\', 1088: \'r\', 1056: \'R\',\n-    1086: \'o\', 1054: \'O\', 1083: \'l\', 1051: \'L\',\n-    1076: \'d\', 1044: \'D\', 1078: \'zh\', 1046: \'ZH\',\n-    1101: \'e\', 1069: \'E\', 1103: \'ya\', 1071: \'YA\',\n-    1095: \'ch\', 1063: \'CH\', 1089: \'s\', 1057: \'S\',\n-    1084: \'m\', 1052: \'M\', 1080: \'i\', 1048: \'I\',\n-    1090: \'t\', 1058: \'T\', 1100: \'\', 1068: \'\',\n-    1073: \'b\', 1041: \'B\', 1102: \'yu\', 1070: \'YU\',\n-    1105: \'yo\', 1025: \'YO\'\n+    1081: \'i\',\n+    1049: \'I\',\n+    1094: \'c\',\n+    1062: \'C\',\n+    1091: \'u\',\n+    1059: \'U\',\n+    1082: \'k\',\n+    1050: \'K\',\n+    1077: \'e\',\n+    1045: \'E\',\n+    1085: \'n\',\n+    1053: \'N\',\n+    1075: \'g\',\n+    1043: \'G\',\n+    1096: \'sh\',\n+    1064: \'SH\',\n+    1097: \'sch\',\n+    1065: \'SCH\',\n+    1079: \'z\',\n+    1047: \'Z\',\n+    1093: \'h\',\n+    1061: \'H\',\n+    1098: \'\',\n+    1066: \'\',\n+    1092: \'f\',\n+    1060: \'F\',\n+    1099: \'y\',\n+    1067: \'Y\',\n+    1074: \'v\',\n+    1042: \'V\',\n+    1072: \'a\',\n+    1040: \'A\',\n+    1087: \'p\',\n+    1055: \'P\',\n+    1088: \'r\',\n+    1056: \'R\',\n+    1086: \'o\',\n+    1054: \'O\',\n+    1083: \'l\',\n+    1051: \'L\',\n+    1076: \'d\',\n+    1044: \'D\',\n+    1078: \'zh\',\n+    1046: \'ZH\',\n+    1101: \'e\',\n+    1069: \'E\',\n+    1103: \'ya\',\n+    1071: \'YA\',\n+    1095: \'ch\',\n+    1063: \'CH\',\n+    1089: \'s\',\n+    1057: \'S\',\n+    1084: \'m\',\n+    1052: \'M\',\n+    1080: \'i\',\n+    1048: \'I\',\n+    1090: \'t\',\n+    1058: \'T\',\n+    1100: \'\',\n+    1068: \'\',\n+    1073: \'b\',\n+    1041: \'B\',\n+    1102: \'yu\',\n+    1070: \'YU\',\n+    1105: \'yo\',\n+    1025: \'YO\',\n }\n \n \ndiff --git a/plone/i18n/normalizer/tests/base.py b/plone/i18n/normalizer/tests/base.py\nindex 690da12..aaebc04 100644\n--- a/plone/i18n/normalizer/tests/base.py\n+++ b/plone/i18n/normalizer/tests/base.py\n@@ -4,18 +4,23 @@\n \n def setUp(self=None):\n     from zope.component.testing import setUp\n+\n     setUp()\n \n     import zope.component\n-    XMLConfig(\'meta.zcml\', zope.component)()\n+\n+    XMLConfig("meta.zcml", zope.component)()\n \n     import plone.i18n.normalizer\n-    XMLConfig(\'configure.zcml\', plone.i18n.normalizer)()\n+\n+    XMLConfig("configure.zcml", plone.i18n.normalizer)()\n \n     from zope.publisher.browser import BrowserLanguages\n+\n     zope.component.provideAdapter(BrowserLanguages)\n \n \n def tearDown(self=None):\n     from zope.component.testing import tearDown\n+\n     tearDown()\ndiff --git a/plone/i18n/normalizer/tests/test_adapters.py b/plone/i18n/normalizer/tests/test_adapters.py\nindex 63eca3d..d15aaca 100644\n--- a/plone/i18n/normalizer/tests/test_adapters.py\n+++ b/plone/i18n/normalizer/tests/test_adapters.py\n@@ -4,13 +4,14 @@\n \n \n class BaseTestCase(object):\n-\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _getTargetClass(self):\n@@ -18,82 +19,81 @@ def _getTargetClass(self):\n \n     def _makeOne(self, lang):\n         from zope.publisher.browser import TestRequest\n+\n         request = TestRequest(environ=dict(HTTP_ACCEPT_LANGUAGE=lang))\n         return self._getTargetClass()(request)\n \n \n class TestFileNameNormalizer(BaseTestCase, unittest.TestCase):\n-\n     def _getTargetClass(self):\n-        from plone.i18n.normalizer.adapters import \\\n-            UserPreferredFileNameNormalizer\n+        from plone.i18n.normalizer.adapters import (\n+            UserPreferredFileNameNormalizer,\n+        )\n+\n         return UserPreferredFileNameNormalizer\n \n     def test_german(self):\n-        norm = self._makeOne(\'de\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text with umlaeut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n+        )\n \n     def test_german_country(self):\n-        norm = self._makeOne(\'de-DE\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de-DE")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n+        )\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text with umlaeut\')\n     def test_english(self):\n-        norm = self._makeOne(\'en\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("en")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text with umlaut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaut"\n+        )\n \n     def test_spanish(self):\n-        norm = self._makeOne(\'es\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          \'simpleandsafe\')\n-        self.assertEquals(norm.normalize(u\'text with e\xc3\xb1e\'),\n-                          u\'text with ene\')\n+        norm = self._makeOne("es")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), "simpleandsafe")\n+        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text with ene")\n \n \n class TestUrlNormalizer(BaseTestCase, unittest.TestCase):\n-\n     def _getTargetClass(self):\n         from plone.i18n.normalizer.adapters import UserPreferredURLNormalizer\n+\n         return UserPreferredURLNormalizer\n \n     def test_german(self):\n-        norm = self._makeOne(\'de\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text-with-umlaeut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n+        )\n \n     def test_german_country(self):\n-        norm = self._makeOne(\'de-DE\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de-DE")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text-with-umlaeut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n+        )\n \n     def test_english(self):\n-        norm = self._makeOne(\'en\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("en")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text-with-umlaut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaut"\n+        )\n \n     def test_spanish(self):\n-        norm = self._makeOne(\'es\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("es")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with e\xc3\xb1e\'),\n-                          u\'text-with-ene\')\n+        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text-with-ene")\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 7873847..93b0f6c 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -15,7 +15,7 @@\n \n def utf8unicode(value):\n     if six.PY2:\n-        return unicode(value, \'utf-8\')\n+        return unicode(value, "utf-8")\n     return value\n \n \n@@ -290,20 +290,24 @@ def testLocaleAwareURLNormalizer():\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        DocTestSuite(\'plone.i18n.normalizer\'),\n-        DocTestSuite(\'plone.i18n.normalizer.base\'),\n-        DocTestSuite(\'plone.i18n.normalizer.de\'),\n-        DocTestSuite(\'plone.i18n.normalizer.el\'),\n-        DocTestSuite(\'plone.i18n.normalizer.fr\'),\n-        DocTestSuite(\'plone.i18n.normalizer.ja\'),\n-        DocTestSuite(\'plone.i18n.normalizer.pl\'),\n-        DocTestSuite(\'plone.i18n.normalizer.ru\'),\n-        DocTestSuite(\'plone.i18n.normalizer.tr\'),\n-        DocTestSuite(\'plone.i18n.normalizer.bg\'),\n-        DocTestSuite(\'plone.i18n.normalizer.uk\'),\n-        DocTestSuite(\'plone.i18n.normalizer.es\'),\n-        DocTestSuite(setUp=configurationSetUp,\n-                     tearDown=tearDown,\n-                     optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE),\n-        ))\n+    return unittest.TestSuite(\n+        (\n+            DocTestSuite("plone.i18n.normalizer"),\n+            DocTestSuite("plone.i18n.normalizer.base"),\n+            DocTestSuite("plone.i18n.normalizer.de"),\n+            DocTestSuite("plone.i18n.normalizer.el"),\n+            DocTestSuite("plone.i18n.normalizer.fr"),\n+            DocTestSuite("plone.i18n.normalizer.ja"),\n+            DocTestSuite("plone.i18n.normalizer.pl"),\n+            DocTestSuite("plone.i18n.normalizer.ru"),\n+            DocTestSuite("plone.i18n.normalizer.tr"),\n+            DocTestSuite("plone.i18n.normalizer.bg"),\n+            DocTestSuite("plone.i18n.normalizer.uk"),\n+            DocTestSuite("plone.i18n.normalizer.es"),\n+            DocTestSuite(\n+                setUp=configurationSetUp,\n+                tearDown=tearDown,\n+                optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE,\n+            ),\n+        )\n+    )\ndiff --git a/plone/i18n/normalizer/tr.py b/plone/i18n/normalizer/tr.py\nindex 0cc81b8..b9310ef 100644\n--- a/plone/i18n/normalizer/tr.py\n+++ b/plone/i18n/normalizer/tr.py\n@@ -6,9 +6,7 @@\n \n \n # Turkish character mapping\n-mapping = {\n-    286: \'G\', 287: \'g\', 304: \'I\', 305: \'i\', 350: \'S\', 351: \'s\'\n-}\n+mapping = {286: \'G\', 287: \'g\', 304: \'I\', 305: \'i\', 350: \'S\', 351: \'s\'}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/uk.py b/plone/i18n/normalizer/uk.py\nindex 1d395b0..3ed6dfc 100644\n--- a/plone/i18n/normalizer/uk.py\n+++ b/plone/i18n/normalizer/uk.py\n@@ -6,39 +6,72 @@\n \n # Ukrainian character mapping (according to BGN/PCGN romanization system)\n mapping = {\n-    0x0410: u\'A\', 0x0430: u\'a\',\n-    0x0411: u\'B\', 0x0431: u\'b\',\n-    0x0412: u\'V\', 0x0432: u\'v\',\n-    0x0413: u\'H\', 0x0433: u\'h\',\n-    0x0490: u\'G\', 0x0491: u\'g\',\n-    0x0414: u\'D\', 0x0434: u\'d\',\n-    0x0415: u\'E\', 0x0435: u\'e\',\n-    0x0404: u\'YE\', 0x0454: u\'ye\',\n-    0x0416: u\'ZH\', 0x0436: u\'zh\',\n-    0x0417: u\'Z\', 0x0437: u\'z\',\n-    0x0418: u\'Y\', 0x0438: u\'y\',\n-    0x0406: u\'I\', 0x0456: u\'i\',\n-    0x0407: u\'YI\', 0x0457: u\'yi\',\n-    0x0419: u\'Y\', 0x0439: u\'y\',\n-    0x041a: u\'K\', 0x043a: u\'k\',\n-    0x041b: u\'L\', 0x043b: u\'l\',\n-    0x041c: u\'M\', 0x043c: u\'m\',\n-    0x041d: u\'N\', 0x043d: u\'n\',\n-    0x041e: u\'O\', 0x043e: u\'o\',\n-    0x041f: u\'P\', 0x043f: u\'p\',\n-    0x0420: u\'R\', 0x0440: u\'r\',\n-    0x0421: u\'S\', 0x0441: u\'s\',\n-    0x0422: u\'T\', 0x0442: u\'t\',\n-    0x0423: u\'U\', 0x0443: u\'u\',\n-    0x0424: u\'F\', 0x0444: u\'f\',\n-    0x0425: u\'KH\', 0x0445: u\'kh\',\n-    0x0426: u\'TS\', 0x0446: u\'ts\',\n-    0x0427: u\'CH\', 0x0447: u\'ch\',\n-    0x0428: u\'SH\', 0x0448: u\'sh\',\n-    0x0429: u\'SHCH\', 0x0449: u\'shch\',\n-    0x042c: u\'\', 0x044c: u\'\',\n-    0x042e: u\'YU\', 0x044e: u\'yu\',\n-    0x042f: u\'YA\', 0x044f: u\'ya\',\n+    0x0410: u\'A\',\n+    0x0430: u\'a\',\n+    0x0411: u\'B\',\n+    0x0431: u\'b\',\n+    0x0412: u\'V\',\n+    0x0432: u\'v\',\n+    0x0413: u\'H\',\n+    0x0433: u\'h\',\n+    0x0490: u\'G\',\n+    0x0491: u\'g\',\n+    0x0414: u\'D\',\n+    0x0434: u\'d\',\n+    0x0415: u\'E\',\n+    0x0435: u\'e\',\n+    0x0404: u\'YE\',\n+    0x0454: u\'ye\',\n+    0x0416: u\'ZH\',\n+    0x0436: u\'zh\',\n+    0x0417: u\'Z\',\n+    0x0437: u\'z\',\n+    0x0418: u\'Y\',\n+    0x0438: u\'y\',\n+    0x0406: u\'I\',\n+    0x0456: u\'i\',\n+    0x0407: u\'YI\',\n+    0x0457: u\'yi\',\n+    0x0419: u\'Y\',\n+    0x0439: u\'y\',\n+    0x041A: u\'K\',\n+    0x043A: u\'k\',\n+    0x041B: u\'L\',\n+    0x043B: u\'l\',\n+    0x041C: u\'M\',\n+    0x043C: u\'m\',\n+    0x041D: u\'N\',\n+    0x043D: u\'n\',\n+    0x041E: u\'O\',\n+    0x043E: u\'o\',\n+    0x041F: u\'P\',\n+    0x043F: u\'p\',\n+    0x0420: u\'R\',\n+    0x0440: u\'r\',\n+    0x0421: u\'S\',\n+    0x0441: u\'s\',\n+    0x0422: u\'T\',\n+    0x0442: u\'t\',\n+    0x0423: u\'U\',\n+    0x0443: u\'u\',\n+    0x0424: u\'F\',\n+    0x0444: u\'f\',\n+    0x0425: u\'KH\',\n+    0x0445: u\'kh\',\n+    0x0426: u\'TS\',\n+    0x0446: u\'ts\',\n+    0x0427: u\'CH\',\n+    0x0447: u\'ch\',\n+    0x0428: u\'SH\',\n+    0x0448: u\'sh\',\n+    0x0429: u\'SHCH\',\n+    0x0449: u\'shch\',\n+    0x042C: u\'\',\n+    0x044C: u\'\',\n+    0x042E: u\'YU\',\n+    0x044E: u\'yu\',\n+    0x042F: u\'YA\',\n+    0x044F: u\'ya\',\n }\n \n \ndiff --git a/plone/i18n/tests/base.py b/plone/i18n/tests/base.py\nindex 7ed13e5..f34ee74 100644\n--- a/plone/i18n/tests/base.py\n+++ b/plone/i18n/tests/base.py\n@@ -8,23 +8,28 @@\n \n class PloneI18nLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.i18n\n+\n         # Needed to have ILanguage adapter for dx\n         import plone.app.multilingual\n+\n         self.loadZCML(package=plone.i18n)\n         self.loadZCML(package=plone.app.multilingual)\n \n+\n PLT_FIXTURE = PloneI18nLayer()\n PLT_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PLT_FIXTURE, ), name=\'Plonei18nTestCase:Functional\')\n+    bases=(PLT_FIXTURE,), name=\'Plonei18nTestCase:Functional\'\n+)\n \n \n class TestCase(bbb.PloneTestCase):\n     """Simple test case\n     """\n+\n     layer = PLT_FUNCTIONAL_TESTING\n \n \ndiff --git a/plone/i18n/tests/test_languageutility.py b/plone/i18n/tests/test_languageutility.py\nindex 889c87d..1c59527 100644\n--- a/plone/i18n/tests/test_languageutility.py\n+++ b/plone/i18n/tests/test_languageutility.py\n@@ -13,81 +13,90 @@\n \n \n class TestLanguageTool(base.TestCase):\n-\n     def afterSetUp(self):\n-        self.ltool = getToolByName(self.portal, \'portal_languages\')\n-        setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n+        self.ltool = getToolByName(self.portal, "portal_languages")\n+        setRoles(self.layer["portal"], TEST_USER_ID, ["Contributor"])\n         self.settings = getUtility(IRegistry).forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\')\n+            ILanguageSchema, prefix="plone"\n+        )\n \n     def testLanguageSettings(self):\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.default_language = defaultLanguage\n         self.settings.available_languages = supportedLanguages\n         self.settings.use_combined_language_codes = False\n-        self.failUnless(self.ltool.getDefaultLanguage() == defaultLanguage)\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n+        self.assertEqual(self.ltool.getDefaultLanguage(), defaultLanguage)\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n \n     def testSupportedLanguages(self):\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.settings.default_language = defaultLanguage\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n \n         self.ltool.removeSupportedLanguages(supportedLanguages)\n-        self.failUnless(self.ltool.getSupportedLanguages() == [])\n+        self.assertEqual(self.ltool.getSupportedLanguages(), [])\n \n         for lang in supportedLanguages:\n             self.ltool.addSupportedLanguage(lang)\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n \n     def testDefaultLanguage(self):\n-        supportedLanguages = [\'de\', \'no\']\n+        supportedLanguages = ["de", "no"]\n         self.settings.available_languages = supportedLanguages\n-        self.ltool.setDefaultLanguage(\'no\')\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n-        self.failUnless(self.ltool.getDefaultLanguage() == \'no\')\n+        self.ltool.setDefaultLanguage("no")\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n+        self.assertEqual(self.ltool.getDefaultLanguage(), "no")\n \n         # default not in supported languages, should set to first supported\n-        self.ltool.setDefaultLanguage(\'nl\')\n+        self.ltool.setDefaultLanguage("nl")\n \n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n-        self.failUnless(self.ltool.getDefaultLanguage() == \'de\')\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n+        self.assertEqual(self.ltool.getDefaultLanguage(), "de")\n \n     def testAvailableLanguage(self):\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.ltool.setDefaultLanguage(defaultLanguage)\n         availableLanguages = self.ltool.getAvailableLanguageInformation()\n         for lang in availableLanguages:\n             if lang in supportedLanguages:\n-                self.failUnless(availableLanguages[lang][\'selected\'] == True)\n+                self.assertTrue(availableLanguages[lang]["selected"])\n \n     def testGetContentLanguage(self):\n         # tests for issue #11263\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.ltool.setDefaultLanguage(defaultLanguage)\n-        request = self.layer[\'request\']\n-        request.path = [\'doc\', ]\n-        self.layer[\'portal\'].invokeFactory(\'Document\', \'doc\')\n-        content = self.layer[\'portal\'][\'doc\']\n-        content.setLanguage(\'de\')\n+        request = self.layer["request"]\n+        request.path = ["doc"]\n+        self.layer["portal"].invokeFactory("Document", "doc")\n+        content = self.layer["portal"]["doc"]\n+        content.setLanguage("de")\n         alsoProvides(content, IDublinCore)\n         self.ltool.getContentLanguage(request)\n-        self.failUnless(self.ltool.getContentLanguage(request) == \'de\')\n-        request.path = [\'view\', \'foo.jpg\', \'doc\', ]\n-        self.failUnless(self.ltool.getContentLanguage(request) == \'de\')\n-        request.path = [\'foo.jpg\', \'doc\', ]\n-        self.failUnless(self.ltool.getContentLanguage(request) == None)\n-        request.path = [\'foo\', \'portal_catalog\', ]\n-        self.failUnless(self.ltool.getContentLanguage(request) == None)\n+        self.assertEqual(self.ltool.getContentLanguage(request), "de")\n+        request.path = ["view", "foo.jpg", "doc"]\n+        self.assertEqual(self.ltool.getContentLanguage(request), "de")\n+        request.path = ["foo.jpg", "doc"]\n+        self.assertIsNone(self.ltool.getContentLanguage(request))\n+        request.path = ["foo", "portal_catalog"]\n+        self.assertIsNone(self.ltool.getContentLanguage(request))\n \n     def testRegisterInterface(self):\n-        iface = getToolInterface(\'portal_languages\')\n+        iface = getToolInterface("portal_languages")\n         self.assertEqual(iface, ILanguageUtility)\ndiff --git a/plone/i18n/tests/test_negotiation.py b/plone/i18n/tests/test_negotiation.py\nindex 2757143..8b1df54 100644\n--- a/plone/i18n/tests/test_negotiation.py\n+++ b/plone/i18n/tests/test_negotiation.py\n@@ -12,39 +12,39 @@\n \n \n class LanguageNegotiationTestCase(base.FunctionalTestCase):\n-\n     def afterSetUp(self):\n-        self.basic_auth = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        self.basic_auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n         self.portal_path = self.portal.absolute_url(1)\n-        self.tool = getToolByName(self.portal, \'portal_languages\')\n+        self.tool = getToolByName(self.portal, "portal_languages")\n         self.settings = getUtility(IRegistry).forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\')\n+            ILanguageSchema, prefix="plone"\n+        )\n         self.settings.always_show_selector = 1\n         self.settings.set_cookie_always = 1\n \n     def checkLanguage(self, response, language):\n-        self.assertEquals(response.getStatus(), 200)\n-        cookie = response.getCookie(\'I18N_LANGUAGE\')[\'value\']\n-        self.assertEquals(cookie, language)\n+        self.assertEqual(response.getStatus(), 200)\n+        cookie = response.getCookie("I18N_LANGUAGE")["value"]\n+        self.assertEqual(cookie, language)\n \n \n class TestDefaultLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def testLanguageNegotiation(self):\n         # Once PLT is installed only English is allowed as a language\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt"},\n+        )\n         self.checkLanguage(response, "en")\n \n \n class TestNoCombinedLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n         # set some allowed languages and make sure we don\'t use combined\n         # language codes\n-        self.settings.available_languages = [\'en\', \'pt\', \'de\']\n+        self.settings.available_languages = ["en", "pt", "de"]\n         self.settings.use_request_negotiation = 1\n         self.settings.use_combined_language_codes = 0\n         self.settings.display_flags = 0\n@@ -52,216 +52,262 @@ def afterSetUp(self):\n     def testLanguageNegotiation(self):\n \n         # Test simple supported codes\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt"},\n+        )\n         self.checkLanguage(response, "pt")\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'de\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "de"},\n+        )\n         self.checkLanguage(response, "de")\n \n         # Test combined unsupported codes, should fall back\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt-br\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt-br"},\n+        )\n         self.checkLanguage(response, "pt")\n \n \n class TestCombinedLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n-        setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n+        setRoles(self.layer["portal"], TEST_USER_ID, ["Contributor"])\n         # set some allowed languages and make sure we don\'t use combined\n         # language codes\n         self.settings.use_combined_language_codes = True\n-        self.settings.available_languages = [\'en\', \'pt\', \'de\', \'pt-br\']\n+        self.settings.available_languages = ["en", "pt", "de", "pt-br"]\n         self.settings.use_request_negotiation = True\n         self.settings.display_flags = 0\n \n     def testLanguageNegotiation(self):\n \n         # Test simple supported codes\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt"},\n+        )\n         self.checkLanguage(response, "pt")\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'de\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "de"},\n+        )\n         self.checkLanguage(response, "de")\n \n         # Test combined supported codes\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt-br\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt-br"},\n+        )\n         self.checkLanguage(response, "pt-br")\n \n         # Test combined unsupported codes, should fall back\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'de-de\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "de-de"},\n+        )\n         self.checkLanguage(response, "de")\n \n \n class TestContentLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n-        setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n-        self.settings.available_languages = [\'en\', \'nl\', \'fr\']\n+        setRoles(self.layer["portal"], TEST_USER_ID, ["Contributor"])\n+        self.settings.available_languages = ["en", "nl", "fr"]\n         self.settings.use_content_negotiation = 1\n         self.settings.display_flags = 0\n         registry = getUtility(IRegistry)\n         # disable cooking of assets because this gives unwanted\n         # sideeffects in the request handling\n-        registry[\'plone.resources.development\'] = True\n+        registry["plone.resources.development"] = True\n \n     def testContentObject(self):\n-        self.layer[\'portal\'].invokeFactory(\'Document\', \'doc\')\n-        doc = self.layer[\'portal\'].doc\n-        ILanguage(doc).set_language(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(doc.getPhysicalPath())\n-        response = self.publish(docpath, self.basic_auth,\n-                                env={\'PATH_INFO\': docpath})\n+        self.layer["portal"].invokeFactory("Document", "doc")\n+        doc = self.layer["portal"].doc\n+        ILanguage(doc).set_language("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(doc.getPhysicalPath())\n+        response = self.publish(\n+            docpath, self.basic_auth, env={"PATH_INFO": docpath}\n+        )\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMPortal(self):\n-        adding = self.app.manage_addProduct[\'SiteAccess\']\n-        adding.manage_addVirtualHostMonster(\'VHM\')\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/" % self.portal.getId()\n-\n-        self.layer[\'portal\'].invokeFactory(\'Folder\', \'sub\')\n-        sub = self.layer[\'portal\'][\'sub\']\n-        sub.setLanguage(\'nl\')\n-        sub.invokeFactory(\'Document\', \'doc\')\n+        adding = self.app.manage_addProduct["SiteAccess"]\n+        adding.manage_addVirtualHostMonster("VHM")\n+        vhmBasePath = (\n+            "/VirtualHostBase/http/example.org:80/{0}/"\n+            "VirtualHostRoot/".format(self.portal.getId())\n+        )\n+        self.layer["portal"].invokeFactory("Folder", "sub")\n+        sub = self.layer["portal"]["sub"]\n+        sub.setLanguage("nl")\n+        sub.invokeFactory("Document", "doc")\n         doc = sub.doc\n-        doc.setLanguage(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(self.portal.portal_url.getRelativeContentPath(doc))\n+        doc.setLanguage("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(self.portal.portal_url.getRelativeContentPath(doc))\n         response = self.publish(vhmBasePath + docpath, self.basic_auth)\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMPortalVHSubpath(self):\n-        adding = self.app.manage_addProduct[\'SiteAccess\']\n-        adding.manage_addVirtualHostMonster(\'VHM\')\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/_vh_one/_vh_two/" % self.portal.getId()\n-\n-        self.layer[\'portal\'].invokeFactory(\'Folder\', \'sub\')\n-        sub = self.layer[\'portal\'][\'sub\']\n-        sub.setLanguage(\'nl\')\n-        sub.invokeFactory(\'Document\', \'doc\')\n+        adding = self.app.manage_addProduct["SiteAccess"]\n+        adding.manage_addVirtualHostMonster("VHM")\n+        vhmBasePath = (\n+            "/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot/"\n+            "_vh_one/_vh_two/".format(self.portal.getId())\n+        )\n+\n+        self.layer["portal"].invokeFactory("Folder", "sub")\n+        sub = self.layer["portal"]["sub"]\n+        sub.setLanguage("nl")\n+        sub.invokeFactory("Document", "doc")\n         doc = sub.doc\n-        doc.setLanguage(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(self.portal.portal_url.getRelativeContentPath(doc))\n+        doc.setLanguage("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(self.portal.portal_url.getRelativeContentPath(doc))\n         response = self.publish(vhmBasePath + docpath, self.basic_auth)\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMFolder(self):\n-        adding = self.app.manage_addProduct[\'SiteAccess\']\n-        adding.manage_addVirtualHostMonster(\'VHM\')\n-\n-        folder_path = \'/\'.join(self.layer[\'portal\'].getPhysicalPath())\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80%s/VirtualHostRoot/" % folder_path\n-        self.layer[\'portal\'].invokeFactory(\'Folder\', \'sub\')\n-        sub = self.layer[\'portal\'][\'sub\']\n-        sub.setLanguage(\'nl\')\n-        sub.invokeFactory(\'Document\', \'doc\')\n+        adding = self.app.manage_addProduct["SiteAccess"]\n+        adding.manage_addVirtualHostMonster("VHM")\n+\n+        folder_path = "/".join(self.layer["portal"].getPhysicalPath())\n+        vhmBasePath = "/VirtualHostBase/http/example.org:80{0}/VirtualHostRoot/".format(\n+            folder_path\n+        )\n+        self.layer["portal"].invokeFactory("Folder", "sub")\n+        sub = self.layer["portal"]["sub"]\n+        sub.setLanguage("nl")\n+        sub.invokeFactory("Document", "doc")\n         doc = sub.doc\n-        doc.setLanguage(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(doc.getPhysicalPath())\n+        doc.setLanguage("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(doc.getPhysicalPath())\n         docpath = docpath[len(folder_path) + 1:]\n \n-        response = self.publish(vhmBasePath + docpath, self.basic_auth,\n-                                env={\'diazo.off\': "1"})\n+        response = self.publish(\n+            vhmBasePath + docpath, self.basic_auth, env={"diazo.off": "1"}\n+        )\n         self.checkLanguage(response, "nl")\n \n \n class TestCcTLDLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n         # setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n-        self.settings.available_languages = [\'en\', \'nl\', \'fr\']\n+        self.settings.available_languages = ["en", "nl", "fr"]\n         self.settings.use_cctld_negotiation = 1\n         self.settings.display_flags = 0\n \n     def testSimpleHostname(self):\n         # For a simple hostname without ccTLD the canonical language is used\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'localhost\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "localhost"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testIPAddress(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'127.0.0.1\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "127.0.0.1"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testDutchDomain(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.nl\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.nl"}\n+        )\n         self.checkLanguage(response, "nl")\n \n     def testAcceptedLanguages(self):\n         # Brazil uses Portugese, which is not in the accepted languages list\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.br\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.br"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testMultiLingualCountries(self):\n         # Some countries refuse to pick a single language. Belgium\n         # uses both Dutch and French, with a preference for Dutch.\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.be\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.be"}\n+        )\n         self.checkLanguage(response, "nl")\n \n         # If we stop allowing Dutch we should now fall back to French\n-        self.settings.available_languages = [\'en\', \'fr\']\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.be\'})\n+        self.settings.available_languages = ["en", "fr"]\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.be"}\n+        )\n         self.checkLanguage(response, "fr")\n \n \n class TestSubdomainLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n-        self.settings.available_languages = [\'en\', \'nl\', \'fr\']\n+        self.settings.available_languages = ["en", "nl", "fr"]\n         self.settings.use_subdomain_negotiation = 1\n         self.settings.display_flags = 0\n \n     def testSimpleHostname(self):\n         # For a simple hostname without ccTLD the canonical language is used\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'localhost\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "localhost"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testIPAddress(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'127.0.0.1\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "127.0.0.1"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testDutchDomain(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'nl.plone.org\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "nl.plone.org"},\n+        )\n         self.checkLanguage(response, "nl")\n \n     def testAcceptedLanguages(self):\n         # Brazil uses Portugese, which is not in the accepted languages list\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'br.plone.org\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "br.plone.org"},\n+        )\n         self.checkLanguage(response, "en")\n \n     def testMultiLingualCountries(self):\n         # Some countries refuse to pick a single language. Belgium\n         # uses both Dutch and French, with a preference for Dutch.\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'be.plone.org\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "be.plone.org"},\n+        )\n         self.checkLanguage(response, "nl")\n \n         # If we stop allowing Dutch we should now fall back to French\n-        self.settings.available_languages = [\'en\', \'fr\']\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'be.plone.org\'})\n+        self.settings.available_languages = ["en", "fr"]\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "be.plone.org"},\n+        )\n         self.checkLanguage(response, "fr")\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex f43b4db..7b73e5b 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -23,6 +23,7 @@\n \n class LanguageBinding(object):\n     """Helper which holding language infos in request."""\n+\n     security = ClassSecurityInfo()\n     __allow_access_to_unprotected_subobjects__ = 1\n \n@@ -30,7 +31,7 @@ class LanguageBinding(object):\n     LANGUAGE = None\n     LANGUAGE_LIST = []\n \n-    security.declarePublic(\'getLanguageBindings\')\n+    security.declarePublic("getLanguageBindings")\n \n     def getLanguageBindings(self):\n         """Returns the bound languages.\n@@ -41,7 +42,7 @@ def getLanguageBindings(self):\n \n \n def setLanguageBinding(request):\n-    binding = request.get(\'LANGUAGE_TOOL\', None)\n+    binding = request.get("LANGUAGE_TOOL", None)\n     try:\n         settings = getMultiAdapter((getSite(), request), INegotiateLanguage)\n     except:\n@@ -53,13 +54,13 @@ def setLanguageBinding(request):\n         # Create new binding instance\n         binding = LanguageBinding()\n         # Set bindings instance to request here to avoid infinite recursion\n-        request[\'LANGUAGE_TOOL\'] = binding\n+        request["LANGUAGE_TOOL"] = binding\n     # Bind languages\n     binding.LANGUAGE = lang = settings.language\n     binding.DEFAULT_LANGUAGE = settings.default_language\n     binding.LANGUAGE_LIST = list(settings.language_list)\n     # Set LANGUAGE to request\n-    request[\'LANGUAGE\'] = lang\n+    request["LANGUAGE"] = lang\n     return lang\n \n \n@@ -75,31 +76,18 @@ def onRequest(object, event):\n class LanguageUtility(object):\n \n     # resources that must not use language specific URLs\n-    exclude_paths = frozenset((\n-        \'portal_css\',\n-        \'portal_javascripts\',\n-        \'portal_kss\',\n-        \'portal_factory\'\n-    ))\n-\n-    exclude_exts = frozenset((\n-        \'css\',\n-        \'js\',\n-        \'kss\',\n-        \'xml\',\n-        \'gif\',\n-        \'jpg\',\n-        \'png\',\n-        \'jpeg\'\n-    ))\n+    exclude_paths = frozenset(\n+        ("portal_css", "portal_javascripts", "portal_kss", "portal_factory")\n+    )\n+\n+    exclude_exts = frozenset(\n+        ("css", "js", "kss", "xml", "gif", "jpg", "png", "jpeg")\n+    )\n \n     @property\n     def settings(self):\n         registry = getUtility(IRegistry)\n-        return registry.forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\',\n-        )\n+        return registry.forInterface(ILanguageSchema, prefix="plone")\n \n     # BBB propouses\n     @property\n@@ -124,7 +112,7 @@ def listSupportedLanguages(self):\n         available = self.getAvailableLanguages()\n         for i in self.supported_langs:\n             if available.get(i):\n-                r.append((i, available[i][u\'name\']))\n+                r.append((i, available[i][u"name"]))\n         return r\n \n     def getAvailableLanguages(self):\n@@ -156,14 +144,13 @@ def listAvailableLanguageInformation(self):\n         new_langs = []\n         for lang in langs:\n             # add language-code to dict\n-            langs[lang][u\'code\'] = lang\n+            langs[lang][u"code"] = lang\n             # flatten outer dict to list to make it sortable\n             new_langs.append(langs[lang])\n         new_langs.sort(\n-            lambda x, y:\n-            cmp(\n-                x.get(u\'native\', x.get(u\'name\')),\n-                y.get(u\'native\', y.get(u\'name\'))\n+            lambda x, y: cmp(\n+                x.get(u"native", x.get(u"name")),\n+                y.get(u"native", y.get(u"name")),\n             )\n         )\n         return new_langs\n@@ -177,11 +164,11 @@ def getAvailableLanguageInformation(self):\n             languages = util.getLanguages()\n \n         for lang in languages:\n-            languages[lang][\'code\'] = lang\n+            languages[lang]["code"] = lang\n             if lang in self.supported_langs:\n-                languages[lang][\'selected\'] = True\n+                languages[lang]["selected"] = True\n             else:\n-                languages[lang][\'selected\'] = False\n+                languages[lang]["selected"] = False\n         return languages\n \n     def getDefaultLanguage(self):\n@@ -193,7 +180,9 @@ def setDefaultLanguage(self, langCode):\n         if langCode not in self.settings.available_languages:\n             # If its not in supported langs\n             if len(self.settings.available_languages) > 0:\n-                self.settings.default_language = self.settings.available_languages[0]  # noqa\n+                self.settings.default_language = self.settings.available_languages[\n+                    0\n+                ]  # noqa\n             return\n         self.settings.default_language = langCode\n \n@@ -201,22 +190,22 @@ def getNameForLanguageCode(self, langCode):\n         """Returns the name for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u\'name\', None)\n+            return info.get(u"name", None)\n         return None\n \n     def getFlagForLanguageCode(self, langCode):\n         """Returns the name of the flag for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u\'flag\', None)\n+            return info.get(u"flag", None)\n         return None\n \n     def addSupportedLanguage(self, langCode):\n         """Registers a language code as supported."""\n         alist = self.settings.available_languages[:]\n         if (\n-            langCode in list(self.getAvailableLanguages().keys()) and\n-            langCode not in alist\n+            langCode in list(self.getAvailableLanguages().keys())\n+            and langCode not in alist\n         ):\n             alist.append(langCode)\n             self.settings.available_languages = alist\n@@ -233,7 +222,7 @@ def setLanguageCookie(self, lang=None, request=None, noredir=None):\n         res = None\n         if lang and lang in self.getSupportedLanguages():\n             if lang != self.getLanguageCookie(request):\n-                request.RESPONSE.setCookie(\'I18N_LANGUAGE\', lang, path=\'/\')\n+                request.RESPONSE.setCookie("I18N_LANGUAGE", lang, path="/")\n             res = lang\n         return res\n \n@@ -241,7 +230,7 @@ def getLanguageCookie(self, request):\n         """Gets the preferred cookie language."""\n         if not request:\n             return None\n-        langCookie = request.cookies.get(\'I18N_LANGUAGE\')\n+        langCookie = request.cookies.get("I18N_LANGUAGE")\n         if langCookie in self.getSupportedLanguages():\n             return langCookie\n         return None\n@@ -253,7 +242,7 @@ def getPreferredLanguage(self, request=None):\n         lb = self.getLanguageBindings(request)\n         if lb[0]:\n             if not self.settings.use_combined_language_codes:\n-                return lb[0].split(\'-\')[0]\n+                return lb[0].split("-")[0]\n             else:\n                 return lb[0]\n             return lb[0]\n@@ -264,7 +253,7 @@ def getPathLanguage(self, request):\n         """Checks if a language is part of the current path."""\n         if not request:\n             return []\n-        items = request.get(\'TraversalRequestNameStack\')\n+        items = request.get("TraversalRequestNameStack")\n         # XXX Why this try/except?\n         try:\n             for item in items:\n@@ -287,14 +276,10 @@ def getContentLanguage(self, request):\n \n             # Now check if we need to exclude from using language specific path\n             # See https://dev.plone.org/ticket/11263\n-            if (\n-                bool(\n-                    [1 for p in self.exclude_paths if p in contentpath]\n-                ) or\n-                bool(\n-                    [1 for p in self.exclude_exts\n-                     if contentpath[0].endswith(p)]\n-                )\n+            if bool(\n+                [1 for p in self.exclude_paths if p in contentpath]\n+            ) or bool(\n+                [1 for p in self.exclude_exts if contentpath[0].endswith(p)]\n             ):\n                 return None\n \n@@ -302,7 +287,7 @@ def getContentLanguage(self, request):\n             traversed = []\n             while contentpath:\n                 name = contentpath.pop()\n-                if name[0] in \'@+\':\n+                if name[0] in "@+":\n                     break\n                 next = obj.unrestrictedTraverse(name, None)\n                 if next is None:\n@@ -357,8 +342,8 @@ def getRequestLanguages(self, request):\n             return None\n \n         # Get browser accept languages\n-        browser_pref_langs = request.get(\'HTTP_ACCEPT_LANGUAGE\', \'\')\n-        browser_pref_langs = browser_pref_langs.split(\',\')\n+        browser_pref_langs = request.get("HTTP_ACCEPT_LANGUAGE", "")\n+        browser_pref_langs = browser_pref_langs.split(",")\n \n         i = 0\n         langs = []\n@@ -370,16 +355,16 @@ def getRequestLanguages(self, request):\n         # If no quality string is given then the list order\n         # is used as quality indicator\n         for lang in browser_pref_langs:\n-            lang = lang.strip().lower().replace(\'_\', \'-\')\n+            lang = lang.strip().lower().replace("_", "-")\n             if lang:\n-                lb = lang.split(\';\', 2)\n+                lb = lang.split(";", 2)\n                 quality = []\n \n                 if len(lb) == 2:\n                     try:\n                         q = lb[1]\n-                        if q.startswith(\'q=\'):\n-                            q = q.split(\'=\', 2)[1]\n+                        if q.startswith("q="):\n+                            q = q.split("=", 2)[1]\n                             quality = float(q)\n                     except:\n                         pass\n@@ -388,15 +373,17 @@ def getRequestLanguages(self, request):\n                     quality = float(length - i)\n \n                 language = lb[0]\n-                if (self.use_combined_language_codes and\n-                        language in self.getSupportedLanguages()):\n+                if (\n+                    self.use_combined_language_codes\n+                    and language in self.getSupportedLanguages()\n+                ):\n                     # If allowed add the language\n                     langs.append((quality, language))\n                 else:\n                     # if we only use simply language codes, we should recognize\n                     # combined codes as their base code. So \'de-de\' is treated\n                     # as \'de\'.\n-                    baselanguage = language.split(\'-\')[0]\n+                    baselanguage = language.split("-")[0]\n                     if baselanguage in self.getSupportedLanguages():\n                         langs.append((quality, baselanguage))\n                 i = i + 1\n@@ -418,11 +405,11 @@ def getLanguageBindings(self, request):\n         if not request:\n             # Can\'t do anything\n             return (None, self.getDefaultLanguage(), [])\n-        binding = request.get(\'LANGUAGE_TOOL\', None)\n+        binding = request.get("LANGUAGE_TOOL", None)\n         if not isinstance(binding, LanguageBinding):\n             # Not bound -> bind\n             setLanguageBinding(request)\n-            binding = request.get(\'LANGUAGE_TOOL\')\n+            binding = request.get("LANGUAGE_TOOL")\n         return binding.getLanguageBindings()\n \n     def getAvailableCountries(self):\n@@ -443,28 +430,26 @@ def getNameForCountryCode(self, countryCode):\n \n     def isAnonymousUser(self):\n         user = getSecurityManager().getUser()\n-        return not user.has_role(\'Authenticated\')\n+        return not user.has_role("Authenticated")\n \n     def showSelector(self):\n         """Returns True if the selector viewlet should be shown."""\n-        return (\n-            self.settings.always_show_selector or\n-            (\n-                self.settings.use_cookie_negotiation and\n-                not (\n-                    self.settings.authenticated_users_only and\n-                    self.isAnonymousUser()\n-                )\n+        return self.settings.always_show_selector or (\n+            self.settings.use_cookie_negotiation\n+            and not (\n+                self.settings.authenticated_users_only\n+                and self.isAnonymousUser()\n             )\n         )\n \n \n class PrefsForPTS(object):\n     """A preference to hook into PTS."""\n+\n     def __init__(self, context):\n         self._env = context\n         self.languages = []\n-        binding = context.get(\'LANGUAGE_TOOL\')\n+        binding = context.get("LANGUAGE_TOOL")\n         if not isinstance(binding, LanguageBinding):\n             return None\n         self.pref = binding.getLanguageBindings()\n@@ -476,4 +461,4 @@ def getPreferredLanguages(self):\n         return self.languages\n \n \n-registerLangPrefsMethod({\'klass\': PrefsForPTS, \'priority\': 100})\n+registerLangPrefsMethod({"klass": PrefsForPTS, "priority": 100})\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..d3728ba\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,3 @@\n+[tool.black]\n+line-length = 79\n+skip-string-normalization = true\ndiff --git a/setup.cfg b/setup.cfg\nindex 1e99695..7154e98 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,12 +11,12 @@ ignore =\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n+line_length = 79\n not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n+include_trailing_comma = True\n \n [zest.releaser]\n create-wheel = yes\n \n-# When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2018-12-06T00:20:43+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/3afbcbe7ed2c6404366c6da29d3f9bd584d9edaa

Merge pull request #24 from plone/cleanup-tests-and-code

code and test cleanup

Files changed:
A pyproject.toml
M CHANGES.rst
M plone/i18n/interfaces.py
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/interfaces.py
M plone/i18n/locales/languages.py
M plone/i18n/locales/tests/base.py
M plone/i18n/locales/tests/test_cctlds.py
M plone/i18n/locales/tests/test_countries.py
M plone/i18n/locales/tests/test_languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/normalizer/adapters.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/normalizer/pl.py
M plone/i18n/normalizer/pt.py
M plone/i18n/normalizer/ru.py
M plone/i18n/normalizer/tests/base.py
M plone/i18n/normalizer/tests/test_adapters.py
M plone/i18n/normalizer/tests/test_normalizer.py
M plone/i18n/normalizer/tr.py
M plone/i18n/normalizer/uk.py
M plone/i18n/tests/base.py
M plone/i18n/tests/test_languageutility.py
M plone/i18n/tests/test_negotiation.py
M plone/i18n/utility.py
M setup.cfg

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1604036..47ba18e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Code and test cleanuo.\n+  [jensens]\n \n \n 4.0.1 (2018-10-31)\ndiff --git a/plone/i18n/interfaces.py b/plone/i18n/interfaces.py\nindex 259c443..eddc393 100644\n--- a/plone/i18n/interfaces.py\n+++ b/plone/i18n/interfaces.py\n@@ -11,6 +11,7 @@ class ILanguageUtility(Interface):\n class INegotiateLanguage(Interface):\n     """Result of language negotiation\n     """\n+\n     language = Attribute(\'Language to use\')\n     default_language = Attribute(\'Default language\')\n     language_list = Attribute(\'List of language preferences in order\')\ndiff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 96b602a..7d8ee90 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -31,278 +31,279 @@ def getLanguagesForTLD(self, tld):\n         """\n         return _tld_to_language[tld]\n \n+\n ccTLDInformation = CcTLDInformation()\n \n _tld_to_language = {\n-    u"ac"        : [],\n-    u"ad"        : [],\n-    u"ae"        : [],\n-    u"aero"      : [],\n-    u"af"        : [],\n-    u"ag"        : [],\n-    u"ai"        : [],\n-    u"al"        : [],\n-    u"am"        : [],\n-    u"an"        : [],\n-    u"ao"        : [],\n-    u"aq"        : [u"en"],\n-    u"ar"        : [u"pt"],\n-    u"arpa"      : [u"en"],\n-    u"as"        : [u"en"],\n-    u"asia"      : [],\n-    u"at"        : [u"de"],\n-    u"au"        : [u"en"],\n-    u"aw"        : [],\n-    u"ax"        : [],\n-    u"az"        : [],\n-    u"ba"        : [u"bs"],\n-    u"bb"        : [],\n-    u"bd"        : [],\n-    u"be"        : [u"nl", u"fr"],\n-    u"bf"        : [],\n-    u"bg"        : [],\n-    u"bh"        : [],\n-    u"bi"        : [],\n-    u"biz"       : [],\n-    u"bj"        : [],\n-    u"bm"        : [],\n-    u"bn"        : [],\n-    u"bo"        : [],\n-    u"br"        : [u"pt"],\n-    u"bs"        : [],\n-    u"bt"        : [],\n-    u"bv"        : [],\n-    u"bw"        : [],\n-    u"by"        : [],\n-    u"bz"        : [],\n-    u"ca"        : [u"en"],\n-    u"cat"       : [u"ca"],\n-    u"cc"        : [],\n-    u"cd"        : [],\n-    u"cf"        : [],\n-    u"cg"        : [],\n-    u"ch"        : [u"de"],\n-    u"ci"        : [],\n-    u"ck"        : [],\n-    u"cl"        : [],\n-    u"cm"        : [],\n-    u"cn"        : [u"zh"],\n-    u"co"        : [],\n-    u"com"       : [],\n-    u"coop"      : [],\n-    u"cr"        : [u"es"],\n-    u"cu"        : [],\n-    u"cv"        : [],\n-    u"cx"        : [],\n-    u"cy"        : [],\n-    u"cz"        : [],\n-    u"de"        : [u"de"],\n-    u"dj"        : [],\n-    u"dk"        : [u"da"],\n-    u"dm"        : [],\n-    u"do"        : [],\n-    u"dz"        : [],\n-    u"ec"        : [],\n-    u"edu"       : [u"en"],\n-    u"ee"        : [u"et"],\n-    u"eg"        : [],\n-    u"er"        : [],\n-    u"es"        : [u"es"],\n-    u"et"        : [],\n-    u"eu"        : [],\n-    u"fi"        : [u"fi"],\n-    u"fj"        : [],\n-    u"fk"        : [],\n-    u"fm"        : [],\n-    u"fo"        : [u"fo"],\n-    u"fr"        : [u"fr"],\n-    u"ga"        : [],\n-    u"gb"        : [u"en"],\n-    u"gd"        : [],\n-    u"ge"        : [u"ka"],\n-    u"gf"        : [],\n-    u"gg"        : [],\n-    u"gh"        : [],\n-    u"gi"        : [],\n-    u"gl"        : [],\n-    u"gm"        : [],\n-    u"gn"        : [],\n-    u"gov"       : [u"en"],\n-    u"gp"        : [],\n-    u"gq"        : [],\n-    u"gr"        : [u"gr"],\n-    u"gs"        : [],\n-    u"gt"        : [],\n-    u"gu"        : [],\n-    u"gw"        : [],\n-    u"gy"        : [],\n-    u"hk"        : [],\n-    u"hm"        : [],\n-    u"hn"        : [],\n-    u"hr"        : [u"hr"],\n-    u"ht"        : [],\n-    u"hu"        : [u"hu"],\n-    u"id"        : [],\n-    u"ie"        : [],\n-    u"il"        : [u"he"],\n-    u"im"        : [u"en"],\n-    u"in"        : [u"hi"],\n-    u"info"      : [],\n-    u"int"       : [],\n-    u"io"        : [u"en"],\n-    u"iq"        : [u"ar"],\n-    u"ir"        : [u"ar"],\n-    u"is"        : [u"is"],\n-    u"it"        : [u"it"],\n-    u"je"        : [u"en"],\n-    u"jm"        : [],\n-    u"jo"        : [],\n-    u"jobs"      : [],\n-    u"jp"        : [u"ja"],\n-    u"ke"        : [],\n-    u"kg"        : [],\n-    u"kh"        : [],\n-    u"ki"        : [],\n-    u"km"        : [],\n-    u"kn"        : [],\n-    u"kp"        : [u"ko"],\n-    u"kr"        : [u"ko"],\n-    u"kw"        : [],\n-    u"ky"        : [],\n-    u"kz"        : [u"kk"],\n-    u"la"        : [],\n-    u"lb"        : [],\n-    u"lc"        : [],\n-    u"li"        : [],\n-    u"lk"        : [],\n-    u"lr"        : [],\n-    u"ls"        : [],\n-    u"lt"        : [],\n-    u"lu"        : [u"lb"],\n-    u"lv"        : [u"lv"],\n-    u"ly"        : [],\n-    u"ma"        : [],\n-    u"mc"        : [],\n-    u"md"        : [u"mo"],\n-    u"me"        : [],\n-    u"mg"        : [u"mg"],\n-    u"mh"        : [],\n-    u"mil"       : [u"en"],\n-    u"mk"        : [],\n-    u"ml"        : [],\n-    u"mm"        : [],\n-    u"mn"        : [u"mn"],\n-    u"mo"        : [],\n-    u"mobi"      : [],\n-    u"mp"        : [],\n-    u"mq"        : [],\n-    u"mr"        : [],\n-    u"ms"        : [],\n-    u"mt"        : [u"mt"],\n-    u"mu"        : [],\n-    u"museum"    : [],\n-    u"mv"        : [],\n-    u"mw"        : [],\n-    u"mx"        : [],\n-    u"my"        : [],\n-    u"mz"        : [],\n-    u"na"        : [],\n-    u"name"      : [],\n-    u"nc"        : [],\n-    u"ne"        : [],\n-    u"net"       : [],\n-    u"nf"        : [],\n-    u"ng"        : [],\n-    u"ni"        : [],\n-    u"nl"        : [u"nl"],\n-    u"no"        : [u"no"],\n-    u"np"        : [],\n-    u"nr"        : [],\n-    u"nu"        : [],\n-    u"nz"        : [],\n-    u"om"        : [u"en"],\n-    u"org"       : [],\n-    u"pa"        : [],\n-    u"pe"        : [],\n-    u"pf"        : [],\n-    u"pg"        : [],\n-    u"ph"        : [],\n-    u"pk"        : [],\n-    u"pl"        : [u"pl"],\n-    u"pm"        : [],\n-    u"pn"        : [],\n-    u"pr"        : [u"es"],\n-    u"pro"       : [],\n-    u"ps"        : [u"ar"],\n-    u"pt"        : [u"pt"],\n-    u"pw"        : [],\n-    u"py"        : [],\n-    u"qa"        : [],\n-    u"re"        : [],\n-    u"ro"        : [u"ro"],\n-    u"rs"        : [],\n-    u"ru"        : [u"ru"],\n-    u"rw"        : [],\n-    u"sa"        : [u"ar"],\n-    u"sb"        : [],\n-    u"sc"        : [],\n-    u"sd"        : [u"su"],\n-    u"se"        : [u"sv"],\n-    u"sg"        : [u"si"],\n-    u"sh"        : [],\n-    u"si"        : [u"sl"],\n-    u"sj"        : [],\n-    u"sk"        : [u"sk"],\n-    u"sl"        : [],\n-    u"sm"        : [],\n-    u"sn"        : [u"fr"],\n-    u"so"        : [u"so"],\n-    u"sr"        : [u"nl"],\n-    u"ss"        : [],\n-    u"st"        : [],\n-    u"su"        : [u"ru"],\n-    u"sv"        : [],\n-    u"sy"        : [],\n-    u"sz"        : [],\n-    u"tc"        : [u"tr"],\n-    u"td"        : [],\n-    u"tel"       : [],\n-    u"tf"        : [],\n-    u"tg"        : [u"to"],\n-    u"th"        : [u"th"],\n-    u"tj"        : [u"fa"],\n-    u"tk"        : [u"tk"],\n-    u"tl"        : [u"pt"],\n-    u"tm"        : [u"tk"],\n-    u"tn"        : [],\n-    u"to"        : [],\n-    u"tp"        : [u"pt"],\n-    u"tr"        : [],\n-    u"travel"    : [],\n-    u"tt"        : [],\n-    u"tv"        : [],\n-    u"tw"        : [u"zh"],\n-    u"tz"        : [],\n-    u"ua"        : [],\n-    u"ug"        : [],\n-    u"uk"        : [u"en"],\n-    u"us"        : [u"en"],\n-    u"uy"        : [],\n-    u"uz"        : [],\n-    u"va"        : [u"it"],\n-    u"vc"        : [],\n-    u"ve"        : [],\n-    u"vg"        : [],\n-    u"vi"        : [u"en"],\n-    u"vn"        : [u"vi"],\n-    u"vu"        : [],\n-    u"wf"        : [],\n-    u"ws"        : [u"sm"],\n-    u"xxx"       : [],\n-    u"ye"        : [],\n-    u"yt"        : [],\n-    u"yu"        : [u"sh"],\n-    u"za"        : [u"af"],\n-    u"zm"        : [],\n-    u"zw"        : [],\n+    u"ac": [],\n+    u"ad": [],\n+    u"ae": [],\n+    u"aero": [],\n+    u"af": [],\n+    u"ag": [],\n+    u"ai": [],\n+    u"al": [],\n+    u"am": [],\n+    u"an": [],\n+    u"ao": [],\n+    u"aq": [u"en"],\n+    u"ar": [u"pt"],\n+    u"arpa": [u"en"],\n+    u"as": [u"en"],\n+    u"asia": [],\n+    u"at": [u"de"],\n+    u"au": [u"en"],\n+    u"aw": [],\n+    u"ax": [],\n+    u"az": [],\n+    u"ba": [u"bs"],\n+    u"bb": [],\n+    u"bd": [],\n+    u"be": [u"nl", u"fr"],\n+    u"bf": [],\n+    u"bg": [],\n+    u"bh": [],\n+    u"bi": [],\n+    u"biz": [],\n+    u"bj": [],\n+    u"bm": [],\n+    u"bn": [],\n+    u"bo": [],\n+    u"br": [u"pt"],\n+    u"bs": [],\n+    u"bt": [],\n+    u"bv": [],\n+    u"bw": [],\n+    u"by": [],\n+    u"bz": [],\n+    u"ca": [u"en"],\n+    u"cat": [u"ca"],\n+    u"cc": [],\n+    u"cd": [],\n+    u"cf": [],\n+    u"cg": [],\n+    u"ch": [u"de"],\n+    u"ci": [],\n+    u"ck": [],\n+    u"cl": [],\n+    u"cm": [],\n+    u"cn": [u"zh"],\n+    u"co": [],\n+    u"com": [],\n+    u"coop": [],\n+    u"cr": [u"es"],\n+    u"cu": [],\n+    u"cv": [],\n+    u"cx": [],\n+    u"cy": [],\n+    u"cz": [],\n+    u"de": [u"de"],\n+    u"dj": [],\n+    u"dk": [u"da"],\n+    u"dm": [],\n+    u"do": [],\n+    u"dz": [],\n+    u"ec": [],\n+    u"edu": [u"en"],\n+    u"ee": [u"et"],\n+    u"eg": [],\n+    u"er": [],\n+    u"es": [u"es"],\n+    u"et": [],\n+    u"eu": [],\n+    u"fi": [u"fi"],\n+    u"fj": [],\n+    u"fk": [],\n+    u"fm": [],\n+    u"fo": [u"fo"],\n+    u"fr": [u"fr"],\n+    u"ga": [],\n+    u"gb": [u"en"],\n+    u"gd": [],\n+    u"ge": [u"ka"],\n+    u"gf": [],\n+    u"gg": [],\n+    u"gh": [],\n+    u"gi": [],\n+    u"gl": [],\n+    u"gm": [],\n+    u"gn": [],\n+    u"gov": [u"en"],\n+    u"gp": [],\n+    u"gq": [],\n+    u"gr": [u"gr"],\n+    u"gs": [],\n+    u"gt": [],\n+    u"gu": [],\n+    u"gw": [],\n+    u"gy": [],\n+    u"hk": [],\n+    u"hm": [],\n+    u"hn": [],\n+    u"hr": [u"hr"],\n+    u"ht": [],\n+    u"hu": [u"hu"],\n+    u"id": [],\n+    u"ie": [],\n+    u"il": [u"he"],\n+    u"im": [u"en"],\n+    u"in": [u"hi"],\n+    u"info": [],\n+    u"int": [],\n+    u"io": [u"en"],\n+    u"iq": [u"ar"],\n+    u"ir": [u"ar"],\n+    u"is": [u"is"],\n+    u"it": [u"it"],\n+    u"je": [u"en"],\n+    u"jm": [],\n+    u"jo": [],\n+    u"jobs": [],\n+    u"jp": [u"ja"],\n+    u"ke": [],\n+    u"kg": [],\n+    u"kh": [],\n+    u"ki": [],\n+    u"km": [],\n+    u"kn": [],\n+    u"kp": [u"ko"],\n+    u"kr": [u"ko"],\n+    u"kw": [],\n+    u"ky": [],\n+    u"kz": [u"kk"],\n+    u"la": [],\n+    u"lb": [],\n+    u"lc": [],\n+    u"li": [],\n+    u"lk": [],\n+    u"lr": [],\n+    u"ls": [],\n+    u"lt": [],\n+    u"lu": [u"lb"],\n+    u"lv": [u"lv"],\n+    u"ly": [],\n+    u"ma": [],\n+    u"mc": [],\n+    u"md": [u"mo"],\n+    u"me": [],\n+    u"mg": [u"mg"],\n+    u"mh": [],\n+    u"mil": [u"en"],\n+    u"mk": [],\n+    u"ml": [],\n+    u"mm": [],\n+    u"mn": [u"mn"],\n+    u"mo": [],\n+    u"mobi": [],\n+    u"mp": [],\n+    u"mq": [],\n+    u"mr": [],\n+    u"ms": [],\n+    u"mt": [u"mt"],\n+    u"mu": [],\n+    u"museum": [],\n+    u"mv": [],\n+    u"mw": [],\n+    u"mx": [],\n+    u"my": [],\n+    u"mz": [],\n+    u"na": [],\n+    u"name": [],\n+    u"nc": [],\n+    u"ne": [],\n+    u"net": [],\n+    u"nf": [],\n+    u"ng": [],\n+    u"ni": [],\n+    u"nl": [u"nl"],\n+    u"no": [u"no"],\n+    u"np": [],\n+    u"nr": [],\n+    u"nu": [],\n+    u"nz": [],\n+    u"om": [u"en"],\n+    u"org": [],\n+    u"pa": [],\n+    u"pe": [],\n+    u"pf": [],\n+    u"pg": [],\n+    u"ph": [],\n+    u"pk": [],\n+    u"pl": [u"pl"],\n+    u"pm": [],\n+    u"pn": [],\n+    u"pr": [u"es"],\n+    u"pro": [],\n+    u"ps": [u"ar"],\n+    u"pt": [u"pt"],\n+    u"pw": [],\n+    u"py": [],\n+    u"qa": [],\n+    u"re": [],\n+    u"ro": [u"ro"],\n+    u"rs": [],\n+    u"ru": [u"ru"],\n+    u"rw": [],\n+    u"sa": [u"ar"],\n+    u"sb": [],\n+    u"sc": [],\n+    u"sd": [u"su"],\n+    u"se": [u"sv"],\n+    u"sg": [u"si"],\n+    u"sh": [],\n+    u"si": [u"sl"],\n+    u"sj": [],\n+    u"sk": [u"sk"],\n+    u"sl": [],\n+    u"sm": [],\n+    u"sn": [u"fr"],\n+    u"so": [u"so"],\n+    u"sr": [u"nl"],\n+    u"ss": [],\n+    u"st": [],\n+    u"su": [u"ru"],\n+    u"sv": [],\n+    u"sy": [],\n+    u"sz": [],\n+    u"tc": [u"tr"],\n+    u"td": [],\n+    u"tel": [],\n+    u"tf": [],\n+    u"tg": [u"to"],\n+    u"th": [u"th"],\n+    u"tj": [u"fa"],\n+    u"tk": [u"tk"],\n+    u"tl": [u"pt"],\n+    u"tm": [u"tk"],\n+    u"tn": [],\n+    u"to": [],\n+    u"tp": [u"pt"],\n+    u"tr": [],\n+    u"travel": [],\n+    u"tt": [],\n+    u"tv": [],\n+    u"tw": [u"zh"],\n+    u"tz": [],\n+    u"ua": [],\n+    u"ug": [],\n+    u"uk": [u"en"],\n+    u"us": [u"en"],\n+    u"uy": [],\n+    u"uz": [],\n+    u"va": [u"it"],\n+    u"vc": [],\n+    u"ve": [],\n+    u"vg": [],\n+    u"vi": [u"en"],\n+    u"vn": [u"vi"],\n+    u"vu": [],\n+    u"wf": [],\n+    u"ws": [u"sm"],\n+    u"xxx": [],\n+    u"ye": [],\n+    u"yt": [],\n+    u"yu": [u"sh"],\n+    u"za": [u"af"],\n+    u"zm": [],\n+    u"zw": [],\n }\ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex 22e39fe..fd11fa2 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -26,268 +26,698 @@ def getCountryListing(self):\n         """\n         return [(code, _countrylist[code][u\'name\']) for code in _countrylist]\n \n+\n countries = CountryAvailability()\n \n # This is a dictionary of dictonaries:\n #\n-# \'country-code\' : {u\'name\' : \'English name\', u\'flag\' : u\'/++resource++country-flags/*.gif\'}\n+# \'country-code\' : {\n+#     u\'name\' : \'English name\',\n+#     u\'flag\' : u\'/++resource++country-flags/*.gif\',\n+# }\n #\n # This list follows ISO 3166-1. In addition the following reservations are\n # part of the list for historical reasons: an\n \n _countrylist = {\n-u\'ad\' : {u\'name\' : \'Andorra\', u\'flag\' : u\'/++resource++country-flags/ad.gif\'},\n-u\'ae\' : {u\'name\' : \'United Arab Emirates\', u\'flag\' : u\'/++resource++country-flags/ae.gif\'},\n-u\'af\' : {u\'name\' : \'Afghanistan\', u\'flag\' : u\'/++resource++country-flags/af.gif\'},\n-u\'ag\' : {u\'name\' : \'Antigua and Barbuda\', u\'flag\' : u\'/++resource++country-flags/ag.gif\'},\n-u\'ai\' : {u\'name\' : \'Anguilla\', u\'flag\' : u\'/++resource++country-flags/ai.gif\'},\n-u\'al\' : {u\'name\' : \'Albania\', u\'flag\' : u\'/++resource++country-flags/al.gif\'},\n-u\'am\' : {u\'name\' : \'Armenia\', u\'flag\' : u\'/++resource++country-flags/am.gif\'},\n-u\'an\' : {u\'name\' : \'Netherlands Antilles\', u\'flag\' : u\'/++resource++country-flags/an.gif\'},\n-u\'ao\' : {u\'name\' : \'Angola\', u\'flag\' : u\'/++resource++country-flags/ao.gif\'},\n-u\'aq\' : {u\'name\' : \'Antarctica\', u\'flag\' : u\'/++resource++country-flags/aq.gif\'},\n-u\'ar\' : {u\'name\' : \'Argentina\', u\'flag\' : u\'/++resource++country-flags/ar.gif\'},\n-u\'as\' : {u\'name\' : \'American Samoa\', u\'flag\' : u\'/++resource++country-flags/as.gif\'},\n-u\'at\' : {u\'name\' : \'Austria\', u\'flag\' : u\'/++resource++country-flags/at.gif\'},\n-u\'au\' : {u\'name\' : \'Australia\', u\'flag\' : u\'/++resource++country-flags/au.gif\'},\n-u\'aw\' : {u\'name\' : \'Aruba\', u\'flag\' : u\'/++resource++country-flags/aw.gif\'},\n-u\'ax\' : {u\'name\' : \'Oland Islands\', u\'flag\' : u\'/++resource++country-flags/ax.gif\'},\n-u\'az\' : {u\'name\' : \'Azerbaijan\', u\'flag\' : u\'/++resource++country-flags/az.gif\'},\n-u\'ba\' : {u\'name\' : \'Bosnia and Herzegovina\', u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'bb\' : {u\'name\' : \'Barbados\', u\'flag\' : u\'/++resource++country-flags/bb.gif\'},\n-u\'bd\' : {u\'name\' : \'Bangladesh\', u\'flag\' : u\'/++resource++country-flags/bd.gif\'},\n-u\'be\' : {u\'name\' : \'Belgium\', u\'flag\' : u\'/++resource++country-flags/be.gif\'},\n-u\'bf\' : {u\'name\' : \'Burkina Faso\', u\'flag\' : u\'/++resource++country-flags/bf.gif\'},\n-u\'bg\' : {u\'name\' : \'Bulgaria\', u\'flag\' : u\'/++resource++country-flags/bg.gif\'},\n-u\'bh\' : {u\'name\' : \'Bahrain\', u\'flag\' : u\'/++resource++country-flags/bh.gif\'},\n-u\'bi\' : {u\'name\' : \'Burundi\', u\'flag\' : u\'/++resource++country-flags/bi.gif\'},\n-u\'bj\' : {u\'name\' : \'Benin\', u\'flag\' : u\'/++resource++country-flags/bj.gif\'},\n-u\'bl\' : {u\'name\' : \'Saint Barth\xc3\xa9lemy\', u\'flag\' : u\'/++resource++country-flags/bl.gif\'},\n-u\'bm\' : {u\'name\' : \'Bermuda\', u\'flag\' : u\'/++resource++country-flags/bm.gif\'},\n-u\'bn\' : {u\'name\' : \'Brunei Darussalam\', u\'flag\' : u\'/++resource++country-flags/bn.gif\'},\n-u\'bo\' : {u\'name\' : \'Bolivia\', u\'flag\' : u\'/++resource++country-flags/bo.gif\'},\n-u\'bq\' : {u\'name\' : \'Bonaire, Sint Eustatius and Saba\', u\'flag\' : u\'/++resource++country-flags/bq.gif\'},\n-u\'br\' : {u\'name\' : \'Brazil\', u\'flag\' : u\'/++resource++country-flags/br.gif\'},\n-u\'bs\' : {u\'name\' : \'Bahamas\', u\'flag\' : u\'/++resource++country-flags/bs.gif\'},\n-u\'bt\' : {u\'name\' : \'Bhutan\', u\'flag\' : u\'/++resource++country-flags/bt.gif\'},\n-u\'bv\' : {u\'name\' : \'Bouvet Island\', u\'flag\' : u\'/++resource++country-flags/bv.gif\'},\n-u\'bw\' : {u\'name\' : \'Botswana\', u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'by\' : {u\'name\' : \'Belarus\', u\'flag\' : u\'/++resource++country-flags/by.gif\'},\n-u\'bz\' : {u\'name\' : \'Belize\', u\'flag\' : u\'/++resource++country-flags/bz.gif\'},\n-u\'ca\' : {u\'name\' : \'Canada\', u\'flag\' : u\'/++resource++country-flags/ca.gif\'},\n-u\'cc\' : {u\'name\' : \'Cocos (Keeling) Islands\', u\'flag\' : u\'/++resource++country-flags/cc.gif\'},\n-u\'cd\' : {u\'name\' : \'Congo The Democratic Republic of\', u\'flag\' : u\'/++resource++country-flags/cd.gif\'},\n-u\'cf\' : {u\'name\' : \'Central African Republic\', u\'flag\' : u\'/++resource++country-flags/cf.gif\'},\n-u\'cg\' : {u\'name\' : \'Congo\', u\'flag\' : u\'/++resource++country-flags/cg.gif\'},\n-u\'ch\' : {u\'name\' : \'Switzerland\', u\'flag\' : u\'/++resource++country-flags/ch.gif\'},\n-u\'ci\' : {u\'name\' : "Cote d\'Ivoire", u\'flag\' : u\'/++resource++country-flags/ci.gif\'},\n-u\'ck\' : {u\'name\' : \'Cook Islands\', u\'flag\' : u\'/++resource++country-flags/ck.gif\'},\n-u\'cl\' : {u\'name\' : \'Chile\', u\'flag\' : u\'/++resource++country-flags/cl.gif\'},\n-u\'cm\' : {u\'name\' : \'Cameroon\', u\'flag\' : u\'/++resource++country-flags/cm.gif\'},\n-u\'cn\' : {u\'name\' : \'China\', u\'flag\' : u\'/++resource++country-flags/cn.gif\'},\n-u\'co\' : {u\'name\' : \'Colombia\', u\'flag\' : u\'/++resource++country-flags/co.gif\'},\n-u\'cr\' : {u\'name\' : \'Costa Rica\', u\'flag\' : u\'/++resource++country-flags/cr.gif\'},\n-u\'cs\' : {u\'name\' : \'Serbia and Montenegro\', u\'flag\' : u\'/++resource++country-flags/cs.gif\'},\n-u\'cu\' : {u\'name\' : \'Cuba\', u\'flag\' : u\'/++resource++country-flags/cu.gif\'},\n-u\'cv\' : {u\'name\' : \'Cape Verde\', u\'flag\' : u\'/++resource++country-flags/cv.gif\'},\n-u\'cw\' : {u\'name\' : \'Cura\xc3\xa7ao\', u\'flag\' : u\'/++resource++country-flags/cw.png\'},\n-u\'cx\' : {u\'name\' : \'Christmas Island\', u\'flag\' : u\'/++resource++country-flags/cx.gif\'},\n-u\'cy\' : {u\'name\' : \'Cyprus\', u\'flag\' : u\'/++resource++country-flags/cy.gif\'},\n-u\'cz\' : {u\'name\' : \'Czech Republic\', u\'flag\' : u\'/++resource++country-flags/cz.gif\'},\n-u\'de\' : {u\'name\' : \'Germany\', u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'dj\' : {u\'name\' : \'Djibouti\', u\'flag\' : u\'/++resource++country-flags/dj.gif\'},\n-u\'dk\' : {u\'name\' : \'Denmark\', u\'flag\' : u\'/++resource++country-flags/dk.gif\'},\n-u\'dm\' : {u\'name\' : \'Dominica\', u\'flag\' : u\'/++resource++country-flags/dm.gif\'},\n-u\'do\' : {u\'name\' : \'Dominican Republic\', u\'flag\' : u\'/++resource++country-flags/do.gif\'},\n-u\'dz\' : {u\'name\' : \'Algeria\', u\'flag\' : u\'/++resource++country-flags/dz.gif\'},\n-u\'ec\' : {u\'name\' : \'Ecuador\', u\'flag\' : u\'/++resource++country-flags/ec.gif\'},\n-u\'ee\' : {u\'name\' : \'Estonia\', u\'flag\' : u\'/++resource++country-flags/ee.gif\'},\n-u\'eg\' : {u\'name\' : \'Egypt\', u\'flag\' : u\'/++resource++country-flags/eg.gif\'},\n-u\'eh\' : {u\'name\' : \'Western Sahara\', u\'flag\' : u\'/++resource++country-flags/eh.gif\'},\n-u\'er\' : {u\'name\' : \'Eritrea\', u\'flag\' : u\'/++resource++country-flags/er.gif\'},\n-u\'es\' : {u\'name\' : \'Spain\', u\'flag\' : u\'/++resource++country-flags/es.gif\'},\n-u\'et\' : {u\'name\' : \'Ethiopia\', u\'flag\' : u\'/++resource++country-flags/et.gif\'},\n-u\'fi\' : {u\'name\' : \'Finland\', u\'flag\' : u\'/++resource++country-flags/fi.gif\'},\n-u\'fj\' : {u\'name\' : \'Fiji\', u\'flag\' : u\'/++resource++country-flags/fj.gif\'},\n-u\'fk\' : {u\'name\' : \'Falkland Islands (Malvinas)\', u\'flag\' : u\'/++resource++country-flags/fk.gif\'},\n-u\'fm\' : {u\'name\' : \'Micronesia Federated States of\', u\'flag\' : u\'/++resource++country-flags/fm.gif\'},\n-u\'fo\' : {u\'name\' : \'Faroe Islands\', u\'flag\' : u\'/++resource++country-flags/fo.gif\'},\n-u\'fr\' : {u\'name\' : \'France\', u\'flag\' : u\'/++resource++country-flags/fr.gif\'},\n-u\'ga\' : {u\'name\' : \'Gabon\', u\'flag\' : u\'/++resource++country-flags/ga.gif\'},\n-u\'gb\' : {u\'name\' : \'United Kingdom\', u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'gd\' : {u\'name\' : \'Grenada\', u\'flag\' : u\'/++resource++country-flags/gd.gif\'},\n-u\'ge\' : {u\'name\' : \'Georgia\', u\'flag\' : u\'/++resource++country-flags/ge.gif\'},\n-u\'gf\' : {u\'name\' : \'French Guiana\', u\'flag\' : u\'/++resource++country-flags/gf.gif\'},\n-u\'gg\' : {u\'name\' : \'Guernsey\', u\'flag\' : u\'/++resource++country-flags/gg.gif\'},\n-u\'gh\' : {u\'name\' : \'Ghana\', u\'flag\' : u\'/++resource++country-flags/gh.gif\'},\n-u\'gi\' : {u\'name\' : \'Gibraltar\', u\'flag\' : u\'/++resource++country-flags/gi.gif\'},\n-u\'gl\' : {u\'name\' : \'Greenland\', u\'flag\' : u\'/++resource++country-flags/gl.gif\'},\n-u\'gm\' : {u\'name\' : \'Gambia\', u\'flag\' : u\'/++resource++country-flags/gm.gif\'},\n-u\'gn\' : {u\'name\' : \'Guinea\', u\'flag\' : u\'/++resource++country-flags/gn.gif\'},\n-u\'gp\' : {u\'name\' : \'Guadeloupe\', u\'flag\' : u\'/++resource++country-flags/gp.gif\'},\n-u\'gq\' : {u\'name\' : \'Equatorial Guinea\', u\'flag\' : u\'/++resource++country-flags/gq.gif\'},\n-u\'gr\' : {u\'name\' : \'Greece\', u\'flag\' : u\'/++resource++country-flags/gr.gif\'},\n-u\'gs\' : {u\'name\' : \'South Georgia and the South Sandwich Islands\', u\'flag\' : u\'/++resource++country-flags/gs.gif\'},\n-u\'gt\' : {u\'name\' : \'Guatemala\', u\'flag\' : u\'/++resource++country-flags/gt.gif\'},\n-u\'gu\' : {u\'name\' : \'Guam\', u\'flag\' : u\'/++resource++country-flags/gu.gif\'},\n-u\'gw\' : {u\'name\' : \'Guinea-Bissau\', u\'flag\' : u\'/++resource++country-flags/gw.gif\'},\n-u\'gy\' : {u\'name\' : \'Guyana\', u\'flag\' : u\'/++resource++country-flags/gy.gif\'},\n-u\'hk\' : {u\'name\' : \'Hong Kong\', u\'flag\' : u\'/++resource++country-flags/hk.gif\'},\n-u\'hm\' : {u\'name\' : \'Heard Island and McDonald Islands\', u\'flag\' : u\'/++resource++country-flags/hm.gif\'},\n-u\'hn\' : {u\'name\' : \'Honduras\', u\'flag\' : u\'/++resource++country-flags/hn.gif\'},\n-u\'hr\' : {u\'name\' : \'Croatia\', u\'flag\' : u\'/++resource++country-flags/hr.gif\'},\n-u\'ht\' : {u\'name\' : \'Haiti\', u\'flag\' : u\'/++resource++country-flags/ht.gif\'},\n-u\'hu\' : {u\'name\' : \'Hungary\', u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'id\' : {u\'name\' : \'Indonesia\', u\'flag\' : u\'/++resource++country-flags/id.gif\'},\n-u\'ie\' : {u\'name\' : \'Ireland\', u\'flag\' : u\'/++resource++country-flags/ie.gif\'},\n-u\'il\' : {u\'name\' : \'Israel\', u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'im\' : {u\'name\' : \'Isle of Man\', u\'flag\' : u\'/++resource++country-flags/im.gif\'},\n-u\'in\' : {u\'name\' : \'India\', u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'io\' : {u\'name\' : \'British Indian Ocean Territory\', u\'flag\' : u\'/++resource++country-flags/io.gif\'},\n-u\'iq\' : {u\'name\' : \'Iraq\', u\'flag\' : u\'/++resource++country-flags/iq.gif\'},\n-u\'ir\' : {u\'name\' : \'Iran Islamic Republic of\', u\'flag\' : u\'/++resource++country-flags/ir.gif\'},\n-u\'is\' : {u\'name\' : \'Iceland\', u\'flag\' : u\'/++resource++country-flags/is.gif\'},\n-u\'it\' : {u\'name\' : \'Italy\', u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'je\' : {u\'name\' : \'Jersey\', u\'flag\' : u\'/++resource++country-flags/je.gif\'},\n-u\'jm\' : {u\'name\' : \'Jamaica\', u\'flag\' : u\'/++resource++country-flags/jm.gif\'},\n-u\'jo\' : {u\'name\' : \'Jordan\', u\'flag\' : u\'/++resource++country-flags/jo.gif\'},\n-u\'jp\' : {u\'name\' : \'Japan\', u\'flag\' : u\'/++resource++country-flags/jp.gif\'},\n-u\'ke\' : {u\'name\' : \'Kenya\', u\'flag\' : u\'/++resource++country-flags/ke.gif\'},\n-u\'kg\' : {u\'name\' : \'Kyrgyzstan\', u\'flag\' : u\'/++resource++country-flags/kg.gif\'},\n-u\'kh\' : {u\'name\' : \'Cambodia\', u\'flag\' : u\'/++resource++country-flags/kh.gif\'},\n-u\'ki\' : {u\'name\' : \'Kiribati\', u\'flag\' : u\'/++resource++country-flags/ki.gif\'},\n-u\'km\' : {u\'name\' : \'Comoros\', u\'flag\' : u\'/++resource++country-flags/km.gif\'},\n-u\'kn\' : {u\'name\' : \'Saint Kitts and Nevis\', u\'flag\' : u\'/++resource++country-flags/kn.gif\'},\n-u\'kp\' : {u\'name\' : "Korea Democratic People\'s Republic of", u\'flag\' : u\'/++resource++country-flags/kp.gif\'},\n-u\'kr\' : {u\'name\' : \'Korea Republic of\', u\'flag\' : u\'/++resource++country-flags/kr.gif\'},\n-u\'kw\' : {u\'name\' : \'Kuwait\', u\'flag\' : u\'/++resource++country-flags/kw.gif\'},\n-u\'ky\' : {u\'name\' : \'Cayman Islands\', u\'flag\' : u\'/++resource++country-flags/ky.gif\'},\n-u\'kz\' : {u\'name\' : \'Kazakhstan\', u\'flag\' : u\'/++resource++country-flags/kz.gif\'},\n-u\'la\' : {u\'name\' : "Lao People\'s Democratic Republic", u\'flag\' : u\'/++resource++country-flags/la.gif\'},\n-u\'lb\' : {u\'name\' : \'Lebanon\', u\'flag\' : u\'/++resource++country-flags/lb.gif\'},\n-u\'lc\' : {u\'name\' : \'Saint Lucia\', u\'flag\' : u\'/++resource++country-flags/lc.gif\'},\n-u\'li\' : {u\'name\' : \'Liechtenstein\', u\'flag\' : u\'/++resource++country-flags/li.gif\'},\n-u\'lk\' : {u\'name\' : \'Sri Lanka\', u\'flag\' : u\'/++resource++country-flags/lk.gif\'},\n-u\'lr\' : {u\'name\' : \'Liberia\', u\'flag\' : u\'/++resource++country-flags/lr.gif\'},\n-u\'ls\' : {u\'name\' : \'Lesotho\', u\'flag\' : u\'/++resource++country-flags/ls.gif\'},\n-u\'lt\' : {u\'name\' : \'Lithuania\', u\'flag\' : u\'/++resource++country-flags/lt.gif\'},\n-u\'lu\' : {u\'name\' : \'Luxembourg\', u\'flag\' : u\'/++resource++country-flags/lu.gif\'},\n-u\'lv\' : {u\'name\' : \'Latvia\', u\'flag\' : u\'/++resource++country-flags/lv.gif\'},\n-u\'ly\' : {u\'name\' : \'Libyan Arab Jamahiriya\', u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ma\' : {u\'name\' : \'Morocco\', u\'flag\' : u\'/++resource++country-flags/ma.gif\'},\n-u\'mc\' : {u\'name\' : \'Monaco\', u\'flag\' : u\'/++resource++country-flags/mc.gif\'},\n-u\'md\' : {u\'name\' : \'Moldova Republic of\', u\'flag\' : u\'/++resource++country-flags/md.gif\'},\n-u\'me\' : {u\'name\' : \'Montenegro\', u\'flag\' : u\'/++resource++country-flags/me.gif\'},\n-u\'mf\' : {u\'name\' : \'Saint Martin (French part)\', u\'flag\' : u\'/++resource++country-flags/mf.png\'},\n-u\'mg\' : {u\'name\' : \'Madagascar\', u\'flag\' : u\'/++resource++country-flags/mg.gif\'},\n-u\'mh\' : {u\'name\' : \'Marshall Islands\', u\'flag\' : u\'/++resource++country-flags/mh.gif\'},\n-u\'mk\' : {u\'name\' : \'Macedonia the former Yugoslavian Republic of\', u\'flag\' : u\'/++resource++country-flags/mk.gif\'},\n-u\'ml\' : {u\'name\' : \'Mali\', u\'flag\' : u\'/++resource++country-flags/ml.gif\'},\n-u\'mm\' : {u\'name\' : \'Myanmar\', u\'flag\' : u\'/++resource++country-flags/mm.gif\'},\n-u\'mn\' : {u\'name\' : \'Mongolia\', u\'flag\' : u\'/++resource++country-flags/mn.gif\'},\n-u\'mo\' : {u\'name\' : \'Macao\', u\'flag\' : u\'/++resource++country-flags/mo.gif\'},\n-u\'mp\' : {u\'name\' : \'Northern Mariana Islands\', u\'flag\' : u\'/++resource++country-flags/mp.gif\'},\n-u\'mq\' : {u\'name\' : \'Martinique\', u\'flag\' : u\'/++resource++country-flags/mq.gif\'},\n-u\'mr\' : {u\'name\' : \'Mauritania\', u\'flag\' : u\'/++resource++country-flags/mr.gif\'},\n-u\'ms\' : {u\'name\' : \'Montserrat\', u\'flag\' : u\'/++resource++country-flags/ms.gif\'},\n-u\'mt\' : {u\'name\' : \'Malta\', u\'flag\' : u\'/++resource++country-flags/mt.gif\'},\n-u\'mu\' : {u\'name\' : \'Mauritius\', u\'flag\' : u\'/++resource++country-flags/mu.gif\'},\n-u\'mv\' : {u\'name\' : \'Maldives\', u\'flag\' : u\'/++resource++country-flags/mv.gif\'},\n-u\'mw\' : {u\'name\' : \'Malawi\', u\'flag\' : u\'/++resource++country-flags/mw.gif\'},\n-u\'mx\' : {u\'name\' : \'Mexico\', u\'flag\' : u\'/++resource++country-flags/mx.gif\'},\n-u\'my\' : {u\'name\' : \'Malaysia\', u\'flag\' : u\'/++resource++country-flags/my.gif\'},\n-u\'mz\' : {u\'name\' : \'Mozambique\', u\'flag\' : u\'/++resource++country-flags/mz.gif\'},\n-u\'na\' : {u\'name\' : \'Namibia\', u\'flag\' : u\'/++resource++country-flags/na.gif\'},\n-u\'nc\' : {u\'name\' : \'New Caledonia\', u\'flag\' : u\'/++resource++country-flags/nc.gif\'},\n-u\'ne\' : {u\'name\' : \'Niger\', u\'flag\' : u\'/++resource++country-flags/ne.gif\'},\n-u\'nf\' : {u\'name\' : \'Norfolk Island\', u\'flag\' : u\'/++resource++country-flags/nf.gif\'},\n-u\'ng\' : {u\'name\' : \'Nigeria\', u\'flag\' : u\'/++resource++country-flags/ng.gif\'},\n-u\'ni\' : {u\'name\' : \'Nicaragua\', u\'flag\' : u\'/++resource++country-flags/ni.gif\'},\n-u\'nl\' : {u\'name\' : \'Netherlands\', u\'flag\' : u\'/++resource++country-flags/nl.gif\'},\n-u\'no\' : {u\'name\' : \'Norway\', u\'flag\' : u\'/++resource++country-flags/no.gif\'},\n-u\'np\' : {u\'name\' : \'Nepal\', u\'flag\' : u\'/++resource++country-flags/np.gif\'},\n-u\'nr\' : {u\'name\' : \'Nauru\', u\'flag\' : u\'/++resource++country-flags/nr.gif\'},\n-u\'nu\' : {u\'name\' : \'Niue\', u\'flag\' : u\'/++resource++country-flags/nu.gif\'},\n-u\'nz\' : {u\'name\' : \'New Zealand\', u\'flag\' : u\'/++resource++country-flags/nz.gif\'},\n-u\'om\' : {u\'name\' : \'Oman\', u\'flag\' : u\'/++resource++country-flags/om.gif\'},\n-u\'pa\' : {u\'name\' : \'Panama\', u\'flag\' : u\'/++resource++country-flags/pa.gif\'},\n-u\'pe\' : {u\'name\' : \'Peru\', u\'flag\' : u\'/++resource++country-flags/pe.gif\'},\n-u\'pf\' : {u\'name\' : \'French Polynesia\', u\'flag\' : u\'/++resource++country-flags/pf.gif\'},\n-u\'pg\' : {u\'name\' : \'Papua New Guinea\', u\'flag\' : u\'/++resource++country-flags/pg.gif\'},\n-u\'ph\' : {u\'name\' : \'Philippines\', u\'flag\' : u\'/++resource++country-flags/ph.gif\'},\n-u\'pk\' : {u\'name\' : \'Pakistan\', u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'pl\' : {u\'name\' : \'Poland\', u\'flag\' : u\'/++resource++country-flags/pl.gif\'},\n-u\'pm\' : {u\'name\' : \'Saint Pierre and Miquelon\', u\'flag\' : u\'/++resource++country-flags/pm.gif\'},\n-u\'pn\' : {u\'name\' : \'Pitcairn\', u\'flag\' : u\'/++resource++country-flags/pn.gif\'},\n-u\'pr\' : {u\'name\' : \'Puerto Rico\', u\'flag\' : u\'/++resource++country-flags/pr.gif\'},\n-u\'ps\' : {u\'name\' : \'Palestinian Territory occupied\', u\'flag\' : u\'/++resource++country-flags/ps.gif\'},\n-u\'pt\' : {u\'name\' : \'Portugal\', u\'flag\' : u\'/++resource++country-flags/pt.gif\'},\n-u\'pw\' : {u\'name\' : \'Palau\', u\'flag\' : u\'/++resource++country-flags/pw.gif\'},\n-u\'py\' : {u\'name\' : \'Paraguay\', u\'flag\' : u\'/++resource++country-flags/py.gif\'},\n-u\'qa\' : {u\'name\' : \'Qatar\', u\'flag\' : u\'/++resource++country-flags/qa.gif\'},\n-u\'re\' : {u\'name\' : \'Reunion\', u\'flag\' : u\'/++resource++country-flags/re.gif\'},\n-u\'ro\' : {u\'name\' : \'Romania\', u\'flag\' : u\'/++resource++country-flags/ro.gif\'},\n-u\'rs\' : {u\'name\' : \'Serbia\', u\'flag\' : u\'/++resource++country-flags/rs.gif\'},\n-u\'ru\' : {u\'name\' : \'Russian Federation\', u\'flag\' : u\'/++resource++country-flags/ru.gif\'},\n-u\'rw\' : {u\'name\' : \'Rwanda\', u\'flag\' : u\'/++resource++country-flags/rw.gif\'},\n-u\'sa\' : {u\'name\' : \'Saudi Arabia\', u\'flag\' : u\'/++resource++country-flags/sa.gif\'},\n-u\'sb\' : {u\'name\' : \'Solomon Islands\', u\'flag\' : u\'/++resource++country-flags/sb.gif\'},\n-u\'sc\' : {u\'name\' : \'Seychelles\', u\'flag\' : u\'/++resource++country-flags/sc.gif\'},\n-u\'sd\' : {u\'name\' : \'Sudan\', u\'flag\' : u\'/++resource++country-flags/sd.gif\'},\n-u\'se\' : {u\'name\' : \'Sweden\', u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sg\' : {u\'name\' : \'Singapore\', u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'sh\' : {u\'name\' : \'Saint Helena\', u\'flag\' : u\'/++resource++country-flags/sh.gif\'},\n-u\'si\' : {u\'name\' : \'Slovenia\', u\'flag\' : u\'/++resource++country-flags/si.gif\'},\n-u\'sj\' : {u\'name\' : \'Svalbard and Jan Mayen\', u\'flag\' : u\'/++resource++country-flags/sj.gif\'},\n-u\'sk\' : {u\'name\' : \'Slovakia\', u\'flag\' : u\'/++resource++country-flags/sk.gif\'},\n-u\'sl\' : {u\'name\' : \'Sierra Leone\', u\'flag\' : u\'/++resource++country-flags/sl.gif\'},\n-u\'sm\' : {u\'name\' : \'San Marino\', u\'flag\' : u\'/++resource++country-flags/sm.gif\'},\n-u\'sn\' : {u\'name\' : \'Senegal\', u\'flag\' : u\'/++resource++country-flags/sn.gif\'},\n-u\'so\' : {u\'name\' : \'Somalia\', u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'sr\' : {u\'name\' : \'Suriname\', u\'flag\' : u\'/++resource++country-flags/sr.gif\'},\n-u\'ss\' : {u\'name\' : \'South Sudan\', u\'flag\' : u\'/++resource++country-flags/ss.png\'},\n-u\'st\' : {u\'name\' : \'Sao Tome and Principe\', u\'flag\' : u\'/++resource++country-flags/st.gif\'},\n-u\'sv\' : {u\'name\' : \'El Salvador\', u\'flag\' : u\'/++resource++country-flags/sv.gif\'},\n-u\'sx\' : {u\'name\' : \'Sint Maarten (Dutch part)\', u\'flag\' : u\'/++resource++country-flags/sx.png\'},\n-u\'sy\' : {u\'name\' : \'Syrian Arab Republic\', u\'flag\' : u\'/++resource++country-flags/sy.gif\'},\n-u\'sz\' : {u\'name\' : \'Swaziland\', u\'flag\' : u\'/++resource++country-flags/sz.gif\'},\n-u\'tc\' : {u\'name\' : \'Turks and Caicos Islands\', u\'flag\' : u\'/++resource++country-flags/tc.gif\'},\n-u\'td\' : {u\'name\' : \'Chad\', u\'flag\' : u\'/++resource++country-flags/td.gif\'},\n-u\'tf\' : {u\'name\' : \'French Southern Territories\', u\'flag\' : u\'/++resource++country-flags/tf.gif\'},\n-u\'tg\' : {u\'name\' : \'Togo\', u\'flag\' : u\'/++resource++country-flags/tg.gif\'},\n-u\'th\' : {u\'name\' : \'Thailand\', u\'flag\' : u\'/++resource++country-flags/th.gif\'},\n-u\'tj\' : {u\'name\' : \'Tajikistan\', u\'flag\' : u\'/++resource++country-flags/tj.gif\'},\n-u\'tk\' : {u\'name\' : \'Tokelau\', u\'flag\' : u\'/++resource++country-flags/tk.gif\'},\n-u\'tl\' : {u\'name\' : \'Timor-Leste\', u\'flag\' : u\'/++resource++country-flags/tl.gif\'},\n-u\'tm\' : {u\'name\' : \'Turkmenistan\', u\'flag\' : u\'/++resource++country-flags/tm.gif\'},\n-u\'tn\' : {u\'name\' : \'Tunisia\', u\'flag\' : u\'/++resource++country-flags/tn.gif\'},\n-u\'to\' : {u\'name\' : \'Tonga\', u\'flag\' : u\'/++resource++country-flags/to.gif\'},\n-u\'tr\' : {u\'name\' : \'Turkey\', u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'tt\' : {u\'name\' : \'Trinidad and Tobago\', u\'flag\' : u\'/++resource++country-flags/tt.gif\'},\n-u\'tv\' : {u\'name\' : \'Tuvalu\', u\'flag\' : u\'/++resource++country-flags/tv.gif\'},\n-u\'tw\' : {u\'name\' : \'Taiwan\', u\'flag\' : u\'/++resource++country-flags/tw.gif\'},\n-u\'tz\' : {u\'name\' : \'Tanzania United Republic of\', u\'flag\' : u\'/++resource++country-flags/tz.gif\'},\n-u\'ua\' : {u\'name\' : \'Ukraine\', u\'flag\' : u\'/++resource++country-flags/ua.gif\'},\n-u\'ug\' : {u\'name\' : \'Uganda\', u\'flag\' : u\'/++resource++country-flags/ug.gif\'},\n-u\'um\' : {u\'name\' : \'United States Minor Outlying Islands\', u\'flag\' : u\'/++resource++country-flags/um.gif\'},\n-u\'us\' : {u\'name\' : \'United States\', u\'flag\' : u\'/++resource++country-flags/us.gif\'},\n-u\'uy\' : {u\'name\' : \'Uruguay\', u\'flag\' : u\'/++resource++country-flags/uy.gif\'},\n-u\'uz\' : {u\'name\' : \'Uzbekistan\', u\'flag\' : u\'/++resource++country-flags/uz.gif\'},\n-u\'va\' : {u\'name\' : \'Holy See (Vatican City State)\', u\'flag\' : u\'/++resource++country-flags/va.gif\'},\n-u\'vc\' : {u\'name\' : \'Saint Vincent and the Grenadines\', u\'flag\' : u\'/++resource++country-flags/vc.gif\'},\n-u\'ve\' : {u\'name\' : \'Venezuela\', u\'flag\' : u\'/++resource++country-flags/ve.gif\'},\n-u\'vg\' : {u\'name\' : \'Virgin Islands British\', u\'flag\' : u\'/++resource++country-flags/vg.gif\'},\n-u\'vi\' : {u\'name\' : \'Virgin Islands U.S.\', u\'flag\' : u\'/++resource++country-flags/vi.gif\'},\n-u\'vn\' : {u\'name\' : \'Viet Nam\', u\'flag\' : u\'/++resource++country-flags/vn.gif\'},\n-u\'vu\' : {u\'name\' : \'Vanuatu\', u\'flag\' : u\'/++resource++country-flags/vu.gif\'},\n-u\'wf\' : {u\'name\' : \'Wallis and Futuna\', u\'flag\' : u\'/++resource++country-flags/wf.gif\'},\n-u\'ws\' : {u\'name\' : \'Samoa\', u\'flag\' : u\'/++resource++country-flags/ws.gif\'},\n-u\'ye\' : {u\'name\' : \'Yemen\', u\'flag\' : u\'/++resource++country-flags/ye.gif\'},\n-u\'yt\' : {u\'name\' : \'Mayotte\', u\'flag\' : u\'/++resource++country-flags/yt.gif\'},\n-u\'za\' : {u\'name\' : \'South Africa\', u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'zm\' : {u\'name\' : \'Zambia\', u\'flag\' : u\'/++resource++country-flags/zm.gif\'},\n-u\'zw\' : {u\'name\' : \'Zimbabwe\', u\'flag\' : u\'/++resource++country-flags/zw.gif\'},\n-u\'xk\' : {u\'name\' : \'Kosovo\', u\'flag\' : u\'/++resource++country-flags/xk.gif\'},\n+    u\'ad\': {u\'name\': \'Andorra\', u\'flag\': u\'/++resource++country-flags/ad.gif\'},\n+    u\'ae\': {\n+        u\'name\': \'United Arab Emirates\',\n+        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n+    },\n+    u\'af\': {\n+        u\'name\': \'Afghanistan\',\n+        u\'flag\': u\'/++resource++country-flags/af.gif\',\n+    },\n+    u\'ag\': {\n+        u\'name\': \'Antigua and Barbuda\',\n+        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n+    },\n+    u\'ai\': {\n+        u\'name\': \'Anguilla\',\n+        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n+    },\n+    u\'al\': {u\'name\': \'Albania\', u\'flag\': u\'/++resource++country-flags/al.gif\'},\n+    u\'am\': {u\'name\': \'Armenia\', u\'flag\': u\'/++resource++country-flags/am.gif\'},\n+    u\'an\': {\n+        u\'name\': \'Netherlands Antilles\',\n+        u\'flag\': u\'/++resource++country-flags/an.gif\',\n+    },\n+    u\'ao\': {u\'name\': \'Angola\', u\'flag\': u\'/++resource++country-flags/ao.gif\'},\n+    u\'aq\': {\n+        u\'name\': \'Antarctica\',\n+        u\'flag\': u\'/++resource++country-flags/aq.gif\',\n+    },\n+    u\'ar\': {\n+        u\'name\': \'Argentina\',\n+        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n+    },\n+    u\'as\': {\n+        u\'name\': \'American Samoa\',\n+        u\'flag\': u\'/++resource++country-flags/as.gif\',\n+    },\n+    u\'at\': {u\'name\': \'Austria\', u\'flag\': u\'/++resource++country-flags/at.gif\'},\n+    u\'au\': {\n+        u\'name\': \'Australia\',\n+        u\'flag\': u\'/++resource++country-flags/au.gif\',\n+    },\n+    u\'aw\': {u\'name\': \'Aruba\', u\'flag\': u\'/++resource++country-flags/aw.gif\'},\n+    u\'ax\': {\n+        u\'name\': \'Oland Islands\',\n+        u\'flag\': u\'/++resource++country-flags/ax.gif\',\n+    },\n+    u\'az\': {\n+        u\'name\': \'Azerbaijan\',\n+        u\'flag\': u\'/++resource++country-flags/az.gif\',\n+    },\n+    u\'ba\': {\n+        u\'name\': \'Bosnia and Herzegovina\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'bb\': {\n+        u\'name\': \'Barbados\',\n+        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n+    },\n+    u\'bd\': {\n+        u\'name\': \'Bangladesh\',\n+        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n+    },\n+    u\'be\': {u\'name\': \'Belgium\', u\'flag\': u\'/++resource++country-flags/be.gif\'},\n+    u\'bf\': {\n+        u\'name\': \'Burkina Faso\',\n+        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n+    },\n+    u\'bg\': {\n+        u\'name\': \'Bulgaria\',\n+        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n+    },\n+    u\'bh\': {u\'name\': \'Bahrain\', u\'flag\': u\'/++resource++country-flags/bh.gif\'},\n+    u\'bi\': {u\'name\': \'Burundi\', u\'flag\': u\'/++resource++country-flags/bi.gif\'},\n+    u\'bj\': {u\'name\': \'Benin\', u\'flag\': u\'/++resource++country-flags/bj.gif\'},\n+    u\'bl\': {\n+        u\'name\': \'Saint Barth\xc3\xa9lemy\',\n+        u\'flag\': u\'/++resource++country-flags/bl.gif\',\n+    },\n+    u\'bm\': {u\'name\': \'Bermuda\', u\'flag\': u\'/++resource++country-flags/bm.gif\'},\n+    u\'bn\': {\n+        u\'name\': \'Brunei Darussalam\',\n+        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    },\n+    u\'bo\': {u\'name\': \'Bolivia\', u\'flag\': u\'/++resource++country-flags/bo.gif\'},\n+    u\'bq\': {\n+        u\'name\': \'Bonaire, Sint Eustatius and Saba\',\n+        u\'flag\': u\'/++resource++country-flags/bq.gif\',\n+    },\n+    u\'br\': {u\'name\': \'Brazil\', u\'flag\': u\'/++resource++country-flags/br.gif\'},\n+    u\'bs\': {u\'name\': \'Bahamas\', u\'flag\': u\'/++resource++country-flags/bs.gif\'},\n+    u\'bt\': {u\'name\': \'Bhutan\', u\'flag\': u\'/++resource++country-flags/bt.gif\'},\n+    u\'bv\': {\n+        u\'name\': \'Bouvet Island\',\n+        u\'flag\': u\'/++resource++country-flags/bv.gif\',\n+    },\n+    u\'bw\': {\n+        u\'name\': \'Botswana\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'by\': {u\'name\': \'Belarus\', u\'flag\': u\'/++resource++country-flags/by.gif\'},\n+    u\'bz\': {u\'name\': \'Belize\', u\'flag\': u\'/++resource++country-flags/bz.gif\'},\n+    u\'ca\': {u\'name\': \'Canada\', u\'flag\': u\'/++resource++country-flags/ca.gif\'},\n+    u\'cc\': {\n+        u\'name\': \'Cocos (Keeling) Islands\',\n+        u\'flag\': u\'/++resource++country-flags/cc.gif\',\n+    },\n+    u\'cd\': {\n+        u\'name\': \'Congo The Democratic Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    },\n+    u\'cf\': {\n+        u\'name\': \'Central African Republic\',\n+        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    },\n+    u\'cg\': {u\'name\': \'Congo\', u\'flag\': u\'/++resource++country-flags/cg.gif\'},\n+    u\'ch\': {\n+        u\'name\': \'Switzerland\',\n+        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    },\n+    u\'ci\': {\n+        u\'name\': "Cote d\'Ivoire",\n+        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n+    },\n+    u\'ck\': {\n+        u\'name\': \'Cook Islands\',\n+        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n+    },\n+    u\'cl\': {u\'name\': \'Chile\', u\'flag\': u\'/++resource++country-flags/cl.gif\'},\n+    u\'cm\': {\n+        u\'name\': \'Cameroon\',\n+        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    },\n+    u\'cn\': {u\'name\': \'China\', u\'flag\': u\'/++resource++country-flags/cn.gif\'},\n+    u\'co\': {\n+        u\'name\': \'Colombia\',\n+        u\'flag\': u\'/++resource++country-flags/co.gif\',\n+    },\n+    u\'cr\': {\n+        u\'name\': \'Costa Rica\',\n+        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n+    },\n+    u\'cs\': {\n+        u\'name\': \'Serbia and Montenegro\',\n+        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n+    },\n+    u\'cu\': {u\'name\': \'Cuba\', u\'flag\': u\'/++resource++country-flags/cu.gif\'},\n+    u\'cv\': {\n+        u\'name\': \'Cape Verde\',\n+        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n+    },\n+    u\'cw\': {u\'name\': \'Cura\xc3\xa7ao\', u\'flag\': u\'/++resource++country-flags/cw.png\'},\n+    u\'cx\': {\n+        u\'name\': \'Christmas Island\',\n+        u\'flag\': u\'/++resource++country-flags/cx.gif\',\n+    },\n+    u\'cy\': {u\'name\': \'Cyprus\', u\'flag\': u\'/++resource++country-flags/cy.gif\'},\n+    u\'cz\': {\n+        u\'name\': \'Czech Republic\',\n+        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n+    },\n+    u\'de\': {u\'name\': \'Germany\', u\'flag\': u\'/++resource++country-flags/de.gif\'},\n+    u\'dj\': {\n+        u\'name\': \'Djibouti\',\n+        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    },\n+    u\'dk\': {u\'name\': \'Denmark\', u\'flag\': u\'/++resource++country-flags/dk.gif\'},\n+    u\'dm\': {\n+        u\'name\': \'Dominica\',\n+        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n+    },\n+    u\'do\': {\n+        u\'name\': \'Dominican Republic\',\n+        u\'flag\': u\'/++resource++country-flags/do.gif\',\n+    },\n+    u\'dz\': {u\'name\': \'Algeria\', u\'flag\': u\'/++resource++country-flags/dz.gif\'},\n+    u\'ec\': {u\'name\': \'Ecuador\', u\'flag\': u\'/++resource++country-flags/ec.gif\'},\n+    u\'ee\': {u\'name\': \'Estonia\', u\'flag\': u\'/++resource++country-flags/ee.gif\'},\n+    u\'eg\': {u\'name\': \'Egypt\', u\'flag\': u\'/++resource++country-flags/eg.gif\'},\n+    u\'eh\': {\n+        u\'name\': \'Western Sahara\',\n+        u\'flag\': u\'/++resource++country-flags/eh.gif\',\n+    },\n+    u\'er\': {u\'name\': \'Eritrea\', u\'flag\': u\'/++resource++country-flags/er.gif\'},\n+    u\'es\': {u\'name\': \'Spain\', u\'flag\': u\'/++resource++country-flags/es.gif\'},\n+    u\'et\': {\n+        u\'name\': \'Ethiopia\',\n+        u\'flag\': u\'/++resource++country-flags/et.gif\',\n+    },\n+    u\'fi\': {u\'name\': \'Finland\', u\'flag\': u\'/++resource++country-flags/fi.gif\'},\n+    u\'fj\': {u\'name\': \'Fiji\', u\'flag\': u\'/++resource++country-flags/fj.gif\'},\n+    u\'fk\': {\n+        u\'name\': \'Falkland Islands (Malvinas)\',\n+        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n+    },\n+    u\'fm\': {\n+        u\'name\': \'Micronesia Federated States of\',\n+        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n+    },\n+    u\'fo\': {\n+        u\'name\': \'Faroe Islands\',\n+        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n+    },\n+    u\'fr\': {u\'name\': \'France\', u\'flag\': u\'/++resource++country-flags/fr.gif\'},\n+    u\'ga\': {u\'name\': \'Gabon\', u\'flag\': u\'/++resource++country-flags/ga.gif\'},\n+    u\'gb\': {\n+        u\'name\': \'United Kingdom\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'gd\': {u\'name\': \'Grenada\', u\'flag\': u\'/++resource++country-flags/gd.gif\'},\n+    u\'ge\': {u\'name\': \'Georgia\', u\'flag\': u\'/++resource++country-flags/ge.gif\'},\n+    u\'gf\': {\n+        u\'name\': \'French Guiana\',\n+        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n+    },\n+    u\'gg\': {\n+        u\'name\': \'Guernsey\',\n+        u\'flag\': u\'/++resource++country-flags/gg.gif\',\n+    },\n+    u\'gh\': {u\'name\': \'Ghana\', u\'flag\': u\'/++resource++country-flags/gh.gif\'},\n+    u\'gi\': {\n+        u\'name\': \'Gibraltar\',\n+        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n+    },\n+    u\'gl\': {\n+        u\'name\': \'Greenland\',\n+        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n+    },\n+    u\'gm\': {u\'name\': \'Gambia\', u\'flag\': u\'/++resource++country-flags/gm.gif\'},\n+    u\'gn\': {u\'name\': \'Guinea\', u\'flag\': u\'/++resource++country-flags/gn.gif\'},\n+    u\'gp\': {\n+        u\'name\': \'Guadeloupe\',\n+        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n+    },\n+    u\'gq\': {\n+        u\'name\': \'Equatorial Guinea\',\n+        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n+    },\n+    u\'gr\': {u\'name\': \'Greece\', u\'flag\': u\'/++resource++country-flags/gr.gif\'},\n+    u\'gs\': {\n+        u\'name\': \'South Georgia and the South Sandwich Islands\',\n+        u\'flag\': u\'/++resource++country-flags/gs.gif\',\n+    },\n+    u\'gt\': {\n+        u\'name\': \'Guatemala\',\n+        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n+    },\n+    u\'gu\': {u\'name\': \'Guam\', u\'flag\': u\'/++resource++country-flags/gu.gif\'},\n+    u\'gw\': {\n+        u\'name\': \'Guinea-Bissau\',\n+        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n+    },\n+    u\'gy\': {u\'name\': \'Guyana\', u\'flag\': u\'/++resource++country-flags/gy.gif\'},\n+    u\'hk\': {\n+        u\'name\': \'Hong Kong\',\n+        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n+    },\n+    u\'hm\': {\n+        u\'name\': \'Heard Island and McDonald Islands\',\n+        u\'flag\': u\'/++resource++country-flags/hm.gif\',\n+    },\n+    u\'hn\': {\n+        u\'name\': \'Honduras\',\n+        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n+    },\n+    u\'hr\': {u\'name\': \'Croatia\', u\'flag\': u\'/++resource++country-flags/hr.gif\'},\n+    u\'ht\': {u\'name\': \'Haiti\', u\'flag\': u\'/++resource++country-flags/ht.gif\'},\n+    u\'hu\': {u\'name\': \'Hungary\', u\'flag\': u\'/++resource++country-flags/hu.gif\'},\n+    u\'id\': {\n+        u\'name\': \'Indonesia\',\n+        u\'flag\': u\'/++resource++country-flags/id.gif\',\n+    },\n+    u\'ie\': {u\'name\': \'Ireland\', u\'flag\': u\'/++resource++country-flags/ie.gif\'},\n+    u\'il\': {u\'name\': \'Israel\', u\'flag\': u\'/++resource++country-flags/il.gif\'},\n+    u\'im\': {\n+        u\'name\': \'Isle of Man\',\n+        u\'flag\': u\'/++resource++country-flags/im.gif\',\n+    },\n+    u\'in\': {u\'name\': \'India\', u\'flag\': u\'/++resource++country-flags/in.gif\'},\n+    u\'io\': {\n+        u\'name\': \'British Indian Ocean Territory\',\n+        u\'flag\': u\'/++resource++country-flags/io.gif\',\n+    },\n+    u\'iq\': {u\'name\': \'Iraq\', u\'flag\': u\'/++resource++country-flags/iq.gif\'},\n+    u\'ir\': {\n+        u\'name\': \'Iran Islamic Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/ir.gif\',\n+    },\n+    u\'is\': {u\'name\': \'Iceland\', u\'flag\': u\'/++resource++country-flags/is.gif\'},\n+    u\'it\': {u\'name\': \'Italy\', u\'flag\': u\'/++resource++country-flags/it.gif\'},\n+    u\'je\': {u\'name\': \'Jersey\', u\'flag\': u\'/++resource++country-flags/je.gif\'},\n+    u\'jm\': {u\'name\': \'Jamaica\', u\'flag\': u\'/++resource++country-flags/jm.gif\'},\n+    u\'jo\': {u\'name\': \'Jordan\', u\'flag\': u\'/++resource++country-flags/jo.gif\'},\n+    u\'jp\': {u\'name\': \'Japan\', u\'flag\': u\'/++resource++country-flags/jp.gif\'},\n+    u\'ke\': {u\'name\': \'Kenya\', u\'flag\': u\'/++resource++country-flags/ke.gif\'},\n+    u\'kg\': {\n+        u\'name\': \'Kyrgyzstan\',\n+        u\'flag\': u\'/++resource++country-flags/kg.gif\',\n+    },\n+    u\'kh\': {\n+        u\'name\': \'Cambodia\',\n+        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n+    },\n+    u\'ki\': {\n+        u\'name\': \'Kiribati\',\n+        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n+    },\n+    u\'km\': {u\'name\': \'Comoros\', u\'flag\': u\'/++resource++country-flags/km.gif\'},\n+    u\'kn\': {\n+        u\'name\': \'Saint Kitts and Nevis\',\n+        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n+    },\n+    u\'kp\': {\n+        u\'name\': "Korea Democratic People\'s Republic of",\n+        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n+    },\n+    u\'kr\': {\n+        u\'name\': \'Korea Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n+    },\n+    u\'kw\': {u\'name\': \'Kuwait\', u\'flag\': u\'/++resource++country-flags/kw.gif\'},\n+    u\'ky\': {\n+        u\'name\': \'Cayman Islands\',\n+        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n+    },\n+    u\'kz\': {\n+        u\'name\': \'Kazakhstan\',\n+        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n+    },\n+    u\'la\': {\n+        u\'name\': "Lao People\'s Democratic Republic",\n+        u\'flag\': u\'/++resource++country-flags/la.gif\',\n+    },\n+    u\'lb\': {u\'name\': \'Lebanon\', u\'flag\': u\'/++resource++country-flags/lb.gif\'},\n+    u\'lc\': {\n+        u\'name\': \'Saint Lucia\',\n+        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n+    },\n+    u\'li\': {\n+        u\'name\': \'Liechtenstein\',\n+        u\'flag\': u\'/++resource++country-flags/li.gif\',\n+    },\n+    u\'lk\': {\n+        u\'name\': \'Sri Lanka\',\n+        u\'flag\': u\'/++resource++country-flags/lk.gif\',\n+    },\n+    u\'lr\': {u\'name\': \'Liberia\', u\'flag\': u\'/++resource++country-flags/lr.gif\'},\n+    u\'ls\': {u\'name\': \'Lesotho\', u\'flag\': u\'/++resource++country-flags/ls.gif\'},\n+    u\'lt\': {\n+        u\'name\': \'Lithuania\',\n+        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n+    },\n+    u\'lu\': {\n+        u\'name\': \'Luxembourg\',\n+        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    },\n+    u\'lv\': {u\'name\': \'Latvia\', u\'flag\': u\'/++resource++country-flags/lv.gif\'},\n+    u\'ly\': {\n+        u\'name\': \'Libyan Arab Jamahiriya\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ma\': {u\'name\': \'Morocco\', u\'flag\': u\'/++resource++country-flags/ma.gif\'},\n+    u\'mc\': {u\'name\': \'Monaco\', u\'flag\': u\'/++resource++country-flags/mc.gif\'},\n+    u\'md\': {\n+        u\'name\': \'Moldova Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/md.gif\',\n+    },\n+    u\'me\': {\n+        u\'name\': \'Montenegro\',\n+        u\'flag\': u\'/++resource++country-flags/me.gif\',\n+    },\n+    u\'mf\': {\n+        u\'name\': \'Saint Martin (French part)\',\n+        u\'flag\': u\'/++resource++country-flags/mf.png\',\n+    },\n+    u\'mg\': {\n+        u\'name\': \'Madagascar\',\n+        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    },\n+    u\'mh\': {\n+        u\'name\': \'Marshall Islands\',\n+        u\'flag\': u\'/++resource++country-flags/mh.gif\',\n+    },\n+    u\'mk\': {\n+        u\'name\': \'Macedonia the former Yugoslavian Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n+    },\n+    u\'ml\': {u\'name\': \'Mali\', u\'flag\': u\'/++resource++country-flags/ml.gif\'},\n+    u\'mm\': {u\'name\': \'Myanmar\', u\'flag\': u\'/++resource++country-flags/mm.gif\'},\n+    u\'mn\': {\n+        u\'name\': \'Mongolia\',\n+        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n+    },\n+    u\'mo\': {u\'name\': \'Macao\', u\'flag\': u\'/++resource++country-flags/mo.gif\'},\n+    u\'mp\': {\n+        u\'name\': \'Northern Mariana Islands\',\n+        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    },\n+    u\'mq\': {\n+        u\'name\': \'Martinique\',\n+        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n+    },\n+    u\'mr\': {\n+        u\'name\': \'Mauritania\',\n+        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n+    },\n+    u\'ms\': {\n+        u\'name\': \'Montserrat\',\n+        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n+    },\n+    u\'mt\': {u\'name\': \'Malta\', u\'flag\': u\'/++resource++country-flags/mt.gif\'},\n+    u\'mu\': {\n+        u\'name\': \'Mauritius\',\n+        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n+    },\n+    u\'mv\': {\n+        u\'name\': \'Maldives\',\n+        u\'flag\': u\'/++resource++country-flags/mv.gif\',\n+    },\n+    u\'mw\': {u\'name\': \'Malawi\', u\'flag\': u\'/++resource++country-flags/mw.gif\'},\n+    u\'mx\': {u\'name\': \'Mexico\', u\'flag\': u\'/++resource++country-flags/mx.gif\'},\n+    u\'my\': {\n+        u\'name\': \'Malaysia\',\n+        u\'flag\': u\'/++resource++country-flags/my.gif\',\n+    },\n+    u\'mz\': {\n+        u\'name\': \'Mozambique\',\n+        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n+    },\n+    u\'na\': {u\'name\': \'Namibia\', u\'flag\': u\'/++resource++country-flags/na.gif\'},\n+    u\'nc\': {\n+        u\'name\': \'New Caledonia\',\n+        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n+    },\n+    u\'ne\': {u\'name\': \'Niger\', u\'flag\': u\'/++resource++country-flags/ne.gif\'},\n+    u\'nf\': {\n+        u\'name\': \'Norfolk Island\',\n+        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n+    },\n+    u\'ng\': {u\'name\': \'Nigeria\', u\'flag\': u\'/++resource++country-flags/ng.gif\'},\n+    u\'ni\': {\n+        u\'name\': \'Nicaragua\',\n+        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n+    },\n+    u\'nl\': {\n+        u\'name\': \'Netherlands\',\n+        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n+    },\n+    u\'no\': {u\'name\': \'Norway\', u\'flag\': u\'/++resource++country-flags/no.gif\'},\n+    u\'np\': {u\'name\': \'Nepal\', u\'flag\': u\'/++resource++country-flags/np.gif\'},\n+    u\'nr\': {u\'name\': \'Nauru\', u\'flag\': u\'/++resource++country-flags/nr.gif\'},\n+    u\'nu\': {u\'name\': \'Niue\', u\'flag\': u\'/++resource++country-flags/nu.gif\'},\n+    u\'nz\': {\n+        u\'name\': \'New Zealand\',\n+        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n+    },\n+    u\'om\': {u\'name\': \'Oman\', u\'flag\': u\'/++resource++country-flags/om.gif\'},\n+    u\'pa\': {u\'name\': \'Panama\', u\'flag\': u\'/++resource++country-flags/pa.gif\'},\n+    u\'pe\': {u\'name\': \'Peru\', u\'flag\': u\'/++resource++country-flags/pe.gif\'},\n+    u\'pf\': {\n+        u\'name\': \'French Polynesia\',\n+        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n+    },\n+    u\'pg\': {\n+        u\'name\': \'Papua New Guinea\',\n+        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n+    },\n+    u\'ph\': {\n+        u\'name\': \'Philippines\',\n+        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n+    },\n+    u\'pk\': {\n+        u\'name\': \'Pakistan\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'pl\': {u\'name\': \'Poland\', u\'flag\': u\'/++resource++country-flags/pl.gif\'},\n+    u\'pm\': {\n+        u\'name\': \'Saint Pierre and Miquelon\',\n+        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n+    },\n+    u\'pn\': {\n+        u\'name\': \'Pitcairn\',\n+        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n+    },\n+    u\'pr\': {\n+        u\'name\': \'Puerto Rico\',\n+        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    },\n+    u\'ps\': {\n+        u\'name\': \'Palestinian Territory occupied\',\n+        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n+    },\n+    u\'pt\': {\n+        u\'name\': \'Portugal\',\n+        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n+    },\n+    u\'pw\': {u\'name\': \'Palau\', u\'flag\': u\'/++resource++country-flags/pw.gif\'},\n+    u\'py\': {\n+        u\'name\': \'Paraguay\',\n+        u\'flag\': u\'/++resource++country-flags/py.gif\',\n+    },\n+    u\'qa\': {u\'name\': \'Qatar\', u\'flag\': u\'/++resource++country-flags/qa.gif\'},\n+    u\'re\': {u\'name\': \'Reunion\', u\'flag\': u\'/++resource++country-flags/re.gif\'},\n+    u\'ro\': {u\'name\': \'Romania\', u\'flag\': u\'/++resource++country-flags/ro.gif\'},\n+    u\'rs\': {u\'name\': \'Serbia\', u\'flag\': u\'/++resource++country-flags/rs.gif\'},\n+    u\'ru\': {\n+        u\'name\': \'Russian Federation\',\n+        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n+    },\n+    u\'rw\': {u\'name\': \'Rwanda\', u\'flag\': u\'/++resource++country-flags/rw.gif\'},\n+    u\'sa\': {\n+        u\'name\': \'Saudi Arabia\',\n+        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n+    },\n+    u\'sb\': {\n+        u\'name\': \'Solomon Islands\',\n+        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n+    },\n+    u\'sc\': {\n+        u\'name\': \'Seychelles\',\n+        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    },\n+    u\'sd\': {u\'name\': \'Sudan\', u\'flag\': u\'/++resource++country-flags/sd.gif\'},\n+    u\'se\': {u\'name\': \'Sweden\', u\'flag\': u\'/++resource++country-flags/se.gif\'},\n+    u\'sg\': {\n+        u\'name\': \'Singapore\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'sh\': {\n+        u\'name\': \'Saint Helena\',\n+        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n+    },\n+    u\'si\': {\n+        u\'name\': \'Slovenia\',\n+        u\'flag\': u\'/++resource++country-flags/si.gif\',\n+    },\n+    u\'sj\': {\n+        u\'name\': \'Svalbard and Jan Mayen\',\n+        u\'flag\': u\'/++resource++country-flags/sj.gif\',\n+    },\n+    u\'sk\': {\n+        u\'name\': \'Slovakia\',\n+        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n+    },\n+    u\'sl\': {\n+        u\'name\': \'Sierra Leone\',\n+        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n+    },\n+    u\'sm\': {\n+        u\'name\': \'San Marino\',\n+        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n+    },\n+    u\'sn\': {u\'name\': \'Senegal\', u\'flag\': u\'/++resource++country-flags/sn.gif\'},\n+    u\'so\': {u\'name\': \'Somalia\', u\'flag\': u\'/++resource++country-flags/so.gif\'},\n+    u\'sr\': {\n+        u\'name\': \'Suriname\',\n+        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n+    },\n+    u\'ss\': {\n+        u\'name\': \'South Sudan\',\n+        u\'flag\': u\'/++resource++country-flags/ss.png\',\n+    },\n+    u\'st\': {\n+        u\'name\': \'Sao Tome and Principe\',\n+        u\'flag\': u\'/++resource++country-flags/st.gif\',\n+    },\n+    u\'sv\': {\n+        u\'name\': \'El Salvador\',\n+        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n+    },\n+    u\'sx\': {\n+        u\'name\': \'Sint Maarten (Dutch part)\',\n+        u\'flag\': u\'/++resource++country-flags/sx.png\',\n+    },\n+    u\'sy\': {\n+        u\'name\': \'Syrian Arab Republic\',\n+        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n+    },\n+    u\'sz\': {\n+        u\'name\': \'Swaziland\',\n+        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    },\n+    u\'tc\': {\n+        u\'name\': \'Turks and Caicos Islands\',\n+        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n+    },\n+    u\'td\': {u\'name\': \'Chad\', u\'flag\': u\'/++resource++country-flags/td.gif\'},\n+    u\'tf\': {\n+        u\'name\': \'French Southern Territories\',\n+        u\'flag\': u\'/++resource++country-flags/tf.gif\',\n+    },\n+    u\'tg\': {u\'name\': \'Togo\', u\'flag\': u\'/++resource++country-flags/tg.gif\'},\n+    u\'th\': {\n+        u\'name\': \'Thailand\',\n+        u\'flag\': u\'/++resource++country-flags/th.gif\',\n+    },\n+    u\'tj\': {\n+        u\'name\': \'Tajikistan\',\n+        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n+    },\n+    u\'tk\': {u\'name\': \'Tokelau\', u\'flag\': u\'/++resource++country-flags/tk.gif\'},\n+    u\'tl\': {\n+        u\'name\': \'Timor-Leste\',\n+        u\'flag\': u\'/++resource++country-flags/tl.gif\',\n+    },\n+    u\'tm\': {\n+        u\'name\': \'Turkmenistan\',\n+        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n+    },\n+    u\'tn\': {u\'name\': \'Tunisia\', u\'flag\': u\'/++resource++country-flags/tn.gif\'},\n+    u\'to\': {u\'name\': \'Tonga\', u\'flag\': u\'/++resource++country-flags/to.gif\'},\n+    u\'tr\': {u\'name\': \'Turkey\', u\'flag\': u\'/++resource++country-flags/tr.gif\'},\n+    u\'tt\': {\n+        u\'name\': \'Trinidad and Tobago\',\n+        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n+    },\n+    u\'tv\': {u\'name\': \'Tuvalu\', u\'flag\': u\'/++resource++country-flags/tv.gif\'},\n+    u\'tw\': {u\'name\': \'Taiwan\', u\'flag\': u\'/++resource++country-flags/tw.gif\'},\n+    u\'tz\': {\n+        u\'name\': \'Tanzania United Republic of\',\n+        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n+    },\n+    u\'ua\': {u\'name\': \'Ukraine\', u\'flag\': u\'/++resource++country-flags/ua.gif\'},\n+    u\'ug\': {u\'name\': \'Uganda\', u\'flag\': u\'/++resource++country-flags/ug.gif\'},\n+    u\'um\': {\n+        u\'name\': \'United States Minor Outlying Islands\',\n+        u\'flag\': u\'/++resource++country-flags/um.gif\',\n+    },\n+    u\'us\': {\n+        u\'name\': \'United States\',\n+        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    },\n+    u\'uy\': {u\'name\': \'Uruguay\', u\'flag\': u\'/++resource++country-flags/uy.gif\'},\n+    u\'uz\': {\n+        u\'name\': \'Uzbekistan\',\n+        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n+    },\n+    u\'va\': {\n+        u\'name\': \'Holy See (Vatican City State)\',\n+        u\'flag\': u\'/++resource++country-flags/va.gif\',\n+    },\n+    u\'vc\': {\n+        u\'name\': \'Saint Vincent and the Grenadines\',\n+        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n+    },\n+    u\'ve\': {\n+        u\'name\': \'Venezuela\',\n+        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n+    },\n+    u\'vg\': {\n+        u\'name\': \'Virgin Islands British\',\n+        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n+    },\n+    u\'vi\': {\n+        u\'name\': \'Virgin Islands U.S.\',\n+        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n+    },\n+    u\'vn\': {\n+        u\'name\': \'Viet Nam\',\n+        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n+    },\n+    u\'vu\': {u\'name\': \'Vanuatu\', u\'flag\': u\'/++resource++country-flags/vu.gif\'},\n+    u\'wf\': {\n+        u\'name\': \'Wallis and Futuna\',\n+        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n+    },\n+    u\'ws\': {u\'name\': \'Samoa\', u\'flag\': u\'/++resource++country-flags/ws.gif\'},\n+    u\'ye\': {u\'name\': \'Yemen\', u\'flag\': u\'/++resource++country-flags/ye.gif\'},\n+    u\'yt\': {u\'name\': \'Mayotte\', u\'flag\': u\'/++resource++country-flags/yt.gif\'},\n+    u\'za\': {\n+        u\'name\': \'South Africa\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'zm\': {u\'name\': \'Zambia\', u\'flag\': u\'/++resource++country-flags/zm.gif\'},\n+    u\'zw\': {\n+        u\'name\': \'Zimbabwe\',\n+        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n+    },\n+    u\'xk\': {u\'name\': \'Kosovo\', u\'flag\': u\'/++resource++country-flags/xk.gif\'},\n }\n \n # convert the utf-8 encoded values to unicode\ndiff --git a/plone/i18n/locales/interfaces.py b/plone/i18n/locales/interfaces.py\nindex cd5c9b4..f1f58b2 100644\n--- a/plone/i18n/locales/interfaces.py\n+++ b/plone/i18n/locales/interfaces.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from zope.i18n.interfaces import ILanguageAvailability as IBaseLanguageAvailability\n+from zope.i18n.interfaces import (\n+    ILanguageAvailability as IBaseLanguageAvailability,\n+)\n from zope.interface import Interface\n \n \n@@ -18,6 +20,7 @@ def getLanguagesForTLD(tld):\n         """Return the relevant languages for a top level domain.\n         """\n \n+\n class ICountryAvailability(Interface):\n     """A list of available coutries."""\n \n@@ -33,6 +36,7 @@ def getCountryListing():\n         """Return a sequence of country code and country name tuples.\n         """\n \n+\n class ILanguageAvailability(IBaseLanguageAvailability):\n     """A list of available languages."""\n \n@@ -44,12 +48,15 @@ def getLanguageListing(combined=False):\n         """Return a sequence of language code and language name tuples.\n         """\n \n+\n class IContentLanguageAvailability(ILanguageAvailability):\n     """A list of available content languages."""\n \n+\n class IMetadataLanguageAvailability(ILanguageAvailability):\n     """A list of available metadata languages."""\n \n+\n class IModifiableLanguageAvailability(ILanguageAvailability):\n     """A modifiable list of available languages."""\n \n@@ -57,6 +64,7 @@ def setAvailableLanguages(languages, combined=False):\n         """Set a list of available language tags.\n         """\n \n+\n class IModifiableCountryAvailability(ICountryAvailability):\n     """A modifiable list of available countries."""\n \ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex 7dc38d4..4e6032c 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -42,6 +42,7 @@ class ContentLanguageAvailability(LanguageAvailability):\n     """A list of available content languages.\n     """\n \n+\n contentlanguages = ContentLanguageAvailability()\n \n \n@@ -50,202 +51,515 @@ class MetadataLanguageAvailability(LanguageAvailability):\n     """A list of available metadata languages.\n     """\n \n+\n metadatalanguages = MetadataLanguageAvailability()\n \n # This is a dictionary of dictonaries:\n #\n-# \'langcode-variation\' : {u\'native\' : \'Native name\', u\'name\' : \'English name\', u\'flag\' : u\'/++resource++country-flags/*.gif\'}\n+# \'langcode-variation\' : {\n+#     u\'native\' : \'Native name\',\n+#     u\'name\' : \'English name\',\n+#     u\'flag\' : u\'/++resource++country-flags/*.gif\'\n+# }\n #\n # This list follows ISO-639-1. The list retains entries for mo and sh,\n # even tough these have later been deprecated from the standard.\n \n _languagelist = {\n-u\'aa\' : {u\'native\' : \'\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I\', u\'name\' : \'Afar\',                         u\'flag\' : u\'/++resource++country-flags/dj.gif\'},\n-u\'ab\' : {u\'native\' : \'\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0\', u\'name\' : \'Abkhazian\',                           u\'flag\' : u\'/++resource++country-flags/ge.gif\'},\n-u\'ae\' : {u\'native\' : \'avesta\', u\'name\' : \'Avestan\'},\n-u\'af\' : {u\'native\' : \'Afrikaans\', u\'name\' : \'Afrikaans\'},\n-u\'ak\' : {u\'native\' : \'Akan\', u\'name\' : \'Akan\'},\n-u\'am\' : {u\'native\' : \'\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b\', u\'name\' : \'Amharic\'},\n-u\'an\' : {u\'native\' : \'aragon\xc3\xa9s\', u\'name\' : \'Aragonese\'},\n-u\'ar\' : {u\'native\' : \'\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\', u\'name\' : \'Arabic\',                             u\'flag\' : \'/++resource++language-flags/ar.gif\'},\n-u\'as\' : {u\'native\' : \'\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe\', u\'name\' : \'Assamese\'},\n-u\'ay\' : {u\'native\' : \'Aymara\', u\'name\' : \'Aymara\'},\n-u\'az\' : {u\'native\' : \'Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si\', u\'name\' : \'Azerbaijani\',                 u\'flag\' : u\'/++resource++country-flags/az.gif\'},\n-u\'ba\' : {u\'native\' : \'Bashkir\', u\'name\' : \'Bashkir\'},\n-u\'be\' : {u\'native\' : \'\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96\', u\'name\' : \'Belarussian\',                      u\'flag\' : u\'/++resource++country-flags/by.gif\'},\n-u\'bg\' : {u\'native\' : \'\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\', u\'name\' : \'Bulgarian\',                        u\'flag\' : u\'/++resource++country-flags/bg.gif\'},\n-u\'bh\' : {u\'native\' : \'Bihari\', u\'name\' : \'Bihari\'},\n-u\'bi\' : {u\'native\' : \'Bislama\', u\'name\' : \'Bislama\'},\n-u\'bm\' : {u\'native\' : \'bamanankan\', u\'name\' : \'Bambara\'},\n-u\'bn\' : {u\'native\' : \'\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\', u\'name\' : \'Bengali\',                              u\'flag\' : u\'/++resource++country-flags/bd.gif\'},\n-u\'bo\' : {u\'native\' : \'\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b\', u\'name\' : \'Tibetan\'},\n-u\'br\' : {u\'native\' : \'brezhoneg\', u\'name\' : \'Breton\'},\n-u\'bs\' : {u\'native\' : \'Bosanski\', u\'name\' : \'Bosnian\',                           u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'ca\' : {u\'native\' : \'Catal\xc3\xa0\', u\'name\' : \'Catalan\',                             u\'flag\' : u\'/++resource++language-flags/ca.gif\'},\n-u\'ce\' : {u\'native\' : \'\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82\', u\'name\' : \'Chechen\'},\n-u\'ch\' : {u\'native\' : \'Chamoru\', u\'name\' : \'Chamorro\'},\n-u\'co\' : {u\'native\' : \'Corsu\', u\'name\' : \'Corsican\'},\n-u\'cr\' : {u\'native\' : \'\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3\', u\'name\' : \'Cree\'},\n-u\'cs\' : {u\'native\' : \'\xc4\x8ce\xc5\xa1tina\', u\'name\' : \'Czech\',                              u\'flag\' : u\'/++resource++country-flags/cz.gif\'},\n-u\'cu\' : {u\'native\' : \'\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a\', u\'name\' : \'Old Church Slavonic\'},\n-u\'cv\' : {u\'native\' : \'\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8\', u\'name\' : \'Chuvash\'},\n-u\'cy\' : {u\'native\' : \'Cymraeg\', u\'name\' : \'Welsh\',                              u\'flag\' : \'/++resource++language-flags/cy.gif\'},\n-u\'da\' : {u\'native\' : \'Dansk\', u\'name\' : \'Danish\',                               u\'flag\' : u\'/++resource++country-flags/dk.gif\'},\n-u\'de\' : {u\'native\' : \'Deutsch\', u\'name\' : \'German\',                             u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'dv\' : {u\'native\' : \'Divehi\', u\'name\' : \'Maldivian\'},\n-u\'dz\' : {u\'native\' : \'Bhutani\', u\'name\' : \'Indian Bhutani\'},\n-u\'ee\' : {u\'native\' : \'E\xca\x8begbe\', u\'name\' : \'Ewe\'},\n-u\'el\' : {u\'native\' : \'\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\', u\'name\' : \'Greek\',                             u\'flag\' : u\'/++resource++country-flags/gr.gif\'},\n-u\'en\' : {u\'native\' : \'English\', u\'name\' : \'English\',                            u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'eo\' : {u\'native\' : \'Esperanto\', u\'name\' : \'Esperanto\',                        u\'flag\' : \'/++resource++language-flags/eo.gif\'},\n-u\'es\' : {u\'native\' : \'Espa\xc3\xb1ol\', u\'name\' : \'Spanish\',                            u\'flag\' : u\'/++resource++country-flags/es.gif\'},\n-u\'et\' : {u\'native\' : \'Eesti\', u\'name\' : \'Estonian\',                             u\'flag\' : u\'/++resource++country-flags/ee.gif\'},\n-u\'eu\' : {u\'native\' : \'Euskara\', u\'name\' : \'Basque\',                             u\'flag\' : \'/++resource++language-flags/eu.gif\'},\n-u\'fa\' : {u\'native\' : \'\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\', u\'name\' : \'Persian\'},\n-u\'ff\' : {u\'native\' : \'Fulfulde\', u\'name\' : \'Fula\'},\n-u\'fi\' : {u\'native\' : \'Suomi\', u\'name\' : \'Finnish\',                              u\'flag\' : u\'/++resource++country-flags/fi.gif\'},\n-u\'fj\' : {u\'native\' : \'Fiji\', u\'name\' : \'Fiji\',                                  u\'flag\' : u\'/++resource++country-flags/fj.gif\'},\n-u\'fo\' : {u\'native\' : \'F\xc3\xb8royska\', u\'name\' : \'Faroese\',                           u\'flag\' : u\'/++resource++country-flags/fo.gif\'},\n-u\'fr\' : {u\'native\' : \'Fran\xc3\xa7ais\', u\'name\' : \'French\',                            u\'flag\' : u\'/++resource++country-flags/fr.gif\'},\n-u\'fy\' : {u\'native\' : \'Frysk\', u\'name\' : \'Frisian\'},\n-u\'ga\' : {u\'native\' : \'Gaeilge\', u\'name\' : \'Irish Gaelic\'},\n-u\'gd\' : {u\'native\' : \'G\xc3\xa0idhlig\', u\'name\' : \'Scottish Gaelic\'},\n-u\'gl\' : {u\'native\' : \'Galego\', u\'name\' : \'Galician\'},\n-u\'gn\' : {u\'native\' : \'Guarani\', u\'name\' : \'Guarani\'},\n-u\'gu\' : {u\'native\' : \'\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\', u\'name\' : \'Gujarati\'},\n-u\'gv\' : {u\'native\' : \'Gaelg\', u\'name\' : \'Manx Gaelic\'},\n-u\'ha\' : {u\'native\' : \'\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3\', u\'name\' : \'Hausa\'},\n-u\'he\' : {u\'native\' : \'\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\', u\'name\' : \'Hebrew\',                               u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'hi\' : {u\'native\' : \'\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80\', u\'name\' : \'Hindi\',                                u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ho\' : {u\'native\' : \'Hiri Motu\', u\'name\' : \'Hiri Motu\'},\n-u\'hr\' : {u\'native\' : \'Hrvatski\', u\'name\' : \'Croatian\',                          u\'flag\' : u\'/++resource++country-flags/hr.gif\'},\n-u\'ht\' : {u\'native\' : \'Krey\xc3\xb2l ayisyen\', u\'name\' : \'Haitian\'},\n-u\'hu\' : {u\'native\' : \'Magyar\', u\'name\' : \'Hungarian\',                           u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'hy\' : {u\'native\' : \'\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6\', u\'name\' : \'Armenian\',                           u\'flag\' : u\'/++resource++country-flags/am.gif\'},\n-u\'hz\' : {u\'native\' : \'Otjiherero\', u\'name\' : \'Herero\'},\n-u\'ia\' : {u\'native\' : \'Interlingua\', u\'name\' : \'Interlingua\'},\n-u\'id\' : {u\'native\' : \'Bahasa Indonesia\', u\'name\' : \'Indonesian\',                u\'flag\' : u\'/++resource++country-flags/id.gif\'},\n-u\'ie\' : {u\'native\' : \'Interlingue\', u\'name\' : \'Interlingue\'},\n-u\'ig\' : {u\'native\' : \'As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo\', u\'name\' : \'Igbo\'},\n-u\'ii\' : {u\'native\' : \'Nuosu\', u\'name\' : \'Nuosu\'},\n-u\'ik\' : {u\'native\' : \'I\xc3\xb1upiaq\', u\'name\' : \'Inupiak\'},\n-u\'io\' : {u\'native\' : \'Ido\', u\'name\' : \'Ido\'},\n-u\'is\' : {u\'native\' : \'\xc3\x8dslenska\', u\'name\' : \'Icelandic\',                         u\'flag\' : u\'/++resource++country-flags/is.gif\'},\n-u\'it\' : {u\'native\' : \'Italiano\', u\'name\' : \'Italian\',                           u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'iu\' : {u\'native\' : \'\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6\', u\'name\' : \'Inuktitut\'},\n-u\'ja\' : {u\'native\' : \'\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\', u\'name\' : \'Japanese\',                               u\'flag\' : u\'/++resource++country-flags/jp.gif\'},\n-u\'jv\' : {u\'native\' : \'Javanese\', u\'name\' : \'basa Jawa\'},\n-u\'ka\' : {u\'native\' : \'\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\', u\'name\' : \'Georgian\',                           u\'flag\' : u\'/++resource++country-flags/ge.gif\'},\n-u\'kg\' : {u\'native\' : \'KiKongo\', u\'name\' : \'Kongo\'},\n-u\'ki\' : {u\'native\' : \'G\xc4\xa9k\xc5\xa9y\xc5\xa9\', u\'name\' : \'Kikuyu\'},\n-u\'kj\' : {u\'native\' : \'Kuanyama\', u\'name\' : \'Kwanyama\'},\n-u\'kk\' : {u\'native\' : \'\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e\', u\'name\' : \'Kazakh\',                             u\'flag\' : u\'/++resource++country-flags/kz.gif\'},\n-u\'kl\' : {u\'native\' : \'Greenlandic\', u\'name\' : \'Greenlandic\',                    u\'flag\' : u\'/++resource++country-flags/gl.gif\'},\n-u\'km\' : {u\'native\' : \'\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\', u\'name\' : \'Cambodian/Khmer\',                      u\'flag\' : u\'/++resource++country-flags/kh.gif\'},\n-u\'kn\' : {u\'native\' : \'\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1\', u\'name\' : \'Kannada\',                              u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ko\' : {u\'native\' : \'\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\', u\'name\' : \'Korean\',                                 u\'flag\' : u\'/++resource++country-flags/kr.gif\'},\n-u\'kr\' : {u\'native\' : \'Kanuri\', u\'name\' : \'Kanuri\'},\n-u\'ks\' : {u\'native\' : \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0\', u\'name\' : \'Kashmiri\',                            u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ku\' : {u\'native\' : \'Kurd\xc3\xad\', u\'name\' : \'Kurdish\'},\n-u\'kv\' : {u\'native\' : \'\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2\', u\'name\' : \'Komi\'},\n-u\'kw\' : {u\'native\' : \'Kernewek\', u\'name\' : \'Cornish\'},\n-u\'ky\' : {u\'native\' : \'\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\', u\'name\' : \'Kirghiz\'},\n-u\'la\' : {u\'native\' : \'Latin\', u\'name\' : \'Latin\',                                u\'flag\' : u\'/++resource++country-flags/va.gif\'},\n-u\'lb\' : {u\'native\' : \'L\xc3\xabtzebuergesch\', u\'name\' : \'Luxemburgish\',                u\'flag\' : u\'/++resource++country-flags/lu.gif\'},\n-u\'lg\' : {u\'native\' : \'Luganda\', u\'name\' : \'Ganda\'},\n-u\'li\' : {u\'native\' : \'Limburgs\', u\'name\' : \'Limburgish\'},\n-u\'ln\' : {u\'native\' : \'Lingala\', u\'name\' : \'Lingala\'},\n-u\'lo\' : {u\'native\' : \'\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7\', u\'name\' : \'Laotian\',                            u\'flag\' : u\'/++resource++country-flags/la.gif\'},\n-u\'lt\' : {u\'native\' : \'Lietuviskai\', u\'name\' : \'Lithuanian\',                     u\'flag\' : u\'/++resource++country-flags/lt.gif\'},\n-u\'lu\' : {u\'native\' : \'Tshiluba\', u\'name\' : \'Luba-Katanga\'},\n-u\'lv\' : {u\'native\' : \'Latvie\xc5\xa1u\', u\'name\' : \'Latvian\',                           u\'flag\' : u\'/++resource++country-flags/lv.gif\'},\n-u\'mg\' : {u\'native\' : \'Malagasy\', u\'name\' : \'Madagascarian\',                     u\'flag\' : u\'/++resource++country-flags/mg.gif\'},\n-u\'mh\' : {u\'native\' : \'Kajin M\xcc\xa7aje\xc4\xbc\', u\'name\' : \'Marshallese\'},\n-u\'mi\' : {u\'native\' : \'Maori\', u\'name\' : \'Maori\'},\n-u\'mk\' : {u\'native\' : \'\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\', u\'name\' : \'Macedonian\',                      u\'flag\' : u\'/++resource++country-flags/mk.gif\'},\n-u\'ml\' : {u\'native\' : \'\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\', u\'name\' : \'Malayalam\'},\n-u\'mn\' : {u\'native\' : \'\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\', u\'name\' : \'Mongolian\',                           u\'flag\' : u\'/++resource++country-flags/mn.gif\'},\n-u\'mo\' : {u\'native\' : \'Moldavian\', u\'name\' : \'Moldavian\',                        u\'flag\' : u\'/++resource++country-flags/md.gif\'},\n-u\'mr\' : {u\'native\' : \'\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\', u\'name\' : \'Marathi\'},\n-u\'ms\' : {u\'native\' : \'Bahasa Melayu\', u\'name\' : \'Malay\'},\n-u\'mt\' : {u\'native\' : \'Malti\', u\'name\' : \'Maltese\',                              u\'flag\' : u\'/++resource++country-flags/mt.gif\'},\n-u\'my\' : {u\'native\' : \'Burmese\', u\'name\' : \'Burmese\'},\n-u\'na\' : {u\'native\' : \'Nauru\', u\'name\' : \'Nauruan\',                              u\'flag\' : u\'/++resource++country-flags/nr.gif\'},\n-u\'nb\' : {u\'native\' : \'Norsk bokm\xc3\xa5l\', u\'name\' : \'Norwegian Bokm\xc3\xa5l\'},\n-u\'nd\' : {u\'native\' : \'Ndebele (North)\', u\'name\' : \'Ndebele (North)\'},\n-u\'ne\' : {u\'native\' : \'\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\', u\'name\' : \'Nepali\'},\n-u\'ng\' : {u\'native\' : \'Owambo\', u\'name\' : \'Ndonga\'},\n-u\'nl\' : {u\'native\' : \'Nederlands\', u\'name\' : \'Dutch\',                           u\'flag\' : u\'/++resource++country-flags/nl.gif\'},\n-u\'nn\' : {u\'native\' : \'Nynorsk\', u\'name\' : \'Nynorsk\',                            u\'flag\' : u\'/++resource++country-flags/no.gif\'},\n-u\'no\' : {u\'native\' : \'Norsk\', u\'name\' : \'Norwegian\',                            u\'flag\' : u\'/++resource++country-flags/no.gif\'},\n-u\'nr\' : {u\'native\' : \'IsiNdebele\', u\'name\' : \'Ndebele (South)\'},\n-u\'nv\' : {u\'native\' : \'Din\xc3\xa9 bizaad\', u\'name\' : \'Navajo\'},\n-u\'ny\' : {u\'native\' : \'chiChe\xc5\xb5a\', u\'name\' : \'Chichewa\'},\n-u\'oc\' : {u\'native\' : \'Occitan\', u\'name\' : \'Occitan\'},\n-u\'oj\' : {u\'native\' : \'\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90\', u\'name\' : \'Ojibwe\'},\n-u\'om\' : {u\'native\' : \'Oromo\', u\'name\' : \'Oromo\'},\n-u\'or\' : {u\'native\' : \'\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86\', u\'name\' : \'Oriya\'},\n-u\'os\' : {u\'native\' : \'\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3\', u\'name\' : \'Ossetian\'},\n-u\'pa\' : {u\'native\' : \'\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80\', u\'name\' : \'Punjabi\'},\n-u\'pi\' : {u\'native\' : \'\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf\', u\'name\' : \'P\xc4\x81li\'},\n-u\'pl\' : {u\'native\' : \'Polski\', u\'name\' : \'Polish\',                              u\'flag\' : u\'/++resource++country-flags/pl.gif\'},\n-u\'ps\' : {u\'native\' : \'\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88\', u\'name\' : \'Pashto\'},\n-u\'pt\' : {u\'native\' : \'Portugu\xc3\xaas\', u\'name\' : \'Portuguese\',                       u\'flag\' : u\'/++resource++country-flags/pt.gif\'},\n-u\'qu\' : {u\'native\' : \'Quechua\', u\'name\' : \'Quechua\'},\n-u\'rm\' : {u\'native\' : \'Rhaeto-Romance\', u\'name\' : \'Rhaeto-Romance\'},\n-u\'rn\' : {u\'native\' : \'Kirundi\', u\'name\' : \'Kirundi\'},\n-u\'ro\' : {u\'native\' : \'Rom\xc3\xa2n\xc4\x83\', u\'name\' : \'Romanian\',                            u\'flag\' : u\'/++resource++country-flags/ro.gif\'},\n-u\'ru\' : {u\'native\' : \'\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\', u\'name\' : \'Russian\',                            u\'flag\' : u\'/++resource++country-flags/ru.gif\'},\n-u\'rw\' : {u\'native\' : \'Kinyarwanda\', u\'name\' : \'Kinyarwanda\'},\n-u\'sa\' : {u\'native\' : \'\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4\', u\'name\' : \'Sanskrit\'},\n-u\'sc\' : {u\'native\' : \'sardu\', u\'name\' : \'Sardinian\'},\n-u\'sd\' : {u\'native\' : \'Sindhi\', u\'name\' : \'Sindhi\',                              u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'se\' : {u\'native\' : \'Northern S\xc3\xa1mi\', u\'name\' : \'Northern S\xc3\xa1mi\'},\n-u\'sg\' : {u\'native\' : \'Sangho\', u\'name\' : \'Sangho\',                              u\'flag\' : u\'/++resource++country-flags/cf.gif\'},\n-u\'sh\' : {u\'native\' : \'Serbo-Croatian\', u\'name\' : \'Serbo-Croatian\'},\n-u\'si\' : {u\'native\' : \'Singhalese\', u\'name\' : \'Singhalese\'},\n-u\'sk\' : {u\'native\' : \'Sloven\xc4\x8dina\', u\'name\' : \'Slovak\',                          u\'flag\' : u\'/++resource++country-flags/sk.gif\'},\n-u\'sl\' : {u\'native\' : \'Sloven\xc5\xa1\xc4\x8dina\', u\'name\' : \'Slovenian\',                      u\'flag\' : u\'/++resource++country-flags/si.gif\'},\n-u\'sm\' : {u\'native\' : \'Samoan\', u\'name\' : \'Samoan\'},\n-u\'sn\' : {u\'native\' : \'Shona\', u\'name\' : \'Shona\'},\n-u\'so\' : {u\'native\' : \'Somali\', u\'name\' : \'Somali\',                              u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'sq\' : {u\'native\' : \'Shqip\', u\'name\' : \'Albanian\',                             u\'flag\' : u\'/++resource++country-flags/al.gif\'},\n-u\'sr\' : {u\'native\' : \'\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8\', u\'name\' : \'Serbian\',                             u\'flag\' : u\'/++resource++country-flags/cs.gif\'},\n-u\'ss\' : {u\'native\' : \'SiSwati\', u\'name\' : \'Swati\'},\n-u\'st\' : {u\'native\' : \'Sesotho\', u\'name\' : \'Southern Sotho\'},\n-u\'su\' : {u\'native\' : \'Sudanese\', u\'name\' : \'Sudanese\',                          u\'flag\' : u\'/++resource++country-flags/sd.gif\'},\n-u\'sv\' : {u\'native\' : \'Svenska\', u\'name\' : \'Swedish\',                            u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sw\' : {u\'native\' : \'Kiswahili\', u\'name\' : \'Swahili\'},\n-u\'ta\' : {u\'native\' : \'\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\', u\'name\' : \'Tamil\'},\n-u\'te\' : {u\'native\' : \'\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\', u\'name\' : \'Telugu\'},\n-u\'tg\' : {u\'native\' : \'\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8\', u\'name\' : \'Tadjik\',                              u\'flag\' : u\'/++resource++country-flags/tj.gif\'},\n-u\'th\' : {u\'native\' : \'\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\', u\'name\' : \'Thai\',                                   u\'flag\' : u\'/++resource++country-flags/th.gif\'},\n-u\'ti\' : {u\'native\' : \'\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b\', u\'name\' : \'Tigrinya\'},\n-u\'tk\' : {u\'native\' : \'\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5\', u\'name\' : \'Turkmen\',                          u\'flag\' : u\'/++resource++country-flags/tm.gif\'},\n-u\'tl\' : {u\'native\' : \'Tagalog\', u\'name\' : \'Tagalog\'},\n-u\'tn\' : {u\'native\' : \'Setswana\', u\'name\' : \'Tswana\',                            u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'to\' : {u\'native\' : \'Tonga\', u\'name\' : \'Tonga\'},\n-u\'tr\' : {u\'native\' : \'T\xc3\xbcrk\xc3\xa7e\', u\'name\' : \'Turkish\',                             u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'ts\' : {u\'native\' : \'Xitsonga\', u\'name\' : \'Tsonga\'},\n-u\'tt\' : {u\'native\' : \'\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0\', u\'name\' : \'Tatar\'},\n-u\'tw\' : {u\'native\' : \'Twi\', u\'name\' : \'Twi\'},\n-u\'ty\' : {u\'native\' : \'Reo Tahiti\', u\'name\' : \'Tahitian\'},\n-u\'ug\' : {u\'native\' : \'Uigur\', u\'name\' : \'Uigur\'},\n-u\'uk\' : {u\'native\' : \'\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\', u\'name\' : \'Ukrainian\',                       u\'flag\' : u\'/++resource++country-flags/ua.gif\'},\n-u\'ur\' : {u\'native\' : \'\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\', u\'name\' : \'Urdu\'},\n-u\'uz\' : {u\'native\' : \'\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\', u\'name\' : \'Uzbek\',                              u\'flag\' : u\'/++resource++country-flags/uz.gif\'},\n-u\'ve\' : {u\'native\' : \'Tshiven\xe1\xb8\x93a\', u\'name\' : \'Venda\'},\n-u\'vi\' : {u\'native\' : \'Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t\', u\'name\' : \'Vietnamese\',                      u\'flag\' : u\'/++resource++country-flags/vn.gif\'},\n-u\'vk\' : {u\'native\' : \'Ovalingo\', u\'name\' : \'Viking\'},\n-u\'vo\' : {u\'native\' : \'Volap\xc3\xbck\', u\'name\' : \'Volap\xc3\xbck\'},\n-u\'wa\' : {u\'native\' : \'Walon\', u\'name\' : \'Walloon\'},\n-u\'wo\' : {u\'native\' : \'Wolof\', u\'name\' : \'Wolof\'},\n-u\'xh\' : {u\'native\' : \'IsiXhosa\', u\'name\' : \'Xhosa\'},\n-u\'yi\' : {u\'native\' : \'\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9\', u\'name\' : \'Yiddish\',                              u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'yo\' : {u\'native\' : \'Yor\xc3\xb9b\xc3\xa1\', u\'name\' : \'Yorouba\'},\n-u\'za\' : {u\'native\' : \'Zhuang\', u\'name\' : \'Zhuang\'},\n-u\'zh\' : {u\'native\' : \'\xe4\xb8\xad\xe6\x96\x87\', u\'name\' : \'Chinese\',                                 u\'flag\' : u\'/++resource++country-flags/cn.gif\'},\n-u\'zu\' : {u\'native\' : \'IsiZulu\', u\'name\' : \'Zulu\',                               u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n+    u\'aa\': {\n+        u\'native\': \'\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I\',\n+        u\'name\': \'Afar\',\n+        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    },\n+    u\'ab\': {\n+        u\'native\': \'\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0\',\n+        u\'name\': \'Abkhazian\',\n+        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n+    },\n+    u\'ae\': {u\'native\': \'avesta\', u\'name\': \'Avestan\'},\n+    u\'af\': {u\'native\': \'Afrikaans\', u\'name\': \'Afrikaans\'},\n+    u\'ak\': {u\'native\': \'Akan\', u\'name\': \'Akan\'},\n+    u\'am\': {u\'native\': \'\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Amharic\'},\n+    u\'an\': {u\'native\': \'aragon\xc3\xa9s\', u\'name\': \'Aragonese\'},\n+    u\'ar\': {\n+        u\'native\': \'\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\',\n+        u\'name\': \'Arabic\',\n+        u\'flag\': \'/++resource++language-flags/ar.gif\',\n+    },\n+    u\'as\': {u\'native\': \'\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe\', u\'name\': \'Assamese\'},\n+    u\'ay\': {u\'native\': \'Aymara\', u\'name\': \'Aymara\'},\n+    u\'az\': {\n+        u\'native\': \'Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si\',\n+        u\'name\': \'Azerbaijani\',\n+        u\'flag\': u\'/++resource++country-flags/az.gif\',\n+    },\n+    u\'ba\': {u\'native\': \'Bashkir\', u\'name\': \'Bashkir\'},\n+    u\'be\': {\n+        u\'native\': \'\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96\',\n+        u\'name\': \'Belarussian\',\n+        u\'flag\': u\'/++resource++country-flags/by.gif\',\n+    },\n+    u\'bg\': {\n+        u\'native\': \'\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Bulgarian\',\n+        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n+    },\n+    u\'bh\': {u\'native\': \'Bihari\', u\'name\': \'Bihari\'},\n+    u\'bi\': {u\'native\': \'Bislama\', u\'name\': \'Bislama\'},\n+    u\'bm\': {u\'native\': \'bamanankan\', u\'name\': \'Bambara\'},\n+    u\'bn\': {\n+        u\'native\': \'\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\',\n+        u\'name\': \'Bengali\',\n+        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n+    },\n+    u\'bo\': {u\'native\': \'\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b\', u\'name\': \'Tibetan\'},\n+    u\'br\': {u\'native\': \'brezhoneg\', u\'name\': \'Breton\'},\n+    u\'bs\': {\n+        u\'native\': \'Bosanski\',\n+        u\'name\': \'Bosnian\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'ca\': {\n+        u\'native\': \'Catal\xc3\xa0\',\n+        u\'name\': \'Catalan\',\n+        u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+    },\n+    u\'ce\': {u\'native\': \'\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82\', u\'name\': \'Chechen\'},\n+    u\'ch\': {u\'native\': \'Chamoru\', u\'name\': \'Chamorro\'},\n+    u\'co\': {u\'native\': \'Corsu\', u\'name\': \'Corsican\'},\n+    u\'cr\': {u\'native\': \'\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3\', u\'name\': \'Cree\'},\n+    u\'cs\': {\n+        u\'native\': \'\xc4\x8ce\xc5\xa1tina\',\n+        u\'name\': \'Czech\',\n+        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n+    },\n+    u\'cu\': {u\'native\': \'\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a\', u\'name\': \'Old Church Slavonic\'},\n+    u\'cv\': {u\'native\': \'\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8\', u\'name\': \'Chuvash\'},\n+    u\'cy\': {\n+        u\'native\': \'Cymraeg\',\n+        u\'name\': \'Welsh\',\n+        u\'flag\': \'/++resource++language-flags/cy.gif\',\n+    },\n+    u\'da\': {\n+        u\'native\': \'Dansk\',\n+        u\'name\': \'Danish\',\n+        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n+    },\n+    u\'de\': {\n+        u\'native\': \'Deutsch\',\n+        u\'name\': \'German\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'dv\': {u\'native\': \'Divehi\', u\'name\': \'Maldivian\'},\n+    u\'dz\': {u\'native\': \'Bhutani\', u\'name\': \'Indian Bhutani\'},\n+    u\'ee\': {u\'native\': \'E\xca\x8begbe\', u\'name\': \'Ewe\'},\n+    u\'el\': {\n+        u\'native\': \'\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\',\n+        u\'name\': \'Greek\',\n+        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n+    },\n+    u\'en\': {\n+        u\'native\': \'English\',\n+        u\'name\': \'English\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'eo\': {\n+        u\'native\': \'Esperanto\',\n+        u\'name\': \'Esperanto\',\n+        u\'flag\': \'/++resource++language-flags/eo.gif\',\n+    },\n+    u\'es\': {\n+        u\'native\': \'Espa\xc3\xb1ol\',\n+        u\'name\': \'Spanish\',\n+        u\'flag\': u\'/++resource++country-flags/es.gif\',\n+    },\n+    u\'et\': {\n+        u\'native\': \'Eesti\',\n+        u\'name\': \'Estonian\',\n+        u\'flag\': u\'/++resource++country-flags/ee.gif\',\n+    },\n+    u\'eu\': {\n+        u\'native\': \'Euskara\',\n+        u\'name\': \'Basque\',\n+        u\'flag\': \'/++resource++language-flags/eu.gif\',\n+    },\n+    u\'fa\': {u\'native\': \'\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\', u\'name\': \'Persian\'},\n+    u\'ff\': {u\'native\': \'Fulfulde\', u\'name\': \'Fula\'},\n+    u\'fi\': {\n+        u\'native\': \'Suomi\',\n+        u\'name\': \'Finnish\',\n+        u\'flag\': u\'/++resource++country-flags/fi.gif\',\n+    },\n+    u\'fj\': {\n+        u\'native\': \'Fiji\',\n+        u\'name\': \'Fiji\',\n+        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n+    },\n+    u\'fo\': {\n+        u\'native\': \'F\xc3\xb8royska\',\n+        u\'name\': \'Faroese\',\n+        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n+    },\n+    u\'fr\': {\n+        u\'native\': \'Fran\xc3\xa7ais\',\n+        u\'name\': \'French\',\n+        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n+    },\n+    u\'fy\': {u\'native\': \'Frysk\', u\'name\': \'Frisian\'},\n+    u\'ga\': {u\'native\': \'Gaeilge\', u\'name\': \'Irish Gaelic\'},\n+    u\'gd\': {u\'native\': \'G\xc3\xa0idhlig\', u\'name\': \'Scottish Gaelic\'},\n+    u\'gl\': {u\'native\': \'Galego\', u\'name\': \'Galician\'},\n+    u\'gn\': {u\'native\': \'Guarani\', u\'name\': \'Guarani\'},\n+    u\'gu\': {u\'native\': \'\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\', u\'name\': \'Gujarati\'},\n+    u\'gv\': {u\'native\': \'Gaelg\', u\'name\': \'Manx Gaelic\'},\n+    u\'ha\': {u\'native\': \'\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3\', u\'name\': \'Hausa\'},\n+    u\'he\': {\n+        u\'native\': \'\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\',\n+        u\'name\': \'Hebrew\',\n+        u\'flag\': u\'/++resource++country-flags/il.gif\',\n+    },\n+    u\'hi\': {\n+        u\'native\': \'\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80\',\n+        u\'name\': \'Hindi\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ho\': {u\'native\': \'Hiri Motu\', u\'name\': \'Hiri Motu\'},\n+    u\'hr\': {\n+        u\'native\': \'Hrvatski\',\n+        u\'name\': \'Croatian\',\n+        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n+    },\n+    u\'ht\': {u\'native\': \'Krey\xc3\xb2l ayisyen\', u\'name\': \'Haitian\'},\n+    u\'hu\': {\n+        u\'native\': \'Magyar\',\n+        u\'name\': \'Hungarian\',\n+        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n+    },\n+    u\'hy\': {\n+        u\'native\': \'\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6\',\n+        u\'name\': \'Armenian\',\n+        u\'flag\': u\'/++resource++country-flags/am.gif\',\n+    },\n+    u\'hz\': {u\'native\': \'Otjiherero\', u\'name\': \'Herero\'},\n+    u\'ia\': {u\'native\': \'Interlingua\', u\'name\': \'Interlingua\'},\n+    u\'id\': {\n+        u\'native\': \'Bahasa Indonesia\',\n+        u\'name\': \'Indonesian\',\n+        u\'flag\': u\'/++resource++country-flags/id.gif\',\n+    },\n+    u\'ie\': {u\'native\': \'Interlingue\', u\'name\': \'Interlingue\'},\n+    u\'ig\': {u\'native\': \'As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo\', u\'name\': \'Igbo\'},\n+    u\'ii\': {u\'native\': \'Nuosu\', u\'name\': \'Nuosu\'},\n+    u\'ik\': {u\'native\': \'I\xc3\xb1upiaq\', u\'name\': \'Inupiak\'},\n+    u\'io\': {u\'native\': \'Ido\', u\'name\': \'Ido\'},\n+    u\'is\': {\n+        u\'native\': \'\xc3\x8dslenska\',\n+        u\'name\': \'Icelandic\',\n+        u\'flag\': u\'/++resource++country-flags/is.gif\',\n+    },\n+    u\'it\': {\n+        u\'native\': \'Italiano\',\n+        u\'name\': \'Italian\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'iu\': {u\'native\': \'\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6\', u\'name\': \'Inuktitut\'},\n+    u\'ja\': {\n+        u\'native\': \'\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\',\n+        u\'name\': \'Japanese\',\n+        u\'flag\': u\'/++resource++country-flags/jp.gif\',\n+    },\n+    u\'jv\': {u\'native\': \'Javanese\', u\'name\': \'basa Jawa\'},\n+    u\'ka\': {\n+        u\'native\': \'\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\',\n+        u\'name\': \'Georgian\',\n+        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n+    },\n+    u\'kg\': {u\'native\': \'KiKongo\', u\'name\': \'Kongo\'},\n+    u\'ki\': {u\'native\': \'G\xc4\xa9k\xc5\xa9y\xc5\xa9\', u\'name\': \'Kikuyu\'},\n+    u\'kj\': {u\'native\': \'Kuanyama\', u\'name\': \'Kwanyama\'},\n+    u\'kk\': {\n+        u\'native\': \'\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e\',\n+        u\'name\': \'Kazakh\',\n+        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n+    },\n+    u\'kl\': {\n+        u\'native\': \'Greenlandic\',\n+        u\'name\': \'Greenlandic\',\n+        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n+    },\n+    u\'km\': {\n+        u\'native\': \'\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\',\n+        u\'name\': \'Cambodian/Khmer\',\n+        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n+    },\n+    u\'kn\': {\n+        u\'native\': \'\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1\',\n+        u\'name\': \'Kannada\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ko\': {\n+        u\'native\': \'\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\',\n+        u\'name\': \'Korean\',\n+        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n+    },\n+    u\'kr\': {u\'native\': \'Kanuri\', u\'name\': \'Kanuri\'},\n+    u\'ks\': {\n+        u\'native\': \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0\',\n+        u\'name\': \'Kashmiri\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ku\': {u\'native\': \'Kurd\xc3\xad\', u\'name\': \'Kurdish\'},\n+    u\'kv\': {u\'native\': \'\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2\', u\'name\': \'Komi\'},\n+    u\'kw\': {u\'native\': \'Kernewek\', u\'name\': \'Cornish\'},\n+    u\'ky\': {u\'native\': \'\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\', u\'name\': \'Kirghiz\'},\n+    u\'la\': {\n+        u\'native\': \'Latin\',\n+        u\'name\': \'Latin\',\n+        u\'flag\': u\'/++resource++country-flags/va.gif\',\n+    },\n+    u\'lb\': {\n+        u\'native\': \'L\xc3\xabtzebuergesch\',\n+        u\'name\': \'Luxemburgish\',\n+        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    },\n+    u\'lg\': {u\'native\': \'Luganda\', u\'name\': \'Ganda\'},\n+    u\'li\': {u\'native\': \'Limburgs\', u\'name\': \'Limburgish\'},\n+    u\'ln\': {u\'native\': \'Lingala\', u\'name\': \'Lingala\'},\n+    u\'lo\': {\n+        u\'native\': \'\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7\',\n+        u\'name\': \'Laotian\',\n+        u\'flag\': u\'/++resource++country-flags/la.gif\',\n+    },\n+    u\'lt\': {\n+        u\'native\': \'Lietuviskai\',\n+        u\'name\': \'Lithuanian\',\n+        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n+    },\n+    u\'lu\': {u\'native\': \'Tshiluba\', u\'name\': \'Luba-Katanga\'},\n+    u\'lv\': {\n+        u\'native\': \'Latvie\xc5\xa1u\',\n+        u\'name\': \'Latvian\',\n+        u\'flag\': u\'/++resource++country-flags/lv.gif\',\n+    },\n+    u\'mg\': {\n+        u\'native\': \'Malagasy\',\n+        u\'name\': \'Madagascarian\',\n+        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    },\n+    u\'mh\': {u\'native\': \'Kajin M\xcc\xa7aje\xc4\xbc\', u\'name\': \'Marshallese\'},\n+    u\'mi\': {u\'native\': \'Maori\', u\'name\': \'Maori\'},\n+    u\'mk\': {\n+        u\'native\': \'\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Macedonian\',\n+        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n+    },\n+    u\'ml\': {u\'native\': \'\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\', u\'name\': \'Malayalam\'},\n+    u\'mn\': {\n+        u\'native\': \'\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\',\n+        u\'name\': \'Mongolian\',\n+        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n+    },\n+    u\'mo\': {\n+        u\'native\': \'Moldavian\',\n+        u\'name\': \'Moldavian\',\n+        u\'flag\': u\'/++resource++country-flags/md.gif\',\n+    },\n+    u\'mr\': {u\'native\': \'\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\', u\'name\': \'Marathi\'},\n+    u\'ms\': {u\'native\': \'Bahasa Melayu\', u\'name\': \'Malay\'},\n+    u\'mt\': {\n+        u\'native\': \'Malti\',\n+        u\'name\': \'Maltese\',\n+        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n+    },\n+    u\'my\': {u\'native\': \'Burmese\', u\'name\': \'Burmese\'},\n+    u\'na\': {\n+        u\'native\': \'Nauru\',\n+        u\'name\': \'Nauruan\',\n+        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n+    },\n+    u\'nb\': {u\'native\': \'Norsk bokm\xc3\xa5l\', u\'name\': \'Norwegian Bokm\xc3\xa5l\'},\n+    u\'nd\': {u\'native\': \'Ndebele (North)\', u\'name\': \'Ndebele (North)\'},\n+    u\'ne\': {u\'native\': \'\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\', u\'name\': \'Nepali\'},\n+    u\'ng\': {u\'native\': \'Owambo\', u\'name\': \'Ndonga\'},\n+    u\'nl\': {\n+        u\'native\': \'Nederlands\',\n+        u\'name\': \'Dutch\',\n+        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n+    },\n+    u\'nn\': {\n+        u\'native\': \'Nynorsk\',\n+        u\'name\': \'Nynorsk\',\n+        u\'flag\': u\'/++resource++country-flags/no.gif\',\n+    },\n+    u\'no\': {\n+        u\'native\': \'Norsk\',\n+        u\'name\': \'Norwegian\',\n+        u\'flag\': u\'/++resource++country-flags/no.gif\',\n+    },\n+    u\'nr\': {u\'native\': \'IsiNdebele\', u\'name\': \'Ndebele (South)\'},\n+    u\'nv\': {u\'native\': \'Din\xc3\xa9 bizaad\', u\'name\': \'Navajo\'},\n+    u\'ny\': {u\'native\': \'chiChe\xc5\xb5a\', u\'name\': \'Chichewa\'},\n+    u\'oc\': {u\'native\': \'Occitan\', u\'name\': \'Occitan\'},\n+    u\'oj\': {u\'native\': \'\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90\', u\'name\': \'Ojibwe\'},\n+    u\'om\': {u\'native\': \'Oromo\', u\'name\': \'Oromo\'},\n+    u\'or\': {u\'native\': \'\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86\', u\'name\': \'Oriya\'},\n+    u\'os\': {u\'native\': \'\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3\', u\'name\': \'Ossetian\'},\n+    u\'pa\': {u\'native\': \'\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80\', u\'name\': \'Punjabi\'},\n+    u\'pi\': {u\'native\': \'\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf\', u\'name\': \'P\xc4\x81li\'},\n+    u\'pl\': {\n+        u\'native\': \'Polski\',\n+        u\'name\': \'Polish\',\n+        u\'flag\': u\'/++resource++country-flags/pl.gif\',\n+    },\n+    u\'ps\': {u\'native\': \'\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88\', u\'name\': \'Pashto\'},\n+    u\'pt\': {\n+        u\'native\': \'Portugu\xc3\xaas\',\n+        u\'name\': \'Portuguese\',\n+        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n+    },\n+    u\'qu\': {u\'native\': \'Quechua\', u\'name\': \'Quechua\'},\n+    u\'rm\': {u\'native\': \'Rhaeto-Romance\', u\'name\': \'Rhaeto-Romance\'},\n+    u\'rn\': {u\'native\': \'Kirundi\', u\'name\': \'Kirundi\'},\n+    u\'ro\': {\n+        u\'native\': \'Rom\xc3\xa2n\xc4\x83\',\n+        u\'name\': \'Romanian\',\n+        u\'flag\': u\'/++resource++country-flags/ro.gif\',\n+    },\n+    u\'ru\': {\n+        u\'native\': \'\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\',\n+        u\'name\': \'Russian\',\n+        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n+    },\n+    u\'rw\': {u\'native\': \'Kinyarwanda\', u\'name\': \'Kinyarwanda\'},\n+    u\'sa\': {u\'native\': \'\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4\', u\'name\': \'Sanskrit\'},\n+    u\'sc\': {u\'native\': \'sardu\', u\'name\': \'Sardinian\'},\n+    u\'sd\': {\n+        u\'native\': \'Sindhi\',\n+        u\'name\': \'Sindhi\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'se\': {u\'native\': \'Northern S\xc3\xa1mi\', u\'name\': \'Northern S\xc3\xa1mi\'},\n+    u\'sg\': {\n+        u\'native\': \'Sangho\',\n+        u\'name\': \'Sangho\',\n+        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    },\n+    u\'sh\': {u\'native\': \'Serbo-Croatian\', u\'name\': \'Serbo-Croatian\'},\n+    u\'si\': {u\'native\': \'Singhalese\', u\'name\': \'Singhalese\'},\n+    u\'sk\': {\n+        u\'native\': \'Sloven\xc4\x8dina\',\n+        u\'name\': \'Slovak\',\n+        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n+    },\n+    u\'sl\': {\n+        u\'native\': \'Sloven\xc5\xa1\xc4\x8dina\',\n+        u\'name\': \'Slovenian\',\n+        u\'flag\': u\'/++resource++country-flags/si.gif\',\n+    },\n+    u\'sm\': {u\'native\': \'Samoan\', u\'name\': \'Samoan\'},\n+    u\'sn\': {u\'native\': \'Shona\', u\'name\': \'Shona\'},\n+    u\'so\': {\n+        u\'native\': \'Somali\',\n+        u\'name\': \'Somali\',\n+        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    },\n+    u\'sq\': {\n+        u\'native\': \'Shqip\',\n+        u\'name\': \'Albanian\',\n+        u\'flag\': u\'/++resource++country-flags/al.gif\',\n+    },\n+    u\'sr\': {\n+        u\'native\': \'\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Serbian\',\n+        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n+    },\n+    u\'ss\': {u\'native\': \'SiSwati\', u\'name\': \'Swati\'},\n+    u\'st\': {u\'native\': \'Sesotho\', u\'name\': \'Southern Sotho\'},\n+    u\'su\': {\n+        u\'native\': \'Sudanese\',\n+        u\'name\': \'Sudanese\',\n+        u\'flag\': u\'/++resource++country-flags/sd.gif\',\n+    },\n+    u\'sv\': {\n+        u\'native\': \'Svenska\',\n+        u\'name\': \'Swedish\',\n+        u\'flag\': u\'/++resource++country-flags/se.gif\',\n+    },\n+    u\'sw\': {u\'native\': \'Kiswahili\', u\'name\': \'Swahili\'},\n+    u\'ta\': {u\'native\': \'\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\', u\'name\': \'Tamil\'},\n+    u\'te\': {u\'native\': \'\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\', u\'name\': \'Telugu\'},\n+    u\'tg\': {\n+        u\'native\': \'\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8\',\n+        u\'name\': \'Tadjik\',\n+        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n+    },\n+    u\'th\': {\n+        u\'native\': \'\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\',\n+        u\'name\': \'Thai\',\n+        u\'flag\': u\'/++resource++country-flags/th.gif\',\n+    },\n+    u\'ti\': {u\'native\': \'\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Tigrinya\'},\n+    u\'tk\': {\n+        u\'native\': \'\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5\',\n+        u\'name\': \'Turkmen\',\n+        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n+    },\n+    u\'tl\': {u\'native\': \'Tagalog\', u\'name\': \'Tagalog\'},\n+    u\'tn\': {\n+        u\'native\': \'Setswana\',\n+        u\'name\': \'Tswana\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'to\': {u\'native\': \'Tonga\', u\'name\': \'Tonga\'},\n+    u\'tr\': {\n+        u\'native\': \'T\xc3\xbcrk\xc3\xa7e\',\n+        u\'name\': \'Turkish\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'ts\': {u\'native\': \'Xitsonga\', u\'name\': \'Tsonga\'},\n+    u\'tt\': {u\'native\': \'\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0\', u\'name\': \'Tatar\'},\n+    u\'tw\': {u\'native\': \'Twi\', u\'name\': \'Twi\'},\n+    u\'ty\': {u\'native\': \'Reo Tahiti\', u\'name\': \'Tahitian\'},\n+    u\'ug\': {u\'native\': \'Uigur\', u\'name\': \'Uigur\'},\n+    u\'uk\': {\n+        u\'native\': \'\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\',\n+        u\'name\': \'Ukrainian\',\n+        u\'flag\': u\'/++resource++country-flags/ua.gif\',\n+    },\n+    u\'ur\': {u\'native\': \'\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\', u\'name\': \'Urdu\'},\n+    u\'uz\': {\n+        u\'native\': \'\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\',\n+        u\'name\': \'Uzbek\',\n+        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n+    },\n+    u\'ve\': {u\'native\': \'Tshiven\xe1\xb8\x93a\', u\'name\': \'Venda\'},\n+    u\'vi\': {\n+        u\'native\': \'Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t\',\n+        u\'name\': \'Vietnamese\',\n+        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n+    },\n+    u\'vk\': {u\'native\': \'Ovalingo\', u\'name\': \'Viking\'},\n+    u\'vo\': {u\'native\': \'Volap\xc3\xbck\', u\'name\': \'Volap\xc3\xbck\'},\n+    u\'wa\': {u\'native\': \'Walon\', u\'name\': \'Walloon\'},\n+    u\'wo\': {u\'native\': \'Wolof\', u\'name\': \'Wolof\'},\n+    u\'xh\': {u\'native\': \'IsiXhosa\', u\'name\': \'Xhosa\'},\n+    u\'yi\': {\n+        u\'native\': \'\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9\',\n+        u\'name\': \'Yiddish\',\n+        u\'flag\': u\'/++resource++country-flags/il.gif\',\n+    },\n+    u\'yo\': {u\'native\': \'Yor\xc3\xb9b\xc3\xa1\', u\'name\': \'Yorouba\'},\n+    u\'za\': {u\'native\': \'Zhuang\', u\'name\': \'Zhuang\'},\n+    u\'zh\': {\n+        u\'native\': \'\xe4\xb8\xad\xe6\x96\x87\',\n+        u\'name\': \'Chinese\',\n+        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n+    },\n+    u\'zu\': {\n+        u\'native\': \'IsiZulu\',\n+        u\'name\': \'Zulu\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n }\n \n # convert the utf-8 encoded values to unicode\n@@ -263,232 +577,923 @@ class MetadataLanguageAvailability(LanguageAvailability):\n             value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n \n _combinedlanguagelist = {\n-u\'ar-ae\' : {u\'name\' : \'Arabic (United Arab Emirates)\',                          u\'flag\' : u\'/++resource++country-flags/ae.gif\'},\n-u\'ar-bh\' : {u\'name\' : \'Arabic (Bahrain)\',                                       u\'flag\' : u\'/++resource++country-flags/bh.gif\'},\n-u\'ar-dz\' : {u\'name\' : \'Arabic (Algeria)\',                                       u\'flag\' : u\'/++resource++country-flags/dz.gif\'},\n-u\'ar-eg\' : {u\'name\' : \'Arabic (Egypt)\',                                         u\'flag\' : u\'/++resource++country-flags/eg.gif\'},\n-u\'ar-il\' : {u\'name\' : \'Arabic (Israel)\',                                        u\'flag\' : u\'/++resource++country-flags/il.gif\'},\n-u\'ar-iq\' : {u\'name\' : \'Arabic (Iraq)\',                                          u\'flag\' : u\'/++resource++country-flags/iq.gif\'},\n-u\'ar-jo\' : {u\'name\' : \'Arabic (Jordan)\',                                        u\'flag\' : u\'/++resource++country-flags/jo.gif\'},\n-u\'ar-kw\' : {u\'name\' : \'Arabic (Kuwait)\',                                        u\'flag\' : u\'/++resource++country-flags/kw.gif\'},\n-u\'ar-lb\' : {u\'name\' : \'Arabic (Lebanon)\',                                       u\'flag\' : u\'/++resource++country-flags/lb.gif\'},\n-u\'ar-ly\' : {u\'name\' : \'Arabic (Libya)\',                                         u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ar-ma\' : {u\'name\' : \'Arabic (Morocco)\',                                       u\'flag\' : u\'/++resource++country-flags/ma.gif\'},\n-u\'ar-mr\' : {u\'name\' : \'Arabic (Mauritania)\',                                    u\'flag\' : u\'/++resource++country-flags/mr.gif\'},\n-u\'ar-om\' : {u\'name\' : \'Arabic (Oman)\',                                          u\'flag\' : u\'/++resource++country-flags/om.gif\'},\n-u\'ar-ps\' : {u\'name\' : \'Arabic (Palestinian West Bank and Gaza)\',                u\'flag\' : u\'/++resource++country-flags/ps.gif\'},\n-u\'ar-qa\' : {u\'name\' : \'Arabic (Qatar)\',                                         u\'flag\' : u\'/++resource++country-flags/qa.gif\'},\n-u\'ar-sa\' : {u\'name\' : \'Arabic (Saudi Arabia)\',                                  u\'flag\' : u\'/++resource++country-flags/sa.gif\'},\n-u\'ar-sd\' : {u\'name\' : \'Arabic (Sudan)\',                                         u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ar-so\' : {u\'name\' : \'Arabic (Somalia)\',                                       u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'ar-sy\' : {u\'name\' : \'Arabic (Syria)\',                                         u\'flag\' : u\'/++resource++country-flags/sy.gif\'},\n-u\'ar-td\' : {u\'name\' : \'Arabic (Chad)\',                                          u\'flag\' : u\'/++resource++country-flags/td.gif\'},\n-u\'ar-tn\' : {u\'name\' : \'Arabic (Tunisia)\',                                       u\'flag\' : u\'/++resource++country-flags/ly.gif\'},\n-u\'ar-ye\' : {u\'name\' : \'Arabic (Yemen)\',                                         u\'flag\' : u\'/++resource++country-flags/ye.gif\'},\n-u\'bn-bd\' : {u\'name\' : \'Bengali (Bangladesh)\',                                   u\'flag\' : u\'/++resource++country-flags/bd.gif\'},\n-u\'bn-in\' : {u\'name\' : \'Bengali (India)\',                                        u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'bn-sg\' : {u\'name\' : \'Bengali (Singapore)\',                                    u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'ch-gu\' : {u\'name\' : \'Chamorro (Guam)\',                                        u\'flag\' : u\'/++resource++country-flags/gu.gif\'},\n-u\'ch-mp\' : {u\'name\' : \'Chamorro (Northern Mariana Islands)\',                    u\'flag\' : u\'/++resource++country-flags/mp.gif\'},\n-u\'cs-cz\' : {u\'name\' : \'Czech (Czech republic)\', u\'native\': \'\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)\', u\'flag\' : u\'/++resource++country-flags/cz.gif\'},\n-u\'da-dk\' : {u\'name\' : \'Danish (Denmark)\',                                       u\'flag\' : u\'/++resource++country-flags/dk.gif\'},\n-u\'da-gl\' : {u\'name\' : \'Danish (Greenland)\',                                     u\'flag\' : u\'/++resource++country-flags/gl.gif\'},\n-u\'de-at\' : {u\'name\' : \'German (Austria)\', u\'native\' : \'Deutsch (\xc3\x96sterreich)\',   u\'flag\' : u\'/++resource++country-flags/at.gif\'},\n-u\'de-be\' : {u\'name\' : \'German (Belgium)\',                                       u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'de-ch\' : {u\'name\' : \'German (Switzerland)\',                                   u\'flag\' : u\'/++resource++country-flags/ch.gif\'},\n-u\'de-de\' : {u\'name\' : \'German (Germany)\',                                       u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'de-dk\' : {u\'name\' : \'German (Denmark)\',                                       u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'de-li\' : {u\'name\' : \'German (Liechtenstein)\',                                 u\'flag\' : u\'/++resource++country-flags/li.gif\'},\n-u\'de-lu\' : {u\'name\' : \'German (Luxembourg)\',                                    u\'flag\' : u\'/++resource++country-flags/de.gif\'},\n-u\'el-cy\' : {u\'name\' : \'Greek (Cyprus)\',                                         u\'flag\' : u\'/++resource++country-flags/cy.gif\'},\n-u\'el-gr\' : {u\'name\' : \'Greek (Greece)\',                                         u\'flag\' : u\'/++resource++country-flags/gr.gif\'},\n-u\'en-ag\' : {u\'name\' : \'English (Antigua and Barbuda)\',                          u\'flag\' : u\'/++resource++country-flags/ag.gif\'},\n-u\'en-ai\' : {u\'name\' : \'English (Anguilla)\',                                     u\'flag\' : u\'/++resource++country-flags/ai.gif\'},\n-u\'en-as\' : {u\'name\' : \'English (American Samoa)\',                               u\'flag\' : u\'/++resource++country-flags/as.gif\'},\n-u\'en-au\' : {u\'name\' : \'English (Australia)\',                                    u\'flag\' : u\'/++resource++country-flags/au.gif\'},\n-u\'en-bb\' : {u\'name\' : \'English (Barbados)\',                                     u\'flag\' : u\'/++resource++country-flags/bb.gif\'},\n-u\'en-bm\' : {u\'name\' : \'English (Bermuda)\',                                      u\'flag\' : u\'/++resource++country-flags/bm.gif\'},\n-u\'en-bn\' : {u\'name\' : \'English (Brunei)\',                                       u\'flag\' : u\'/++resource++country-flags/bn.gif\'},\n-u\'en-bs\' : {u\'name\' : \'English (Bahamas)\',                                      u\'flag\' : u\'/++resource++country-flags/bs.gif\'},\n-u\'en-bw\' : {u\'name\' : \'English (Botswana)\',                                     u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'en-bz\' : {u\'name\' : \'English (Belize)\',                                       u\'flag\' : u\'/++resource++country-flags/bz.gif\'},\n-u\'en-ca\' : {u\'name\' : \'English (Canada)\',                                       u\'flag\' : u\'/++resource++country-flags/ca.gif\'},\n-u\'en-ck\' : {u\'name\' : \'English (Cook Islands)\',                                 u\'flag\' : u\'/++resource++country-flags/ck.gif\'},\n-u\'en-cm\' : {u\'name\' : \'English (Cameroon)\',                                     u\'flag\' : u\'/++resource++country-flags/cm.gif\'},\n-u\'en-dm\' : {u\'name\' : \'English (Dominica)\',                                     u\'flag\' : u\'/++resource++country-flags/dm.gif\'},\n-u\'en-er\' : {u\'name\' : \'English (Eritrea)\',                                      u\'flag\' : u\'/++resource++country-flags/er.gif\'},\n-u\'en-et\' : {u\'name\' : \'English (Ethiopia)\',                                     u\'flag\' : u\'/++resource++country-flags/et.gif\'},\n-u\'en-fj\' : {u\'name\' : \'English (Fiji)\',                                         u\'flag\' : u\'/++resource++country-flags/fj.gif\'},\n-u\'en-fk\' : {u\'name\' : \'English (Falkland Islands)\',                             u\'flag\' : u\'/++resource++country-flags/fk.gif\'},\n-u\'en-fm\' : {u\'name\' : \'English (Micronesia)\',                                   u\'flag\' : u\'/++resource++country-flags/fm.gif\'},\n-u\'en-gb\' : {u\'name\' : \'English (United Kingdom)\',                               u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'en-gd\' : {u\'name\' : \'English (Grenada)\',                                      u\'flag\' : u\'/++resource++country-flags/gd.gif\'},\n-u\'en-gh\' : {u\'name\' : \'English (Ghana)\',                                        u\'flag\' : u\'/++resource++country-flags/gh.gif\'},\n-u\'en-gi\' : {u\'name\' : \'English (Gibraltar)\',                                    u\'flag\' : u\'/++resource++country-flags/gi.gif\'},\n-u\'en-gm\' : {u\'name\' : \'English (Gambia)\',                                       u\'flag\' : u\'/++resource++country-flags/gm.gif\'},\n-u\'en-gu\' : {u\'name\' : \'English (Guam)\',                                         u\'flag\' : u\'/++resource++country-flags/gu.gif\'},\n-u\'en-gy\' : {u\'name\' : \'English (Guyana)\',                                       u\'flag\' : u\'/++resource++country-flags/gy.gif\'},\n-u\'en-ie\' : {u\'name\' : \'English (Ireland)\',                                      u\'flag\' : u\'/++resource++country-flags/ie.gif\'},\n-u\'en-il\' : {u\'name\' : \'English (Israel)\',                                       u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'en-io\' : {u\'name\' : \'English (British Indian Ocean Territory)\',               u\'flag\' : u\'/++resource++country-flags/io.gif\'},\n-u\'en-jm\' : {u\'name\' : \'English (Jamaica)\',                                      u\'flag\' : u\'/++resource++country-flags/jm.gif\'},\n-u\'en-ke\' : {u\'name\' : \'English (Kenya)\',                                        u\'flag\' : u\'/++resource++country-flags/ke.gif\'},\n-u\'en-ki\' : {u\'name\' : \'English (Kiribati)\',                                     u\'flag\' : u\'/++resource++country-flags/ki.gif\'},\n-u\'en-kn\' : {u\'name\' : \'English (St. Kitts-Nevis)\',                              u\'flag\' : u\'/++resource++country-flags/kn.gif\'},\n-u\'en-ky\' : {u\'name\' : \'English (Cayman Islands)\',                               u\'flag\' : u\'/++resource++country-flags/ky.gif\'},\n-u\'en-lc\' : {u\'name\' : \'English (St. Lucia)\',                                    u\'flag\' : u\'/++resource++country-flags/lc.gif\'},\n-u\'en-lr\' : {u\'name\' : \'English (Liberia)\',                                      u\'flag\' : u\'/++resource++country-flags/lr.gif\'},\n-u\'en-ls\' : {u\'name\' : \'English (Lesotho)\',                                      u\'flag\' : u\'/++resource++country-flags/ls.gif\'},\n-u\'en-mp\' : {u\'name\' : \'English (Northern Mariana Islands)\',                     u\'flag\' : u\'/++resource++country-flags/mp.gif\'},\n-u\'en-ms\' : {u\'name\' : \'English (Montserrat)\',                                   u\'flag\' : u\'/++resource++country-flags/ms.gif\'},\n-u\'en-mt\' : {u\'name\' : \'English (Malta)\',                                        u\'flag\' : u\'/++resource++country-flags/mt.gif\'},\n-u\'en-mu\' : {u\'name\' : \'English (Mauritius)\',                                    u\'flag\' : u\'/++resource++country-flags/mu.gif\'},\n-u\'en-mw\' : {u\'name\' : \'English (Malawi)\',                                       u\'flag\' : u\'/++resource++country-flags/mw.gif\'},\n-u\'en-na\' : {u\'name\' : \'English (Namibia)\',                                      u\'flag\' : u\'/++resource++country-flags/na.gif\'},\n-u\'en-nf\' : {u\'name\' : \'English (Norfolk Island)\',                               u\'flag\' : u\'/++resource++country-flags/nf.gif\'},\n-u\'en-ng\' : {u\'name\' : \'English (Nigeria)\',                                      u\'flag\' : u\'/++resource++country-flags/ng.gif\'},\n-u\'en-nr\' : {u\'name\' : \'English (Nauru)\',                                        u\'flag\' : u\'/++resource++country-flags/nr.gif\'},\n-u\'en-nu\' : {u\'name\' : \'English (Niue)\',                                         u\'flag\' : u\'/++resource++country-flags/nu.gif\'},\n-u\'en-nz\' : {u\'name\' : \'English (New Zealand)\',                                  u\'flag\' : u\'/++resource++country-flags/nz.gif\'},\n-u\'en-pg\' : {u\'name\' : \'English (Papua New Guinea)\',                             u\'flag\' : u\'/++resource++country-flags/pg.gif\'},\n-u\'en-ph\' : {u\'name\' : \'English (Philippines)\',                                  u\'flag\' : u\'/++resource++country-flags/ph.gif\'},\n-u\'en-pk\' : {u\'name\' : \'English (Pakistan)\',                                     u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'en-pn\' : {u\'name\' : \'English (Pitcairn)\',                                     u\'flag\' : u\'/++resource++country-flags/pn.gif\'},\n-u\'en-pr\' : {u\'name\' : \'English (Puerto Rico)\',                                  u\'flag\' : u\'/++resource++country-flags/pr.gif\'},\n-u\'en-pw\' : {u\'name\' : \'English (Palau)\',                                        u\'flag\' : u\'/++resource++country-flags/pw.gif\'},\n-u\'en-rw\' : {u\'name\' : \'English (Rwanda)\',                                       u\'flag\' : u\'/++resource++country-flags/rw.gif\'},\n-u\'en-sb\' : {u\'name\' : \'English (Solomon Islands)\',                              u\'flag\' : u\'/++resource++country-flags/sb.gif\'},\n-u\'en-sc\' : {u\'name\' : \'English (Seychelles)\',                                   u\'flag\' : u\'/++resource++country-flags/sc.gif\'},\n-u\'en-sg\' : {u\'name\' : \'English (Singapore)\',                                    u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'en-sh\' : {u\'name\' : \'English (St. Helena)\',                                   u\'flag\' : u\'/++resource++country-flags/sh.gif\'},\n-u\'en-sl\' : {u\'name\' : \'English (Sierra Leone)\',                                 u\'flag\' : u\'/++resource++country-flags/sl.gif\'},\n-u\'en-so\' : {u\'name\' : \'English (Somalia)\',                                      u\'flag\' : u\'/++resource++country-flags/so.gif\'},\n-u\'en-sz\' : {u\'name\' : \'English (Swaziland)\',                                    u\'flag\' : u\'/++resource++country-flags/sz.gif\'},\n-u\'en-tc\' : {u\'name\' : \'English (Turks and Caicos Islands)\',                     u\'flag\' : u\'/++resource++country-flags/tc.gif\'},\n-u\'en-tk\' : {u\'name\' : \'English (Tokelau)\',                                      u\'flag\' : u\'/++resource++country-flags/tk.gif\'},\n-u\'en-to\' : {u\'name\' : \'English (Tonga)\',                                        u\'flag\' : u\'/++resource++country-flags/to.gif\'},\n-u\'en-tt\' : {u\'name\' : \'English (Trinidad and Tobago)\',                          u\'flag\' : u\'/++resource++country-flags/tt.gif\'},\n-u\'en-ug\' : {u\'name\' : \'English (Uganda)\',                                       u\'flag\' : u\'/++resource++country-flags/ug.gif\'},\n-u\'en-us\' : {u\'name\' : \'English (USA)\',                                          u\'flag\' : u\'/++resource++country-flags/us.gif\'},\n-u\'en-vc\' : {u\'name\' : \'English (St. Vincent and the Grenadi)\',                  u\'flag\' : u\'/++resource++country-flags/vc.gif\'},\n-u\'en-vg\' : {u\'name\' : \'English (British Virgin Islands)\',                       u\'flag\' : u\'/++resource++country-flags/vg.gif\'},\n-u\'en-vi\' : {u\'name\' : \'English (U.S. Virgin Islands)\',                          u\'flag\' : u\'/++resource++country-flags/vi.gif\'},\n-u\'en-vu\' : {u\'name\' : \'English (Vanuatu)\',                                      u\'flag\' : u\'/++resource++country-flags/vu.gif\'},\n-u\'en-ws\' : {u\'name\' : \'English (Western Samoa)\',                                u\'flag\' : u\'/++resource++country-flags/ws.gif\'},\n-u\'en-za\' : {u\'name\' : \'English (South Africa)\',                                 u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'en-zm\' : {u\'name\' : \'English (Zambia)\',                                       u\'flag\' : u\'/++resource++country-flags/zm.gif\'},\n-u\'en-zw\' : {u\'name\' : \'English (Zimbabwe)\',                                     u\'flag\' : u\'/++resource++country-flags/zw.gif\'},\n-u\'es-ar\' : {u\'name\' : \'Spanish (Argentina)\',                                    u\'flag\' : u\'/++resource++country-flags/ar.gif\'},\n-u\'es-bo\' : {u\'name\' : \'Spanish (Bolivia)\',                                      u\'flag\' : u\'/++resource++country-flags/bo.gif\'},\n-u\'es-cl\' : {u\'name\' : \'Spanish (Chile)\',                                        u\'flag\' : u\'/++resource++country-flags/cl.gif\'},\n-u\'es-co\' : {u\'name\' : \'Spanish (Colombia)\',                                     u\'flag\' : u\'/++resource++country-flags/co.gif\'},\n-u\'es-cr\' : {u\'name\' : \'Spanish (Costa Rica)\',                                   u\'flag\' : u\'/++resource++country-flags/cr.gif\'},\n-u\'es-cu\' : {u\'name\' : \'Spanish (Cuba)\',                                         u\'flag\' : u\'/++resource++country-flags/cu.gif\'},\n-u\'es-do\' : {u\'name\' : \'Spanish (Dominican Republic)\',                           u\'flag\' : u\'/++resource++country-flags/do.gif\'},\n-u\'es-ec\' : {u\'name\' : \'Spanish (Ecuador)\',                                      u\'flag\' : u\'/++resource++country-flags/ec.gif\'},\n-u\'es-es\' : {u\'name\' : \'Spanish (Spain)\',                                        u\'flag\' : u\'/++resource++country-flags/es.gif\'},\n-u\'es-gq\' : {u\'name\' : \'Spanish (Equatorial Guinea)\',                            u\'flag\' : u\'/++resource++country-flags/gq.gif\'},\n-u\'es-gt\' : {u\'name\' : \'Spanish (Guatemala)\',                                    u\'flag\' : u\'/++resource++country-flags/gt.gif\'},\n-u\'es-hn\' : {u\'name\' : \'Spanish (Honduras)\',                                     u\'flag\' : u\'/++resource++country-flags/hn.gif\'},\n-u\'es-mx\' : {u\'name\' : \'Spanish (Mexico)\',                                       u\'flag\' : u\'/++resource++country-flags/mx.gif\'},\n-u\'es-ni\' : {u\'name\' : \'Spanish (Nicaragua)\',                                    u\'flag\' : u\'/++resource++country-flags/ni.gif\'},\n-u\'es-pa\' : {u\'name\' : \'Spanish (Panama)\',                                       u\'flag\' : u\'/++resource++country-flags/pa.gif\'},\n-u\'es-pe\' : {u\'name\' : \'Spanish (Peru)\',                                         u\'flag\' : u\'/++resource++country-flags/pe.gif\'},\n-u\'es-pr\' : {u\'name\' : \'Spanish (Puerto Rico)\',                                  u\'flag\' : u\'/++resource++country-flags/pr.gif\'},\n-u\'es-py\' : {u\'name\' : \'Spanish (Paraguay)\',                                     u\'flag\' : u\'/++resource++country-flags/py.gif\'},\n-u\'es-sv\' : {u\'name\' : \'Spanish (El Salvador)\',                                  u\'flag\' : u\'/++resource++country-flags/sv.gif\'},\n-u\'es-us\' : {u\'name\' : \'Spanish (USA)\',                                          u\'flag\' : u\'/++resource++country-flags/us.gif\'},\n-u\'es-uy\' : {u\'name\' : \'Spanish (Uruguay)\',                                      u\'flag\' : u\'/++resource++country-flags/uy.gif\'},\n-u\'es-ve\' : {u\'name\' : \'Spanish (Venezuela)\',                                    u\'flag\' : u\'/++resource++country-flags/ve.gif\'},\n-u\'fr-ad\' : {u\'name\' : \'French (Andorra)\',                                       u\'flag\' : u\'/++resource++country-flags/ad.gif\'},\n-u\'fr-be\' : {u\'name\' : \'French (Belgium)\',                                       u\'flag\' : u\'/++resource++country-flags/be.gif\'},\n-u\'fr-bf\' : {u\'name\' : \'French (Burkina Faso)\',                                  u\'flag\' : u\'/++resource++country-flags/bf.gif\'},\n-u\'fr-bi\' : {u\'name\' : \'French (Burundi)\',                                       u\'flag\' : u\'/++resource++country-flags/bi.gif\'},\n-u\'fr-bj\' : {u\'name\' : \'French (Benin)\',                                         u\'flag\' : u\'/++resource++country-flags/bj.gif\'},\n-u\'fr-ca\' : {u\'name\' : \'French (Canada)\',                                        u\'flag\' : u\'/++resource++country-flags/ca.gif\'},\n-u\'fr-cd\' : {u\'name\' : \'French (Democratic Republic of Congo)\',                  u\'flag\' : u\'/++resource++country-flags/cd.gif\'},\n-u\'fr-cf\' : {u\'name\' : \'French (Central African Republic)\',                      u\'flag\' : u\'/++resource++country-flags/cf.gif\'},\n-u\'fr-cg\' : {u\'name\' : \'French (Congo)\',                                         u\'flag\' : u\'/++resource++country-flags/cg.gif\'},\n-u\'fr-ch\' : {u\'name\' : \'French (Switzerland)\',                                   u\'flag\' : u\'/++resource++country-flags/ch.gif\'},\n-u\'fr-ci\' : {u\'name\' : \'French (Cote d\\\'Ivoire)\',                                u\'flag\' : u\'/++resource++country-flags/ci.gif\'},\n-u\'fr-cm\' : {u\'name\' : \'French (Cameroon)\',                                      u\'flag\' : u\'/++resource++country-flags/cm.gif\'},\n-u\'fr-dj\' : {u\'name\' : \'French (Djibouti)\',                                      u\'flag\' : u\'/++resource++country-flags/dj.gif\'},\n-u\'fr-fr\' : {u\'name\' : \'French (France)\',                                        u\'flag\' : u\'/++resource++country-flags/fr.gif\'},\n-u\'fr-ga\' : {u\'name\' : \'French (Gabon)\',                                         u\'flag\' : u\'/++resource++country-flags/ga.gif\'},\n-u\'fr-gb\' : {u\'name\' : \'French (United Kingdom)\',                                u\'flag\' : u\'/++resource++country-flags/gb.gif\'},\n-u\'fr-gf\' : {u\'name\' : \'French (French Guiana)\',                                 u\'flag\' : u\'/++resource++country-flags/gf.gif\'},\n-u\'fr-gn\' : {u\'name\' : \'French (Guinea)\',                                        u\'flag\' : u\'/++resource++country-flags/gn.gif\'},\n-u\'fr-gp\' : {u\'name\' : \'French (Guadeloupe)\',                                    u\'flag\' : u\'/++resource++country-flags/gp.gif\'},\n-u\'fr-ht\' : {u\'name\' : \'French (Haiti)\',                                         u\'flag\' : u\'/++resource++country-flags/ht.gif\'},\n-u\'fr-it\' : {u\'name\' : \'French (Italy)\',                                         u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'fr-km\' : {u\'name\' : \'French (Comoros Islands)\',                               u\'flag\' : u\'/++resource++country-flags/km.gif\'},\n-u\'fr-lb\' : {u\'name\' : \'French (Lebanon)\',                                       u\'flag\' : u\'/++resource++country-flags/lb.gif\'},\n-u\'fr-lu\' : {u\'name\' : \'French (Luxembourg)\',                                    u\'flag\' : u\'/++resource++country-flags/lu.gif\'},\n-u\'fr-mc\' : {u\'name\' : \'French (Monaco)\',                                        u\'flag\' : u\'/++resource++country-flags/mc.gif\'},\n-u\'fr-mg\' : {u\'name\' : \'French (Madagascar)\',                                    u\'flag\' : u\'/++resource++country-flags/mg.gif\'},\n-u\'fr-ml\' : {u\'name\' : \'French (Mali)\',                                          u\'flag\' : u\'/++resource++country-flags/ml.gif\'},\n-u\'fr-mq\' : {u\'name\' : \'French (Martinique)\',                                    u\'flag\' : u\'/++resource++country-flags/mq.gif\'},\n-u\'fr-nc\' : {u\'name\' : \'French (New Caledonia)\',                                 u\'flag\' : u\'/++resource++country-flags/nc.gif\'},\n-u\'fr-pf\' : {u\'name\' : \'French (French Polynesia)\',                              u\'flag\' : u\'/++resource++country-flags/pf.gif\'},\n-u\'fr-pm\' : {u\'name\' : \'French (St. Pierre and Miquelon)\',                       u\'flag\' : u\'/++resource++country-flags/pm.gif\'},\n-u\'fr-re\' : {u\'name\' : \'French (Reunion)\',                                       u\'flag\' : u\'/++resource++country-flags/re.gif\'},\n-u\'fr-rw\' : {u\'name\' : \'French (Rwanda)\',                                        u\'flag\' : u\'/++resource++country-flags/rw.gif\'},\n-u\'fr-sc\' : {u\'name\' : \'French (Seychelles)\',                                    u\'flag\' : u\'/++resource++country-flags/sc.gif\'},\n-u\'fr-td\' : {u\'name\' : \'French (Chad)\',                                          u\'flag\' : u\'/++resource++country-flags/td.gif\'},\n-u\'fr-tg\' : {u\'name\' : \'French (Togo)\',                                          u\'flag\' : u\'/++resource++country-flags/tg.gif\'},\n-u\'fr-vu\' : {u\'name\' : \'French (Vanuatu)\',                                       u\'flag\' : u\'/++resource++country-flags/vu.gif\'},\n-u\'fr-wf\' : {u\'name\' : \'French (Wallis and Futuna)\',                             u\'flag\' : u\'/++resource++country-flags/wf.gif\'},\n-u\'fr-yt\' : {u\'name\' : \'French (Mayotte)\',                                       u\'flag\' : u\'/++resource++country-flags/yt.gif\'},\n-u\'hr-ba\' : {u\'name\' : \'Croatian (Bosnia-Herzegovina)\',                          u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'hr-hr\' : {u\'name\' : \'Croatian (Croatia)\',                                     u\'flag\' : u\'/++resource++country-flags/hr.gif\'},\n-u\'hu-hu\' : {u\'name\' : \'Hungarian (Hungary)\',                                    u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'hu-si\' : {u\'name\' : \'Hungarian (Slovenia)\',                                   u\'flag\' : u\'/++resource++country-flags/hu.gif\'},\n-u\'it-ch\' : {u\'name\' : \'Italian (Switzerland)\',                                  u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-hr\' : {u\'name\' : \'Italian (Croatia)\',                                      u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-it\' : {u\'name\' : \'Italian (Italy)\',                                        u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-si\' : {u\'name\' : \'Italian (Slovenia)\',                                     u\'flag\' : u\'/++resource++country-flags/it.gif\'},\n-u\'it-sm\' : {u\'name\' : \'Italian (San Marino)\',                                   u\'flag\' : u\'/++resource++country-flags/sm.gif\'},\n-u\'ko-kp\' : {u\'name\' : \'Korean (Korea, North)\',                                  u\'flag\' : u\'/++resource++country-flags/kp.gif\'},\n-u\'ko-kr\' : {u\'name\' : \'Korean (Korea, South)\',                                  u\'flag\' : u\'/++resource++country-flags/kr.gif\'},\n-u\'ln-cd\' : {u\'name\' : \'Lingala (Democratic Republic of Congo)\',                 u\'flag\' : u\'/++resource++country-flags/cd.gif\'},\n-u\'ln-cg\' : {u\'name\' : \'Lingala (Congo)\',                                        u\'flag\' : u\'/++resource++country-flags/cg.gif\'},\n-u\'ms-bn\' : {u\'name\' : \'Malay (Brunei)\',                                         u\'flag\' : u\'/++resource++country-flags/bn.gif\'},\n-u\'ms-my\' : {u\'name\' : \'Malay (Malaysia)\',                                       u\'flag\' : u\'/++resource++country-flags/my.gif\'},\n-u\'ms-sg\' : {u\'name\' : \'Malay (Singapore)\',                                      u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'nl-an\' : {u\'name\' : \'Dutch (Netherlands Antilles)\',                           u\'flag\' : u\'/++resource++country-flags/an.gif\'},\n-u\'nl-aw\' : {u\'name\' : \'Dutch (Aruba)\',                                          u\'flag\' : u\'/++resource++country-flags/aw.gif\'},\n-u\'nl-be\' : {u\'name\' : \'Dutch (Belgium)\',                                        u\'flag\' : u\'/++resource++country-flags/be.gif\'},\n-u\'nl-nl\' : {u\'name\' : \'Dutch (Netherlands)\',                                    u\'flag\' : u\'/++resource++country-flags/nl.gif\'},\n-u\'nl-sr\' : {u\'name\' : \'Dutch (Suriname)\',                                       u\'flag\' : u\'/++resource++country-flags/sr.gif\'},\n-u\'pt-ao\' : {u\'name\' : \'Portuguese (Angola)\', u\'native\': \'Portugu\xc3\xaas (Angola)\',   u\'flag\' : u\'/++resource++country-flags/ao.gif\'},\n-u\'pt-br\' : {u\'name\' : \'Portuguese (Brazil)\', u\'native\' : \'Portugu\xc3\xaas (Brasil)\',  u\'flag\' : u\'/++resource++country-flags/br.gif\'},\n-u\'pt-cv\' : {u\'name\' : \'Portuguese (Ilhas Cabo Verde)\', u\'native\': \'Portugu\xc3\xaas (Cabo Verde)\', u\'flag\' : u\'/++resource++country-flags/cv.gif\'},\n-u\'pt-gw\' : {u\'name\' : \'Portuguese (Guin\xc3\xa9-Bissau)\', u\'native\': \'Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)\', u\'flag\' : u\'/++resource++country-flags/gw.gif\'},\n-u\'pt-mz\' : {u\'name\' : \'Portuguese (Mo\xc3\xa7ambique)\', u\'native\': \'Portugu\xc3\xaas (Mo\xc3\xa7ambique)\', u\'flag\' : u\'/++resource++country-flags/mz.gif\'},\n-u\'pt-pt\' : {u\'name\' : \'Portuguese (Portugal)\', u\'native\': \'Portugu\xc3\xaas (Portugal)\', u\'flag\' : u\'/++resource++country-flags/pt.gif\'},\n-u\'pt-st\' : {u\'name\' : \'Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\', u\'native\': \'Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\', u\'flag\' : u\'/++resource++country-flags/st.gif\'},\n-u\'sd-in\' : {u\'name\' : \'Sindhi (India)\',                                         u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'sd-pk\' : {u\'name\' : \'Sindhi (Pakistan)\',                                      u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'sr-ba\' : {u\'name\' : \'Serbian (Bosnia-Herzegovina)\',                           u\'flag\' : u\'/++resource++country-flags/ba.gif\'},\n-u\'ss-sz\' : {u\'name\' : \'Swati (Swaziland)\',                                      u\'flag\' : u\'/++resource++country-flags/sz.gif\'},\n-u\'ss-za\' : {u\'name\' : \'Swati (South Africa)\',                                   u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'sv-fi\' : {u\'name\' : \'Swedish (Finland)\',                                      u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sv-se\' : {u\'name\' : \'Swedish (Sweden)\',                                       u\'flag\' : u\'/++resource++country-flags/se.gif\'},\n-u\'sw-ke\' : {u\'name\' : \'Swahili (Kenya)\',                                        u\'flag\' : u\'/++resource++country-flags/ke.gif\'},\n-u\'sw-tz\' : {u\'name\' : \'Swahili (Tanzania)\',                                     u\'flag\' : u\'/++resource++country-flags/tz.gif\'},\n-u\'ta-in\' : {u\'name\' : \'Tamil (India)\',                                          u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ta-sg\' : {u\'name\' : \'Tamil (Singapore)\',                                      u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'tn-bw\' : {u\'name\' : \'Tswana (Botswana)\',                                      u\'flag\' : u\'/++resource++country-flags/bw.gif\'},\n-u\'tn-za\' : {u\'name\' : \'Tswana (South Africa)\',                                  u\'flag\' : u\'/++resource++country-flags/za.gif\'},\n-u\'tr-bg\' : {u\'name\' : \'Turkish (Bulgaria)\',                                     u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'tr-cy\' : {u\'name\' : \'Turkish (Cyprus)\',                                       u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'tr-tr\' : {u\'name\' : \'Turkish (Turkey)\',                                       u\'flag\' : u\'/++resource++country-flags/tr.gif\'},\n-u\'ur-in\' : {u\'name\' : \'Urdu (India)\',                                           u\'flag\' : u\'/++resource++country-flags/in.gif\'},\n-u\'ur-pk\' : {u\'name\' : \'Urdu (Pakistan)\',                                        u\'flag\' : u\'/++resource++country-flags/pk.gif\'},\n-u\'zh-cn\' : {u\'name\' : \'Chinese (China)\', u\'native\' : \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)\',                u\'flag\' : u\'/++resource++country-flags/cn.gif\'},\n-u\'zh-hk\' : {u\'name\' : \'Chinese (Hongkong)\', u\'native\' : \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)\',             u\'flag\' : u\'/++resource++country-flags/hk.gif\'},\n-u\'zh-sg\' : {u\'name\' : \'Chinese (Singapore)\', u\'native\' : \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)\',           u\'flag\' : u\'/++resource++country-flags/sg.gif\'},\n-u\'zh-tw\' : {u\'name\' : \'Chinese (Taiwan)\', u\'native\' : \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)\',               u\'flag\' : u\'/++resource++country-flags/tw.gif\'},\n+    u\'ar-ae\': {\n+        u\'name\': \'Arabic (United Arab Emirates)\',\n+        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n+    },\n+    u\'ar-bh\': {\n+        u\'name\': \'Arabic (Bahrain)\',\n+        u\'flag\': u\'/++resource++country-flags/bh.gif\',\n+    },\n+    u\'ar-dz\': {\n+        u\'name\': \'Arabic (Algeria)\',\n+        u\'flag\': u\'/++resource++country-flags/dz.gif\',\n+    },\n+    u\'ar-eg\': {\n+        u\'name\': \'Arabic (Egypt)\',\n+        u\'flag\': u\'/++resource++country-flags/eg.gif\',\n+    },\n+    u\'ar-il\': {\n+        u\'name\': \'Arabic (Israel)\',\n+        u\'flag\': u\'/++resource++country-flags/il.gif\',\n+    },\n+    u\'ar-iq\': {\n+        u\'name\': \'Arabic (Iraq)\',\n+        u\'flag\': u\'/++resource++country-flags/iq.gif\',\n+    },\n+    u\'ar-jo\': {\n+        u\'name\': \'Arabic (Jordan)\',\n+        u\'flag\': u\'/++resource++country-flags/jo.gif\',\n+    },\n+    u\'ar-kw\': {\n+        u\'name\': \'Arabic (Kuwait)\',\n+        u\'flag\': u\'/++resource++country-flags/kw.gif\',\n+    },\n+    u\'ar-lb\': {\n+        u\'name\': \'Arabic (Lebanon)\',\n+        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n+    },\n+    u\'ar-ly\': {\n+        u\'name\': \'Arabic (Libya)\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ar-ma\': {\n+        u\'name\': \'Arabic (Morocco)\',\n+        u\'flag\': u\'/++resource++country-flags/ma.gif\',\n+    },\n+    u\'ar-mr\': {\n+        u\'name\': \'Arabic (Mauritania)\',\n+        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n+    },\n+    u\'ar-om\': {\n+        u\'name\': \'Arabic (Oman)\',\n+        u\'flag\': u\'/++resource++country-flags/om.gif\',\n+    },\n+    u\'ar-ps\': {\n+        u\'name\': \'Arabic (Palestinian West Bank and Gaza)\',\n+        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n+    },\n+    u\'ar-qa\': {\n+        u\'name\': \'Arabic (Qatar)\',\n+        u\'flag\': u\'/++resource++country-flags/qa.gif\',\n+    },\n+    u\'ar-sa\': {\n+        u\'name\': \'Arabic (Saudi Arabia)\',\n+        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n+    },\n+    u\'ar-sd\': {\n+        u\'name\': \'Arabic (Sudan)\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ar-so\': {\n+        u\'name\': \'Arabic (Somalia)\',\n+        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    },\n+    u\'ar-sy\': {\n+        u\'name\': \'Arabic (Syria)\',\n+        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n+    },\n+    u\'ar-td\': {\n+        u\'name\': \'Arabic (Chad)\',\n+        u\'flag\': u\'/++resource++country-flags/td.gif\',\n+    },\n+    u\'ar-tn\': {\n+        u\'name\': \'Arabic (Tunisia)\',\n+        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n+    },\n+    u\'ar-ye\': {\n+        u\'name\': \'Arabic (Yemen)\',\n+        u\'flag\': u\'/++resource++country-flags/ye.gif\',\n+    },\n+    u\'bn-bd\': {\n+        u\'name\': \'Bengali (Bangladesh)\',\n+        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n+    },\n+    u\'bn-in\': {\n+        u\'name\': \'Bengali (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'bn-sg\': {\n+        u\'name\': \'Bengali (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'ch-gu\': {\n+        u\'name\': \'Chamorro (Guam)\',\n+        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    },\n+    u\'ch-mp\': {\n+        u\'name\': \'Chamorro (Northern Mariana Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    },\n+    u\'cs-cz\': {\n+        u\'name\': \'Czech (Czech republic)\',\n+        u\'native\': \'\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)\',\n+        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n+    },\n+    u\'da-dk\': {\n+        u\'name\': \'Danish (Denmark)\',\n+        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n+    },\n+    u\'da-gl\': {\n+        u\'name\': \'Danish (Greenland)\',\n+        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n+    },\n+    u\'de-at\': {\n+        u\'name\': \'German (Austria)\',\n+        u\'native\': \'Deutsch (\xc3\x96sterreich)\',\n+        u\'flag\': u\'/++resource++country-flags/at.gif\',\n+    },\n+    u\'de-be\': {\n+        u\'name\': \'German (Belgium)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'de-ch\': {\n+        u\'name\': \'German (Switzerland)\',\n+        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    },\n+    u\'de-de\': {\n+        u\'name\': \'German (Germany)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'de-dk\': {\n+        u\'name\': \'German (Denmark)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'de-li\': {\n+        u\'name\': \'German (Liechtenstein)\',\n+        u\'flag\': u\'/++resource++country-flags/li.gif\',\n+    },\n+    u\'de-lu\': {\n+        u\'name\': \'German (Luxembourg)\',\n+        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    },\n+    u\'el-cy\': {\n+        u\'name\': \'Greek (Cyprus)\',\n+        u\'flag\': u\'/++resource++country-flags/cy.gif\',\n+    },\n+    u\'el-gr\': {\n+        u\'name\': \'Greek (Greece)\',\n+        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n+    },\n+    u\'en-ag\': {\n+        u\'name\': \'English (Antigua and Barbuda)\',\n+        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n+    },\n+    u\'en-ai\': {\n+        u\'name\': \'English (Anguilla)\',\n+        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n+    },\n+    u\'en-as\': {\n+        u\'name\': \'English (American Samoa)\',\n+        u\'flag\': u\'/++resource++country-flags/as.gif\',\n+    },\n+    u\'en-au\': {\n+        u\'name\': \'English (Australia)\',\n+        u\'flag\': u\'/++resource++country-flags/au.gif\',\n+    },\n+    u\'en-bb\': {\n+        u\'name\': \'English (Barbados)\',\n+        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n+    },\n+    u\'en-bm\': {\n+        u\'name\': \'English (Bermuda)\',\n+        u\'flag\': u\'/++resource++country-flags/bm.gif\',\n+    },\n+    u\'en-bn\': {\n+        u\'name\': \'English (Brunei)\',\n+        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    },\n+    u\'en-bs\': {\n+        u\'name\': \'English (Bahamas)\',\n+        u\'flag\': u\'/++resource++country-flags/bs.gif\',\n+    },\n+    u\'en-bw\': {\n+        u\'name\': \'English (Botswana)\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'en-bz\': {\n+        u\'name\': \'English (Belize)\',\n+        u\'flag\': u\'/++resource++country-flags/bz.gif\',\n+    },\n+    u\'en-ca\': {\n+        u\'name\': \'English (Canada)\',\n+        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    },\n+    u\'en-ck\': {\n+        u\'name\': \'English (Cook Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n+    },\n+    u\'en-cm\': {\n+        u\'name\': \'English (Cameroon)\',\n+        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    },\n+    u\'en-dm\': {\n+        u\'name\': \'English (Dominica)\',\n+        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n+    },\n+    u\'en-er\': {\n+        u\'name\': \'English (Eritrea)\',\n+        u\'flag\': u\'/++resource++country-flags/er.gif\',\n+    },\n+    u\'en-et\': {\n+        u\'name\': \'English (Ethiopia)\',\n+        u\'flag\': u\'/++resource++country-flags/et.gif\',\n+    },\n+    u\'en-fj\': {\n+        u\'name\': \'English (Fiji)\',\n+        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n+    },\n+    u\'en-fk\': {\n+        u\'name\': \'English (Falkland Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n+    },\n+    u\'en-fm\': {\n+        u\'name\': \'English (Micronesia)\',\n+        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n+    },\n+    u\'en-gb\': {\n+        u\'name\': \'English (United Kingdom)\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'en-gd\': {\n+        u\'name\': \'English (Grenada)\',\n+        u\'flag\': u\'/++resource++country-flags/gd.gif\',\n+    },\n+    u\'en-gh\': {\n+        u\'name\': \'English (Ghana)\',\n+        u\'flag\': u\'/++resource++country-flags/gh.gif\',\n+    },\n+    u\'en-gi\': {\n+        u\'name\': \'English (Gibraltar)\',\n+        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n+    },\n+    u\'en-gm\': {\n+        u\'name\': \'English (Gambia)\',\n+        u\'flag\': u\'/++resource++country-flags/gm.gif\',\n+    },\n+    u\'en-gu\': {\n+        u\'name\': \'English (Guam)\',\n+        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    },\n+    u\'en-gy\': {\n+        u\'name\': \'English (Guyana)\',\n+        u\'flag\': u\'/++resource++country-flags/gy.gif\',\n+    },\n+    u\'en-ie\': {\n+        u\'name\': \'English (Ireland)\',\n+        u\'flag\': u\'/++resource++country-flags/ie.gif\',\n+    },\n+    u\'en-il\': {\n+        u\'name\': \'English (Israel)\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'en-io\': {\n+        u\'name\': \'English (British Indian Ocean Territory)\',\n+        u\'flag\': u\'/++resource++country-flags/io.gif\',\n+    },\n+    u\'en-jm\': {\n+        u\'name\': \'English (Jamaica)\',\n+        u\'flag\': u\'/++resource++country-flags/jm.gif\',\n+    },\n+    u\'en-ke\': {\n+        u\'name\': \'English (Kenya)\',\n+        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n+    },\n+    u\'en-ki\': {\n+        u\'name\': \'English (Kiribati)\',\n+        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n+    },\n+    u\'en-kn\': {\n+        u\'name\': \'English (St. Kitts-Nevis)\',\n+        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n+    },\n+    u\'en-ky\': {\n+        u\'name\': \'English (Cayman Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n+    },\n+    u\'en-lc\': {\n+        u\'name\': \'English (St. Lucia)\',\n+        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n+    },\n+    u\'en-lr\': {\n+        u\'name\': \'English (Liberia)\',\n+        u\'flag\': u\'/++resource++country-flags/lr.gif\',\n+    },\n+    u\'en-ls\': {\n+        u\'name\': \'English (Lesotho)\',\n+        u\'flag\': u\'/++resource++country-flags/ls.gif\',\n+    },\n+    u\'en-mp\': {\n+        u\'name\': \'English (Northern Mariana Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    },\n+    u\'en-ms\': {\n+        u\'name\': \'English (Montserrat)\',\n+        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n+    },\n+    u\'en-mt\': {\n+        u\'name\': \'English (Malta)\',\n+        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n+    },\n+    u\'en-mu\': {\n+        u\'name\': \'English (Mauritius)\',\n+        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n+    },\n+    u\'en-mw\': {\n+        u\'name\': \'English (Malawi)\',\n+        u\'flag\': u\'/++resource++country-flags/mw.gif\',\n+    },\n+    u\'en-na\': {\n+        u\'name\': \'English (Namibia)\',\n+        u\'flag\': u\'/++resource++country-flags/na.gif\',\n+    },\n+    u\'en-nf\': {\n+        u\'name\': \'English (Norfolk Island)\',\n+        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n+    },\n+    u\'en-ng\': {\n+        u\'name\': \'English (Nigeria)\',\n+        u\'flag\': u\'/++resource++country-flags/ng.gif\',\n+    },\n+    u\'en-nr\': {\n+        u\'name\': \'English (Nauru)\',\n+        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n+    },\n+    u\'en-nu\': {\n+        u\'name\': \'English (Niue)\',\n+        u\'flag\': u\'/++resource++country-flags/nu.gif\',\n+    },\n+    u\'en-nz\': {\n+        u\'name\': \'English (New Zealand)\',\n+        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n+    },\n+    u\'en-pg\': {\n+        u\'name\': \'English (Papua New Guinea)\',\n+        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n+    },\n+    u\'en-ph\': {\n+        u\'name\': \'English (Philippines)\',\n+        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n+    },\n+    u\'en-pk\': {\n+        u\'name\': \'English (Pakistan)\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'en-pn\': {\n+        u\'name\': \'English (Pitcairn)\',\n+        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n+    },\n+    u\'en-pr\': {\n+        u\'name\': \'English (Puerto Rico)\',\n+        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    },\n+    u\'en-pw\': {\n+        u\'name\': \'English (Palau)\',\n+        u\'flag\': u\'/++resource++country-flags/pw.gif\',\n+    },\n+    u\'en-rw\': {\n+        u\'name\': \'English (Rwanda)\',\n+        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    },\n+    u\'en-sb\': {\n+        u\'name\': \'English (Solomon Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n+    },\n+    u\'en-sc\': {\n+        u\'name\': \'English (Seychelles)\',\n+        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    },\n+    u\'en-sg\': {\n+        u\'name\': \'English (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'en-sh\': {\n+        u\'name\': \'English (St. Helena)\',\n+        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n+    },\n+    u\'en-sl\': {\n+        u\'name\': \'English (Sierra Leone)\',\n+        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n+    },\n+    u\'en-so\': {\n+        u\'name\': \'English (Somalia)\',\n+        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    },\n+    u\'en-sz\': {\n+        u\'name\': \'English (Swaziland)\',\n+        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    },\n+    u\'en-tc\': {\n+        u\'name\': \'English (Turks and Caicos Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n+    },\n+    u\'en-tk\': {\n+        u\'name\': \'English (Tokelau)\',\n+        u\'flag\': u\'/++resource++country-flags/tk.gif\',\n+    },\n+    u\'en-to\': {\n+        u\'name\': \'English (Tonga)\',\n+        u\'flag\': u\'/++resource++country-flags/to.gif\',\n+    },\n+    u\'en-tt\': {\n+        u\'name\': \'English (Trinidad and Tobago)\',\n+        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n+    },\n+    u\'en-ug\': {\n+        u\'name\': \'English (Uganda)\',\n+        u\'flag\': u\'/++resource++country-flags/ug.gif\',\n+    },\n+    u\'en-us\': {\n+        u\'name\': \'English (USA)\',\n+        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    },\n+    u\'en-vc\': {\n+        u\'name\': \'English (St. Vincent and the Grenadi)\',\n+        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n+    },\n+    u\'en-vg\': {\n+        u\'name\': \'English (British Virgin Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n+    },\n+    u\'en-vi\': {\n+        u\'name\': \'English (U.S. Virgin Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n+    },\n+    u\'en-vu\': {\n+        u\'name\': \'English (Vanuatu)\',\n+        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    },\n+    u\'en-ws\': {\n+        u\'name\': \'English (Western Samoa)\',\n+        u\'flag\': u\'/++resource++country-flags/ws.gif\',\n+    },\n+    u\'en-za\': {\n+        u\'name\': \'English (South Africa)\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'en-zm\': {\n+        u\'name\': \'English (Zambia)\',\n+        u\'flag\': u\'/++resource++country-flags/zm.gif\',\n+    },\n+    u\'en-zw\': {\n+        u\'name\': \'English (Zimbabwe)\',\n+        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n+    },\n+    u\'es-ar\': {\n+        u\'name\': \'Spanish (Argentina)\',\n+        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n+    },\n+    u\'es-bo\': {\n+        u\'name\': \'Spanish (Bolivia)\',\n+        u\'flag\': u\'/++resource++country-flags/bo.gif\',\n+    },\n+    u\'es-cl\': {\n+        u\'name\': \'Spanish (Chile)\',\n+        u\'flag\': u\'/++resource++country-flags/cl.gif\',\n+    },\n+    u\'es-co\': {\n+        u\'name\': \'Spanish (Colombia)\',\n+        u\'flag\': u\'/++resource++country-flags/co.gif\',\n+    },\n+    u\'es-cr\': {\n+        u\'name\': \'Spanish (Costa Rica)\',\n+        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n+    },\n+    u\'es-cu\': {\n+        u\'name\': \'Spanish (Cuba)\',\n+        u\'flag\': u\'/++resource++country-flags/cu.gif\',\n+    },\n+    u\'es-do\': {\n+        u\'name\': \'Spanish (Dominican Republic)\',\n+        u\'flag\': u\'/++resource++country-flags/do.gif\',\n+    },\n+    u\'es-ec\': {\n+        u\'name\': \'Spanish (Ecuador)\',\n+        u\'flag\': u\'/++resource++country-flags/ec.gif\',\n+    },\n+    u\'es-es\': {\n+        u\'name\': \'Spanish (Spain)\',\n+        u\'flag\': u\'/++resource++country-flags/es.gif\',\n+    },\n+    u\'es-gq\': {\n+        u\'name\': \'Spanish (Equatorial Guinea)\',\n+        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n+    },\n+    u\'es-gt\': {\n+        u\'name\': \'Spanish (Guatemala)\',\n+        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n+    },\n+    u\'es-hn\': {\n+        u\'name\': \'Spanish (Honduras)\',\n+        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n+    },\n+    u\'es-mx\': {\n+        u\'name\': \'Spanish (Mexico)\',\n+        u\'flag\': u\'/++resource++country-flags/mx.gif\',\n+    },\n+    u\'es-ni\': {\n+        u\'name\': \'Spanish (Nicaragua)\',\n+        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n+    },\n+    u\'es-pa\': {\n+        u\'name\': \'Spanish (Panama)\',\n+        u\'flag\': u\'/++resource++country-flags/pa.gif\',\n+    },\n+    u\'es-pe\': {\n+        u\'name\': \'Spanish (Peru)\',\n+        u\'flag\': u\'/++resource++country-flags/pe.gif\',\n+    },\n+    u\'es-pr\': {\n+        u\'name\': \'Spanish (Puerto Rico)\',\n+        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    },\n+    u\'es-py\': {\n+        u\'name\': \'Spanish (Paraguay)\',\n+        u\'flag\': u\'/++resource++country-flags/py.gif\',\n+    },\n+    u\'es-sv\': {\n+        u\'name\': \'Spanish (El Salvador)\',\n+        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n+    },\n+    u\'es-us\': {\n+        u\'name\': \'Spanish (USA)\',\n+        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    },\n+    u\'es-uy\': {\n+        u\'name\': \'Spanish (Uruguay)\',\n+        u\'flag\': u\'/++resource++country-flags/uy.gif\',\n+    },\n+    u\'es-ve\': {\n+        u\'name\': \'Spanish (Venezuela)\',\n+        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n+    },\n+    u\'fr-ad\': {\n+        u\'name\': \'French (Andorra)\',\n+        u\'flag\': u\'/++resource++country-flags/ad.gif\',\n+    },\n+    u\'fr-be\': {\n+        u\'name\': \'French (Belgium)\',\n+        u\'flag\': u\'/++resource++country-flags/be.gif\',\n+    },\n+    u\'fr-bf\': {\n+        u\'name\': \'French (Burkina Faso)\',\n+        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n+    },\n+    u\'fr-bi\': {\n+        u\'name\': \'French (Burundi)\',\n+        u\'flag\': u\'/++resource++country-flags/bi.gif\',\n+    },\n+    u\'fr-bj\': {\n+        u\'name\': \'French (Benin)\',\n+        u\'flag\': u\'/++resource++country-flags/bj.gif\',\n+    },\n+    u\'fr-ca\': {\n+        u\'name\': \'French (Canada)\',\n+        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    },\n+    u\'fr-cd\': {\n+        u\'name\': \'French (Democratic Republic of Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    },\n+    u\'fr-cf\': {\n+        u\'name\': \'French (Central African Republic)\',\n+        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    },\n+    u\'fr-cg\': {\n+        u\'name\': \'French (Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n+    },\n+    u\'fr-ch\': {\n+        u\'name\': \'French (Switzerland)\',\n+        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    },\n+    u\'fr-ci\': {\n+        u\'name\': \'French (Cote d\\\'Ivoire)\',\n+        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n+    },\n+    u\'fr-cm\': {\n+        u\'name\': \'French (Cameroon)\',\n+        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    },\n+    u\'fr-dj\': {\n+        u\'name\': \'French (Djibouti)\',\n+        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    },\n+    u\'fr-fr\': {\n+        u\'name\': \'French (France)\',\n+        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n+    },\n+    u\'fr-ga\': {\n+        u\'name\': \'French (Gabon)\',\n+        u\'flag\': u\'/++resource++country-flags/ga.gif\',\n+    },\n+    u\'fr-gb\': {\n+        u\'name\': \'French (United Kingdom)\',\n+        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    },\n+    u\'fr-gf\': {\n+        u\'name\': \'French (French Guiana)\',\n+        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n+    },\n+    u\'fr-gn\': {\n+        u\'name\': \'French (Guinea)\',\n+        u\'flag\': u\'/++resource++country-flags/gn.gif\',\n+    },\n+    u\'fr-gp\': {\n+        u\'name\': \'French (Guadeloupe)\',\n+        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n+    },\n+    u\'fr-ht\': {\n+        u\'name\': \'French (Haiti)\',\n+        u\'flag\': u\'/++resource++country-flags/ht.gif\',\n+    },\n+    u\'fr-it\': {\n+        u\'name\': \'French (Italy)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'fr-km\': {\n+        u\'name\': \'French (Comoros Islands)\',\n+        u\'flag\': u\'/++resource++country-flags/km.gif\',\n+    },\n+    u\'fr-lb\': {\n+        u\'name\': \'French (Lebanon)\',\n+        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n+    },\n+    u\'fr-lu\': {\n+        u\'name\': \'French (Luxembourg)\',\n+        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    },\n+    u\'fr-mc\': {\n+        u\'name\': \'French (Monaco)\',\n+        u\'flag\': u\'/++resource++country-flags/mc.gif\',\n+    },\n+    u\'fr-mg\': {\n+        u\'name\': \'French (Madagascar)\',\n+        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    },\n+    u\'fr-ml\': {\n+        u\'name\': \'French (Mali)\',\n+        u\'flag\': u\'/++resource++country-flags/ml.gif\',\n+    },\n+    u\'fr-mq\': {\n+        u\'name\': \'French (Martinique)\',\n+        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n+    },\n+    u\'fr-nc\': {\n+        u\'name\': \'French (New Caledonia)\',\n+        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n+    },\n+    u\'fr-pf\': {\n+        u\'name\': \'French (French Polynesia)\',\n+        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n+    },\n+    u\'fr-pm\': {\n+        u\'name\': \'French (St. Pierre and Miquelon)\',\n+        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n+    },\n+    u\'fr-re\': {\n+        u\'name\': \'French (Reunion)\',\n+        u\'flag\': u\'/++resource++country-flags/re.gif\',\n+    },\n+    u\'fr-rw\': {\n+        u\'name\': \'French (Rwanda)\',\n+        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    },\n+    u\'fr-sc\': {\n+        u\'name\': \'French (Seychelles)\',\n+        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    },\n+    u\'fr-td\': {\n+        u\'name\': \'French (Chad)\',\n+        u\'flag\': u\'/++resource++country-flags/td.gif\',\n+    },\n+    u\'fr-tg\': {\n+        u\'name\': \'French (Togo)\',\n+        u\'flag\': u\'/++resource++country-flags/tg.gif\',\n+    },\n+    u\'fr-vu\': {\n+        u\'name\': \'French (Vanuatu)\',\n+        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    },\n+    u\'fr-wf\': {\n+        u\'name\': \'French (Wallis and Futuna)\',\n+        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n+    },\n+    u\'fr-yt\': {\n+        u\'name\': \'French (Mayotte)\',\n+        u\'flag\': u\'/++resource++country-flags/yt.gif\',\n+    },\n+    u\'hr-ba\': {\n+        u\'name\': \'Croatian (Bosnia-Herzegovina)\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'hr-hr\': {\n+        u\'name\': \'Croatian (Croatia)\',\n+        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n+    },\n+    u\'hu-hu\': {\n+        u\'name\': \'Hungarian (Hungary)\',\n+        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n+    },\n+    u\'hu-si\': {\n+        u\'name\': \'Hungarian (Slovenia)\',\n+        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n+    },\n+    u\'it-ch\': {\n+        u\'name\': \'Italian (Switzerland)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-hr\': {\n+        u\'name\': \'Italian (Croatia)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-it\': {\n+        u\'name\': \'Italian (Italy)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-si\': {\n+        u\'name\': \'Italian (Slovenia)\',\n+        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    },\n+    u\'it-sm\': {\n+        u\'name\': \'Italian (San Marino)\',\n+        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n+    },\n+    u\'ko-kp\': {\n+        u\'name\': \'Korean (Korea, North)\',\n+        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n+    },\n+    u\'ko-kr\': {\n+        u\'name\': \'Korean (Korea, South)\',\n+        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n+    },\n+    u\'ln-cd\': {\n+        u\'name\': \'Lingala (Democratic Republic of Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    },\n+    u\'ln-cg\': {\n+        u\'name\': \'Lingala (Congo)\',\n+        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n+    },\n+    u\'ms-bn\': {\n+        u\'name\': \'Malay (Brunei)\',\n+        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    },\n+    u\'ms-my\': {\n+        u\'name\': \'Malay (Malaysia)\',\n+        u\'flag\': u\'/++resource++country-flags/my.gif\',\n+    },\n+    u\'ms-sg\': {\n+        u\'name\': \'Malay (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'nl-an\': {\n+        u\'name\': \'Dutch (Netherlands Antilles)\',\n+        u\'flag\': u\'/++resource++country-flags/an.gif\',\n+    },\n+    u\'nl-aw\': {\n+        u\'name\': \'Dutch (Aruba)\',\n+        u\'flag\': u\'/++resource++country-flags/aw.gif\',\n+    },\n+    u\'nl-be\': {\n+        u\'name\': \'Dutch (Belgium)\',\n+        u\'flag\': u\'/++resource++country-flags/be.gif\',\n+    },\n+    u\'nl-nl\': {\n+        u\'name\': \'Dutch (Netherlands)\',\n+        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n+    },\n+    u\'nl-sr\': {\n+        u\'name\': \'Dutch (Suriname)\',\n+        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n+    },\n+    u\'pt-ao\': {\n+        u\'name\': \'Portuguese (Angola)\',\n+        u\'native\': \'Portugu\xc3\xaas (Angola)\',\n+        u\'flag\': u\'/++resource++country-flags/ao.gif\',\n+    },\n+    u\'pt-br\': {\n+        u\'name\': \'Portuguese (Brazil)\',\n+        u\'native\': \'Portugu\xc3\xaas (Brasil)\',\n+        u\'flag\': u\'/++resource++country-flags/br.gif\',\n+    },\n+    u\'pt-cv\': {\n+        u\'name\': \'Portuguese (Ilhas Cabo Verde)\',\n+        u\'native\': \'Portugu\xc3\xaas (Cabo Verde)\',\n+        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n+    },\n+    u\'pt-gw\': {\n+        u\'name\': \'Portuguese (Guin\xc3\xa9-Bissau)\',\n+        u\'native\': \'Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)\',\n+        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n+    },\n+    u\'pt-mz\': {\n+        u\'name\': \'Portuguese (Mo\xc3\xa7ambique)\',\n+        u\'native\': \'Portugu\xc3\xaas (Mo\xc3\xa7ambique)\',\n+        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n+    },\n+    u\'pt-pt\': {\n+        u\'name\': \'Portuguese (Portugal)\',\n+        u\'native\': \'Portugu\xc3\xaas (Portugal)\',\n+        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n+    },\n+    u\'pt-st\': {\n+        u\'name\': \'Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n+        u\'native\': \'Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n+        u\'flag\': u\'/++resource++country-flags/st.gif\',\n+    },\n+    u\'sd-in\': {\n+        u\'name\': \'Sindhi (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'sd-pk\': {\n+        u\'name\': \'Sindhi (Pakistan)\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'sr-ba\': {\n+        u\'name\': \'Serbian (Bosnia-Herzegovina)\',\n+        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    },\n+    u\'ss-sz\': {\n+        u\'name\': \'Swati (Swaziland)\',\n+        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    },\n+    u\'ss-za\': {\n+        u\'name\': \'Swati (South Africa)\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'sv-fi\': {\n+        u\'name\': \'Swedish (Finland)\',\n+        u\'flag\': u\'/++resource++country-flags/se.gif\',\n+    },\n+    u\'sv-se\': {\n+        u\'name\': \'Swedish (Sweden)\',\n+        u\'flag\': u\'/++resource++country-flags/se.gif\',\n+    },\n+    u\'sw-ke\': {\n+        u\'name\': \'Swahili (Kenya)\',\n+        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n+    },\n+    u\'sw-tz\': {\n+        u\'name\': \'Swahili (Tanzania)\',\n+        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n+    },\n+    u\'ta-in\': {\n+        u\'name\': \'Tamil (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ta-sg\': {\n+        u\'name\': \'Tamil (Singapore)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'tn-bw\': {\n+        u\'name\': \'Tswana (Botswana)\',\n+        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    },\n+    u\'tn-za\': {\n+        u\'name\': \'Tswana (South Africa)\',\n+        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    },\n+    u\'tr-bg\': {\n+        u\'name\': \'Turkish (Bulgaria)\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'tr-cy\': {\n+        u\'name\': \'Turkish (Cyprus)\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'tr-tr\': {\n+        u\'name\': \'Turkish (Turkey)\',\n+        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n+    },\n+    u\'ur-in\': {\n+        u\'name\': \'Urdu (India)\',\n+        u\'flag\': u\'/++resource++country-flags/in.gif\',\n+    },\n+    u\'ur-pk\': {\n+        u\'name\': \'Urdu (Pakistan)\',\n+        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    },\n+    u\'zh-cn\': {\n+        u\'name\': \'Chinese (China)\',\n+        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)\',\n+        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n+    },\n+    u\'zh-hk\': {\n+        u\'name\': \'Chinese (Hongkong)\',\n+        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)\',\n+        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n+    },\n+    u\'zh-sg\': {\n+        u\'name\': \'Chinese (Singapore)\',\n+        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)\',\n+        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    },\n+    u\'zh-tw\': {\n+        u\'name\': \'Chinese (Taiwan)\',\n+        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)\',\n+        u\'flag\': u\'/++resource++country-flags/tw.gif\',\n+    },\n }\n \n # convert the utf-8 encoded values to unicode\ndiff --git a/plone/i18n/locales/tests/base.py b/plone/i18n/locales/tests/base.py\nindex bb0f287..2523647 100644\n--- a/plone/i18n/locales/tests/base.py\n+++ b/plone/i18n/locales/tests/base.py\n@@ -4,17 +4,22 @@\n \n def setUp():\n     from zope.component.testing import setUp\n+\n     setUp()\n     import zope.component\n+\n     XMLConfig(\'meta.zcml\', zope.component)()\n \n     import zope.browserresource\n+\n     XMLConfig(\'meta.zcml\', zope.browserresource)()\n \n     import plone.i18n.locales\n+\n     XMLConfig(\'configure.zcml\', plone.i18n.locales)()\n \n \n def tearDown():\n     from zope.component.testing import tearDown\n+\n     tearDown()\ndiff --git a/plone/i18n/locales/tests/test_cctlds.py b/plone/i18n/locales/tests/test_cctlds.py\nindex eb2167b..1a38f86 100644\n--- a/plone/i18n/locales/tests/test_cctlds.py\n+++ b/plone/i18n/locales/tests/test_cctlds.py\n@@ -4,31 +4,34 @@\n \n \n class TestCCTLD(unittest.TestCase):\n-\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _makeOne(self):\n         from plone.i18n.locales.interfaces import ICcTLDInformation\n         from zope.component import queryUtility\n+\n         return queryUtility(ICcTLDInformation)\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ICcTLDInformation\n         from plone.i18n.locales.cctld import CcTLDInformation\n-        self.assert_(verifyClass(ICcTLDInformation, CcTLDInformation))\n+\n+        self.assertTrue(verifyClass(ICcTLDInformation, CcTLDInformation))\n \n     def test_get_available(self):\n         util = self._makeOne()\n         tlds = util.getAvailableTLDs()\n         self.assertTrue(len(tlds) > 200)\n-        self.assert_(u\'nl\' in tlds)\n+        self.assertIn(u"nl", tlds)\n \n     def test_get(self):\n         util = self._makeOne()\n@@ -37,5 +40,5 @@ def test_get(self):\n \n     def test_get_languages_for(self):\n         util = self._makeOne()\n-        self.assertEquals(util.getLanguagesForTLD(u\'nl\'), [u\'nl\'])\n-        self.assertEquals(util.getLanguagesForTLD(u\'be\'), [u\'nl\', u\'fr\'])\n+        self.assertEqual(util.getLanguagesForTLD(u"nl"), [u"nl"])\n+        self.assertEqual(util.getLanguagesForTLD(u"be"), [u"nl", u"fr"])\ndiff --git a/plone/i18n/locales/tests/test_countries.py b/plone/i18n/locales/tests/test_countries.py\nindex c0d58ff..12ac5ef 100644\n--- a/plone/i18n/locales/tests/test_countries.py\n+++ b/plone/i18n/locales/tests/test_countries.py\n@@ -4,51 +4,55 @@\n \n \n class TestAvailableCountries(unittest.TestCase):\n-\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _makeOne(self):\n         from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import ICountryAvailability\n+\n         return queryUtility(ICountryAvailability)\n \n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ICountryAvailability\n         from plone.i18n.locales.countries import CountryAvailability\n-        self.assert_(verifyClass(ICountryAvailability, CountryAvailability))\n+\n+        self.assertTrue(verifyClass(ICountryAvailability, CountryAvailability))\n \n     def test_get_available(self):\n         util = self._makeOne()\n         countrycodes = util.getAvailableCountries()\n         self.assertTrue(len(countrycodes) > 200)\n-        self.assert_(u\'de\' in countrycodes)\n+        self.assertIn(u"de", countrycodes)\n \n     def test_get_countries(self):\n         util = self._makeOne()\n         countries = util.getCountries()\n         self.assertTrue(len(countries) > 200)\n-        self.assert_(u\'de\' in countries)\n-        de = countries[u\'de\']\n-        self.assertEquals(de[u\'name\'], u\'Germany\')\n-        self.assertEquals(de[u\'flag\'], u\'/++resource++country-flags/de.gif\')\n+        self.assert_(u"de" in countries)\n+        de = countries[u"de"]\n+        self.assertEqual(de[u"name"], u"Germany")\n+        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n \n     def test_get_country_listing(self):\n         util = self._makeOne()\n         countries = util.getCountryListing()\n         self.assertTrue(len(countries) > 200)\n-        self.assertTrue((u\'de\', u\'Germany\') in countries)\n+        self.assertIn((u"de", u"Germany"), countries)\n \n     def test_reservations(self):\n         # our list has historically contained some reservations, which\n         # aren\'t part of the official list. We retain those, to avoid\n         # breaking content based on these\n         from plone.i18n.locales.countries import _countrylist\n-        self.assertTrue(u\'an\' in _countrylist)\n-        self.assertTrue(u\'cs\' in _countrylist)\n+\n+        self.assertIn(u"an", _countrylist)\n+        self.assertIn(u"cs", _countrylist)\ndiff --git a/plone/i18n/locales/tests/test_languages.py b/plone/i18n/locales/tests/test_languages.py\nindex c9704e3..0d2fafe 100644\n--- a/plone/i18n/locales/tests/test_languages.py\n+++ b/plone/i18n/locales/tests/test_languages.py\n@@ -4,32 +4,33 @@\n \n \n class TestInterfaces(unittest.TestCase):\n-\n     def test_interface(self):\n         from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ILanguageAvailability\n         from plone.i18n.locales.languages import LanguageAvailability\n+\n         self.assert_(verifyClass(ILanguageAvailability, LanguageAvailability))\n \n \n class TestDeprecatedLanguages(unittest.TestCase):\n-\n     def test_deprecated(self):\n         # make sure we retain deprecated language codes, as we don\'t\n         # want to break existing content based on it\n         from plone.i18n.locales.languages import _languagelist\n-        self.assertTrue(u\'mo\' in _languagelist)\n-        self.assertTrue(u\'sh\' in _languagelist)\n \n+        self.assertIn(u"mo", _languagelist)\n+        self.assertIn(u"sh", _languagelist)\n \n-class BaseTestCase(object):\n \n+class BaseTestCase(object):\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _makeOne(self):\n@@ -37,72 +38,81 @@ def _makeOne(self):\n \n     def _verify(self, interface, klass):\n         from zope.interface.verify import verifyClass\n+\n         return verifyClass(interface, klass)\n \n     def test_get_available(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages()\n         self.assertTrue(len(languagecodes) > 100)\n-        self.assertTrue(u\'de\' in languagecodes)\n-        self.assertFalse(u\'pt-br\' in languagecodes)\n+        self.assertIn(u"de", languagecodes)\n+        self.assertNotIn(u"pt-br", languagecodes)\n \n     def test_get_available_combined(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages(combined=True)\n         self.assertTrue(len(languagecodes) > 300)\n-        self.assertTrue(u\'de\' in languagecodes)\n-        self.assertTrue(u\'pt-br\' in languagecodes)\n+        self.assertIn(u"de", languagecodes)\n+        self.assertIn(u"pt-br", languagecodes)\n \n     def test_get_languages(self):\n         util = self._makeOne()\n         languages = util.getLanguages()\n         self.assertTrue(len(languages) > 100)\n-        self.assertTrue(u\'de\' in languages)\n-        self.assertFalse(u\'pt-br\' in languages)\n-        de = languages[u\'de\']\n-        self.assertEquals(de[u\'name\'], u\'German\')\n-        self.assertEquals(de[u\'native\'], u\'Deutsch\')\n-        self.assertEquals(de[u\'flag\'], u\'/++resource++country-flags/de.gif\')\n+        self.assertIn(u"de", languages)\n+        self.assertNotIn(u"pt-br", languages)\n+        de = languages[u"de"]\n+        self.assertEqual(de[u"name"], u"German")\n+        self.assertEqual(de[u"native"], u"Deutsch")\n+        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n \n     def test_get_languages_combined(self):\n         util = self._makeOne()\n         languages = util.getLanguages(combined=True)\n         self.assertTrue(len(languages) > 300)\n-        self.assertTrue(u\'de\' in languages)\n-        self.assertTrue(u\'pt-br\' in languages)\n-        self.assertEquals(languages[u\'de\'][u\'name\'], u\'German\')\n-        self.assertEquals(languages[u\'pt-br\'][u\'name\'], u\'Portuguese (Brazil)\')\n+        self.assertIn(u"de", languages)\n+        self.assertIn(u"pt-br", languages)\n+        self.assertEqual(languages[u"de"][u"name"], u"German")\n+        self.assertEqual(languages[u"pt-br"][u"name"], u"Portuguese (Brazil)")\n \n     def test_get_language_listing(self):\n         util = self._makeOne()\n         languages = util.getLanguageListing()\n         self.assertTrue(len(languages) > 100)\n-        self.assertTrue((u\'de\', u\'German\') in languages)\n+        self.assertIn((u"de", u"German"), languages)\n \n \n class TestContentLanguageAvailability(BaseTestCase, unittest.TestCase):\n-\n     def _makeOne(self):\n         from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IContentLanguageAvailability\n+\n         return queryUtility(IContentLanguageAvailability)\n \n     def test_interface(self):\n         from plone.i18n.locales.interfaces import IContentLanguageAvailability\n         from plone.i18n.locales.languages import ContentLanguageAvailability\n-        self.assert_(self._verify(IContentLanguageAvailability,\n-                                  ContentLanguageAvailability))\n \n+        self.assertTrue(\n+            self._verify(\n+                IContentLanguageAvailability, ContentLanguageAvailability\n+            )\n+        )\n \n-class TestMetadataLanguageAvailability(BaseTestCase, unittest.TestCase):\n \n+class TestMetadataLanguageAvailability(BaseTestCase, unittest.TestCase):\n     def _makeOne(self):\n         from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n+\n         return queryUtility(IMetadataLanguageAvailability)\n \n     def test_interface(self):\n         from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n         from plone.i18n.locales.languages import MetadataLanguageAvailability\n-        self.assert_(self._verify(IMetadataLanguageAvailability,\n-                                  MetadataLanguageAvailability))\n+\n+        self.assertTrue(\n+            self._verify(\n+                IMetadataLanguageAvailability, MetadataLanguageAvailability\n+            )\n+        )\ndiff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py\nindex a74d986..74ee6b2 100644\n--- a/plone/i18n/negotiate/negotiate.py\n+++ b/plone/i18n/negotiate/negotiate.py\n@@ -36,8 +36,7 @@ def __init__(self, site, request):\n             set_language = request.get(\'set_language\', None)\n             if set_language:\n                 langsCookie = tool.setLanguageCookie(\n-                    set_language,\n-                    request=request\n+                    set_language, request=request\n                 )\n             else:\n                 # Get from cookie\n@@ -66,6 +65,7 @@ def __init__(self, site, request):\n             # We need to make sure its not a subrequest otherwise we are going\n             # To change the language of the main request\n             from plone.subrequest import ISubRequest\n+\n             if not ISubRequest.providedBy(request):\n                 tool.setLanguageCookie(langs[0], noredir=True, request=request)\n \ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 4bb3ac7..8c4f17a 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -31,7 +31,8 @@ def registerLangPrefsMethod(prefs, kind=\'language\'):\n     _langPrefsRegistry[kind].append(prefs)\n     # sort by priority\n     _langPrefsRegistry[kind].sort(\n-        key=operator.itemgetter(\'priority\'), reverse=True)\n+        key=operator.itemgetter(\'priority\'), reverse=True\n+    )\n \n \n def getLangPrefs(env, kind=\'language\'):\n@@ -98,9 +99,9 @@ def getAccepted(self, request, kind=\'content-type\'):\n         http_accepts = request.get(header_name, \'\')\n \n         if (\n-            user_accepts and\n-            http_accepts and\n-            user_accepts == request.cookies.get(\'custom_name\')\n+            user_accepts\n+            and http_accepts\n+            and user_accepts == request.cookies.get(\'custom_name\')\n         ):\n             user_accepts = [a.strip() for a in user_accepts.split(\',\')]\n             http_accepts = [a.strip() for a in http_accepts.split(\',\')]\n@@ -194,26 +195,16 @@ def setCookieLanguage(request, lang, REQUEST=None):\n # higher number = higher priority\n # if a acceptor returns a false value (() or None) then the next acceptor\n # in the chain is queried\n+registerLangPrefsMethod({\'klass\': BrowserAccept, \'priority\': 10}, \'language\')\n+registerLangPrefsMethod({\'klass\': CookieAccept, \'priority\': 40}, \'language\')\n registerLangPrefsMethod(\n-    {\'klass\': BrowserAccept, \'priority\': 10},\n-    \'language\'\n-)\n-registerLangPrefsMethod(\n-    {\'klass\': CookieAccept, \'priority\': 40},\n-    \'language\'\n-)\n-registerLangPrefsMethod(\n-    {\'klass\': BrowserAccept, \'priority\': 10},\n-    \'content-type\'\n+    {\'klass\': BrowserAccept, \'priority\': 10}, \'content-type\'\n )\n \n \n class Negotiator(object):\n \n-    tests = {\n-        \'content-type\': type_accepted,\n-        \'language\': lang_accepted,\n-    }\n+    tests = {\'content-type\': type_accepted, \'language\': lang_accepted}\n \n     def negotiate(self, choices, request, kind=\'content-type\'):\n         choices = tuple(choices)\ndiff --git a/plone/i18n/normalizer/adapters.py b/plone/i18n/normalizer/adapters.py\nindex 58960ec..14010ce 100644\n--- a/plone/i18n/normalizer/adapters.py\n+++ b/plone/i18n/normalizer/adapters.py\n@@ -51,7 +51,7 @@ class UserPreferredURLNormalizer(object):\n     """\n \n     def __init__(self, context):\n-        self.context = context # the context must be the request\n+        self.context = context  # the context must be the request\n \n     def normalize(self, text):\n         """Returns a normalized Unicode string."""\ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 0bc232b..09c8ca3 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -9,7 +9,9 @@\n # On OpenBSD string.whitespace has a non-standard implementation\n # See http://dev.plone.org/plone/ticket/4704 for details\n whitespace = \'\'.join([c for c in string.whitespace if ord(c) < 128])\n-allowed = string.ascii_letters + string.digits + string.punctuation + whitespace\n+allowed = (\n+    string.ascii_letters + string.digits + string.punctuation + whitespace\n+)\n \n CHAR = {}\n NULLMAP = [\'\' * 0x100]\n@@ -68,13 +70,15 @@ def baseNormalize(text):\n             ordinal = ord(ch)\n             if ordinal < UNIDECODE_LIMIT:\n                 h = ordinal >> 8\n-                l = ordinal & 0xff\n+                l = ordinal & 0xFF\n \n                 c = CHAR.get(h, None)\n \n                 if c == None:\n                     try:\n-                        mod = __import__(\'unidecode.x%02x\'%(h), [], [], [\'data\'])\n+                        mod = __import__(\n+                            \'unidecode.x%02x\' % (h), [], [], [\'data\']\n+                        )\n                     except ImportError:\n                         CHAR[h] = NULLMAP\n                         res.append(\'\')\n@@ -83,12 +87,12 @@ def baseNormalize(text):\n                     CHAR[h] = mod.data\n \n                     try:\n-                        res.append( mod.data[l] )\n+                        res.append(mod.data[l])\n                     except IndexError:\n                         res.append(\'\')\n                 else:\n                     try:\n-                        res.append( c[l] )\n+                        res.append(c[l])\n                     except IndexError:\n                         res.append(\'\')\n \ndiff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py\nindex 893e104..c1bfd10 100644\n--- a/plone/i18n/normalizer/bg.py\n+++ b/plone/i18n/normalizer/bg.py\n@@ -6,17 +6,68 @@\n \n \n # Bulgarian character mapping\n-mapping = {1040: \'A\', 1041: \'B\', 1042: \'V\', 1043: \'G\', 1044: \'D\', 1045: \'E\',\n-           1046: \'ZH\', 1047: \'Z\', 1048: \'I\', 1049: \'Y\', 1050: \'K\', 1051: \'L\',\n-           1052: \'M\', 1053: \'N\', 1054: \'O\', 1055: \'P\', 1056: \'R\', 1057: \'S\',\n-           1058: \'T\', 1059: \'U\', 1060: \'F\', 1061: \'H\', 1062: \'TS\', 1063: \'CH\',\n-           1064: \'SH\', 1065: \'SHT\', 1066: \'A\', 1068: \'Y\', 1070: \'YU\',\n-           1071: \'YA\', 1072: \'a\', 1073: \'b\', 1074: \'v\', 1075: \'g\', 1076: \'d\',\n-           1077: \'e\', 1078: \'zh\', 1079: \'z\', 1080: \'i\', 1081: \'y\', 1082: \'k\',\n-           1083: \'l\', 1084: \'m\', 1085: \'n\', 1086: \'o\', 1087: \'p\', 1088: \'r\',\n-           1089: \'s\', 1090: \'t\', 1091: \'u\', 1092: \'f\', 1093: \'h\', 1094: \'ts\',\n-           1095: \'ch\', 1096: \'sh\', 1097: \'sht\', 1098: \'a\', 1100: \'y\',\n-           1102: \'yu\', 1103: \'ya\'}\n+mapping = {\n+    1040: \'A\',\n+    1041: \'B\',\n+    1042: \'V\',\n+    1043: \'G\',\n+    1044: \'D\',\n+    1045: \'E\',\n+    1046: \'ZH\',\n+    1047: \'Z\',\n+    1048: \'I\',\n+    1049: \'Y\',\n+    1050: \'K\',\n+    1051: \'L\',\n+    1052: \'M\',\n+    1053: \'N\',\n+    1054: \'O\',\n+    1055: \'P\',\n+    1056: \'R\',\n+    1057: \'S\',\n+    1058: \'T\',\n+    1059: \'U\',\n+    1060: \'F\',\n+    1061: \'H\',\n+    1062: \'TS\',\n+    1063: \'CH\',\n+    1064: \'SH\',\n+    1065: \'SHT\',\n+    1066: \'A\',\n+    1068: \'Y\',\n+    1070: \'YU\',\n+    1071: \'YA\',\n+    1072: \'a\',\n+    1073: \'b\',\n+    1074: \'v\',\n+    1075: \'g\',\n+    1076: \'d\',\n+    1077: \'e\',\n+    1078: \'zh\',\n+    1079: \'z\',\n+    1080: \'i\',\n+    1081: \'y\',\n+    1082: \'k\',\n+    1083: \'l\',\n+    1084: \'m\',\n+    1085: \'n\',\n+    1086: \'o\',\n+    1087: \'p\',\n+    1088: \'r\',\n+    1089: \'s\',\n+    1090: \'t\',\n+    1091: \'u\',\n+    1092: \'f\',\n+    1093: \'h\',\n+    1094: \'ts\',\n+    1095: \'ch\',\n+    1096: \'sh\',\n+    1097: \'sht\',\n+    1098: \'a\',\n+    1100: \'y\',\n+    1102: \'yu\',\n+    1103: \'ya\',\n+}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py\nindex 6042264..43c87a8 100644\n--- a/plone/i18n/normalizer/de.py\n+++ b/plone/i18n/normalizer/de.py\n@@ -33,7 +33,7 @@\n     8216: \'-\',\n     8211: \'-\',\n     167: \'-\',\n-    8364: \'euro\'\n+    8364: \'euro\',\n }\n \n \ndiff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py\nindex 3f97ea6..b280419 100644\n--- a/plone/i18n/normalizer/el.py\n+++ b/plone/i18n/normalizer/el.py\n@@ -7,16 +7,75 @@\n \n # Greek character mapping\n mapping = {\n-    902: \'A\', 904: \'E\', 905: \'H\', 906: \'I\', 908: \'O\', 910: \'Y\', 911: \'O\',\n-    912: \'i\', 913: \'A\', 914: \'B\', 915: \'G\', 916: \'D\', 917: \'E\', 918: \'Z\',\n-    919: \'I\', 920: \'Th\', 921: \'I\', 922: \'K\', 923: \'L\', 924: \'M\', 925: \'N\',\n-    926: \'Ks\', 927: \'O\', 928: \'P\', 929: \'R\', 931: \'S\', 932: \'T\', 933: \'Y\',\n-    934: \'F\', 935: \'Ch\', 936: \'Ps\', 937: \'O\', 938: \'I\', 939: \'Y\', 940: \'a\',\n-    941: \'e\', 942: \'i\', 943: \'i\', 944: \'y\', 945: \'a\', 946: \'b\', 947: \'g\',\n-    948: \'d\', 949: \'e\', 950: \'z\', 951: \'i\', 952: \'th\', 953: \'i\', 954: \'k\',\n-    955: \'l\', 956: \'m\', 957: \'n\', 958: \'ks\', 959: \'o\', 960: \'p\', 961: \'r\',\n-    962: \'s\', 963: \'s\', 964: \'t\', 965: \'y\', 966: \'f\', 967: \'ch\', 968: \'ps\',\n-    969: \'o\', 970: \'i\', 971: \'y\', 972: \'o\', 973: \'y\', 974: \'o\',\n+    902: \'A\',\n+    904: \'E\',\n+    905: \'H\',\n+    906: \'I\',\n+    908: \'O\',\n+    910: \'Y\',\n+    911: \'O\',\n+    912: \'i\',\n+    913: \'A\',\n+    914: \'B\',\n+    915: \'G\',\n+    916: \'D\',\n+    917: \'E\',\n+    918: \'Z\',\n+    919: \'I\',\n+    920: \'Th\',\n+    921: \'I\',\n+    922: \'K\',\n+    923: \'L\',\n+    924: \'M\',\n+    925: \'N\',\n+    926: \'Ks\',\n+    927: \'O\',\n+    928: \'P\',\n+    929: \'R\',\n+    931: \'S\',\n+    932: \'T\',\n+    933: \'Y\',\n+    934: \'F\',\n+    935: \'Ch\',\n+    936: \'Ps\',\n+    937: \'O\',\n+    938: \'I\',\n+    939: \'Y\',\n+    940: \'a\',\n+    941: \'e\',\n+    942: \'i\',\n+    943: \'i\',\n+    944: \'y\',\n+    945: \'a\',\n+    946: \'b\',\n+    947: \'g\',\n+    948: \'d\',\n+    949: \'e\',\n+    950: \'z\',\n+    951: \'i\',\n+    952: \'th\',\n+    953: \'i\',\n+    954: \'k\',\n+    955: \'l\',\n+    956: \'m\',\n+    957: \'n\',\n+    958: \'ks\',\n+    959: \'o\',\n+    960: \'p\',\n+    961: \'r\',\n+    962: \'s\',\n+    963: \'s\',\n+    964: \'t\',\n+    965: \'y\',\n+    966: \'f\',\n+    967: \'ch\',\n+    968: \'ps\',\n+    969: \'o\',\n+    970: \'i\',\n+    971: \'y\',\n+    972: \'o\',\n+    973: \'y\',\n+    974: \'o\',\n }\n \n \ndiff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py\nindex fefa3f4..9ccf4c1 100644\n--- a/plone/i18n/normalizer/es.py\n+++ b/plone/i18n/normalizer/es.py\n@@ -7,18 +7,29 @@\n \n # Spanish character mapping\n mapping = {\n-    192: u\'A\', 193: u\'A\',\n-    200: u\'E\', 201: u\'E\',\n-    204: u\'I\', 205: u\'I\',\n-    210: u\'O\', 211: u\'O\',\n-    217: u\'U\', 218: u\'U\', 220: u\'U\',\n+    192: u\'A\',\n+    193: u\'A\',\n+    200: u\'E\',\n+    201: u\'E\',\n+    204: u\'I\',\n+    205: u\'I\',\n+    210: u\'O\',\n+    211: u\'O\',\n+    217: u\'U\',\n+    218: u\'U\',\n+    220: u\'U\',\n     209: u\'N\',\n     199: u\'C\',\n-    224: u\'a\', 225: u\'a\',\n-    232: u\'e\', 233: u\'e\',\n-    236: u\'i\', 237: u\'i\',\n-    242: u\'o\', 243: u\'o\',\n-    249: u\'u\', 250: u\'u\',\n+    224: u\'a\',\n+    225: u\'a\',\n+    232: u\'e\',\n+    233: u\'e\',\n+    236: u\'i\',\n+    237: u\'i\',\n+    242: u\'o\',\n+    243: u\'o\',\n+    249: u\'u\',\n+    250: u\'u\',\n     241: u\'n\',\n     231: u\'c\',\n }\ndiff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py\nindex ef3caa3..006a385 100644\n--- a/plone/i18n/normalizer/fr.py\n+++ b/plone/i18n/normalizer/fr.py\n@@ -6,9 +6,7 @@\n \n \n # French character mapping\n-mapping = {\n-    339: \'oe\'\n-}\n+mapping = {339: \'oe\'}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/pl.py b/plone/i18n/normalizer/pl.py\nindex 73695ad..b5c72d1 100644\n--- a/plone/i18n/normalizer/pl.py\n+++ b/plone/i18n/normalizer/pl.py\n@@ -5,9 +5,7 @@\n \n \n # Polish character mapping\n-mapping = {\n-    321: \'L\', 322: \'l\',\n-}\n+mapping = {321: \'L\', 322: \'l\'}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/pt.py b/plone/i18n/normalizer/pt.py\nindex 851202c..14006d0 100644\n--- a/plone/i18n/normalizer/pt.py\n+++ b/plone/i18n/normalizer/pt.py\n@@ -6,17 +6,31 @@\n \n # Portuguese character mapping\n mapping = {\n-    192: u\'A\', 193: u\'A\', 194: u\'A\', 195: u\'A\',\n-    201: u\'E\', 202: u\'E\',\n+    192: u\'A\',\n+    193: u\'A\',\n+    194: u\'A\',\n+    195: u\'A\',\n+    201: u\'E\',\n+    202: u\'E\',\n     205: u\'I\',\n-    211: u\'O\', 212: u\'O\', 213: u\'O\',\n-    218: u\'U\', 220: u\'U\',\n+    211: u\'O\',\n+    212: u\'O\',\n+    213: u\'O\',\n+    218: u\'U\',\n+    220: u\'U\',\n     199: u\'C\',\n-    224: u\'a\', 225: u\'a\', 226: u\'a\', 227: u\'a\',\n-    233: u\'e\', 234: u\'e\',\n+    224: u\'a\',\n+    225: u\'a\',\n+    226: u\'a\',\n+    227: u\'a\',\n+    233: u\'e\',\n+    234: u\'e\',\n     237: u\'i\',\n-    243: u\'o\', 244: u\'o\', 245: u\'o\',\n-    250: u\'u\', 252: u\'u\',\n+    243: u\'o\',\n+    244: u\'o\',\n+    245: u\'o\',\n+    250: u\'u\',\n+    252: u\'u\',\n     231: u\'c\',\n }\n \ndiff --git a/plone/i18n/normalizer/ru.py b/plone/i18n/normalizer/ru.py\nindex 74cac2a..1d35782 100644\n--- a/plone/i18n/normalizer/ru.py\n+++ b/plone/i18n/normalizer/ru.py\n@@ -6,23 +6,72 @@\n \n # Russian character mapping\n mapping = {\n-    1081: \'i\', 1049: \'I\', 1094: \'c\', 1062: \'C\',\n-    1091: \'u\', 1059: \'U\', 1082: \'k\', 1050: \'K\',\n-    1077: \'e\', 1045: \'E\', 1085: \'n\', 1053: \'N\',\n-    1075: \'g\', 1043: \'G\', 1096: \'sh\', 1064: \'SH\',\n-    1097: \'sch\', 1065: \'SCH\', 1079: \'z\', 1047: \'Z\',\n-    1093: \'h\', 1061: \'H\', 1098: \'\', 1066: \'\',\n-    1092: \'f\', 1060: \'F\', 1099: \'y\', 1067: \'Y\',\n-    1074: \'v\', 1042: \'V\', 1072: \'a\', 1040: \'A\',\n-    1087: \'p\', 1055: \'P\', 1088: \'r\', 1056: \'R\',\n-    1086: \'o\', 1054: \'O\', 1083: \'l\', 1051: \'L\',\n-    1076: \'d\', 1044: \'D\', 1078: \'zh\', 1046: \'ZH\',\n-    1101: \'e\', 1069: \'E\', 1103: \'ya\', 1071: \'YA\',\n-    1095: \'ch\', 1063: \'CH\', 1089: \'s\', 1057: \'S\',\n-    1084: \'m\', 1052: \'M\', 1080: \'i\', 1048: \'I\',\n-    1090: \'t\', 1058: \'T\', 1100: \'\', 1068: \'\',\n-    1073: \'b\', 1041: \'B\', 1102: \'yu\', 1070: \'YU\',\n-    1105: \'yo\', 1025: \'YO\'\n+    1081: \'i\',\n+    1049: \'I\',\n+    1094: \'c\',\n+    1062: \'C\',\n+    1091: \'u\',\n+    1059: \'U\',\n+    1082: \'k\',\n+    1050: \'K\',\n+    1077: \'e\',\n+    1045: \'E\',\n+    1085: \'n\',\n+    1053: \'N\',\n+    1075: \'g\',\n+    1043: \'G\',\n+    1096: \'sh\',\n+    1064: \'SH\',\n+    1097: \'sch\',\n+    1065: \'SCH\',\n+    1079: \'z\',\n+    1047: \'Z\',\n+    1093: \'h\',\n+    1061: \'H\',\n+    1098: \'\',\n+    1066: \'\',\n+    1092: \'f\',\n+    1060: \'F\',\n+    1099: \'y\',\n+    1067: \'Y\',\n+    1074: \'v\',\n+    1042: \'V\',\n+    1072: \'a\',\n+    1040: \'A\',\n+    1087: \'p\',\n+    1055: \'P\',\n+    1088: \'r\',\n+    1056: \'R\',\n+    1086: \'o\',\n+    1054: \'O\',\n+    1083: \'l\',\n+    1051: \'L\',\n+    1076: \'d\',\n+    1044: \'D\',\n+    1078: \'zh\',\n+    1046: \'ZH\',\n+    1101: \'e\',\n+    1069: \'E\',\n+    1103: \'ya\',\n+    1071: \'YA\',\n+    1095: \'ch\',\n+    1063: \'CH\',\n+    1089: \'s\',\n+    1057: \'S\',\n+    1084: \'m\',\n+    1052: \'M\',\n+    1080: \'i\',\n+    1048: \'I\',\n+    1090: \'t\',\n+    1058: \'T\',\n+    1100: \'\',\n+    1068: \'\',\n+    1073: \'b\',\n+    1041: \'B\',\n+    1102: \'yu\',\n+    1070: \'YU\',\n+    1105: \'yo\',\n+    1025: \'YO\',\n }\n \n \ndiff --git a/plone/i18n/normalizer/tests/base.py b/plone/i18n/normalizer/tests/base.py\nindex 690da12..aaebc04 100644\n--- a/plone/i18n/normalizer/tests/base.py\n+++ b/plone/i18n/normalizer/tests/base.py\n@@ -4,18 +4,23 @@\n \n def setUp(self=None):\n     from zope.component.testing import setUp\n+\n     setUp()\n \n     import zope.component\n-    XMLConfig(\'meta.zcml\', zope.component)()\n+\n+    XMLConfig("meta.zcml", zope.component)()\n \n     import plone.i18n.normalizer\n-    XMLConfig(\'configure.zcml\', plone.i18n.normalizer)()\n+\n+    XMLConfig("configure.zcml", plone.i18n.normalizer)()\n \n     from zope.publisher.browser import BrowserLanguages\n+\n     zope.component.provideAdapter(BrowserLanguages)\n \n \n def tearDown(self=None):\n     from zope.component.testing import tearDown\n+\n     tearDown()\ndiff --git a/plone/i18n/normalizer/tests/test_adapters.py b/plone/i18n/normalizer/tests/test_adapters.py\nindex 63eca3d..d15aaca 100644\n--- a/plone/i18n/normalizer/tests/test_adapters.py\n+++ b/plone/i18n/normalizer/tests/test_adapters.py\n@@ -4,13 +4,14 @@\n \n \n class BaseTestCase(object):\n-\n     def setUp(self):\n         from .base import setUp\n+\n         setUp()\n \n     def tearDown(self):\n         from .base import tearDown\n+\n         tearDown()\n \n     def _getTargetClass(self):\n@@ -18,82 +19,81 @@ def _getTargetClass(self):\n \n     def _makeOne(self, lang):\n         from zope.publisher.browser import TestRequest\n+\n         request = TestRequest(environ=dict(HTTP_ACCEPT_LANGUAGE=lang))\n         return self._getTargetClass()(request)\n \n \n class TestFileNameNormalizer(BaseTestCase, unittest.TestCase):\n-\n     def _getTargetClass(self):\n-        from plone.i18n.normalizer.adapters import \\\n-            UserPreferredFileNameNormalizer\n+        from plone.i18n.normalizer.adapters import (\n+            UserPreferredFileNameNormalizer,\n+        )\n+\n         return UserPreferredFileNameNormalizer\n \n     def test_german(self):\n-        norm = self._makeOne(\'de\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text with umlaeut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n+        )\n \n     def test_german_country(self):\n-        norm = self._makeOne(\'de-DE\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de-DE")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n+        )\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text with umlaeut\')\n     def test_english(self):\n-        norm = self._makeOne(\'en\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("en")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text with umlaut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaut"\n+        )\n \n     def test_spanish(self):\n-        norm = self._makeOne(\'es\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          \'simpleandsafe\')\n-        self.assertEquals(norm.normalize(u\'text with e\xc3\xb1e\'),\n-                          u\'text with ene\')\n+        norm = self._makeOne("es")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), "simpleandsafe")\n+        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text with ene")\n \n \n class TestUrlNormalizer(BaseTestCase, unittest.TestCase):\n-\n     def _getTargetClass(self):\n         from plone.i18n.normalizer.adapters import UserPreferredURLNormalizer\n+\n         return UserPreferredURLNormalizer\n \n     def test_german(self):\n-        norm = self._makeOne(\'de\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text-with-umlaeut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n+        )\n \n     def test_german_country(self):\n-        norm = self._makeOne(\'de-DE\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("de-DE")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text-with-umlaeut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n+        )\n \n     def test_english(self):\n-        norm = self._makeOne(\'en\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("en")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with uml\xc3\xa4ut\'),\n-                          u\'text-with-umlaut\')\n+        self.assertEqual(\n+            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaut"\n+        )\n \n     def test_spanish(self):\n-        norm = self._makeOne(\'es\')\n-        self.assertEquals(norm.normalize(u\'simpleandsafe\'),\n-                          u\'simpleandsafe\')\n+        norm = self._makeOne("es")\n+        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEquals(norm.normalize(u\'text with e\xc3\xb1e\'),\n-                          u\'text-with-ene\')\n+        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text-with-ene")\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 7873847..93b0f6c 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -15,7 +15,7 @@\n \n def utf8unicode(value):\n     if six.PY2:\n-        return unicode(value, \'utf-8\')\n+        return unicode(value, "utf-8")\n     return value\n \n \n@@ -290,20 +290,24 @@ def testLocaleAwareURLNormalizer():\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        DocTestSuite(\'plone.i18n.normalizer\'),\n-        DocTestSuite(\'plone.i18n.normalizer.base\'),\n-        DocTestSuite(\'plone.i18n.normalizer.de\'),\n-        DocTestSuite(\'plone.i18n.normalizer.el\'),\n-        DocTestSuite(\'plone.i18n.normalizer.fr\'),\n-        DocTestSuite(\'plone.i18n.normalizer.ja\'),\n-        DocTestSuite(\'plone.i18n.normalizer.pl\'),\n-        DocTestSuite(\'plone.i18n.normalizer.ru\'),\n-        DocTestSuite(\'plone.i18n.normalizer.tr\'),\n-        DocTestSuite(\'plone.i18n.normalizer.bg\'),\n-        DocTestSuite(\'plone.i18n.normalizer.uk\'),\n-        DocTestSuite(\'plone.i18n.normalizer.es\'),\n-        DocTestSuite(setUp=configurationSetUp,\n-                     tearDown=tearDown,\n-                     optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE),\n-        ))\n+    return unittest.TestSuite(\n+        (\n+            DocTestSuite("plone.i18n.normalizer"),\n+            DocTestSuite("plone.i18n.normalizer.base"),\n+            DocTestSuite("plone.i18n.normalizer.de"),\n+            DocTestSuite("plone.i18n.normalizer.el"),\n+            DocTestSuite("plone.i18n.normalizer.fr"),\n+            DocTestSuite("plone.i18n.normalizer.ja"),\n+            DocTestSuite("plone.i18n.normalizer.pl"),\n+            DocTestSuite("plone.i18n.normalizer.ru"),\n+            DocTestSuite("plone.i18n.normalizer.tr"),\n+            DocTestSuite("plone.i18n.normalizer.bg"),\n+            DocTestSuite("plone.i18n.normalizer.uk"),\n+            DocTestSuite("plone.i18n.normalizer.es"),\n+            DocTestSuite(\n+                setUp=configurationSetUp,\n+                tearDown=tearDown,\n+                optionflags=doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE,\n+            ),\n+        )\n+    )\ndiff --git a/plone/i18n/normalizer/tr.py b/plone/i18n/normalizer/tr.py\nindex 0cc81b8..b9310ef 100644\n--- a/plone/i18n/normalizer/tr.py\n+++ b/plone/i18n/normalizer/tr.py\n@@ -6,9 +6,7 @@\n \n \n # Turkish character mapping\n-mapping = {\n-    286: \'G\', 287: \'g\', 304: \'I\', 305: \'i\', 350: \'S\', 351: \'s\'\n-}\n+mapping = {286: \'G\', 287: \'g\', 304: \'I\', 305: \'i\', 350: \'S\', 351: \'s\'}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/uk.py b/plone/i18n/normalizer/uk.py\nindex 1d395b0..3ed6dfc 100644\n--- a/plone/i18n/normalizer/uk.py\n+++ b/plone/i18n/normalizer/uk.py\n@@ -6,39 +6,72 @@\n \n # Ukrainian character mapping (according to BGN/PCGN romanization system)\n mapping = {\n-    0x0410: u\'A\', 0x0430: u\'a\',\n-    0x0411: u\'B\', 0x0431: u\'b\',\n-    0x0412: u\'V\', 0x0432: u\'v\',\n-    0x0413: u\'H\', 0x0433: u\'h\',\n-    0x0490: u\'G\', 0x0491: u\'g\',\n-    0x0414: u\'D\', 0x0434: u\'d\',\n-    0x0415: u\'E\', 0x0435: u\'e\',\n-    0x0404: u\'YE\', 0x0454: u\'ye\',\n-    0x0416: u\'ZH\', 0x0436: u\'zh\',\n-    0x0417: u\'Z\', 0x0437: u\'z\',\n-    0x0418: u\'Y\', 0x0438: u\'y\',\n-    0x0406: u\'I\', 0x0456: u\'i\',\n-    0x0407: u\'YI\', 0x0457: u\'yi\',\n-    0x0419: u\'Y\', 0x0439: u\'y\',\n-    0x041a: u\'K\', 0x043a: u\'k\',\n-    0x041b: u\'L\', 0x043b: u\'l\',\n-    0x041c: u\'M\', 0x043c: u\'m\',\n-    0x041d: u\'N\', 0x043d: u\'n\',\n-    0x041e: u\'O\', 0x043e: u\'o\',\n-    0x041f: u\'P\', 0x043f: u\'p\',\n-    0x0420: u\'R\', 0x0440: u\'r\',\n-    0x0421: u\'S\', 0x0441: u\'s\',\n-    0x0422: u\'T\', 0x0442: u\'t\',\n-    0x0423: u\'U\', 0x0443: u\'u\',\n-    0x0424: u\'F\', 0x0444: u\'f\',\n-    0x0425: u\'KH\', 0x0445: u\'kh\',\n-    0x0426: u\'TS\', 0x0446: u\'ts\',\n-    0x0427: u\'CH\', 0x0447: u\'ch\',\n-    0x0428: u\'SH\', 0x0448: u\'sh\',\n-    0x0429: u\'SHCH\', 0x0449: u\'shch\',\n-    0x042c: u\'\', 0x044c: u\'\',\n-    0x042e: u\'YU\', 0x044e: u\'yu\',\n-    0x042f: u\'YA\', 0x044f: u\'ya\',\n+    0x0410: u\'A\',\n+    0x0430: u\'a\',\n+    0x0411: u\'B\',\n+    0x0431: u\'b\',\n+    0x0412: u\'V\',\n+    0x0432: u\'v\',\n+    0x0413: u\'H\',\n+    0x0433: u\'h\',\n+    0x0490: u\'G\',\n+    0x0491: u\'g\',\n+    0x0414: u\'D\',\n+    0x0434: u\'d\',\n+    0x0415: u\'E\',\n+    0x0435: u\'e\',\n+    0x0404: u\'YE\',\n+    0x0454: u\'ye\',\n+    0x0416: u\'ZH\',\n+    0x0436: u\'zh\',\n+    0x0417: u\'Z\',\n+    0x0437: u\'z\',\n+    0x0418: u\'Y\',\n+    0x0438: u\'y\',\n+    0x0406: u\'I\',\n+    0x0456: u\'i\',\n+    0x0407: u\'YI\',\n+    0x0457: u\'yi\',\n+    0x0419: u\'Y\',\n+    0x0439: u\'y\',\n+    0x041A: u\'K\',\n+    0x043A: u\'k\',\n+    0x041B: u\'L\',\n+    0x043B: u\'l\',\n+    0x041C: u\'M\',\n+    0x043C: u\'m\',\n+    0x041D: u\'N\',\n+    0x043D: u\'n\',\n+    0x041E: u\'O\',\n+    0x043E: u\'o\',\n+    0x041F: u\'P\',\n+    0x043F: u\'p\',\n+    0x0420: u\'R\',\n+    0x0440: u\'r\',\n+    0x0421: u\'S\',\n+    0x0441: u\'s\',\n+    0x0422: u\'T\',\n+    0x0442: u\'t\',\n+    0x0423: u\'U\',\n+    0x0443: u\'u\',\n+    0x0424: u\'F\',\n+    0x0444: u\'f\',\n+    0x0425: u\'KH\',\n+    0x0445: u\'kh\',\n+    0x0426: u\'TS\',\n+    0x0446: u\'ts\',\n+    0x0427: u\'CH\',\n+    0x0447: u\'ch\',\n+    0x0428: u\'SH\',\n+    0x0448: u\'sh\',\n+    0x0429: u\'SHCH\',\n+    0x0449: u\'shch\',\n+    0x042C: u\'\',\n+    0x044C: u\'\',\n+    0x042E: u\'YU\',\n+    0x044E: u\'yu\',\n+    0x042F: u\'YA\',\n+    0x044F: u\'ya\',\n }\n \n \ndiff --git a/plone/i18n/tests/base.py b/plone/i18n/tests/base.py\nindex 7ed13e5..f34ee74 100644\n--- a/plone/i18n/tests/base.py\n+++ b/plone/i18n/tests/base.py\n@@ -8,23 +8,28 @@\n \n class PloneI18nLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE, )\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.i18n\n+\n         # Needed to have ILanguage adapter for dx\n         import plone.app.multilingual\n+\n         self.loadZCML(package=plone.i18n)\n         self.loadZCML(package=plone.app.multilingual)\n \n+\n PLT_FIXTURE = PloneI18nLayer()\n PLT_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PLT_FIXTURE, ), name=\'Plonei18nTestCase:Functional\')\n+    bases=(PLT_FIXTURE,), name=\'Plonei18nTestCase:Functional\'\n+)\n \n \n class TestCase(bbb.PloneTestCase):\n     """Simple test case\n     """\n+\n     layer = PLT_FUNCTIONAL_TESTING\n \n \ndiff --git a/plone/i18n/tests/test_languageutility.py b/plone/i18n/tests/test_languageutility.py\nindex 889c87d..1c59527 100644\n--- a/plone/i18n/tests/test_languageutility.py\n+++ b/plone/i18n/tests/test_languageutility.py\n@@ -13,81 +13,90 @@\n \n \n class TestLanguageTool(base.TestCase):\n-\n     def afterSetUp(self):\n-        self.ltool = getToolByName(self.portal, \'portal_languages\')\n-        setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n+        self.ltool = getToolByName(self.portal, "portal_languages")\n+        setRoles(self.layer["portal"], TEST_USER_ID, ["Contributor"])\n         self.settings = getUtility(IRegistry).forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\')\n+            ILanguageSchema, prefix="plone"\n+        )\n \n     def testLanguageSettings(self):\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.default_language = defaultLanguage\n         self.settings.available_languages = supportedLanguages\n         self.settings.use_combined_language_codes = False\n-        self.failUnless(self.ltool.getDefaultLanguage() == defaultLanguage)\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n+        self.assertEqual(self.ltool.getDefaultLanguage(), defaultLanguage)\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n \n     def testSupportedLanguages(self):\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.settings.default_language = defaultLanguage\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n \n         self.ltool.removeSupportedLanguages(supportedLanguages)\n-        self.failUnless(self.ltool.getSupportedLanguages() == [])\n+        self.assertEqual(self.ltool.getSupportedLanguages(), [])\n \n         for lang in supportedLanguages:\n             self.ltool.addSupportedLanguage(lang)\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n \n     def testDefaultLanguage(self):\n-        supportedLanguages = [\'de\', \'no\']\n+        supportedLanguages = ["de", "no"]\n         self.settings.available_languages = supportedLanguages\n-        self.ltool.setDefaultLanguage(\'no\')\n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n-        self.failUnless(self.ltool.getDefaultLanguage() == \'no\')\n+        self.ltool.setDefaultLanguage("no")\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n+        self.assertEqual(self.ltool.getDefaultLanguage(), "no")\n \n         # default not in supported languages, should set to first supported\n-        self.ltool.setDefaultLanguage(\'nl\')\n+        self.ltool.setDefaultLanguage("nl")\n \n-        self.failUnless(self.ltool.getSupportedLanguages() == supportedLanguages)\n-        self.failUnless(self.ltool.getDefaultLanguage() == \'de\')\n+        self.assertEqual(\n+            self.ltool.getSupportedLanguages(), supportedLanguages\n+        )\n+        self.assertEqual(self.ltool.getDefaultLanguage(), "de")\n \n     def testAvailableLanguage(self):\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.ltool.setDefaultLanguage(defaultLanguage)\n         availableLanguages = self.ltool.getAvailableLanguageInformation()\n         for lang in availableLanguages:\n             if lang in supportedLanguages:\n-                self.failUnless(availableLanguages[lang][\'selected\'] == True)\n+                self.assertTrue(availableLanguages[lang]["selected"])\n \n     def testGetContentLanguage(self):\n         # tests for issue #11263\n-        defaultLanguage = \'de\'\n-        supportedLanguages = [\'en\', \'de\', \'no\']\n+        defaultLanguage = "de"\n+        supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.ltool.setDefaultLanguage(defaultLanguage)\n-        request = self.layer[\'request\']\n-        request.path = [\'doc\', ]\n-        self.layer[\'portal\'].invokeFactory(\'Document\', \'doc\')\n-        content = self.layer[\'portal\'][\'doc\']\n-        content.setLanguage(\'de\')\n+        request = self.layer["request"]\n+        request.path = ["doc"]\n+        self.layer["portal"].invokeFactory("Document", "doc")\n+        content = self.layer["portal"]["doc"]\n+        content.setLanguage("de")\n         alsoProvides(content, IDublinCore)\n         self.ltool.getContentLanguage(request)\n-        self.failUnless(self.ltool.getContentLanguage(request) == \'de\')\n-        request.path = [\'view\', \'foo.jpg\', \'doc\', ]\n-        self.failUnless(self.ltool.getContentLanguage(request) == \'de\')\n-        request.path = [\'foo.jpg\', \'doc\', ]\n-        self.failUnless(self.ltool.getContentLanguage(request) == None)\n-        request.path = [\'foo\', \'portal_catalog\', ]\n-        self.failUnless(self.ltool.getContentLanguage(request) == None)\n+        self.assertEqual(self.ltool.getContentLanguage(request), "de")\n+        request.path = ["view", "foo.jpg", "doc"]\n+        self.assertEqual(self.ltool.getContentLanguage(request), "de")\n+        request.path = ["foo.jpg", "doc"]\n+        self.assertIsNone(self.ltool.getContentLanguage(request))\n+        request.path = ["foo", "portal_catalog"]\n+        self.assertIsNone(self.ltool.getContentLanguage(request))\n \n     def testRegisterInterface(self):\n-        iface = getToolInterface(\'portal_languages\')\n+        iface = getToolInterface("portal_languages")\n         self.assertEqual(iface, ILanguageUtility)\ndiff --git a/plone/i18n/tests/test_negotiation.py b/plone/i18n/tests/test_negotiation.py\nindex 2757143..8b1df54 100644\n--- a/plone/i18n/tests/test_negotiation.py\n+++ b/plone/i18n/tests/test_negotiation.py\n@@ -12,39 +12,39 @@\n \n \n class LanguageNegotiationTestCase(base.FunctionalTestCase):\n-\n     def afterSetUp(self):\n-        self.basic_auth = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        self.basic_auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n         self.portal_path = self.portal.absolute_url(1)\n-        self.tool = getToolByName(self.portal, \'portal_languages\')\n+        self.tool = getToolByName(self.portal, "portal_languages")\n         self.settings = getUtility(IRegistry).forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\')\n+            ILanguageSchema, prefix="plone"\n+        )\n         self.settings.always_show_selector = 1\n         self.settings.set_cookie_always = 1\n \n     def checkLanguage(self, response, language):\n-        self.assertEquals(response.getStatus(), 200)\n-        cookie = response.getCookie(\'I18N_LANGUAGE\')[\'value\']\n-        self.assertEquals(cookie, language)\n+        self.assertEqual(response.getStatus(), 200)\n+        cookie = response.getCookie("I18N_LANGUAGE")["value"]\n+        self.assertEqual(cookie, language)\n \n \n class TestDefaultLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def testLanguageNegotiation(self):\n         # Once PLT is installed only English is allowed as a language\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt"},\n+        )\n         self.checkLanguage(response, "en")\n \n \n class TestNoCombinedLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n         # set some allowed languages and make sure we don\'t use combined\n         # language codes\n-        self.settings.available_languages = [\'en\', \'pt\', \'de\']\n+        self.settings.available_languages = ["en", "pt", "de"]\n         self.settings.use_request_negotiation = 1\n         self.settings.use_combined_language_codes = 0\n         self.settings.display_flags = 0\n@@ -52,216 +52,262 @@ def afterSetUp(self):\n     def testLanguageNegotiation(self):\n \n         # Test simple supported codes\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt"},\n+        )\n         self.checkLanguage(response, "pt")\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'de\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "de"},\n+        )\n         self.checkLanguage(response, "de")\n \n         # Test combined unsupported codes, should fall back\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt-br\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt-br"},\n+        )\n         self.checkLanguage(response, "pt")\n \n \n class TestCombinedLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n-        setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n+        setRoles(self.layer["portal"], TEST_USER_ID, ["Contributor"])\n         # set some allowed languages and make sure we don\'t use combined\n         # language codes\n         self.settings.use_combined_language_codes = True\n-        self.settings.available_languages = [\'en\', \'pt\', \'de\', \'pt-br\']\n+        self.settings.available_languages = ["en", "pt", "de", "pt-br"]\n         self.settings.use_request_negotiation = True\n         self.settings.display_flags = 0\n \n     def testLanguageNegotiation(self):\n \n         # Test simple supported codes\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt"},\n+        )\n         self.checkLanguage(response, "pt")\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'de\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "de"},\n+        )\n         self.checkLanguage(response, "de")\n \n         # Test combined supported codes\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'pt-br\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "pt-br"},\n+        )\n         self.checkLanguage(response, "pt-br")\n \n         # Test combined unsupported codes, should fall back\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_ACCEPT_LANGUAGE\': \'de-de\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_ACCEPT_LANGUAGE": "de-de"},\n+        )\n         self.checkLanguage(response, "de")\n \n \n class TestContentLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n-        setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n-        self.settings.available_languages = [\'en\', \'nl\', \'fr\']\n+        setRoles(self.layer["portal"], TEST_USER_ID, ["Contributor"])\n+        self.settings.available_languages = ["en", "nl", "fr"]\n         self.settings.use_content_negotiation = 1\n         self.settings.display_flags = 0\n         registry = getUtility(IRegistry)\n         # disable cooking of assets because this gives unwanted\n         # sideeffects in the request handling\n-        registry[\'plone.resources.development\'] = True\n+        registry["plone.resources.development"] = True\n \n     def testContentObject(self):\n-        self.layer[\'portal\'].invokeFactory(\'Document\', \'doc\')\n-        doc = self.layer[\'portal\'].doc\n-        ILanguage(doc).set_language(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(doc.getPhysicalPath())\n-        response = self.publish(docpath, self.basic_auth,\n-                                env={\'PATH_INFO\': docpath})\n+        self.layer["portal"].invokeFactory("Document", "doc")\n+        doc = self.layer["portal"].doc\n+        ILanguage(doc).set_language("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(doc.getPhysicalPath())\n+        response = self.publish(\n+            docpath, self.basic_auth, env={"PATH_INFO": docpath}\n+        )\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMPortal(self):\n-        adding = self.app.manage_addProduct[\'SiteAccess\']\n-        adding.manage_addVirtualHostMonster(\'VHM\')\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/" % self.portal.getId()\n-\n-        self.layer[\'portal\'].invokeFactory(\'Folder\', \'sub\')\n-        sub = self.layer[\'portal\'][\'sub\']\n-        sub.setLanguage(\'nl\')\n-        sub.invokeFactory(\'Document\', \'doc\')\n+        adding = self.app.manage_addProduct["SiteAccess"]\n+        adding.manage_addVirtualHostMonster("VHM")\n+        vhmBasePath = (\n+            "/VirtualHostBase/http/example.org:80/{0}/"\n+            "VirtualHostRoot/".format(self.portal.getId())\n+        )\n+        self.layer["portal"].invokeFactory("Folder", "sub")\n+        sub = self.layer["portal"]["sub"]\n+        sub.setLanguage("nl")\n+        sub.invokeFactory("Document", "doc")\n         doc = sub.doc\n-        doc.setLanguage(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(self.portal.portal_url.getRelativeContentPath(doc))\n+        doc.setLanguage("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(self.portal.portal_url.getRelativeContentPath(doc))\n         response = self.publish(vhmBasePath + docpath, self.basic_auth)\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMPortalVHSubpath(self):\n-        adding = self.app.manage_addProduct[\'SiteAccess\']\n-        adding.manage_addVirtualHostMonster(\'VHM\')\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/_vh_one/_vh_two/" % self.portal.getId()\n-\n-        self.layer[\'portal\'].invokeFactory(\'Folder\', \'sub\')\n-        sub = self.layer[\'portal\'][\'sub\']\n-        sub.setLanguage(\'nl\')\n-        sub.invokeFactory(\'Document\', \'doc\')\n+        adding = self.app.manage_addProduct["SiteAccess"]\n+        adding.manage_addVirtualHostMonster("VHM")\n+        vhmBasePath = (\n+            "/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot/"\n+            "_vh_one/_vh_two/".format(self.portal.getId())\n+        )\n+\n+        self.layer["portal"].invokeFactory("Folder", "sub")\n+        sub = self.layer["portal"]["sub"]\n+        sub.setLanguage("nl")\n+        sub.invokeFactory("Document", "doc")\n         doc = sub.doc\n-        doc.setLanguage(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(self.portal.portal_url.getRelativeContentPath(doc))\n+        doc.setLanguage("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(self.portal.portal_url.getRelativeContentPath(doc))\n         response = self.publish(vhmBasePath + docpath, self.basic_auth)\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMFolder(self):\n-        adding = self.app.manage_addProduct[\'SiteAccess\']\n-        adding.manage_addVirtualHostMonster(\'VHM\')\n-\n-        folder_path = \'/\'.join(self.layer[\'portal\'].getPhysicalPath())\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80%s/VirtualHostRoot/" % folder_path\n-        self.layer[\'portal\'].invokeFactory(\'Folder\', \'sub\')\n-        sub = self.layer[\'portal\'][\'sub\']\n-        sub.setLanguage(\'nl\')\n-        sub.invokeFactory(\'Document\', \'doc\')\n+        adding = self.app.manage_addProduct["SiteAccess"]\n+        adding.manage_addVirtualHostMonster("VHM")\n+\n+        folder_path = "/".join(self.layer["portal"].getPhysicalPath())\n+        vhmBasePath = "/VirtualHostBase/http/example.org:80{0}/VirtualHostRoot/".format(\n+            folder_path\n+        )\n+        self.layer["portal"].invokeFactory("Folder", "sub")\n+        sub = self.layer["portal"]["sub"]\n+        sub.setLanguage("nl")\n+        sub.invokeFactory("Document", "doc")\n         doc = sub.doc\n-        doc.setLanguage(\'nl\')\n-        self.failUnlessEqual(doc.Language(), \'nl\')\n-        docpath = \'/\'.join(doc.getPhysicalPath())\n+        doc.setLanguage("nl")\n+        self.assertEqual(doc.Language(), "nl")\n+        docpath = "/".join(doc.getPhysicalPath())\n         docpath = docpath[len(folder_path) + 1:]\n \n-        response = self.publish(vhmBasePath + docpath, self.basic_auth,\n-                                env={\'diazo.off\': "1"})\n+        response = self.publish(\n+            vhmBasePath + docpath, self.basic_auth, env={"diazo.off": "1"}\n+        )\n         self.checkLanguage(response, "nl")\n \n \n class TestCcTLDLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n         # setRoles(self.layer[\'portal\'], TEST_USER_ID, [\'Contributor\'])\n-        self.settings.available_languages = [\'en\', \'nl\', \'fr\']\n+        self.settings.available_languages = ["en", "nl", "fr"]\n         self.settings.use_cctld_negotiation = 1\n         self.settings.display_flags = 0\n \n     def testSimpleHostname(self):\n         # For a simple hostname without ccTLD the canonical language is used\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'localhost\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "localhost"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testIPAddress(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'127.0.0.1\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "127.0.0.1"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testDutchDomain(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.nl\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.nl"}\n+        )\n         self.checkLanguage(response, "nl")\n \n     def testAcceptedLanguages(self):\n         # Brazil uses Portugese, which is not in the accepted languages list\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.br\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.br"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testMultiLingualCountries(self):\n         # Some countries refuse to pick a single language. Belgium\n         # uses both Dutch and French, with a preference for Dutch.\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.be\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.be"}\n+        )\n         self.checkLanguage(response, "nl")\n \n         # If we stop allowing Dutch we should now fall back to French\n-        self.settings.available_languages = [\'en\', \'fr\']\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'plone.be\'})\n+        self.settings.available_languages = ["en", "fr"]\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "plone.be"}\n+        )\n         self.checkLanguage(response, "fr")\n \n \n class TestSubdomainLanguageNegotiation(LanguageNegotiationTestCase):\n-\n     def afterSetUp(self):\n         LanguageNegotiationTestCase.afterSetUp(self)\n-        self.settings.available_languages = [\'en\', \'nl\', \'fr\']\n+        self.settings.available_languages = ["en", "nl", "fr"]\n         self.settings.use_subdomain_negotiation = 1\n         self.settings.display_flags = 0\n \n     def testSimpleHostname(self):\n         # For a simple hostname without ccTLD the canonical language is used\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'localhost\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "localhost"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testIPAddress(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'127.0.0.1\'})\n+        response = self.publish(\n+            self.portal_path, self.basic_auth, env={"HTTP_HOST": "127.0.0.1"}\n+        )\n         self.checkLanguage(response, "en")\n \n     def testDutchDomain(self):\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'nl.plone.org\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "nl.plone.org"},\n+        )\n         self.checkLanguage(response, "nl")\n \n     def testAcceptedLanguages(self):\n         # Brazil uses Portugese, which is not in the accepted languages list\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'br.plone.org\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "br.plone.org"},\n+        )\n         self.checkLanguage(response, "en")\n \n     def testMultiLingualCountries(self):\n         # Some countries refuse to pick a single language. Belgium\n         # uses both Dutch and French, with a preference for Dutch.\n \n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'be.plone.org\'})\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "be.plone.org"},\n+        )\n         self.checkLanguage(response, "nl")\n \n         # If we stop allowing Dutch we should now fall back to French\n-        self.settings.available_languages = [\'en\', \'fr\']\n-        response = self.publish(self.portal_path, self.basic_auth,\n-                                env={\'HTTP_HOST\': \'be.plone.org\'})\n+        self.settings.available_languages = ["en", "fr"]\n+        response = self.publish(\n+            self.portal_path,\n+            self.basic_auth,\n+            env={"HTTP_HOST": "be.plone.org"},\n+        )\n         self.checkLanguage(response, "fr")\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex f43b4db..7b73e5b 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -23,6 +23,7 @@\n \n class LanguageBinding(object):\n     """Helper which holding language infos in request."""\n+\n     security = ClassSecurityInfo()\n     __allow_access_to_unprotected_subobjects__ = 1\n \n@@ -30,7 +31,7 @@ class LanguageBinding(object):\n     LANGUAGE = None\n     LANGUAGE_LIST = []\n \n-    security.declarePublic(\'getLanguageBindings\')\n+    security.declarePublic("getLanguageBindings")\n \n     def getLanguageBindings(self):\n         """Returns the bound languages.\n@@ -41,7 +42,7 @@ def getLanguageBindings(self):\n \n \n def setLanguageBinding(request):\n-    binding = request.get(\'LANGUAGE_TOOL\', None)\n+    binding = request.get("LANGUAGE_TOOL", None)\n     try:\n         settings = getMultiAdapter((getSite(), request), INegotiateLanguage)\n     except:\n@@ -53,13 +54,13 @@ def setLanguageBinding(request):\n         # Create new binding instance\n         binding = LanguageBinding()\n         # Set bindings instance to request here to avoid infinite recursion\n-        request[\'LANGUAGE_TOOL\'] = binding\n+        request["LANGUAGE_TOOL"] = binding\n     # Bind languages\n     binding.LANGUAGE = lang = settings.language\n     binding.DEFAULT_LANGUAGE = settings.default_language\n     binding.LANGUAGE_LIST = list(settings.language_list)\n     # Set LANGUAGE to request\n-    request[\'LANGUAGE\'] = lang\n+    request["LANGUAGE"] = lang\n     return lang\n \n \n@@ -75,31 +76,18 @@ def onRequest(object, event):\n class LanguageUtility(object):\n \n     # resources that must not use language specific URLs\n-    exclude_paths = frozenset((\n-        \'portal_css\',\n-        \'portal_javascripts\',\n-        \'portal_kss\',\n-        \'portal_factory\'\n-    ))\n-\n-    exclude_exts = frozenset((\n-        \'css\',\n-        \'js\',\n-        \'kss\',\n-        \'xml\',\n-        \'gif\',\n-        \'jpg\',\n-        \'png\',\n-        \'jpeg\'\n-    ))\n+    exclude_paths = frozenset(\n+        ("portal_css", "portal_javascripts", "portal_kss", "portal_factory")\n+    )\n+\n+    exclude_exts = frozenset(\n+        ("css", "js", "kss", "xml", "gif", "jpg", "png", "jpeg")\n+    )\n \n     @property\n     def settings(self):\n         registry = getUtility(IRegistry)\n-        return registry.forInterface(\n-            ILanguageSchema,\n-            prefix=\'plone\',\n-        )\n+        return registry.forInterface(ILanguageSchema, prefix="plone")\n \n     # BBB propouses\n     @property\n@@ -124,7 +112,7 @@ def listSupportedLanguages(self):\n         available = self.getAvailableLanguages()\n         for i in self.supported_langs:\n             if available.get(i):\n-                r.append((i, available[i][u\'name\']))\n+                r.append((i, available[i][u"name"]))\n         return r\n \n     def getAvailableLanguages(self):\n@@ -156,14 +144,13 @@ def listAvailableLanguageInformation(self):\n         new_langs = []\n         for lang in langs:\n             # add language-code to dict\n-            langs[lang][u\'code\'] = lang\n+            langs[lang][u"code"] = lang\n             # flatten outer dict to list to make it sortable\n             new_langs.append(langs[lang])\n         new_langs.sort(\n-            lambda x, y:\n-            cmp(\n-                x.get(u\'native\', x.get(u\'name\')),\n-                y.get(u\'native\', y.get(u\'name\'))\n+            lambda x, y: cmp(\n+                x.get(u"native", x.get(u"name")),\n+                y.get(u"native", y.get(u"name")),\n             )\n         )\n         return new_langs\n@@ -177,11 +164,11 @@ def getAvailableLanguageInformation(self):\n             languages = util.getLanguages()\n \n         for lang in languages:\n-            languages[lang][\'code\'] = lang\n+            languages[lang]["code"] = lang\n             if lang in self.supported_langs:\n-                languages[lang][\'selected\'] = True\n+                languages[lang]["selected"] = True\n             else:\n-                languages[lang][\'selected\'] = False\n+                languages[lang]["selected"] = False\n         return languages\n \n     def getDefaultLanguage(self):\n@@ -193,7 +180,9 @@ def setDefaultLanguage(self, langCode):\n         if langCode not in self.settings.available_languages:\n             # If its not in supported langs\n             if len(self.settings.available_languages) > 0:\n-                self.settings.default_language = self.settings.available_languages[0]  # noqa\n+                self.settings.default_language = self.settings.available_languages[\n+                    0\n+                ]  # noqa\n             return\n         self.settings.default_language = langCode\n \n@@ -201,22 +190,22 @@ def getNameForLanguageCode(self, langCode):\n         """Returns the name for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u\'name\', None)\n+            return info.get(u"name", None)\n         return None\n \n     def getFlagForLanguageCode(self, langCode):\n         """Returns the name of the flag for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u\'flag\', None)\n+            return info.get(u"flag", None)\n         return None\n \n     def addSupportedLanguage(self, langCode):\n         """Registers a language code as supported."""\n         alist = self.settings.available_languages[:]\n         if (\n-            langCode in list(self.getAvailableLanguages().keys()) and\n-            langCode not in alist\n+            langCode in list(self.getAvailableLanguages().keys())\n+            and langCode not in alist\n         ):\n             alist.append(langCode)\n             self.settings.available_languages = alist\n@@ -233,7 +222,7 @@ def setLanguageCookie(self, lang=None, request=None, noredir=None):\n         res = None\n         if lang and lang in self.getSupportedLanguages():\n             if lang != self.getLanguageCookie(request):\n-                request.RESPONSE.setCookie(\'I18N_LANGUAGE\', lang, path=\'/\')\n+                request.RESPONSE.setCookie("I18N_LANGUAGE", lang, path="/")\n             res = lang\n         return res\n \n@@ -241,7 +230,7 @@ def getLanguageCookie(self, request):\n         """Gets the preferred cookie language."""\n         if not request:\n             return None\n-        langCookie = request.cookies.get(\'I18N_LANGUAGE\')\n+        langCookie = request.cookies.get("I18N_LANGUAGE")\n         if langCookie in self.getSupportedLanguages():\n             return langCookie\n         return None\n@@ -253,7 +242,7 @@ def getPreferredLanguage(self, request=None):\n         lb = self.getLanguageBindings(request)\n         if lb[0]:\n             if not self.settings.use_combined_language_codes:\n-                return lb[0].split(\'-\')[0]\n+                return lb[0].split("-")[0]\n             else:\n                 return lb[0]\n             return lb[0]\n@@ -264,7 +253,7 @@ def getPathLanguage(self, request):\n         """Checks if a language is part of the current path."""\n         if not request:\n             return []\n-        items = request.get(\'TraversalRequestNameStack\')\n+        items = request.get("TraversalRequestNameStack")\n         # XXX Why this try/except?\n         try:\n             for item in items:\n@@ -287,14 +276,10 @@ def getContentLanguage(self, request):\n \n             # Now check if we need to exclude from using language specific path\n             # See https://dev.plone.org/ticket/11263\n-            if (\n-                bool(\n-                    [1 for p in self.exclude_paths if p in contentpath]\n-                ) or\n-                bool(\n-                    [1 for p in self.exclude_exts\n-                     if contentpath[0].endswith(p)]\n-                )\n+            if bool(\n+                [1 for p in self.exclude_paths if p in contentpath]\n+            ) or bool(\n+                [1 for p in self.exclude_exts if contentpath[0].endswith(p)]\n             ):\n                 return None\n \n@@ -302,7 +287,7 @@ def getContentLanguage(self, request):\n             traversed = []\n             while contentpath:\n                 name = contentpath.pop()\n-                if name[0] in \'@+\':\n+                if name[0] in "@+":\n                     break\n                 next = obj.unrestrictedTraverse(name, None)\n                 if next is None:\n@@ -357,8 +342,8 @@ def getRequestLanguages(self, request):\n             return None\n \n         # Get browser accept languages\n-        browser_pref_langs = request.get(\'HTTP_ACCEPT_LANGUAGE\', \'\')\n-        browser_pref_langs = browser_pref_langs.split(\',\')\n+        browser_pref_langs = request.get("HTTP_ACCEPT_LANGUAGE", "")\n+        browser_pref_langs = browser_pref_langs.split(",")\n \n         i = 0\n         langs = []\n@@ -370,16 +355,16 @@ def getRequestLanguages(self, request):\n         # If no quality string is given then the list order\n         # is used as quality indicator\n         for lang in browser_pref_langs:\n-            lang = lang.strip().lower().replace(\'_\', \'-\')\n+            lang = lang.strip().lower().replace("_", "-")\n             if lang:\n-                lb = lang.split(\';\', 2)\n+                lb = lang.split(";", 2)\n                 quality = []\n \n                 if len(lb) == 2:\n                     try:\n                         q = lb[1]\n-                        if q.startswith(\'q=\'):\n-                            q = q.split(\'=\', 2)[1]\n+                        if q.startswith("q="):\n+                            q = q.split("=", 2)[1]\n                             quality = float(q)\n                     except:\n                         pass\n@@ -388,15 +373,17 @@ def getRequestLanguages(self, request):\n                     quality = float(length - i)\n \n                 language = lb[0]\n-                if (self.use_combined_language_codes and\n-                        language in self.getSupportedLanguages()):\n+                if (\n+                    self.use_combined_language_codes\n+                    and language in self.getSupportedLanguages()\n+                ):\n                     # If allowed add the language\n                     langs.append((quality, language))\n                 else:\n                     # if we only use simply language codes, we should recognize\n                     # combined codes as their base code. So \'de-de\' is treated\n                     # as \'de\'.\n-                    baselanguage = language.split(\'-\')[0]\n+                    baselanguage = language.split("-")[0]\n                     if baselanguage in self.getSupportedLanguages():\n                         langs.append((quality, baselanguage))\n                 i = i + 1\n@@ -418,11 +405,11 @@ def getLanguageBindings(self, request):\n         if not request:\n             # Can\'t do anything\n             return (None, self.getDefaultLanguage(), [])\n-        binding = request.get(\'LANGUAGE_TOOL\', None)\n+        binding = request.get("LANGUAGE_TOOL", None)\n         if not isinstance(binding, LanguageBinding):\n             # Not bound -> bind\n             setLanguageBinding(request)\n-            binding = request.get(\'LANGUAGE_TOOL\')\n+            binding = request.get("LANGUAGE_TOOL")\n         return binding.getLanguageBindings()\n \n     def getAvailableCountries(self):\n@@ -443,28 +430,26 @@ def getNameForCountryCode(self, countryCode):\n \n     def isAnonymousUser(self):\n         user = getSecurityManager().getUser()\n-        return not user.has_role(\'Authenticated\')\n+        return not user.has_role("Authenticated")\n \n     def showSelector(self):\n         """Returns True if the selector viewlet should be shown."""\n-        return (\n-            self.settings.always_show_selector or\n-            (\n-                self.settings.use_cookie_negotiation and\n-                not (\n-                    self.settings.authenticated_users_only and\n-                    self.isAnonymousUser()\n-                )\n+        return self.settings.always_show_selector or (\n+            self.settings.use_cookie_negotiation\n+            and not (\n+                self.settings.authenticated_users_only\n+                and self.isAnonymousUser()\n             )\n         )\n \n \n class PrefsForPTS(object):\n     """A preference to hook into PTS."""\n+\n     def __init__(self, context):\n         self._env = context\n         self.languages = []\n-        binding = context.get(\'LANGUAGE_TOOL\')\n+        binding = context.get("LANGUAGE_TOOL")\n         if not isinstance(binding, LanguageBinding):\n             return None\n         self.pref = binding.getLanguageBindings()\n@@ -476,4 +461,4 @@ def getPreferredLanguages(self):\n         return self.languages\n \n \n-registerLangPrefsMethod({\'klass\': PrefsForPTS, \'priority\': 100})\n+registerLangPrefsMethod({"klass": PrefsForPTS, "priority": 100})\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..d3728ba\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,3 @@\n+[tool.black]\n+line-length = 79\n+skip-string-normalization = true\ndiff --git a/setup.cfg b/setup.cfg\nindex 1e99695..7154e98 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,12 +11,12 @@ ignore =\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 200\n+line_length = 79\n not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n+include_trailing_comma = True\n \n [zest.releaser]\n create-wheel = yes\n \n-# When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n'

