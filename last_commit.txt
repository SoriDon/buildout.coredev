Repository: plone.session


Branch: refs/heads/master
Date: 2023-01-29T16:56:47+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.session/commit/cdadbbcc13c5a81ce6d9d35eaf523aab02fc26bd

Configuring with plone/meta

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A .meta.toml
A lint-requirements.txt
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 0000000..a2139a8\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4929b1e\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "66442993"\n+\n+[codespell]\n+additional-ignores = "bund"\ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..129db4d\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+check-manifest==0.49\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pyupgrade==3.3.1\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..831004b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,27 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "bund"\ndiff --git a/setup.cfg b/setup.cfg\nindex d10743c..8849fbc 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,11 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n [flake8]\n-max-line-length = 88\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[isort]\n-profile = black\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8d47726\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,40 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = git ls-files "*.py"\n+text_files = git ls-files "*.rst" "*.md"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n+    sh -c \'{[testenv]py_files} | xargs isort\'\n+    sh -c \'{[testenv]py_files} | xargs black\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    tomli  # needed for codespell to read pyproject.toml\n+    check-manifest\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8\'\n+    sh -c \'{[testenv]py_files} | xargs codespell\'\n+    sh -c \'{[testenv]text_files} | xargs codespell\'\n+    check-manifest\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2023-01-29T16:56:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.session/commit/b1a27cbb8a52737bc12767bd70ca033bc25a056f

tox -e format (black/isort/pyupgrade)

Files changed:
M plone/session/__init__.py
M plone/session/hiddenprofiles.py
M plone/session/interfaces.py
M plone/session/plugins/__init__.py
M plone/session/plugins/session.py
M plone/session/testing.py
M plone/session/tests/testDocTests.py
M plone/session/tests/testPAS.py
M setup.py

b'diff --git a/plone/session/__init__.py b/plone/session/__init__.py\nindex cce9b97..5620c43 100644\n--- a/plone/session/__init__.py\n+++ b/plone/session/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import add_user_folders\n from plone.session.plugins import session\n from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin\ndiff --git a/plone/session/hiddenprofiles.py b/plone/session/hiddenprofiles.py\nindex e6908da..1068269 100644\n--- a/plone/session/hiddenprofiles.py\n+++ b/plone/session/hiddenprofiles.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFPlone.interfaces import INonInstallable\n from zope.interface import implementer\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):\n         """Prevents uninstall profile from showing up in the profile list\n         when creating a Plone site.\ndiff --git a/plone/session/interfaces.py b/plone/session/interfaces.py\nindex a4790f7..f2647b1 100644\n--- a/plone/session/interfaces.py\n+++ b/plone/session/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/session/plugins/__init__.py b/plone/session/plugins/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/session/plugins/__init__.py\n+++ b/plone/session/plugins/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex b9ff8c7..803087c 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.requestmethod import postonly\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from AccessControl.SecurityManagement import getSecurityManager\n@@ -39,7 +38,7 @@ def manage_addSessionPlugin(dispatcher, id, title=None, path="/", REQUEST=None):\n \n     if REQUEST is not None:\n         REQUEST.response.redirect(\n-            "{0}/manage_workspace?"\n+            "{}/manage_workspace?"\n             "manage_tabs_message=Session+plugin+created.".format(\n                 dispatcher.absolute_url()\n             )\n@@ -151,7 +150,7 @@ def __init__(self, id, title=None, path="/"):\n         self.path = path\n \n     def _getSecretKey(self, userid):\n-        return "{}{}".format(self.secret_prefix, userid)\n+        return f"{self.secret_prefix}{userid}"\n \n     def _getSigningSecret(self, userid):\n         if self._shared_secret is not None:\n@@ -352,7 +351,7 @@ def manage_togglePerUserKeyring(self, REQUEST):\n         action = "enabled" if self.per_user_keyring else "disabled"\n         response.redirect(\n             "%s/manage_secret?manage_tabs_message=%s"\n-            % (self.absolute_url(), "Per-user+keyrings+%s." % (action,))\n+            % (self.absolute_url(), f"Per-user+keyrings+{action}.")\n         )\n \n     @security.protected(ManageUsers)\ndiff --git a/plone/session/testing.py b/plone/session/testing.py\nindex 5fe7d6f..ee506a2 100644\n--- a/plone/session/testing.py\n+++ b/plone/session/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import access_contents_information\n from AccessControl.Permissions import view\n from OFS.Folder import Folder\ndiff --git a/plone/session/tests/testDocTests.py b/plone/session/tests/testDocTests.py\nindex 59aa6e9..5c6cf5b 100644\n--- a/plone/session/tests/testDocTests.py\n+++ b/plone/session/tests/testDocTests.py\n@@ -1,4 +1,3 @@\n-# coding=utf-8\n from plone.session import tktauth\n \n import doctest\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 7048f5f..196e8af 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.testing import logout\n from plone.session.interfaces import ISessionPlugin\n@@ -9,7 +8,7 @@\n import unittest\n \n \n-class MockResponse(object):\n+class MockResponse:\n     def setCookie(\n         self,\n         name,\ndiff --git a/setup.py b/setup.py\nindex 59e1530..8a6c8ab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.session


Branch: refs/heads/master
Date: 2023-01-29T16:56:48+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.session/commit/c95e4e478e64c91eae9f8d800eb00d8c9a9b19f1

chore: typos

Files changed:
M CHANGES.rst
M README.rst
M plone/session/tests/testPAS.py
M plone/session/tktauth.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 090e186..545020f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -106,7 +106,7 @@ New features:\n \n Bug fixes:\n \n-- Fixes #11: Pseudo CSS-file is not loaded anymore in merged lagacy bundle.\n+- Fixes #11: Pseudo CSS-file is not loaded anymore in merged legacy bundle.\n   Now optional JS based auto-refresh support is working again.\n   [jensens]\n \ndiff --git a/README.rst b/README.rst\nindex e50b5b8..1f51d21 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -64,7 +64,7 @@ Refresh interval (in seconds, -1 to disable refresh)\n     This controls the refresh CSS max-age (see below.)\n \n Use mod_auth_tkt compatible hashing algorithm\n-    Compatibility with other implemenations, but at the cost of using a weaker hashing algorithm.\n+    Compatibility with other implementations, but at the cost of using a weaker hashing algorithm.\n \n Cookie name\n     Which cookie to use. This must also be set on the ``credentials_cookie_auth`` plugin.\n@@ -214,7 +214,7 @@ Note for developers testing this under Windows XP\n \n - The IIS management console can be located at::\n \n-    Start -> Control Panel -> Adminstrative Tools -> Internet Information Services\n+    Start -> Control Panel -> Administrative Tools -> Internet Information Services\n \n - The pywin32 installer setup IIS sufficiently for me not to need to follow the *instructions on how to configure Python for IIS*.\n \ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 196e8af..97674f8 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -90,7 +90,7 @@ def testCookieLifetimeWithExpirationSet(self):\n \n     def testExtraction(self):\n         session = self.folder.pas.session\n-        # We will preapre a request that is equal in Py2 and Py3\n+        # We will prepare a request that is equal in Py2 and Py3\n         request_body = base64.encodebytes(b"test string").decode()\n         self.assertEqual(request_body, "dGVzdCBzdHJpbmc=\\n")\n         request = self.makeRequest(request_body)\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex 3565d3b..85b817f 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -4,9 +4,9 @@\n ========================================\n \n This module implements the session cookie format from mod_auth_tkt_. For\n-compatability with other implementations, pass ``mod_auth_tkt=True`` to the\n+compatibility with other implementations, pass ``mod_auth_tkt=True`` to the\n ``createTicket`` and ``validateTicket`` functions. This invokes the MD5_ based\n-double hashing scheme in the original mod_auth_tkt. If such compatability is\n+double hashing scheme in the original mod_auth_tkt. If such compatibility is\n not required, a more secure HMAC_ SHA-256_ cryptographic hash may be used\n (which is the default.)\n \n@@ -216,7 +216,7 @@ def createTicket(\n     # pack is used to convert timestamp from an unsigned integer to 4 bytes\n     # in network byte order.\n     # Unfortunately, some older versions of Python assume that longs are always\n-    # 32 bits, so we need to trucate the result in case we are on a 64-bit\n+    # 32 bits, so we need to truncate the result in case we are on a 64-bit\n     # naive system.\n     data1 = inet_aton(ip)[:4] + pack("!I", timestamp)\n     data2 = b"\\0".join((userid, token_list, user_data))\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2023-01-29T20:33:51+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.session/commit/2ede12e16c38ef6cb8058fa1d445539838f46cc0

Merge pull request #34 from plone/config-with-default-template

Config with default template

Files changed:
A .editorconfig
A .github/workflows/linting.yml
A .meta.toml
A lint-requirements.txt
A tox.ini
M CHANGES.rst
M README.rst
M plone/session/__init__.py
M plone/session/hiddenprofiles.py
M plone/session/interfaces.py
M plone/session/plugins/__init__.py
M plone/session/plugins/session.py
M plone/session/testing.py
M plone/session/tests/testDocTests.py
M plone/session/tests/testPAS.py
M plone/session/tktauth.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/linting.yml b/.github/workflows/linting.yml\nnew file mode 100644\nindex 0000000..a2139a8\n--- /dev/null\n+++ b/.github/workflows/linting.yml\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+name: Linting\n+on:\n+  push:\n+    branches: [master]\n+  pull_request:\n+    branches: [master]\n+  workflow_dispatch:\n+\n+jobs:\n+  test:\n+    name: Lint code\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      matrix:\n+        python-version: ["3.8"]\n+        os: ["ubuntu-22.04"]\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Set up Python\n+        uses: actions/setup-python@v4\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v3\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles(\'lint-requirements.txt\', \'tox.ini\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-${{ matrix.python-version }}-\n+            ${{ runner.os }}-pip-\n+      - name: Install dependencies\n+        run: python -m pip install tox\n+      - name: Run formatters\n+        run: tox -e format\n+      # linters\n+      - name: QA\n+        run: tox -e lint\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..4929b1e\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "66442993"\n+\n+[codespell]\n+additional-ignores = "bund"\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 090e186..545020f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -106,7 +106,7 @@ New features:\n \n Bug fixes:\n \n-- Fixes #11: Pseudo CSS-file is not loaded anymore in merged lagacy bundle.\n+- Fixes #11: Pseudo CSS-file is not loaded anymore in merged legacy bundle.\n   Now optional JS based auto-refresh support is working again.\n   [jensens]\n \ndiff --git a/README.rst b/README.rst\nindex e50b5b8..1f51d21 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -64,7 +64,7 @@ Refresh interval (in seconds, -1 to disable refresh)\n     This controls the refresh CSS max-age (see below.)\n \n Use mod_auth_tkt compatible hashing algorithm\n-    Compatibility with other implemenations, but at the cost of using a weaker hashing algorithm.\n+    Compatibility with other implementations, but at the cost of using a weaker hashing algorithm.\n \n Cookie name\n     Which cookie to use. This must also be set on the ``credentials_cookie_auth`` plugin.\n@@ -214,7 +214,7 @@ Note for developers testing this under Windows XP\n \n - The IIS management console can be located at::\n \n-    Start -> Control Panel -> Adminstrative Tools -> Internet Information Services\n+    Start -> Control Panel -> Administrative Tools -> Internet Information Services\n \n - The pywin32 installer setup IIS sufficiently for me not to need to follow the *instructions on how to configure Python for IIS*.\n \ndiff --git a/lint-requirements.txt b/lint-requirements.txt\nnew file mode 100644\nindex 0000000..129db4d\n--- /dev/null\n+++ b/lint-requirements.txt\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+black==22.12.0\n+check-manifest==0.49\n+codespell==2.2.2\n+flake8==6.0.0\n+isort==5.11.4\n+pyupgrade==3.3.1\ndiff --git a/plone/session/__init__.py b/plone/session/__init__.py\nindex cce9b97..5620c43 100644\n--- a/plone/session/__init__.py\n+++ b/plone/session/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import add_user_folders\n from plone.session.plugins import session\n from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin\ndiff --git a/plone/session/hiddenprofiles.py b/plone/session/hiddenprofiles.py\nindex e6908da..1068269 100644\n--- a/plone/session/hiddenprofiles.py\n+++ b/plone/session/hiddenprofiles.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFPlone.interfaces import INonInstallable\n from zope.interface import implementer\n \n \n @implementer(INonInstallable)\n-class HiddenProfiles(object):\n+class HiddenProfiles:\n     def getNonInstallableProfiles(self):\n         """Prevents uninstall profile from showing up in the profile list\n         when creating a Plone site.\ndiff --git a/plone/session/interfaces.py b/plone/session/interfaces.py\nindex a4790f7..f2647b1 100644\n--- a/plone/session/interfaces.py\n+++ b/plone/session/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/session/plugins/__init__.py b/plone/session/plugins/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/session/plugins/__init__.py\n+++ b/plone/session/plugins/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex b9ff8c7..803087c 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.requestmethod import postonly\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from AccessControl.SecurityManagement import getSecurityManager\n@@ -39,7 +38,7 @@ def manage_addSessionPlugin(dispatcher, id, title=None, path="/", REQUEST=None):\n \n     if REQUEST is not None:\n         REQUEST.response.redirect(\n-            "{0}/manage_workspace?"\n+            "{}/manage_workspace?"\n             "manage_tabs_message=Session+plugin+created.".format(\n                 dispatcher.absolute_url()\n             )\n@@ -151,7 +150,7 @@ def __init__(self, id, title=None, path="/"):\n         self.path = path\n \n     def _getSecretKey(self, userid):\n-        return "{}{}".format(self.secret_prefix, userid)\n+        return f"{self.secret_prefix}{userid}"\n \n     def _getSigningSecret(self, userid):\n         if self._shared_secret is not None:\n@@ -352,7 +351,7 @@ def manage_togglePerUserKeyring(self, REQUEST):\n         action = "enabled" if self.per_user_keyring else "disabled"\n         response.redirect(\n             "%s/manage_secret?manage_tabs_message=%s"\n-            % (self.absolute_url(), "Per-user+keyrings+%s." % (action,))\n+            % (self.absolute_url(), f"Per-user+keyrings+{action}.")\n         )\n \n     @security.protected(ManageUsers)\ndiff --git a/plone/session/testing.py b/plone/session/testing.py\nindex 5fe7d6f..ee506a2 100644\n--- a/plone/session/testing.py\n+++ b/plone/session/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.Permissions import access_contents_information\n from AccessControl.Permissions import view\n from OFS.Folder import Folder\ndiff --git a/plone/session/tests/testDocTests.py b/plone/session/tests/testDocTests.py\nindex 59aa6e9..5c6cf5b 100644\n--- a/plone/session/tests/testDocTests.py\n+++ b/plone/session/tests/testDocTests.py\n@@ -1,4 +1,3 @@\n-# coding=utf-8\n from plone.session import tktauth\n \n import doctest\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 7048f5f..97674f8 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.testing import logout\n from plone.session.interfaces import ISessionPlugin\n@@ -9,7 +8,7 @@\n import unittest\n \n \n-class MockResponse(object):\n+class MockResponse:\n     def setCookie(\n         self,\n         name,\n@@ -91,7 +90,7 @@ def testCookieLifetimeWithExpirationSet(self):\n \n     def testExtraction(self):\n         session = self.folder.pas.session\n-        # We will preapre a request that is equal in Py2 and Py3\n+        # We will prepare a request that is equal in Py2 and Py3\n         request_body = base64.encodebytes(b"test string").decode()\n         self.assertEqual(request_body, "dGVzdCBzdHJpbmc=\\n")\n         request = self.makeRequest(request_body)\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex 3565d3b..85b817f 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -4,9 +4,9 @@\n ========================================\n \n This module implements the session cookie format from mod_auth_tkt_. For\n-compatability with other implementations, pass ``mod_auth_tkt=True`` to the\n+compatibility with other implementations, pass ``mod_auth_tkt=True`` to the\n ``createTicket`` and ``validateTicket`` functions. This invokes the MD5_ based\n-double hashing scheme in the original mod_auth_tkt. If such compatability is\n+double hashing scheme in the original mod_auth_tkt. If such compatibility is\n not required, a more secure HMAC_ SHA-256_ cryptographic hash may be used\n (which is the default.)\n \n@@ -216,7 +216,7 @@ def createTicket(\n     # pack is used to convert timestamp from an unsigned integer to 4 bytes\n     # in network byte order.\n     # Unfortunately, some older versions of Python assume that longs are always\n-    # 32 bits, so we need to trucate the result in case we are on a 64-bit\n+    # 32 bits, so we need to truncate the result in case we are on a 64-bit\n     # naive system.\n     data1 = inet_aton(ip)[:4] + pack("!I", timestamp)\n     data2 = b"\\0".join((userid, token_list, user_data))\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..831004b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,27 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "bund"\ndiff --git a/setup.cfg b/setup.cfg\nindex d10743c..8849fbc 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,11 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n [flake8]\n-max-line-length = 88\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[isort]\n-profile = black\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/setup.py b/setup.py\nindex 59e1530..8a6c8ab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..8d47726\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,40 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+py_files = git ls-files "*.py"\n+text_files = git ls-files "*.rst" "*.md"\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat python code\n+skip_install = true\n+deps =\n+    pyupgrade\n+    isort\n+    black\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs pyupgrade --py38-plus\'\n+    sh -c \'{[testenv]py_files} | xargs isort\'\n+    sh -c \'{[testenv]py_files} | xargs black\'\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    flake8\n+    codespell\n+    tomli  # needed for codespell to read pyproject.toml\n+    check-manifest\n+    -c lint-requirements.txt\n+commands =\n+    sh -c \'{[testenv]py_files} | xargs flake8\'\n+    sh -c \'{[testenv]py_files} | xargs codespell\'\n+    sh -c \'{[testenv]text_files} | xargs codespell\'\n+    check-manifest\n'

